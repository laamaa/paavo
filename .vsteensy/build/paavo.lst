
.vsteensy/build/paavo.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	................
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`.#......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #476]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #476]	; (60001218 <ResetHandler+0x1e4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #476]	; (6000121c <ResetHandler+0x1e8>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #476]	; (60001220 <ResetHandler+0x1ec>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #472]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	ldr	r1, [pc, #472]	; (60001228 <ResetHandler+0x1f4>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	ldr	r3, [pc, #464]	; (6000122c <ResetHandler+0x1f8>)
6000105c:	cmp	r2, r3
6000105e:	bcs.n	6000107a <ResetHandler+0x46>
60001060:	mvns	r4, r2
60001062:	mov	r0, r1
60001064:	add	r3, r4
60001066:	bic.w	r3, r3, #3
6000106a:	adds	r3, #4
6000106c:	add	r3, r1
		*dest++ = *src++;
6000106e:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	cmp	r0, r3
		*dest++ = *src++;
60001074:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	ldr	r2, [pc, #436]	; (60001230 <ResetHandler+0x1fc>)
6000107c:	ldr	r1, [pc, #436]	; (60001234 <ResetHandler+0x200>)
6000107e:	cmp	r2, r1
60001080:	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	ldr	r3, [pc, #436]	; (60001238 <ResetHandler+0x204>)
60001084:	cmp	r2, r3
60001086:	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	mvns	r4, r2
6000108a:	mov	r0, r1
6000108c:	add	r3, r4
6000108e:	bic.w	r3, r3, #3
60001092:	adds	r3, #4
60001094:	add	r3, r1
		*dest++ = *src++;
60001096:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	cmp	r0, r3
		*dest++ = *src++;
6000109c:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	ldr	r2, [pc, #408]	; (6000123c <ResetHandler+0x208>)
600010a4:	ldr	r3, [pc, #408]	; (60001240 <ResetHandler+0x20c>)
600010a6:	cmp	r2, r3
600010a8:	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	mvns	r0, r2
600010ac:	mov	r1, r2
		*dest++ = 0;
600010ae:	movs	r4, #0
600010b0:	add	r3, r0
600010b2:	bic.w	r3, r3, #3
600010b6:	adds	r3, #4
600010b8:	add	r3, r2
600010ba:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	cmp	r3, r1
600010c0:	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	ldr	r2, [pc, #384]	; (60001244 <ResetHandler+0x210>)
600010c4:	mov.w	r1, #15728640	; 0xf00000
600010c8:	ldr	r3, [pc, #380]	; (60001248 <ResetHandler+0x214>)
600010ca:	str	r1, [r2, #0]
600010cc:	add.w	r1, r3, #704	; 0x2c0
600010d0:	ldr	r2, [pc, #376]	; (6000124c <ResetHandler+0x218>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	str.w	r2, [r3, #4]!
600010d6:	cmp	r1, r3
600010d8:	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	ldr	r3, [pc, #372]	; (60001250 <ResetHandler+0x21c>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	movs	r1, #128	; 0x80
600010de:	ldr	r2, [pc, #372]	; (60001254 <ResetHandler+0x220>)
600010e0:	strb.w	r1, [r3], #1
600010e4:	cmp	r3, r2
600010e6:	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	ldr	r4, [pc, #364]	; (60001258 <ResetHandler+0x224>)
600010ea:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	ldr	r6, [pc, #364]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	ldr.w	sl, [pc, #420]	; 6000129c <ResetHandler+0x268>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	ldr.w	r9, [pc, #420]	; 600012a0 <ResetHandler+0x26c>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	ldr.w	r8, [pc, #420]	; 600012a4 <ResetHandler+0x270>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	ldr	r3, [pc, #348]	; (60001260 <ResetHandler+0x22c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	ldr	r1, [pc, #268]	; (60001214 <ResetHandler+0x1e0>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	ldr	r3, [r6, #28]
6000111c:	bic.w	r3, r3, #127	; 0x7f
60001120:	orr.w	r3, r3, #64	; 0x40
60001124:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	ldr	r3, [r6, #36]	; 0x24
60001128:	bic.w	r3, r3, #127	; 0x7f
6000112c:	orr.w	r3, r3, #64	; 0x40
60001130:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	bl	60001ac0 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	ldr	r2, [pc, #292]	; (60001264 <ResetHandler+0x230>)
60001140:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	ldr	r3, [pc, #292]	; (60001268 <ResetHandler+0x234>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	ldr	r1, [pc, #292]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r1, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	ldr	r2, [pc, #284]	; (60001274 <ResetHandler+0x240>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	ldr	r0, [pc, #284]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	ldr	r2, [pc, #280]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	ldr	r0, [pc, #276]	; (60001280 <ResetHandler+0x24c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	ldr	r1, [pc, #272]	; (60001284 <ResetHandler+0x250>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	orr.w	r3, r3, #1
60001176:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	ldr	r3, [r0, #0]
6000117a:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	bl	60001f34 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	ldr	r0, [pc, #256]	; (60001288 <ResetHandler+0x254>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	bl	60002420 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	nop
60001198:	nop
6000119a:	nop
6000119c:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	ldr	r2, [pc, #232]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	ldr	r3, [pc, #232]	; (60001290 <ResetHandler+0x25c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	ldr	r2, [r3, #56]	; 0x38
600011be:	lsls	r2, r2, #31
600011c0:	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	ldr	r1, [pc, #204]	; (60001294 <ResetHandler+0x260>)
600011c8:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	ldr	r2, [r3, #56]	; 0x38
600011ce:	orr.w	r2, r2, #1
600011d2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	ldr	r2, [pc, #184]	; (60001290 <ResetHandler+0x25c>)
600011d6:	ldr	r4, [pc, #192]	; (60001298 <ResetHandler+0x264>)
600011d8:	ldr	r3, [r2, #8]
600011da:	orr.w	r3, r3, #65537	; 0x10001
600011de:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
600011e0:	bl	60001bb8 <configure_external_ram>
#endif
	startup_early_hook();
600011e4:	bl	60002448 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e8:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011ea:	cmp	r3, #19
600011ec:	bls.n	600011e8 <ResetHandler+0x1b4>
	usb_init();
600011ee:	bl	600019d4 <usb_init>
	analog_init();
600011f2:	bl	60002124 <analog_init>
	pwm_init();
600011f6:	bl	60002468 <__pwm_init_veneer>
	tempmon_init();
600011fa:	bl	60001f98 <tempmon_init>

	startup_late_hook();
600011fe:	bl	600023d8 <__startup_late_hook_veneer>
60001202:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001204:	cmp.w	r3, #300	; 0x12c
60001208:	bcc.n	60001202 <ResetHandler+0x1ce>
	//printf("before C++ constructors\n");
	__libc_init_array();
6000120a:	bl	60002438 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120e:	bl	60002430 <__main_veneer>
60001212:	b.n	60001212 <ResetHandler+0x1de>
60001214:	.word	0x400ac000
60001218:	.word	0xaaaaaaaf
6000121c:	.word	0x00200007
60001220:	.word	0x20070000
60001224:	.word	0x00000000
60001228:	.word	0x600024e0
6000122c:	.word	0x0000e468
60001230:	.word	0x20000000
60001234:	.word	0x6001094c
60001238:	.word	0x20001a40
6000123c:	.word	0x20001a40
60001240:	.word	0x20004700
60001244:	.word	0xe000ed88
60001248:	.word	0x200043fc
6000124c:	.word	0x00009325
60001250:	.word	0xe000e400
60001254:	.word	0xe000e4a0
60001258:	.word	0x400d8000
6000125c:	.word	0x400fc000
60001260:	.word	0xe000ed08
60001264:	.word	0xe000e014
60001268:	.word	0xe000e018
6000126c:	.word	0x00009a91
60001270:	.word	0xe000edfc
60001274:	.word	0x20200000
60001278:	.word	0x00009a95
6000127c:	.word	0xe0001000
60001280:	.word	0xe0001004
60001284:	.word	0x20002480
60001288:	.word	0x23c34600
6000128c:	.word	0x40084000
60001290:	.word	0x400d4000
60001294:	.word	0x56c00000
60001298:	.word	0x20002488
6000129c:	.word	0x20004400
600012a0:	.word	0x2018101b
600012a4:	.word	0x13110d0c

600012a8 <set_audioClock(int, long, unsigned long, bool)>:
#if defined(__IMXRT1052__) || defined(__IMXRT1062__)
#include "imxrt_hw.h"

FLASHMEM
void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv, bool force) // sets PLL4
{
600012a8:	push	{r4}
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;
600012aa:	cbnz	r3, 600012b4 <set_audioClock(int, long, unsigned long, bool)+0xc>
600012ac:	ldr	r3, [pc, #76]	; (600012fc <set_audioClock(int, long, unsigned long, bool)+0x54>)
600012ae:	ldr	r3, [r3, #112]	; 0x70
600012b0:	lsls	r3, r3, #18
600012b2:	bmi.n	600012f6 <set_audioClock(int, long, unsigned long, bool)+0x4e>

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600012b4:	and.w	r0, r0, #63	; 0x3f
600012b8:	ldr	r3, [pc, #64]	; (600012fc <set_audioClock(int, long, unsigned long, bool)+0x54>)

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600012ba:	bic.w	r2, r2, #3758096384	; 0xe0000000

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600012be:	bic.w	r1, r1, #3758096384	; 0xe0000000
{
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600012c2:	orr.w	r0, r0, #1122304	; 0x112000

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
	while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600012c6:	mov	r4, r3
{
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600012c8:	str	r0, [r3, #112]	; 0x70

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600012ca:	str.w	r1, [r3, #128]	; 0x80
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600012ce:	str.w	r2, [r3, #144]	; 0x90
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
600012d2:	ldr	r2, [r3, #112]	; 0x70
600012d4:	bic.w	r2, r2, #4096	; 0x1000
600012d8:	str	r2, [r3, #112]	; 0x70
	while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600012da:	ldr	r3, [r4, #112]	; 0x70
600012dc:	ldr	r2, [pc, #28]	; (600012fc <set_audioClock(int, long, unsigned long, bool)+0x54>)
600012de:	cmp	r3, #0
600012e0:	bge.n	600012da <set_audioClock(int, long, unsigned long, bool)+0x32>
	
	const int div_post_pll = 1; // other values: 2,4
	CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
600012e2:	ldr.w	r1, [r2, #368]	; 0x170
600012e6:	ldr	r3, [pc, #24]	; (60001300 <set_audioClock(int, long, unsigned long, bool)+0x58>)
600012e8:	ands	r3, r1
600012ea:	str.w	r3, [r2, #368]	; 0x170
	if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
	if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
600012ee:	ldr	r3, [r2, #112]	; 0x70
600012f0:	bic.w	r3, r3, #65536	; 0x10000
600012f4:	str	r3, [r2, #112]	; 0x70
}
600012f6:	ldr.w	r4, [sp], #4
600012fa:	bx	lr
600012fc:	.word	0x400d8000
60001300:	.word	0xff7f7fff

60001304 <ILI9341_t3n::begin(unsigned long, unsigned long)>:
                                        0xb1,
                                        0x00,
                                        0x10, // FrameRate Control 119Hz
                                        0};

FLASHMEM void ILI9341_t3n::begin(uint32_t spi_clock, uint32_t spi_clock_read) {
60001304:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60001308:	mov	r4, r0
6000130a:	sub	sp, #36	; 0x24

  // Serial.printf("_t3n::begin mosi:%d miso:%d SCLK:%d CS:%d DC:%d SPI clocks:
  // %lu %lu\n", _mosi, _miso, _sclk, _cs, _dc, _SPI_CLOCK, _SPI_CLOCK_READ);
  // Serial.flush();

  if (SPI.pinIsMOSI(_mosi) && ((_miso == 0xff) || SPI.pinIsMISO(_miso)) &&
6000130c:	ldr	r0, [pc, #752]	; (60001600 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x2fc>)
                                        0};

FLASHMEM void ILI9341_t3n::begin(uint32_t spi_clock, uint32_t spi_clock_read) {
  // verify SPI pins are valid;
  // allow user to say use current ones...
  _SPI_CLOCK = spi_clock;           // #define ILI9341_SPICLOCK 30000000
6000130e:	str	r1, [r4, #20]
  _SPI_CLOCK_READ = spi_clock_read; //#define ILI9341_SPICLOCK_READ 2000000
60001310:	str	r2, [r4, #24]

  // Serial.printf("_t3n::begin mosi:%d miso:%d SCLK:%d CS:%d DC:%d SPI clocks:
  // %lu %lu\n", _mosi, _miso, _sclk, _cs, _dc, _SPI_CLOCK, _SPI_CLOCK_READ);
  // Serial.flush();

  if (SPI.pinIsMOSI(_mosi) && ((_miso == 0xff) || SPI.pinIsMISO(_miso)) &&
60001312:	ldrb.w	r1, [r4, #144]	; 0x90
60001316:	bl	60002408 <___ZN8SPIClass9pinIsMOSIEh_veneer>
6000131a:	cmp	r0, #0
6000131c:	beq.w	60001556 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x252>
60001320:	ldrb.w	r1, [r4, #143]	; 0x8f
60001324:	cmp	r1, #255	; 0xff
60001326:	beq.n	60001334 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x30>
60001328:	ldr	r0, [pc, #724]	; (60001600 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x2fc>)
6000132a:	bl	60002410 <___ZN8SPIClass9pinIsMISOEh_veneer>
6000132e:	cmp	r0, #0
60001330:	beq.w	60001556 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x252>
      SPI.pinIsSCK(_sclk)) {
60001334:	ldr	r5, [pc, #712]	; (60001600 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x2fc>)
60001336:	ldrb.w	r1, [r4, #145]	; 0x91
6000133a:	mov	r0, r5
6000133c:	bl	60002400 <___ZN8SPIClass8pinIsSCKEh_veneer>

  // Serial.printf("_t3n::begin mosi:%d miso:%d SCLK:%d CS:%d DC:%d SPI clocks:
  // %lu %lu\n", _mosi, _miso, _sclk, _cs, _dc, _SPI_CLOCK, _SPI_CLOCK_READ);
  // Serial.flush();

  if (SPI.pinIsMOSI(_mosi) && ((_miso == 0xff) || SPI.pinIsMISO(_miso)) &&
60001340:	cmp	r0, #0
60001342:	beq.w	60001556 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x252>
      SPI.pinIsSCK(_sclk)) {
    _pspi = &SPI;
    _spi_num = 0; // Which buss is this spi on?
60001346:	movs	r2, #0
#ifdef KINETISK
    _pkinetisk_spi = &KINETISK_SPI0; // Could hack our way to grab this from SPI
                                     // object, but...
    _fifo_full_test = (3 << 12);
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    _pimxrt_spi = &IMXRT_LPSPI4_S; // Could hack our way to grab this from SPI
60001348:	ldr	r3, [pc, #696]	; (60001604 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x300>)
6000134a:	mov	r0, r5
  // %lu %lu\n", _mosi, _miso, _sclk, _cs, _dc, _SPI_CLOCK, _SPI_CLOCK_READ);
  // Serial.flush();

  if (SPI.pinIsMOSI(_mosi) && ((_miso == 0xff) || SPI.pinIsMISO(_miso)) &&
      SPI.pinIsSCK(_sclk)) {
    _pspi = &SPI;
6000134c:	str	r5, [r4, #8]
    _spi_num = 0; // Which buss is this spi on?
6000134e:	strb	r2, [r4, #16]
#ifdef KINETISK
    _pkinetisk_spi = &KINETISK_SPI0; // Could hack our way to grab this from SPI
                                     // object, but...
    _fifo_full_test = (3 << 12);
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    _pimxrt_spi = &IMXRT_LPSPI4_S; // Could hack our way to grab this from SPI
60001350:	str	r3, [r4, #28]
                  _sclk, _cs, _dc);
    Serial.flush();
    return; // most likely will go bomb
  }
  // Make sure we have all of the proper SPI pins selected.
  _pspi->setMOSI(_mosi);
60001352:	ldrb.w	r1, [r4, #144]	; 0x90
60001356:	bl	600023c0 <___ZN8SPIClass7setMOSIEh_veneer>
  _pspi->setSCK(_sclk);
6000135a:	ldrb.w	r1, [r4, #145]	; 0x91
6000135e:	ldr	r0, [r4, #8]
60001360:	bl	60002440 <___ZN8SPIClass6setSCKEh_veneer>
  if (_miso != 0xff)
60001364:	ldrb.w	r1, [r4, #143]	; 0x8f
60001368:	cmp	r1, #255	; 0xff
6000136a:	beq.n	60001372 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x6e>
    _pspi->setMISO(_miso);
6000136c:	ldr	r0, [r4, #8]
6000136e:	bl	600023e8 <___ZN8SPIClass7setMISOEh_veneer>

  // Hack to get hold of the SPI Hardware information...
  uint32_t *pa = (uint32_t *)((void *)_pspi);
60001372:	ldr	r0, [r4, #8]
      return;
    }
  }
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
  // Serial.println("   T4 setup CS/DC"); Serial.flush();
  pending_rx_count = 0; // Make sure it is zero if we we do a second begin...
60001374:	movs	r6, #0
  _csport = portOutputRegister(_cs);
60001376:	ldr	r5, [pc, #656]	; (60001608 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x304>)
  if (_miso != 0xff)
    _pspi->setMISO(_miso);

  // Hack to get hold of the SPI Hardware information...
  uint32_t *pa = (uint32_t *)((void *)_pspi);
  _spi_hardware = (SPIClass::SPI_Hardware_t *)(void *)pa[1];
60001378:	ldr	r3, [r0, #4]
6000137a:	str	r3, [r4, #12]

  _pspi->begin();
6000137c:	bl	600023b0 <___ZN8SPIClass5beginEv_veneer>
    }
  }
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
  // Serial.println("   T4 setup CS/DC"); Serial.flush();
  pending_rx_count = 0; // Make sure it is zero if we we do a second begin...
  _csport = portOutputRegister(_cs);
60001380:	ldrb.w	r0, [r4, #139]	; 0x8b
      return;
    }
  }
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
  // Serial.println("   T4 setup CS/DC"); Serial.flush();
  pending_rx_count = 0; // Make sure it is zero if we we do a second begin...
60001384:	strb.w	r6, [r4, #146]	; 0x92
  _csport = portOutputRegister(_cs);
  _cspinmask = digitalPinToBitMask(_cs);
  pinMode(_cs, OUTPUT);
60001388:	movs	r1, #1
    }
  }
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
  // Serial.println("   T4 setup CS/DC"); Serial.flush();
  pending_rx_count = 0; // Make sure it is zero if we we do a second begin...
  _csport = portOutputRegister(_cs);
6000138a:	lsls	r3, r0, #4
6000138c:	adds	r7, r5, r3
6000138e:	ldr	r2, [r5, r3]
  _cspinmask = digitalPinToBitMask(_cs);
60001390:	ldr	r3, [r7, #12]
    }
  }
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
  // Serial.println("   T4 setup CS/DC"); Serial.flush();
  pending_rx_count = 0; // Make sure it is zero if we we do a second begin...
  _csport = portOutputRegister(_cs);
60001392:	str.w	r2, [r4, #152]	; 0x98
  _cspinmask = digitalPinToBitMask(_cs);
60001396:	str.w	r3, [r4, #148]	; 0x94
  pinMode(_cs, OUTPUT);
6000139a:	bl	600023b8 <__pinMode_veneer>
  DIRECT_WRITE_HIGH(_csport, _cspinmask);
6000139e:	ldr.w	r1, [r4, #148]	; 0x94
  _spi_tcr_current = _pimxrt_spi->TCR; // get the current TCR value
600013a2:	ldr	r3, [r4, #28]
  // Serial.println("   T4 setup CS/DC"); Serial.flush();
  pending_rx_count = 0; // Make sure it is zero if we we do a second begin...
  _csport = portOutputRegister(_cs);
  _cspinmask = digitalPinToBitMask(_cs);
  pinMode(_cs, OUTPUT);
  DIRECT_WRITE_HIGH(_csport, _cspinmask);
600013a4:	ldr.w	r2, [r4, #152]	; 0x98
  _spi_tcr_current = _pimxrt_spi->TCR; // get the current TCR value

  // TODO:  Need to setup DC to actually work.
  if (_pspi->pinIsChipSelect(_dc)) {
600013a8:	ldr	r0, [r4, #8]
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
600013aa:	str.w	r1, [r2, #132]	; 0x84
  pending_rx_count = 0; // Make sure it is zero if we we do a second begin...
  _csport = portOutputRegister(_cs);
  _cspinmask = digitalPinToBitMask(_cs);
  pinMode(_cs, OUTPUT);
  DIRECT_WRITE_HIGH(_csport, _cspinmask);
  _spi_tcr_current = _pimxrt_spi->TCR; // get the current TCR value
600013ae:	ldr	r3, [r3, #96]	; 0x60

  // TODO:  Need to setup DC to actually work.
  if (_pspi->pinIsChipSelect(_dc)) {
600013b0:	ldrb.w	r1, [r4, #140]	; 0x8c
  pending_rx_count = 0; // Make sure it is zero if we we do a second begin...
  _csport = portOutputRegister(_cs);
  _cspinmask = digitalPinToBitMask(_cs);
  pinMode(_cs, OUTPUT);
  DIRECT_WRITE_HIGH(_csport, _cspinmask);
  _spi_tcr_current = _pimxrt_spi->TCR; // get the current TCR value
600013b4:	str.w	r3, [r4, #156]	; 0x9c

  // TODO:  Need to setup DC to actually work.
  if (_pspi->pinIsChipSelect(_dc)) {
600013b8:	bl	600023a8 <___ZN8SPIClass15pinIsChipSelectEh_veneer>
600013bc:	mov	r7, r0
600013be:	cmp	r0, #0
600013c0:	beq.w	60001962 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x65e>
    uint8_t dc_cs_index = _pspi->setCS(_dc);
600013c4:	ldrb.w	r1, [r4, #140]	; 0x8c
600013c8:	ldr	r0, [r4, #8]
600013ca:	bl	600023c8 <___ZN8SPIClass5setCSEh_veneer>
    // Serial.printf("    T4 hardware DC: %x\n", dc_cs_index);
    _dcport = 0;
    _dcpinmask = 0;
    // will depend on which PCS but first get this to work...
    dc_cs_index--; // convert to 0 based
    _tcr_dc_assert = LPSPI_TCR_PCS(dc_cs_index);
600013ce:	subs	r0, #1
    _tcr_dc_not_assert = LPSPI_TCR_PCS(3);
600013d0:	mov.w	r1, #50331648	; 0x3000000
600013d4:	ldr	r3, [pc, #564]	; (6000160c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x308>)
    // Serial.printf("    T4 hardware DC: %x\n", dc_cs_index);
    _dcport = 0;
    _dcpinmask = 0;
    // will depend on which PCS but first get this to work...
    dc_cs_index--; // convert to 0 based
    _tcr_dc_assert = LPSPI_TCR_PCS(dc_cs_index);
600013d6:	lsls	r2, r0, #24

  // TODO:  Need to setup DC to actually work.
  if (_pspi->pinIsChipSelect(_dc)) {
    uint8_t dc_cs_index = _pspi->setCS(_dc);
    // Serial.printf("    T4 hardware DC: %x\n", dc_cs_index);
    _dcport = 0;
600013d8:	str.w	r6, [r4, #172]	; 0xac
    _dcpinmask = 0;
600013dc:	str.w	r6, [r4, #160]	; 0xa0
    // will depend on which PCS but first get this to work...
    dc_cs_index--; // convert to 0 based
    _tcr_dc_assert = LPSPI_TCR_PCS(dc_cs_index);
600013e0:	ands	r2, r1
    _tcr_dc_not_assert = LPSPI_TCR_PCS(3);
600013e2:	str.w	r1, [r4, #168]	; 0xa8
    // Serial.printf("    T4 hardware DC: %x\n", dc_cs_index);
    _dcport = 0;
    _dcpinmask = 0;
    // will depend on which PCS but first get this to work...
    dc_cs_index--; // convert to 0 based
    _tcr_dc_assert = LPSPI_TCR_PCS(dc_cs_index);
600013e6:	str.w	r2, [r4, #164]	; 0xa4
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
600013ea:	ldr.w	r0, [r4, #156]	; 0x9c
600013ee:	ldr	r2, [pc, #544]	; (60001610 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x30c>)
600013f0:	ands	r2, r0
600013f2:	cmp	r3, r2
600013f4:	beq.n	60001452 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x14e>
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
600013f6:	ldr	r2, [pc, #540]	; (60001614 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x310>)
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
600013f8:	eor.w	r5, r3, r0
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
600013fc:	ands	r2, r0
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
600013fe:	tst.w	r5, #50331648	; 0x3000000
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
60001402:	orr.w	r2, r2, r3
60001406:	str.w	r2, [r4, #156]	; 0x9c
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
6000140a:	beq.w	60001956 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x652>
6000140e:	ldr.w	r5, [r4, #160]	; 0xa0
60001412:	cmp	r5, #0
60001414:	beq.w	60001956 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x652>
60001418:	ldrb.w	r3, [r4, #146]	; 0x92
6000141c:	ldr	r2, [r4, #28]
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
6000141e:	cbz	r3, 60001434 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x130>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
60001420:	ldr	r0, [r2, #112]	; 0x70
60001422:	lsls	r7, r0, #30
60001424:	bmi.n	6000141e <ILI9341_t3n::begin(unsigned long, unsigned long)+0x11a>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
60001426:	subs	r3, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
60001428:	ldr	r0, [r2, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
6000142a:	uxtb	r3, r3
6000142c:	strb.w	r3, [r4, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
60001430:	cmp	r3, #0
60001432:	bne.n	60001420 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x11c>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
60001434:	movw	r3, #513	; 0x201
60001438:	str	r3, [r2, #16]
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
6000143a:	ldr.w	r3, [r4, #172]	; 0xac
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
6000143e:	cmp	r1, #0
60001440:	beq.w	600019b6 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x6b2>
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
60001444:	str.w	r5, [r3, #132]	; 0x84
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
        else
          DIRECT_WRITE_LOW(_dcport, _dcpinmask);
        _pimxrt_spi->TCR = _spi_tcr_current &
60001448:	ldr.w	r3, [r4, #156]	; 0x9c
6000144c:	bic.w	r3, r3, #52428800	; 0x3200000
                           ~(LPSPI_TCR_PCS(3) |
                             LPSPI_TCR_CONT); // go ahead and update TCR anyway?
60001450:	str	r3, [r2, #96]	; 0x60
  *_dcport |= _dcpinmask;
  _dcpinAsserted = 0;
#endif

  // toggle RST low to reset
  if (_rst < 255) {
60001452:	ldrb.w	r0, [r4, #138]	; 0x8a
60001456:	cmp	r0, #255	; 0xff
60001458:	beq.n	60001490 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x18c>
    pinMode(_rst, OUTPUT);
6000145a:	movs	r1, #1
6000145c:	bl	600023b8 <__pinMode_veneer>
    digitalWrite(_rst, HIGH);
60001460:	movs	r1, #1
60001462:	ldrb.w	r0, [r4, #138]	; 0x8a
60001466:	bl	600023d0 <__digitalWrite_veneer>
    delay(5);
6000146a:	movs	r0, #5
6000146c:	bl	600023e0 <__delay_veneer>
    digitalWrite(_rst, LOW);
60001470:	movs	r1, #0
60001472:	ldrb.w	r0, [r4, #138]	; 0x8a
60001476:	bl	600023d0 <__digitalWrite_veneer>
    delay(20);
6000147a:	movs	r0, #20
6000147c:	bl	600023e0 <__delay_veneer>
    digitalWrite(_rst, HIGH);
60001480:	ldrb.w	r0, [r4, #138]	; 0x8a
60001484:	movs	r1, #1
60001486:	bl	600023d0 <__digitalWrite_veneer>
    delay(150);
6000148a:	movs	r0, #150	; 0x96
6000148c:	bl	600023e0 <__delay_veneer>
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
60001490:	movs	r3, #7
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
60001492:	ldr	r2, [r4, #20]
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
60001494:	ldr	r0, [r4, #8]
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
60001496:	str	r3, [sp, #28]
60001498:	add	r3, sp, #24
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
6000149a:	str	r2, [sp, #24]
6000149c:	ldmia.w	r3, {r1, r2}
600014a0:	bl	60002460 <___ZN8SPIClass16beginTransactionE11SPISettings_veneer>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
600014a4:	ldr.w	sl, [r4, #172]	; 0xac
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
600014a8:	ldr	r3, [r4, #28]
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
600014aa:	cmp.w	sl, #0
600014ae:	beq.w	6000199a <ILI9341_t3n::begin(unsigned long, unsigned long)+0x696>
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
600014b2:	ldr.w	r2, [r4, #152]	; 0x98
600014b6:	mov	r1, r2
600014b8:	str	r2, [sp, #20]
600014ba:	cbz	r2, 600014c4 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x1c0>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
600014bc:	ldr.w	r2, [r4, #148]	; 0x94
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
600014c0:	str.w	r2, [r1, #136]	; 0x88
    _dcport = portOutputRegister(_dc);
    _dcpinmask = digitalPinToBitMask(_dc);
    pinMode(_dc, OUTPUT);
    DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
    _tcr_dc_assert = LPSPI_TCR_PCS(0);
    _tcr_dc_not_assert = LPSPI_TCR_PCS(1);
600014c4:	movs	r2, #4
600014c6:	ldr	r6, [pc, #336]	; (60001618 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x314>)
600014c8:	ldr.w	r0, [r4, #156]	; 0x9c
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
600014cc:	movw	fp, #513	; 0x201
  */
  beginSPITransaction(_SPI_CLOCK);
  const uint8_t *addr = init_commands;
  while (1) {
    uint8_t count = *addr++;
    if (count-- == 0)
600014d0:	subs	r7, r2, #1
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
600014d2:	mov	r1, r6
  */
  beginSPITransaction(_SPI_CLOCK);
  const uint8_t *addr = init_commands;
  while (1) {
    uint8_t count = *addr++;
    if (count-- == 0)
600014d4:	uxtb	r7, r7
600014d6:	cmp	r2, #0
600014d8:	beq.w	60001724 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x420>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
600014dc:	ldr.w	r6, [r4, #164]	; 0xa4
      break;
    writecommand_cont(*addr++);
600014e0:	add.w	lr, r1, #2
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
600014e4:	ldr.w	ip, [pc, #296]	; 60001610 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x30c>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
600014e8:	orr.w	r2, r6, #7
600014ec:	ldrb	r5, [r1, #1]
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
600014ee:	and.w	ip, r0, ip
600014f2:	cmp	r2, ip
600014f4:	beq.w	60001644 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x340>
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
600014f8:	ldr.w	ip, [pc, #280]	; 60001614 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x310>
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
600014fc:	eor.w	r8, r0, r2
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
60001500:	and.w	ip, r0, ip
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
60001504:	tst.w	r8, #50331648	; 0x3000000
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
60001508:	orr.w	r0, ip, r2
6000150c:	str.w	r0, [r4, #156]	; 0x9c
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
60001510:	beq.w	60001638 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x334>
60001514:	ldr.w	ip, [r4, #160]	; 0xa0
60001518:	cmp.w	ip, #0
6000151c:	beq.w	60001638 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x334>
60001520:	ldrb.w	r0, [r4, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
60001524:	cbz	r0, 6000153a <ILI9341_t3n::begin(unsigned long, unsigned long)+0x236>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
60001526:	ldr	r2, [r3, #112]	; 0x70
60001528:	lsls	r2, r2, #30
6000152a:	bmi.n	60001524 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x220>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
6000152c:	subs	r0, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
6000152e:	ldr	r2, [r3, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
60001530:	uxtb	r0, r0
60001532:	strb.w	r0, [r4, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
60001536:	cmp	r0, #0
60001538:	bne.n	60001526 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x222>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
6000153a:	tst.w	r6, #50331648	; 0x3000000
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
6000153e:	str.w	fp, [r3, #16]
60001542:	beq.w	60001938 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x634>
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
60001546:	str.w	ip, [sl, #132]	; 0x84
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
        else
          DIRECT_WRITE_LOW(_dcport, _dcpinmask);
        _pimxrt_spi->TCR = _spi_tcr_current &
6000154a:	ldr.w	r0, [r4, #156]	; 0x9c
6000154e:	bic.w	r2, r0, #52428800	; 0x3200000
                           ~(LPSPI_TCR_PCS(3) |
                             LPSPI_TCR_CONT); // go ahead and update TCR anyway?
60001552:	str	r2, [r3, #96]	; 0x60
60001554:	b.n	60001644 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x340>
    _pkinetisl_spi = &KINETISL_SPI0;
#endif

#if defined(__MK64FX512__) || defined(__MK66FX1M0__) ||                        \
    defined(__IMXRT1062__) || defined(__MKL26Z64__)
  } else if (SPI1.pinIsMOSI(_mosi) &&
60001556:	ldrb.w	r1, [r4, #144]	; 0x90
6000155a:	ldr	r0, [pc, #192]	; (6000161c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x318>)
6000155c:	bl	60002408 <___ZN8SPIClass9pinIsMOSIEh_veneer>
             ((_miso == 0xff) || SPI1.pinIsMISO(_miso)) &&
60001560:	cbz	r0, 6000158e <ILI9341_t3n::begin(unsigned long, unsigned long)+0x28a>
60001562:	ldrb.w	r1, [r4, #143]	; 0x8f
    _pkinetisl_spi = &KINETISL_SPI0;
#endif

#if defined(__MK64FX512__) || defined(__MK66FX1M0__) ||                        \
    defined(__IMXRT1062__) || defined(__MKL26Z64__)
  } else if (SPI1.pinIsMOSI(_mosi) &&
60001566:	cmp	r1, #255	; 0xff
60001568:	beq.n	60001572 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x26e>
             ((_miso == 0xff) || SPI1.pinIsMISO(_miso)) &&
6000156a:	ldr	r0, [pc, #176]	; (6000161c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x318>)
6000156c:	bl	60002410 <___ZN8SPIClass9pinIsMISOEh_veneer>
60001570:	cbz	r0, 6000158e <ILI9341_t3n::begin(unsigned long, unsigned long)+0x28a>
             SPI1.pinIsSCK(_sclk)) {
60001572:	ldr	r5, [pc, #168]	; (6000161c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x318>)
60001574:	ldrb.w	r1, [r4, #145]	; 0x91
60001578:	mov	r0, r5
6000157a:	bl	60002400 <___ZN8SPIClass8pinIsSCKEh_veneer>
#endif

#if defined(__MK64FX512__) || defined(__MK66FX1M0__) ||                        \
    defined(__IMXRT1062__) || defined(__MKL26Z64__)
  } else if (SPI1.pinIsMOSI(_mosi) &&
             ((_miso == 0xff) || SPI1.pinIsMISO(_miso)) &&
6000157e:	cbz	r0, 6000158e <ILI9341_t3n::begin(unsigned long, unsigned long)+0x28a>
             SPI1.pinIsSCK(_sclk)) {
    _pspi = &SPI1;
    _spi_num = 1; // Which buss is this spi on?
60001580:	movs	r2, #1
#ifdef KINETISK
    _pkinetisk_spi = &KINETISK_SPI1; // Could hack our way to grab this from SPI
                                     // object, but...
    _fifo_full_test = (0 << 12);
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    _pimxrt_spi = &IMXRT_LPSPI3_S; // Could hack our way to grab this from SPI
60001582:	ldr	r3, [pc, #156]	; (60001620 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x31c>)
#if defined(__MK64FX512__) || defined(__MK66FX1M0__) ||                        \
    defined(__IMXRT1062__) || defined(__MKL26Z64__)
  } else if (SPI1.pinIsMOSI(_mosi) &&
             ((_miso == 0xff) || SPI1.pinIsMISO(_miso)) &&
             SPI1.pinIsSCK(_sclk)) {
    _pspi = &SPI1;
60001584:	str	r5, [r4, #8]
60001586:	mov	r0, r5
    _spi_num = 1; // Which buss is this spi on?
60001588:	strb	r2, [r4, #16]
#ifdef KINETISK
    _pkinetisk_spi = &KINETISK_SPI1; // Could hack our way to grab this from SPI
                                     // object, but...
    _fifo_full_test = (0 << 12);
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    _pimxrt_spi = &IMXRT_LPSPI3_S; // Could hack our way to grab this from SPI
6000158a:	str	r3, [r4, #28]
6000158c:	b.n	60001352 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x4e>
                                   // object, but...
#else
    _pkinetisl_spi = &KINETISL_SPI1;
#endif
#if !defined(__MKL26Z64__)
  } else if (SPI2.pinIsMOSI(_mosi) &&
6000158e:	ldrb.w	r1, [r4, #144]	; 0x90
60001592:	ldr	r0, [pc, #144]	; (60001624 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x320>)
60001594:	bl	60002408 <___ZN8SPIClass9pinIsMOSIEh_veneer>
             ((_miso == 0xff) || SPI2.pinIsMISO(_miso)) &&
60001598:	cbz	r0, 600015c6 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x2c2>
6000159a:	ldrb.w	r1, [r4, #143]	; 0x8f
                                   // object, but...
#else
    _pkinetisl_spi = &KINETISL_SPI1;
#endif
#if !defined(__MKL26Z64__)
  } else if (SPI2.pinIsMOSI(_mosi) &&
6000159e:	cmp	r1, #255	; 0xff
600015a0:	beq.n	600015aa <ILI9341_t3n::begin(unsigned long, unsigned long)+0x2a6>
             ((_miso == 0xff) || SPI2.pinIsMISO(_miso)) &&
600015a2:	ldr	r0, [pc, #128]	; (60001624 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x320>)
600015a4:	bl	60002410 <___ZN8SPIClass9pinIsMISOEh_veneer>
600015a8:	cbz	r0, 600015c6 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x2c2>
             SPI2.pinIsSCK(_sclk)) {
600015aa:	ldr	r5, [pc, #120]	; (60001624 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x320>)
600015ac:	ldrb.w	r1, [r4, #145]	; 0x91
600015b0:	mov	r0, r5
600015b2:	bl	60002400 <___ZN8SPIClass8pinIsSCKEh_veneer>
#else
    _pkinetisl_spi = &KINETISL_SPI1;
#endif
#if !defined(__MKL26Z64__)
  } else if (SPI2.pinIsMOSI(_mosi) &&
             ((_miso == 0xff) || SPI2.pinIsMISO(_miso)) &&
600015b6:	cbz	r0, 600015c6 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x2c2>
             SPI2.pinIsSCK(_sclk)) {
    _pspi = &SPI2;
    _spi_num = 2; // Which buss is this spi on?
600015b8:	movs	r2, #2
#ifdef KINETISK
    _pkinetisk_spi = &KINETISK_SPI2; // Could hack our way to grab this from SPI
                                     // object, but...
    _fifo_full_test = (0 << 12);
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    _pimxrt_spi = &IMXRT_LPSPI1_S; // Could hack our way to grab this from SPI
600015ba:	ldr	r3, [pc, #108]	; (60001628 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x324>)
#endif
#if !defined(__MKL26Z64__)
  } else if (SPI2.pinIsMOSI(_mosi) &&
             ((_miso == 0xff) || SPI2.pinIsMISO(_miso)) &&
             SPI2.pinIsSCK(_sclk)) {
    _pspi = &SPI2;
600015bc:	str	r5, [r4, #8]
600015be:	mov	r0, r5
    _spi_num = 2; // Which buss is this spi on?
600015c0:	strb	r2, [r4, #16]
#ifdef KINETISK
    _pkinetisk_spi = &KINETISK_SPI2; // Could hack our way to grab this from SPI
                                     // object, but...
    _fifo_full_test = (0 << 12);
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    _pimxrt_spi = &IMXRT_LPSPI1_S; // Could hack our way to grab this from SPI
600015c2:	str	r3, [r4, #28]
600015c4:	b.n	60001352 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x4e>
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
600015c6:	movs	r1, #66	; 0x42
600015c8:	ldr	r0, [pc, #96]	; (6000162c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x328>)
600015ca:	bl	600023f0 <__usb_seremu_write_veneer>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
600015ce:	ldr	r0, [pc, #96]	; (60001630 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x32c>)
600015d0:	bl	60002450 <___ZN5Print7printlnEv_veneer>
  } else {
    Serial.println(
        "ILI9341_t3n: The IO pins on the constructor are not valid SPI pins");

    Serial.printf("    mosi:%d miso:%d SCLK:%d CS:%d DC:%d\n", _mosi, _miso,
                  _sclk, _cs, _dc);
600015d4:	ldrb.w	r1, [r4, #145]	; 0x91
600015d8:	ldrb.w	r0, [r4, #139]	; 0x8b
600015dc:	ldrb.w	r5, [r4, #140]	; 0x8c
600015e0:	ldrb.w	r3, [r4, #143]	; 0x8f
600015e4:	ldrb.w	r2, [r4, #144]	; 0x90
600015e8:	str	r1, [sp, #0]
600015ea:	ldr	r1, [pc, #72]	; (60001634 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x330>)
600015ec:	str	r0, [sp, #4]
600015ee:	str	r5, [sp, #8]
600015f0:	ldr	r0, [pc, #60]	; (60001630 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x32c>)
600015f2:	bl	600023f8 <___ZN5Print6printfEPKcz_veneer>
  pinMode(DEBUG_PIN_2, OUTPUT);
  pinMode(DEBUG_PIN_3, OUTPUT);
  pinMode(DEBUG_PIN_4, OUTPUT);
#endif
  // Serial.println("_t3n::begin - completed"); Serial.flush();
}
600015f6:	add	sp, #36	; 0x24
600015f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
600015fc:	b.w	60002458 <__usb_seremu_flush_output_veneer>
60001600:	.word	0x20000f18
60001604:	.word	0x403a0000
60001608:	.word	0x200008e0
6000160c:	.word	0x03000007
60001610:	.word	0x0328001f
60001614:	.word	0xfcd7ffe0
60001618:	.word	0x2000026c
6000161c:	.word	0x20000f68
60001620:	.word	0x4039c000
60001624:	.word	0x20000fb8
60001628:	.word	0x40394000
6000162c:	.word	0x200002d8
60001630:	.word	0x2000106c
60001634:	.word	0x2000031c
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
        while ((_pimxrt_spi->FSR & 0x1f))
60001638:	ldr	r2, [r3, #92]	; 0x5c
6000163a:	lsls	r6, r2, #27
6000163c:	bne.n	60001638 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x334>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR
6000163e:	str	r0, [r3, #96]	; 0x60
60001640:	ldr.w	r0, [r4, #156]	; 0x9c
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
60001644:	str	r5, [r3, #100]	; 0x64
    pending_rx_count++; //
60001646:	ldrb.w	r2, [r4, #146]	; 0x92
6000164a:	adds	r2, #1
6000164c:	strb.w	r2, [r4, #146]	; 0x92

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
60001650:	ldr	r2, [r3, #112]	; 0x70
60001652:	lsls	r6, r2, #30
60001654:	bmi.n	60001664 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x360>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
60001656:	ldrb.w	r2, [r4, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
6000165a:	ldr	r5, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
6000165c:	subs	r5, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
6000165e:	cbz	r2, 60001664 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x360>
        pending_rx_count--; // decrement count of bytes still levt
60001660:	strb.w	r5, [r4, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
60001664:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
60001666:	lsls	r5, r2, #31
60001668:	bpl.n	60001650 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x34c>
6000166a:	adds	r6, r7, #2
6000166c:	mov	r5, lr
6000166e:	add	r6, r1
  while (1) {
    uint8_t count = *addr++;
    if (count-- == 0)
      break;
    writecommand_cont(*addr++);
    while (count-- > 0) {
60001670:	cmp	r5, r6
60001672:	beq.n	60001712 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x40e>
    waitFifoNotFull();
  }
  void writedata8_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(7) | LPSPI_TCR_CONT);
60001674:	ldr.w	r8, [r4, #168]	; 0xa8
60001678:	ldr	r2, [pc, #572]	; (600018b8 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x5b4>)
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
6000167a:	ldr	r1, [pc, #576]	; (600018bc <ILI9341_t3n::begin(unsigned long, unsigned long)+0x5b8>)
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata8_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(7) | LPSPI_TCR_CONT);
6000167c:	orr.w	r2, r8, r2
      writedata8_cont(*addr++);
60001680:	ldrb.w	ip, [r5], #1
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
60001684:	ands	r1, r0
60001686:	cmp	r2, r1
60001688:	beq.n	600016e6 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x3e2>
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
6000168a:	ldr	r1, [pc, #564]	; (600018c0 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x5bc>)
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
6000168c:	eor.w	r9, r2, r0
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
60001690:	ands	r1, r0
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
60001692:	tst.w	r9, #50331648	; 0x3000000
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
60001696:	orr.w	r1, r1, r2
6000169a:	str.w	r1, [r4, #156]	; 0x9c
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
6000169e:	beq.n	600016da <ILI9341_t3n::begin(unsigned long, unsigned long)+0x3d6>
600016a0:	ldr.w	r0, [r4, #160]	; 0xa0
600016a4:	cbz	r0, 600016da <ILI9341_t3n::begin(unsigned long, unsigned long)+0x3d6>
600016a6:	ldrb.w	r1, [r4, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
600016aa:	cbz	r1, 600016c0 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x3bc>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
600016ac:	ldr	r2, [r3, #112]	; 0x70
600016ae:	lsls	r2, r2, #30
600016b0:	bmi.n	600016aa <ILI9341_t3n::begin(unsigned long, unsigned long)+0x3a6>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
600016b2:	subs	r1, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
600016b4:	ldr	r2, [r3, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
600016b6:	uxtb	r1, r1
600016b8:	strb.w	r1, [r4, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
600016bc:	cmp	r1, #0
600016be:	bne.n	600016ac <ILI9341_t3n::begin(unsigned long, unsigned long)+0x3a8>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
600016c0:	tst.w	r8, #50331648	; 0x3000000
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
600016c4:	str.w	fp, [r3, #16]
600016c8:	beq.n	60001788 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x484>
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
600016ca:	str.w	r0, [sl, #132]	; 0x84
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
        else
          DIRECT_WRITE_LOW(_dcport, _dcpinmask);
        _pimxrt_spi->TCR = _spi_tcr_current &
600016ce:	ldr.w	r0, [r4, #156]	; 0x9c
600016d2:	bic.w	r2, r0, #52428800	; 0x3200000
                           ~(LPSPI_TCR_PCS(3) |
                             LPSPI_TCR_CONT); // go ahead and update TCR anyway?
600016d6:	str	r2, [r3, #96]	; 0x60
600016d8:	b.n	600016e6 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x3e2>
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
        while ((_pimxrt_spi->FSR & 0x1f))
600016da:	ldr	r2, [r3, #92]	; 0x5c
600016dc:	lsls	r0, r2, #27
600016de:	bne.n	600016da <ILI9341_t3n::begin(unsigned long, unsigned long)+0x3d6>
600016e0:	ldr.w	r0, [r4, #156]	; 0x9c
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR
600016e4:	str	r1, [r3, #96]	; 0x60
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata8_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(7) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = c;
600016e6:	str.w	ip, [r3, #100]	; 0x64
    pending_rx_count++; //
600016ea:	ldrb.w	r2, [r4, #146]	; 0x92
600016ee:	adds	r2, #1
600016f0:	strb.w	r2, [r4, #146]	; 0x92

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
600016f4:	ldr	r2, [r3, #112]	; 0x70
600016f6:	lsls	r2, r2, #30
600016f8:	bmi.n	60001708 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x404>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
600016fa:	ldrb.w	r2, [r4, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
600016fe:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
60001700:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
60001702:	cbz	r2, 60001708 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x404>
        pending_rx_count--; // decrement count of bytes still levt
60001704:	strb.w	r1, [r4, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
60001708:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
6000170a:	lsls	r1, r2, #31
6000170c:	bpl.n	600016f4 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x3f0>
  while (1) {
    uint8_t count = *addr++;
    if (count-- == 0)
      break;
    writecommand_cont(*addr++);
    while (count-- > 0) {
6000170e:	cmp	r5, r6
60001710:	bne.n	60001674 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x370>
60001712:	ldrb.w	r2, [lr, r7]
60001716:	add.w	r1, lr, r7
  */
  beginSPITransaction(_SPI_CLOCK);
  const uint8_t *addr = init_commands;
  while (1) {
    uint8_t count = *addr++;
    if (count-- == 0)
6000171a:	subs	r7, r2, #1
6000171c:	uxtb	r7, r7
6000171e:	cmp	r2, #0
60001720:	bne.w	600014dc <ILI9341_t3n::begin(unsigned long, unsigned long)+0x1d8>
    _pimxrt_spi->TDR = d;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7));
60001724:	ldr.w	r5, [r4, #164]	; 0xa4
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
60001728:	ldr	r1, [pc, #400]	; (600018bc <ILI9341_t3n::begin(unsigned long, unsigned long)+0x5b8>)
    _pimxrt_spi->TDR = d;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7));
6000172a:	orr.w	r2, r5, #7
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
6000172e:	ands	r1, r0
60001730:	cmp	r2, r1
60001732:	beq.n	60001796 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x492>
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
60001734:	ldr	r1, [pc, #392]	; (600018c0 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x5bc>)
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
60001736:	eor.w	r6, r2, r0
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
6000173a:	ands	r1, r0
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
6000173c:	tst.w	r6, #50331648	; 0x3000000
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
60001740:	orr.w	r1, r1, r2
60001744:	str.w	r1, [r4, #156]	; 0x9c
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
60001748:	beq.n	6000178e <ILI9341_t3n::begin(unsigned long, unsigned long)+0x48a>
6000174a:	ldr.w	r0, [r4, #160]	; 0xa0
6000174e:	cbz	r0, 6000178e <ILI9341_t3n::begin(unsigned long, unsigned long)+0x48a>
60001750:	ldrb.w	r2, [r4, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
60001754:	cbz	r2, 6000176a <ILI9341_t3n::begin(unsigned long, unsigned long)+0x466>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
60001756:	ldr	r1, [r3, #112]	; 0x70
60001758:	lsls	r7, r1, #30
6000175a:	bmi.n	60001754 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x450>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
6000175c:	subs	r2, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
6000175e:	ldr	r1, [r3, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
60001760:	uxtb	r2, r2
60001762:	strb.w	r2, [r4, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
60001766:	cmp	r2, #0
60001768:	bne.n	60001756 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x452>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
6000176a:	movw	r2, #513	; 0x201
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
6000176e:	tst.w	r5, #50331648	; 0x3000000
60001772:	str	r2, [r3, #16]
60001774:	beq.w	600019b0 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x6ac>
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
60001778:	str.w	r0, [sl, #132]	; 0x84
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
        else
          DIRECT_WRITE_LOW(_dcport, _dcpinmask);
        _pimxrt_spi->TCR = _spi_tcr_current &
6000177c:	ldr.w	r2, [r4, #156]	; 0x9c
60001780:	bic.w	r2, r2, #52428800	; 0x3200000
                           ~(LPSPI_TCR_PCS(3) |
                             LPSPI_TCR_CONT); // go ahead and update TCR anyway?
60001784:	str	r2, [r3, #96]	; 0x60
60001786:	b.n	60001796 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x492>
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
60001788:	str.w	r0, [sl, #136]	; 0x88
6000178c:	b.n	600016ce <ILI9341_t3n::begin(unsigned long, unsigned long)+0x3ca>
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
        while ((_pimxrt_spi->FSR & 0x1f))
6000178e:	ldr	r2, [r3, #92]	; 0x5c
60001790:	lsls	r2, r2, #27
60001792:	bne.n	6000178e <ILI9341_t3n::begin(unsigned long, unsigned long)+0x48a>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR
60001794:	str	r1, [r3, #96]	; 0x60
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7));
    _pimxrt_spi->TDR = c;
60001796:	movs	r2, #17
60001798:	str	r2, [r3, #100]	; 0x64
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
6000179a:	ldrb.w	r1, [r4, #146]	; 0x92
6000179e:	adds	r2, r1, #1
600017a0:	strb.w	r2, [r4, #146]	; 0x92
600017a4:	b.n	600017ae <ILI9341_t3n::begin(unsigned long, unsigned long)+0x4aa>
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
600017a6:	ldr	r2, [r3, #112]	; 0x70
600017a8:	lsls	r6, r2, #30
600017aa:	bpl.w	6000193e <ILI9341_t3n::begin(unsigned long, unsigned long)+0x63a>
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
600017ae:	cmp	r1, #255	; 0xff
600017b0:	bne.n	600017a6 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x4a2>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
600017b2:	movw	r2, #513	; 0x201
600017b6:	str	r2, [r3, #16]
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
600017b8:	ldr	r2, [sp, #20]
600017ba:	cbz	r2, 600017c4 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x4c0>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
600017bc:	ldr.w	r3, [r4, #148]	; 0x94
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
600017c0:	str.w	r3, [r2, #132]	; 0x84
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
#endif
    }
    _pspi->endTransaction();
600017c4:	ldr	r3, [r4, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
600017c6:	ldrb	r2, [r3, #19]
600017c8:	cbz	r2, 60001804 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x500>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
600017ca:	lsls	r5, r2, #31
600017cc:	bpl.n	600017d6 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x4d2>
600017ce:	ldr	r2, [pc, #244]	; (600018c4 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x5c0>)
600017d0:	ldr	r1, [r3, #40]	; 0x28
600017d2:	str	r1, [r2, #0]
600017d4:	ldrb	r2, [r3, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
600017d6:	lsls	r0, r2, #30
600017d8:	bpl.n	600017e2 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x4de>
600017da:	ldr	r2, [pc, #236]	; (600018c8 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x5c4>)
600017dc:	ldr	r1, [r3, #44]	; 0x2c
600017de:	str	r1, [r2, #0]
600017e0:	ldrb	r2, [r3, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
600017e2:	lsls	r1, r2, #29
600017e4:	bpl.n	600017ee <ILI9341_t3n::begin(unsigned long, unsigned long)+0x4ea>
600017e6:	ldr	r2, [pc, #228]	; (600018cc <ILI9341_t3n::begin(unsigned long, unsigned long)+0x5c8>)
600017e8:	ldr	r1, [r3, #48]	; 0x30
600017ea:	str	r1, [r2, #0]
600017ec:	ldrb	r2, [r3, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
600017ee:	lsls	r7, r2, #28
600017f0:	bpl.n	600017fa <ILI9341_t3n::begin(unsigned long, unsigned long)+0x4f6>
600017f2:	ldr	r2, [pc, #220]	; (600018d0 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x5cc>)
600017f4:	ldr	r1, [r3, #52]	; 0x34
600017f6:	str	r1, [r2, #0]
600017f8:	ldrb	r2, [r3, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
600017fa:	lsls	r6, r2, #27
600017fc:	bpl.n	60001804 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x500>
600017fe:	ldr	r2, [r3, #56]	; 0x38
60001800:	ldr	r3, [pc, #208]	; (600018d4 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x5d0>)
60001802:	str	r2, [r3, #0]
      writedata8_cont(*addr++);
    }
  }
  writecommand_last(ILI9341_SLPOUT); // Exit Sleep
  endSPITransaction();
  delay(120);
60001804:	movs	r0, #120	; 0x78
60001806:	bl	600023e0 <__delay_veneer>
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
6000180a:	movs	r3, #7
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
6000180c:	ldr	r2, [r4, #20]
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
6000180e:	str	r3, [sp, #28]
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
60001810:	add	r3, sp, #24
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
60001812:	str	r2, [sp, #24]
60001814:	ldr	r0, [r4, #8]
60001816:	ldmia.w	r3, {r1, r2}
6000181a:	bl	60002460 <___ZN8SPIClass16beginTransactionE11SPISettings_veneer>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
6000181e:	ldr.w	r5, [r4, #172]	; 0xac
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
60001822:	ldr	r3, [r4, #28]
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
60001824:	cmp	r5, #0
60001826:	beq.w	600019a2 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x69e>
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
6000182a:	ldr.w	r0, [r4, #152]	; 0x98
6000182e:	cbz	r0, 60001838 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x534>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
60001830:	ldr.w	r2, [r4, #148]	; 0x94
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
60001834:	str.w	r2, [r0, #136]	; 0x88
    _pimxrt_spi->TDR = d;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7));
60001838:	ldr.w	r7, [r4, #164]	; 0xa4
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
6000183c:	ldr.w	r6, [r4, #156]	; 0x9c
60001840:	ldr	r1, [pc, #120]	; (600018bc <ILI9341_t3n::begin(unsigned long, unsigned long)+0x5b8>)
    _pimxrt_spi->TDR = d;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7));
60001842:	orr.w	r2, r7, #7
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
60001846:	ands	r1, r6
60001848:	cmp	r2, r1
6000184a:	beq.n	600018a8 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x5a4>
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
6000184c:	ldr	r1, [pc, #112]	; (600018c0 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x5bc>)
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
6000184e:	eor.w	lr, r2, r6
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
60001852:	ands	r1, r6
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
60001854:	tst.w	lr, #50331648	; 0x3000000
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
60001858:	orr.w	r1, r1, r2
6000185c:	str.w	r1, [r4, #156]	; 0x9c
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
60001860:	beq.n	600018a0 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x59c>
60001862:	ldr.w	r6, [r4, #160]	; 0xa0
60001866:	cbz	r6, 600018a0 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x59c>
60001868:	ldrb.w	r2, [r4, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
6000186c:	cbz	r2, 60001882 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x57e>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
6000186e:	ldr	r1, [r3, #112]	; 0x70
60001870:	lsls	r1, r1, #30
60001872:	bmi.n	6000186c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x568>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
60001874:	subs	r2, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
60001876:	ldr	r1, [r3, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
60001878:	uxtb	r2, r2
6000187a:	strb.w	r2, [r4, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
6000187e:	cmp	r2, #0
60001880:	bne.n	6000186e <ILI9341_t3n::begin(unsigned long, unsigned long)+0x56a>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
60001882:	movw	r2, #513	; 0x201
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
60001886:	tst.w	r7, #50331648	; 0x3000000
6000188a:	str	r2, [r3, #16]
6000188c:	beq.w	600019aa <ILI9341_t3n::begin(unsigned long, unsigned long)+0x6a6>
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
60001890:	str.w	r6, [r5, #132]	; 0x84
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
        else
          DIRECT_WRITE_LOW(_dcport, _dcpinmask);
        _pimxrt_spi->TCR = _spi_tcr_current &
60001894:	ldr.w	r2, [r4, #156]	; 0x9c
60001898:	bic.w	r2, r2, #52428800	; 0x3200000
                           ~(LPSPI_TCR_PCS(3) |
                             LPSPI_TCR_CONT); // go ahead and update TCR anyway?
6000189c:	str	r2, [r3, #96]	; 0x60
6000189e:	b.n	600018a8 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x5a4>
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
        while ((_pimxrt_spi->FSR & 0x1f))
600018a0:	ldr	r2, [r3, #92]	; 0x5c
600018a2:	lsls	r5, r2, #27
600018a4:	bne.n	600018a0 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x59c>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR
600018a6:	str	r1, [r3, #96]	; 0x60
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7));
    _pimxrt_spi->TDR = c;
600018a8:	movs	r2, #41	; 0x29
600018aa:	str	r2, [r3, #100]	; 0x64
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
600018ac:	ldrb.w	r1, [r4, #146]	; 0x92
600018b0:	adds	r2, r1, #1
600018b2:	strb.w	r2, [r4, #146]	; 0x92
600018b6:	b.n	600018de <ILI9341_t3n::begin(unsigned long, unsigned long)+0x5da>
600018b8:	.word	0x00200007
600018bc:	.word	0x0328001f
600018c0:	.word	0xfcd7ffe0
600018c4:	.word	0xe000e100
600018c8:	.word	0xe000e104
600018cc:	.word	0xe000e108
600018d0:	.word	0xe000e10c
600018d4:	.word	0xe000e110
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
600018d8:	ldr	r2, [r3, #112]	; 0x70
600018da:	lsls	r6, r2, #30
600018dc:	bpl.n	6000194a <ILI9341_t3n::begin(unsigned long, unsigned long)+0x646>
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
600018de:	cmp	r1, #255	; 0xff
600018e0:	bne.n	600018d8 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x5d4>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
600018e2:	movw	r2, #513	; 0x201
600018e6:	str	r2, [r3, #16]
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
600018e8:	cbz	r0, 600018f2 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x5ee>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
600018ea:	ldr.w	r3, [r4, #148]	; 0x94
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
600018ee:	str.w	r3, [r0, #132]	; 0x84
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
#endif
    }
    _pspi->endTransaction();
600018f2:	ldr	r3, [r4, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
600018f4:	ldrb	r2, [r3, #19]
600018f6:	cbz	r2, 60001932 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x62e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
600018f8:	lsls	r5, r2, #31
600018fa:	bpl.n	60001904 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x600>
600018fc:	ldr	r2, [pc, #188]	; (600019bc <ILI9341_t3n::begin(unsigned long, unsigned long)+0x6b8>)
600018fe:	ldr	r1, [r3, #40]	; 0x28
60001900:	str	r1, [r2, #0]
60001902:	ldrb	r2, [r3, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
60001904:	lsls	r4, r2, #30
60001906:	bpl.n	60001910 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x60c>
60001908:	ldr	r2, [pc, #180]	; (600019c0 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x6bc>)
6000190a:	ldr	r1, [r3, #44]	; 0x2c
6000190c:	str	r1, [r2, #0]
6000190e:	ldrb	r2, [r3, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
60001910:	lsls	r0, r2, #29
60001912:	bpl.n	6000191c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x618>
60001914:	ldr	r2, [pc, #172]	; (600019c4 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x6c0>)
60001916:	ldr	r1, [r3, #48]	; 0x30
60001918:	str	r1, [r2, #0]
6000191a:	ldrb	r2, [r3, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
6000191c:	lsls	r1, r2, #28
6000191e:	bpl.n	60001928 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x624>
60001920:	ldr	r2, [pc, #164]	; (600019c8 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x6c4>)
60001922:	ldr	r1, [r3, #52]	; 0x34
60001924:	str	r1, [r2, #0]
60001926:	ldrb	r2, [r3, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
60001928:	lsls	r2, r2, #27
6000192a:	bpl.n	60001932 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x62e>
6000192c:	ldr	r2, [r3, #56]	; 0x38
6000192e:	ldr	r3, [pc, #156]	; (600019cc <ILI9341_t3n::begin(unsigned long, unsigned long)+0x6c8>)
60001930:	str	r2, [r3, #0]
  pinMode(DEBUG_PIN_2, OUTPUT);
  pinMode(DEBUG_PIN_3, OUTPUT);
  pinMode(DEBUG_PIN_4, OUTPUT);
#endif
  // Serial.println("_t3n::begin - completed"); Serial.flush();
}
60001932:	add	sp, #36	; 0x24
60001934:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
60001938:	str.w	ip, [sl, #136]	; 0x88
6000193c:	b.n	6000154a <ILI9341_t3n::begin(unsigned long, unsigned long)+0x246>
6000193e:	subs	r2, r1, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
60001940:	ldr	r0, [r3, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
60001942:	strb.w	r1, [r4, #146]	; 0x92
60001946:	uxtb	r1, r2
60001948:	b.n	600017ae <ILI9341_t3n::begin(unsigned long, unsigned long)+0x4aa>
6000194a:	subs	r2, r1, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
6000194c:	ldr	r5, [r3, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
6000194e:	strb.w	r1, [r4, #146]	; 0x92
60001952:	uxtb	r1, r2
60001954:	b.n	600018de <ILI9341_t3n::begin(unsigned long, unsigned long)+0x5da>
60001956:	ldr	r1, [r4, #28]
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
        while ((_pimxrt_spi->FSR & 0x1f))
60001958:	ldr	r3, [r1, #92]	; 0x5c
6000195a:	lsls	r3, r3, #27
6000195c:	bne.n	60001958 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x654>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR
6000195e:	str	r2, [r1, #96]	; 0x60
60001960:	b.n	60001452 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x14e>
    dc_cs_index--; // convert to 0 based
    _tcr_dc_assert = LPSPI_TCR_PCS(dc_cs_index);
    _tcr_dc_not_assert = LPSPI_TCR_PCS(3);
  } else {
    // Serial.println("ILI9341_t3n: DC is not valid hardware CS pin");
    _dcport = portOutputRegister(_dc);
60001962:	ldrb.w	r0, [r4, #140]	; 0x8c
    _dcpinmask = digitalPinToBitMask(_dc);
    pinMode(_dc, OUTPUT);
60001966:	movs	r1, #1
    dc_cs_index--; // convert to 0 based
    _tcr_dc_assert = LPSPI_TCR_PCS(dc_cs_index);
    _tcr_dc_not_assert = LPSPI_TCR_PCS(3);
  } else {
    // Serial.println("ILI9341_t3n: DC is not valid hardware CS pin");
    _dcport = portOutputRegister(_dc);
60001968:	lsls	r3, r0, #4
6000196a:	adds	r6, r5, r3
6000196c:	ldr	r2, [r5, r3]
    _dcpinmask = digitalPinToBitMask(_dc);
6000196e:	ldr	r3, [r6, #12]
    dc_cs_index--; // convert to 0 based
    _tcr_dc_assert = LPSPI_TCR_PCS(dc_cs_index);
    _tcr_dc_not_assert = LPSPI_TCR_PCS(3);
  } else {
    // Serial.println("ILI9341_t3n: DC is not valid hardware CS pin");
    _dcport = portOutputRegister(_dc);
60001970:	str.w	r2, [r4, #172]	; 0xac
    _dcpinmask = digitalPinToBitMask(_dc);
60001974:	str.w	r3, [r4, #160]	; 0xa0
    pinMode(_dc, OUTPUT);
60001978:	bl	600023b8 <__pinMode_veneer>
    DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
    _tcr_dc_assert = LPSPI_TCR_PCS(0);
    _tcr_dc_not_assert = LPSPI_TCR_PCS(1);
6000197c:	mov.w	r2, #16777216	; 0x1000000
  } else {
    // Serial.println("ILI9341_t3n: DC is not valid hardware CS pin");
    _dcport = portOutputRegister(_dc);
    _dcpinmask = digitalPinToBitMask(_dc);
    pinMode(_dc, OUTPUT);
    DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
60001980:	ldr.w	r0, [r4, #172]	; 0xac
60001984:	ldr.w	r5, [r4, #160]	; 0xa0
    _tcr_dc_assert = LPSPI_TCR_PCS(0);
    _tcr_dc_not_assert = LPSPI_TCR_PCS(1);
60001988:	mov	r1, r2
6000198a:	ldr	r3, [pc, #68]	; (600019d0 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x6cc>)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
6000198c:	str.w	r5, [r0, #132]	; 0x84
    // Serial.println("ILI9341_t3n: DC is not valid hardware CS pin");
    _dcport = portOutputRegister(_dc);
    _dcpinmask = digitalPinToBitMask(_dc);
    pinMode(_dc, OUTPUT);
    DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
    _tcr_dc_assert = LPSPI_TCR_PCS(0);
60001990:	str.w	r7, [r4, #164]	; 0xa4
    _tcr_dc_not_assert = LPSPI_TCR_PCS(1);
60001994:	str.w	r2, [r4, #168]	; 0xa8
60001998:	b.n	600013ea <ILI9341_t3n::begin(unsigned long, unsigned long)+0xe6>

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
6000199a:	ldr	r2, [r3, #96]	; 0x60
6000199c:	str.w	r2, [r4, #156]	; 0x9c
600019a0:	b.n	600014b2 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x1ae>
600019a2:	ldr	r2, [r3, #96]	; 0x60
600019a4:	str.w	r2, [r4, #156]	; 0x9c
600019a8:	b.n	6000182a <ILI9341_t3n::begin(unsigned long, unsigned long)+0x526>
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
600019aa:	str.w	r6, [r5, #136]	; 0x88
600019ae:	b.n	60001894 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x590>
600019b0:	str.w	r0, [sl, #136]	; 0x88
600019b4:	b.n	6000177c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x478>
600019b6:	str.w	r5, [r3, #136]	; 0x88
600019ba:	b.n	60001448 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x144>
600019bc:	.word	0xe000e100
600019c0:	.word	0xe000e104
600019c4:	.word	0xe000e108
600019c8:	.word	0xe000e10c
600019cc:	.word	0xe000e110
600019d0:	.word	0x01000007

600019d4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600019d4:	ldr	r3, [pc, #192]	; (60001a98 <usb_init+0xc4>)
600019d6:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600019da:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600019dc:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600019e0:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600019e4:	bl	60002428 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600019e8:	ldr	r1, [pc, #176]	; (60001a9c <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600019ea:	ldr	r0, [pc, #180]	; (60001aa0 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600019ec:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600019f0:	ldr	r4, [pc, #176]	; (60001aa4 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600019f2:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600019f6:	ldr	r3, [pc, #176]	; (60001aa8 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600019f8:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600019fc:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001a00:	ldr	r2, [r4, #0]
60001a02:	ands	r3, r2
60001a04:	cbnz	r3, 60001a0e <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001a06:	ldr.w	r3, [r0, #424]	; 0x1a8
60001a0a:	lsls	r2, r3, #30
60001a0c:	beq.n	60001a44 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001a0e:	ldr	r3, [pc, #144]	; (60001aa0 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001a10:	mov.w	r1, #2147483648	; 0x80000000
60001a14:	ldr	r2, [pc, #140]	; (60001aa4 <usb_init+0xd0>)
60001a16:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001a18:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001a1a:	ldr.w	r1, [r3, #320]	; 0x140
60001a1e:	orr.w	r1, r1, #2
60001a22:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001a26:	ldr.w	r3, [r2, #320]	; 0x140
60001a2a:	lsls	r3, r3, #30
60001a2c:	bmi.n	60001a26 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001a2e:	mov.w	r0, #131072	; 0x20000
60001a32:	ldr	r1, [pc, #120]	; (60001aac <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001a34:	ldr	r3, [pc, #108]	; (60001aa4 <usb_init+0xd0>)
60001a36:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001a3a:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001a3c:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001a3e:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001a40:	bl	600023e0 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001a44:	ldr	r5, [pc, #104]	; (60001ab0 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001a46:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001a48:	ldr	r3, [pc, #88]	; (60001aa4 <usb_init+0xd0>)
60001a4a:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001a4e:	ldr	r4, [pc, #80]	; (60001aa0 <usb_init+0xcc>)
60001a50:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001a52:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001a54:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001a56:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001a58:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001a5a:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001a5e:	mov.w	r2, #640	; 0x280
60001a62:	bl	60002418 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001a66:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001a6a:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001a6e:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001a72:	ldr	r2, [pc, #64]	; (60001ab4 <usb_init+0xe0>)
60001a74:	ldr	r1, [pc, #64]	; (60001ab8 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001a76:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001a78:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001a7a:	str.w	r5, [r4, #344]	; 0x158
60001a7e:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001a82:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001a86:	ldr	r2, [pc, #52]	; (60001abc <usb_init+0xe8>)
60001a88:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001a8c:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001a8e:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001a90:	str.w	r3, [r4, #320]	; 0x140
60001a94:	pop	{r4, r5, r6, pc}
60001a96:	nop
60001a98:	.word	0x400d8000
60001a9c:	.word	0x400fc000
60001aa0:	.word	0x402e0000
60001aa4:	.word	0x400d9000
60001aa8:	.word	0x001e1c00
60001aac:	.word	0xe000e28c
60001ab0:	.word	0x20004000
60001ab4:	.word	0x20004400
60001ab8:	.word	0x000083e5
60001abc:	.word	0xe000e10c

60001ac0 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001ac0:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001ac2:	ldr	r2, [pc, #160]	; (60001b64 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001ac4:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001ac6:	ldr	r3, [pc, #160]	; (60001b68 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001ac8:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001acc:	ldr	r4, [pc, #156]	; (60001b6c <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001ace:	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001ad0:	ldr.w	lr, [pc, #216]	; 60001bac <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001ad4:	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001ad6:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001ad8:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001ada:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001ade:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001ae2:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001ae4:	ldr.w	lr, [pc, #200]	; 60001bb0 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001ae8:	ldr	r7, [pc, #132]	; (60001b70 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001aea:	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001aee:	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001af0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001af2:	ldr	r6, [pc, #128]	; (60001b74 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001af4:	ldr	r7, [pc, #128]	; (60001b78 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001af6:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001af8:	ldr	r1, [pc, #128]	; (60001b7c <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001afa:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001afc:	ldr	r6, [pc, #128]	; (60001b80 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001afe:	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001b02:	ldr	r7, [pc, #128]	; (60001b84 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001b04:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001b06:	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001b08:	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001b0c:	ldr	r6, [pc, #120]	; (60001b88 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001b0e:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001b10:	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001b12:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001b14:	ldr.w	lr, [pc, #156]	; 60001bb4 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001b18:	ldr	r6, [pc, #112]	; (60001b8c <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001b1a:	ldr	r1, [pc, #116]	; (60001b90 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001b1c:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001b20:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001b22:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001b24:	ldr	r7, [pc, #108]	; (60001b94 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001b26:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001b28:	ldr	r6, [pc, #108]	; (60001b98 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001b2a:	ldr	r1, [pc, #112]	; (60001b9c <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001b2c:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001b2e:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001b30:	ldr	r7, [pc, #108]	; (60001ba0 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001b32:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001b34:	ldr	r6, [pc, #108]	; (60001ba4 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001b36:	ldr	r1, [pc, #112]	; (60001ba8 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001b38:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001b3a:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001b3c:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001b3e:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001b40:	dsb	sy
	asm("isb");
60001b44:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001b48:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001b4c:	dsb	sy
	asm("isb");
60001b50:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001b54:	ldr.w	r3, [r2, #-136]
60001b58:	orr.w	r3, r3, #196608	; 0x30000
60001b5c:	str.w	r3, [r2, #-136]
60001b60:	pop	{r4, r5, r6, r7, pc}
60001b62:	nop
60001b64:	.word	0xe000ed9c
60001b68:	.word	0xe000eda0
60001b6c:	.word	0xe000ed94
60001b70:	.word	0x00100009
60001b74:	.word	0x00200013
60001b78:	.word	0x07020021
60001b7c:	.word	0x20004700
60001b80:	.word	0x20000014
60001b84:	.word	0x13080025
60001b88:	.word	0x10000009
60001b8c:	.word	0x40000017
60001b90:	.word	0x13100033
60001b94:	.word	0x60000018
60001b98:	.word	0x070b002f
60001b9c:	.word	0x70000019
60001ba0:	.word	0x170b0037
60001ba4:	.word	0x7000001a
60001ba8:	.word	0x130b002f
60001bac:	.word	0x1000003f
60001bb0:	.word	0x03080025
60001bb4:	.word	0x20200016

60001bb8 <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
60001bb8:	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001bba:	ldr	r3, [pc, #736]	; (60001e9c <configure_external_ram+0x2e4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001bbc:	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001bbe:	ldr	r6, [pc, #736]	; (60001ea0 <configure_external_ram+0x2e8>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001bc0:	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001bc2:	ldr	r1, [pc, #736]	; (60001ea4 <configure_external_ram+0x2ec>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001bc4:	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001bc8:	ldr	r5, [pc, #732]	; (60001ea8 <configure_external_ram+0x2f0>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001bca:	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001bce:	ldr	r4, [pc, #732]	; (60001eac <configure_external_ram+0x2f4>)
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001bd0:	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001bd4:	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
60001bd8:	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001bda:	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001bde:	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001be2:	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001be6:	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001bea:	ldr	r1, [pc, #708]	; (60001eb0 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001bec:	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001bf0:	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001bf4:	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001bf8:	ldr	r6, [pc, #696]	; (60001eb4 <configure_external_ram+0x2fc>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001bfa:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001bfc:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001bfe:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001c00:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001c02:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001c04:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001c08:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001c0c:	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001c10:	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001c14:	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001c18:	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001c1c:	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001c20:	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001c24:	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001c28:	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001c2c:	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001c2e:	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001c30:	ldr	r0, [pc, #644]	; (60001eb8 <configure_external_ram+0x300>)
60001c32:	ands	r0, r3
60001c34:	ldr	r3, [pc, #644]	; (60001ebc <configure_external_ram+0x304>)
60001c36:	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001c38:	ldr	r0, [pc, #644]	; (60001ec0 <configure_external_ram+0x308>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001c3a:	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001c3c:	ldr.w	r3, [r6, #132]	; 0x84
60001c40:	orr.w	r3, r3, #12
60001c44:	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001c48:	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001c4a:	ldr	r3, [r0, #0]
60001c4c:	orrs	r3, r6
60001c4e:	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001c50:	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001c52:	and.w	lr, r3, lr
60001c56:	ldr	r3, [pc, #620]	; (60001ec4 <configure_external_ram+0x30c>)
60001c58:	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001c5c:	ldr.w	lr, [pc, #668]	; 60001efc <configure_external_ram+0x344>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001c60:	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001c62:	ldr	r3, [pc, #612]	; (60001ec8 <configure_external_ram+0x310>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001c64:	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001c66:	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001c6a:	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001c6c:	ldr	r7, [pc, #604]	; (60001ecc <configure_external_ram+0x314>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001c6e:	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001c72:	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001c74:	ldr	r3, [r0, #12]
60001c76:	bic.w	r3, r3, #120	; 0x78
60001c7a:	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001c7c:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001c7e:	ands	r7, r3
60001c80:	ldr	r3, [pc, #588]	; (60001ed0 <configure_external_ram+0x318>)
60001c82:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001c84:	ldr	r7, [pc, #580]	; (60001ecc <configure_external_ram+0x314>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001c86:	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001c88:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001c8a:	ands	r7, r3
60001c8c:	ldr	r3, [pc, #576]	; (60001ed0 <configure_external_ram+0x318>)
60001c8e:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001c90:	ldr	r7, [pc, #576]	; (60001ed4 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001c92:	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001c94:	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001c96:	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001c98:	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001c9c:	ldr	r7, [pc, #568]	; (60001ed8 <configure_external_ram+0x320>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001c9e:	bic.w	r3, r3, #63	; 0x3f
60001ca2:	orr.w	r3, r3, #1
60001ca6:	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001caa:	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001cae:	ldr.w	lr, [pc, #564]	; 60001ee4 <configure_external_ram+0x32c>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001cb2:	bic.w	r3, r3, #63	; 0x3f
60001cb6:	orr.w	r3, r3, #1
60001cba:	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
60001cbe:	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001cc0:	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001cc2:	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001cc4:	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001cc8:	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001cca:	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001ccc:	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001cd0:	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001cd2:	ldr	r3, [pc, #520]	; (60001edc <configure_external_ram+0x324>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001cd4:	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001cd8:	ldr	r2, [pc, #516]	; (60001ee0 <configure_external_ram+0x328>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001cda:	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001cdc:	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001ce0:	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001ce2:	str.w	r1, [r3], #4
60001ce6:	cmp	r3, r2
60001ce8:	bne.n	60001ce2 <configure_external_ram+0x12a>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001cea:	ldr	r3, [pc, #468]	; (60001ec0 <configure_external_ram+0x308>)
60001cec:	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001cee:	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001cf0:	orr.w	r2, r2, #1
60001cf4:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001cf6:	ldr	r3, [r1, #0]
60001cf8:	ldr	r2, [pc, #452]	; (60001ec0 <configure_external_ram+0x308>)
60001cfa:	ands.w	r3, r3, #1
60001cfe:	bne.n	60001cf6 <configure_external_ram+0x13e>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001d00:	ldr	r6, [pc, #480]	; (60001ee4 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001d02:	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001d04:	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001d08:	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001d0c:	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001d10:	ldr	r7, [pc, #468]	; (60001ee8 <configure_external_ram+0x330>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001d12:	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001d14:	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001d18:	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001d1a:	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001d1e:	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001d22:	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001d26:	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001d2a:	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001d2c:	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001d30:	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001d32:	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001d36:	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001d3a:	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001d3e:	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001d42:	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001d46:	ldr	r6, [pc, #420]	; (60001eec <configure_external_ram+0x334>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001d48:	ldr	r5, [pc, #420]	; (60001ef0 <configure_external_ram+0x338>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001d4a:	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001d4e:	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001d52:	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001d56:	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001d5a:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001d5e:	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001d62:	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001d66:	ldr	r3, [r1, #20]
60001d68:	ldr	r2, [pc, #340]	; (60001ec0 <configure_external_ram+0x308>)
60001d6a:	lsls	r5, r3, #31
60001d6c:	bpl.n	60001d66 <configure_external_ram+0x1ae>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001d6e:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001d70:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001d72:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001d76:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001d78:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001d7a:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001d7e:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001d82:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001d86:	ldr	r3, [r1, #20]
60001d88:	ldr	r2, [pc, #308]	; (60001ec0 <configure_external_ram+0x308>)
60001d8a:	lsls	r4, r3, #31
60001d8c:	bpl.n	60001d86 <configure_external_ram+0x1ce>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001d8e:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001d90:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001d92:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001d96:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001d98:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001d9a:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001d9e:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001da2:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001da6:	ldr	r3, [r1, #20]
60001da8:	ldr	r2, [pc, #276]	; (60001ec0 <configure_external_ram+0x308>)
60001daa:	lsls	r0, r3, #31
60001dac:	bpl.n	60001da6 <configure_external_ram+0x1ee>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001dae:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001db0:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001db2:	ldr	r0, [pc, #320]	; (60001ef4 <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001db4:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001db6:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001db8:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001dbc:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001dc0:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001dc4:	ldr	r3, [r1, #20]
60001dc6:	ldr	r2, [pc, #248]	; (60001ec0 <configure_external_ram+0x308>)
60001dc8:	lsls	r3, r3, #31
60001dca:	bpl.n	60001dc4 <configure_external_ram+0x20c>
	uint32_t id = FLEXSPI2_RFDR0;
60001dcc:	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001dd0:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001dd4:	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001dd6:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001dd8:	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001dda:	cmp	r3, r1
60001ddc:	beq.n	60001de0 <configure_external_ram+0x228>
60001dde:	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001de0:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001de2:	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001de6:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001de8:	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001dea:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001dee:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001df2:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001df6:	ldr	r3, [r1, #20]
60001df8:	ldr	r2, [pc, #196]	; (60001ec0 <configure_external_ram+0x308>)
60001dfa:	lsls	r7, r3, #31
60001dfc:	bpl.n	60001df6 <configure_external_ram+0x23e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001dfe:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001e00:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001e04:	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001e06:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001e08:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001e0a:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001e0e:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001e12:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001e16:	ldr	r3, [r1, #20]
60001e18:	ldr	r2, [pc, #164]	; (60001ec0 <configure_external_ram+0x308>)
60001e1a:	lsls	r6, r3, #31
60001e1c:	bpl.n	60001e16 <configure_external_ram+0x25e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001e1e:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001e20:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001e24:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001e28:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001e2a:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001e2c:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001e30:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001e34:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001e38:	ldr	r3, [r1, #20]
60001e3a:	ldr	r2, [pc, #132]	; (60001ec0 <configure_external_ram+0x308>)
60001e3c:	lsls	r5, r3, #31
60001e3e:	bpl.n	60001e38 <configure_external_ram+0x280>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001e40:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001e42:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001e46:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001e4a:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001e4c:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001e4e:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001e52:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001e56:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001e5a:	ldr	r3, [r1, #20]
60001e5c:	ldr	r2, [pc, #96]	; (60001ec0 <configure_external_ram+0x308>)
60001e5e:	lsls	r4, r3, #31
60001e60:	bpl.n	60001e5a <configure_external_ram+0x2a2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001e62:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001e64:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001e68:	ldr	r0, [pc, #136]	; (60001ef4 <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001e6a:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001e6c:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001e6e:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001e72:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001e76:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001e7a:	ldr	r3, [r1, #20]
60001e7c:	ldr	r2, [pc, #64]	; (60001ec0 <configure_external_ram+0x308>)
60001e7e:	lsls	r0, r3, #31
60001e80:	bpl.n	60001e7a <configure_external_ram+0x2c2>
	uint32_t id = FLEXSPI2_RFDR0;
60001e82:	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001e86:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001e8a:	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001e8c:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001e8e:	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001e90:	cmp	r3, r1
60001e92:	beq.n	60001f00 <configure_external_ram+0x348>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
60001e94:	ldr	r3, [pc, #96]	; (60001ef8 <configure_external_ram+0x340>)
60001e96:	movs	r2, #8
60001e98:	strb	r2, [r3, #0]
60001e9a:	pop	{r4, r5, r6, r7, pc}
60001e9c:	.word	0x401f8000
60001ea0:	.word	0x000170f9
60001ea4:	.word	0x0001b0f9
60001ea8:	.word	0x000110f9
60001eac:	.word	0x000100f9
60001eb0:	.word	0x401f8400
60001eb4:	.word	0x400fc000
60001eb8:	.word	0x1ffffcff
60001ebc:	.word	0xa0000300
60001ec0:	.word	0x402a4000
60001ec4:	.word	0xffff0012
60001ec8:	.word	0x00f737ff
60001ecc:	.word	0x7cf0ff00
60001ed0:	.word	0x80000040
60001ed4:	.word	0x830f00ff
60001ed8:	.word	0x00020063
60001edc:	.word	0x402a4200
60001ee0:	.word	0x402a4300
60001ee4:	.word	0x5af05af0
60001ee8:	.word	0x3018049f
60001eec:	.word	0x26013206
60001ef0:	.word	0x0a180638
60001ef4:	.word	0x00030004
60001ef8:	.word	0x2000248c
60001efc:	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001f00:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001f04:	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001f08:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001f0a:	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001f0c:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001f10:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001f14:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001f18:	ldr	r3, [r1, #20]
60001f1a:	ldr	r2, [pc, #16]	; (60001f2c <configure_external_ram+0x374>)
60001f1c:	lsls	r3, r3, #31
60001f1e:	bpl.n	60001f18 <configure_external_ram+0x360>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001f20:	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001f22:	ldr	r3, [pc, #12]	; (60001f30 <configure_external_ram+0x378>)
60001f24:	movs	r1, #16
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001f26:	str	r0, [r2, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001f28:	strb	r1, [r3, #0]
60001f2a:	pop	{r4, r5, r6, r7, pc}
60001f2c:	.word	0x402a4000
60001f30:	.word	0x2000248c

60001f34 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
60001f34:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001f36:	ldr	r2, [pc, #92]	; (60001f94 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001f38:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001f3a:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001f3e:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001f42:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001f46:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001f4a:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001f4e:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001f50:	tst.w	r3, #2
60001f54:	beq.n	60001f64 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001f56:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001f58:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001f5a:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001f5c:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001f5e:	tst.w	r3, #2
60001f62:	bne.n	60001f56 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001f64:	tst.w	r3, #8192	; 0x2000
60001f68:	bne.n	60001f6e <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001f6a:	str	r5, [r2, #20]
			continue;
60001f6c:	b.n	60001f4e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001f6e:	tst.w	r3, #4096	; 0x1000
60001f72:	bne.n	60001f78 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001f74:	str	r6, [r2, #20]
			continue;
60001f76:	b.n	60001f4e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001f78:	cmp	r3, #0
60001f7a:	bge.n	60001f4e <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001f7c:	tst.w	r3, #65536	; 0x10000
60001f80:	beq.n	60001f86 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001f82:	str	r1, [r2, #24]
			continue;
60001f84:	b.n	60001f4e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001f86:	lsls	r3, r3, #25
60001f88:	bmi.n	60001f8e <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001f8a:	str	r7, [r2, #20]
			continue;
60001f8c:	b.n	60001f4e <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001f8e:	pop	{r4, r5, r6, r7}
60001f90:	bx	lr
60001f92:	nop
60001f94:	.word	0x400d8000

60001f98 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001f98:	ldr	r2, [pc, #236]	; (60002088 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001f9a:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001f9e:	ldr	r1, [pc, #236]	; (6000208c <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001fa0:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001fa2:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001fa4:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001fa6:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001faa:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001fac:	ldr.w	lr, [pc, #256]	; 600020b0 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001fb0:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001fb2:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001fb6:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001fba:	ldr	r7, [pc, #212]	; (60002090 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001fbc:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001fbe:	ubfx	r4, r3, #8, #12
60001fc2:	ldr	r6, [pc, #208]	; (60002094 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001fc4:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001fc8:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001fcc:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001fd0:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001fd4:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001fd8:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001fdc:	vmov	s15, r4
60001fe0:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001fe4:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001fe6:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001fea:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001fee:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ff2:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001ff4:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001ff8:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001ffc:	ldr	r5, [pc, #152]	; (60002098 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001ffe:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60002002:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60002004:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002008:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000200c:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000200e:	vdiv.f32	s11, s14, s13
60002012:	ldr	r6, [pc, #136]	; (6000209c <tempmon_init+0x104>)
60002014:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002016:	ldr	r1, [pc, #136]	; (600020a0 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002018:	ldr	r4, [pc, #136]	; (600020a4 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000201a:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000201e:	vmov	s15, r3
60002022:	ldr	r3, [pc, #132]	; (600020a8 <tempmon_init+0x110>)
60002024:	str.w	r3, [r6, #320]	; 0x140
60002028:	vcvt.f32.u32	s15, s15
6000202c:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002030:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002034:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002038:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000203c:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002040:	vmov	r3, s11
60002044:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002048:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000204c:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002050:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002052:	and.w	r1, r1, r5, lsl #16
60002056:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000205a:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000205e:	orrs	r3, r1
60002060:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60002064:	vmov	r3, s15
60002068:	ldr.w	r1, [r2, #272]	; 0x110
6000206c:	ubfx	r3, r3, #0, #12
60002070:	orrs	r3, r1
60002072:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60002076:	ldr	r3, [r2, #0]
60002078:	orr.w	r3, r3, #2
6000207c:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000207e:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002080:	ldr	r3, [pc, #40]	; (600020ac <tempmon_init+0x114>)
60002082:	movs	r2, #1
60002084:	str	r2, [r3, #0]
60002086:	pop	{r4, r5, r6, r7, pc}
60002088:	.word	0x400d8180
6000208c:	.word	0x401f4400
60002090:	.word	0x20002498
60002094:	.word	0x2000249c
60002098:	.word	0x20002494
6000209c:	.word	0x20004400
600020a0:	.word	0x0fff0000
600020a4:	.word	0xe000e440
600020a8:	.word	0x00009455
600020ac:	.word	0xe000e108
600020b0:	.word	0x20002490

600020b4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:


// Set up the pool of audio data blocks
// placing them all onto the free list
FLASHMEM void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
600020b4:	cmp.w	r1, #896	; 0x380
600020b8:	push	{r4, r5, r6, r7}
600020ba:	it	cs
600020bc:	movcs.w	r1, #896	; 0x380
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
600020c0:	cpsid	i
	memory_pool = data;
	memory_pool_first_mask = 0;
600020c2:	movs	r5, #0
600020c4:	ldr	r3, [pc, #76]	; (60002114 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>)

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
600020c6:	ldr	r7, [pc, #80]	; (60002118 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>)
	memory_pool_first_mask = 0;
600020c8:	ldr	r6, [pc, #80]	; (6000211c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>)
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
600020ca:	mov	r4, r5
600020cc:	add.w	r2, r3, #112	; 0x70

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
600020d0:	str	r0, [r7, #0]
	memory_pool_first_mask = 0;
600020d2:	strh	r5, [r6, #0]
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
600020d4:	str.w	r4, [r3, #4]!
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
600020d8:	cmp	r3, r2
600020da:	bne.n	600020d4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x20>
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
600020dc:	cbz	r1, 6000210e <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5a>
600020de:	movs	r3, #0
600020e0:	ldr	r6, [pc, #60]	; (60002120 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x6c>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
600020e2:	movs	r7, #1
600020e4:	lsrs	r5, r3, #5
600020e6:	and.w	r4, r3, #31
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
600020ea:	adds	r3, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
600020ec:	ldr.w	r2, [r6, r5, lsl #2]
600020f0:	lsl.w	r4, r7, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
600020f4:	cmp	r3, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
600020f6:	orr.w	r2, r2, r4
600020fa:	str.w	r2, [r6, r5, lsl #2]
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
600020fe:	bne.n	600020e4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x30>
60002100:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
60002102:	strh	r3, [r0, #2]
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
60002104:	adds	r3, #1
60002106:	add.w	r0, r0, #260	; 0x104
6000210a:	cmp	r3, r1
6000210c:	bne.n	60002102 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x4e>
		data[i].memory_pool_index = i;
	}
	__enable_irq();
6000210e:	cpsie	i

}
60002110:	pop	{r4, r5, r6, r7}
60002112:	bx	lr
60002114:	.word	0x20002650
60002118:	.word	0x200026c4
6000211c:	.word	0x200026ca
60002120:	.word	0x20002654

60002124 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002124:	ldr	r3, [pc, #68]	; (6000216c <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002126:	ldr	r1, [pc, #72]	; (60002170 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002128:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000212a:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000212c:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60002130:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002132:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002134:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60002138:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000213a:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000213c:	orr.w	r0, r0, #768	; 0x300
60002140:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002142:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60002144:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60002146:	ldr	r3, [r2, #72]	; 0x48
60002148:	lsls	r3, r3, #24
6000214a:	bmi.n	60002146 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000214c:	ldr	r3, [pc, #36]	; (60002174 <analog_init+0x50>)
6000214e:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002152:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60002154:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60002156:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002158:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
6000215a:	ldr	r3, [r2, #72]	; 0x48
6000215c:	ands.w	r3, r3, #128	; 0x80
60002160:	bne.n	6000215a <analog_init+0x36>
	calibrating = 0;
60002162:	ldr	r2, [pc, #20]	; (60002178 <analog_init+0x54>)
60002164:	strb	r3, [r2, #0]
}
60002166:	pop	{r4, r5}
60002168:	bx	lr
6000216a:	nop
6000216c:	.word	0x400fc000
60002170:	.word	0x400c4000
60002174:	.word	0x400c8000
60002178:	.word	0x200026f1

6000217c <usb_string_product_name_default>:
6000217c:	..T.e.e.n.s.y. .
6000218c:	A.u.d.i.o...

60002198 <usb_string_manufacturer_name_default>:
60002198:	..T.e.e.n.s.y.d.
600021a8:	u.i.n.o.

600021b0 <string0>:
600021b0:	....

600021b4 <usb_config_descriptor_12>:
600021b4:	........2.......
600021c4:	...!...."!.....@
600021d4:	...... .........
600021e4:	...........$...>
600021f4:	.....$..........
60002204:	.$........$.....
60002214:	......$.1.......
60002224:	$.....1.........
60002234:	...........$....
60002244:	..$......D......
60002254:	......%.........
60002264:	...............$
60002274:	......$......D..
60002284:	..........%.....
60002294:	............

600022a0 <usb_config_descriptor_480>:
600022a0:	........2.......
600022b0:	...!...."!.....@
600022c0:	...... .........
600022d0:	...........$...>
600022e0:	.....$..........
600022f0:	.$........$.....
60002300:	......$.1.......
60002310:	$.....1.........
60002320:	...........$....
60002330:	..$......D......
60002340:	......%.........
60002350:	...............$
60002360:	......$......D..
60002370:	..........%.....
60002380:	............

6000238c <qualifier_descriptor>:
6000238c:	.......@..

60002396 <_serialEvent_default>:
60002396:	..

60002398 <_init>:
60002398:	push	{r3, r4, r5, r6, r7, lr}
6000239a:	nop
6000239c:	pop	{r3, r4, r5, r6, r7}
6000239e:	pop	{r3}
600023a0:	mov	lr, r3
600023a2:	bx	lr
600023a4:			; <UNDEFINED> instruction: 0xffffffff

600023a8 <___ZN8SPIClass15pinIsChipSelectEh_veneer>:
600023a8:	ldr.w	pc, [pc]	; 600023ac <___ZN8SPIClass15pinIsChipSelectEh_veneer+0x4>
600023ac:	.word	0x000024c5

600023b0 <___ZN8SPIClass5beginEv_veneer>:
600023b0:	ldr.w	pc, [pc]	; 600023b4 <___ZN8SPIClass5beginEv_veneer+0x4>
600023b4:	.word	0x00002295

600023b8 <__pinMode_veneer>:
600023b8:	ldr.w	pc, [pc]	; 600023bc <__pinMode_veneer+0x4>
600023bc:	.word	0x000094d1

600023c0 <___ZN8SPIClass7setMOSIEh_veneer>:
600023c0:	ldr.w	pc, [pc]	; 600023c4 <___ZN8SPIClass7setMOSIEh_veneer+0x4>
600023c4:	.word	0x0000259d

600023c8 <___ZN8SPIClass5setCSEh_veneer>:
600023c8:	ldr.w	pc, [pc]	; 600023cc <___ZN8SPIClass5setCSEh_veneer+0x4>
600023cc:	.word	0x00002545

600023d0 <__digitalWrite_veneer>:
600023d0:	ldr.w	pc, [pc]	; 600023d4 <__digitalWrite_veneer+0x4>
600023d4:	.word	0x000094c5

600023d8 <__startup_late_hook_veneer>:
600023d8:	ldr.w	pc, [pc]	; 600023dc <__startup_late_hook_veneer+0x4>
600023dc:	.word	0x00009341

600023e0 <__delay_veneer>:
600023e0:	ldr.w	pc, [pc]	; 600023e4 <__delay_veneer+0x4>
600023e4:	.word	0x00009201

600023e8 <___ZN8SPIClass7setMISOEh_veneer>:
600023e8:	ldr.w	pc, [pc]	; 600023ec <___ZN8SPIClass7setMISOEh_veneer+0x4>
600023ec:	.word	0x00002609

600023f0 <__usb_seremu_write_veneer>:
600023f0:	ldr.w	pc, [pc]	; 600023f4 <__usb_seremu_write_veneer+0x4>
600023f4:	.word	0x000091b5

600023f8 <___ZN5Print6printfEPKcz_veneer>:
600023f8:	ldr.w	pc, [pc]	; 600023fc <___ZN5Print6printfEPKcz_veneer+0x4>
600023fc:	.word	0x00009b35

60002400 <___ZN8SPIClass8pinIsSCKEh_veneer>:
60002400:	ldr.w	pc, [pc]	; 60002404 <___ZN8SPIClass8pinIsSCKEh_veneer+0x4>
60002404:	.word	0x00002529

60002408 <___ZN8SPIClass9pinIsMOSIEh_veneer>:
60002408:	ldr.w	pc, [pc]	; 6000240c <___ZN8SPIClass9pinIsMOSIEh_veneer+0x4>
6000240c:	.word	0x000024f5

60002410 <___ZN8SPIClass9pinIsMISOEh_veneer>:
60002410:	ldr.w	pc, [pc]	; 60002414 <___ZN8SPIClass9pinIsMISOEh_veneer+0x4>
60002414:	.word	0x00002511

60002418 <__memset_veneer>:
60002418:	ldr.w	pc, [pc]	; 6000241c <__memset_veneer+0x4>
6000241c:	.word	0x0000af49

60002420 <__set_arm_clock_veneer>:
60002420:	ldr.w	pc, [pc]	; 60002424 <__set_arm_clock_veneer+0x4>
60002424:	.word	0x00007f31

60002428 <__usb_init_serialnumber_veneer>:
60002428:	ldr.w	pc, [pc]	; 6000242c <__usb_init_serialnumber_veneer+0x4>
6000242c:	.word	0x000092cd

60002430 <__main_veneer>:
60002430:	ldr.w	pc, [pc]	; 60002434 <__main_veneer+0x4>
60002434:	.word	0x0000a1a9

60002438 <____libc_init_array_veneer>:
60002438:	ldr.w	pc, [pc]	; 6000243c <____libc_init_array_veneer+0x4>
6000243c:	.word	0x0000a875

60002440 <___ZN8SPIClass6setSCKEh_veneer>:
60002440:	ldr.w	pc, [pc]	; 60002444 <___ZN8SPIClass6setSCKEh_veneer+0x4>
60002444:	.word	0x00002669

60002448 <__startup_early_hook_veneer>:
60002448:	ldr.w	pc, [pc]	; 6000244c <__startup_early_hook_veneer+0x4>
6000244c:	.word	0x0000933d

60002450 <___ZN5Print7printlnEv_veneer>:
60002450:	ldr.w	pc, [pc]	; 60002454 <___ZN5Print7printlnEv_veneer+0x4>
60002454:	.word	0x00009b05

60002458 <__usb_seremu_flush_output_veneer>:
60002458:	ldr.w	pc, [pc]	; 6000245c <__usb_seremu_flush_output_veneer+0x4>
6000245c:	.word	0x000091d1

60002460 <___ZN8SPIClass16beginTransactionE11SPISettings_veneer>:
60002460:	ldr.w	pc, [pc]	; 60002464 <___ZN8SPIClass16beginTransactionE11SPISettings_veneer+0x4>
60002464:	.word	0x00002d31

60002468 <__pwm_init_veneer>:
60002468:	ldr.w	pc, [pc]	; 6000246c <__pwm_init_veneer+0x4>
6000246c:	.word	0x00009551

60002470 <__init_array_start>:
60002470:	.word	0x00000045
60002474:	.word	0x000003cd
60002478:	.word	0x00000cd1
6000247c:	.word	0x00000ce9
60002480:	.word	0x00000d01
60002484:	.word	0x00000d19
60002488:	.word	0x00000dfd
6000248c:	.word	0x00000e15
60002490:	.word	0x00000e2d
60002494:	.word	0x00000e45
60002498:	.word	0x00000e5d
6000249c:	.word	0x00000e75
600024a0:	.word	0x00000e8d
600024a4:	.word	0x00000ea5
600024a8:	.word	0x00000ebd
600024ac:	.word	0x00000ed5
600024b0:	.word	0x000012fd
600024b4:	.word	0x00001315
600024b8:	.word	0x0000132d
600024bc:	.word	0x00001345
600024c0:	.word	0x0000135d
600024c4:	.word	0x00001375
600024c8:	.word	0x0000138d
600024cc:	.word	0x000013a5
600024d0:	.word	0x000013bd
600024d4:	.word	0x000013dd
600024d8:	.word	0x00002065

600024dc <__init_array_end>:
600024dc:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	ldrb	r3, [r4, #0]
      26:	.short	0xb933
	}
	__enable_irq();
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	movs	r3, #1
	in = inputQueue[index];
	inputQueue[index] = NULL;
	if (in && in->ref_count > 1) {
		p = allocate();
		if (p) memcpy(p->data, in->data, sizeof(p->data));
		in->ref_count--;
      34:	strb	r3, [r4, #0]
      36:	.short	0xbd10
      38:	subs	r0, r0, r1
      3a:	.short	0x2000
		in = p;
	}
	return in;
}
      3c:	movs	r0, r0
// be shared, so its contents may be changed.
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
      3e:	.short	0x0000
      40:	b.n	fffff90c <_flexram_bank_config+0x55554e5d>
	...

00000044 <frame_dummy>:
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
}
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      mode |= ADC_CFG_AVGS(1);
      64:	.word	0xbf004718
      mode1 |= ADC_CFG_AVGS(1);
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	subs	r4, r0, r1
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	movs	r0, #0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	b.n	fffff93c <_flexram_bank_config+0x55554e8d>
  ADC2_CFG = mode1;
      72:	movs	r0, r0
  
  if(num >= 4){
      74:	subs	r0, r0, r1
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	.short	0x2000
      78:	movs	r0, r0
	...

0000007c <Paavo::GUI::~GUI()>:
    public:
        GUI(AudioManager *ptrAudioManager)
        {
            am = ptrAudioManager;
        }
        ~GUI(){
      7c:	push	{r4, lr}
      7e:	mov	r4, r0
            tft.freeFrameBuffer();
      80:	adds	r0, #32
      82:	bl	3218 <ILI9341_t3n::freeFrameBuffer()>
#else
#define ILI9341_SPICLOCK 30000000
#define ILI9341_SPICLOCK_READ 2000000
#endif

class ILI9341_t3n : public Print {
      86:	ldr	r3, [pc, #16]	; (98 <Paavo::GUI::~GUI()+0x1c>)
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
		release();
      88:	add.w	r0, r4, #448	; 0x1c0
      8c:	str	r3, [r4, #32]
      8e:	bl	9998 <DMAChannel::release()>
        }
      92:	.short	0x4620
      94:	pop	{r4, pc}
      96:	.short	0xbf00
      98:	lsls	r0, r2, #13
      9a:	.short	0x2000

0000009c <AudioConvert_F32toI16::update()>:
class AudioConvert_F32toI16 : public AudioStream_F32 //receive Float and transmits Int
{
  //GUI: inputs:1, outputs:1  //this line used for automatic generation of GUI node
  public:
    AudioConvert_F32toI16(void) : AudioStream_F32(1, inputQueueArray_Float) {};
    void update(void) {
      9c:	push	{r4, r5, r6, lr}
      //get the float block
      audio_block_f32_t *float_block;
      float_block = AudioStream_F32::receiveReadOnly_f32(); //float data block
      9e:	.short	0x2100
class AudioConvert_F32toI16 : public AudioStream_F32 //receive Float and transmits Int
{
  //GUI: inputs:1, outputs:1  //this line used for automatic generation of GUI node
  public:
    AudioConvert_F32toI16(void) : AudioStream_F32(1, inputQueueArray_Float) {};
    void update(void) {
      a0:	sub	sp, #8
      a2:	.short	0x4605
      //get the float block
      audio_block_f32_t *float_block;
      float_block = AudioStream_F32::receiveReadOnly_f32(); //float data block
      a4:	bl	28cc <AudioStream_F32::receiveReadOnly_f32(unsigned int)>
      if (!float_block) return;
      a8:	cbz	r0, 114 <AudioConvert_F32toI16::update()+0x78>
      aa:	.short	0x4604

      //allocate a Int16 block
      audio_block_t *int_block;
      int_block = AudioStream::allocate(); 
      ac:	bl	a220 <AudioStream::allocate()>
      if (int_block == NULL) {
      b0:	mov	r6, r0
      b2:	cbz	r0, 108 <AudioConvert_F32toI16::update()+0x6c>
      	  AudioStream_F32::release(float_block);
      	  return;
      }
      
      //convert back to int16
      convertAudio_F32toI16(float_block, int_block, float_block->length);
      b4:	.word	0x3208f8d4
    };

   static void convertAudio_F32toI16(audio_block_f32_t *in, audio_block_t *out, int len) {
      //WEA Method.  Should look at CMSIS arm_float_to_q15 instead: https://www.keil.com/pack/doc/CMSIS/DSP/html/group__float__to__x.html#ga215456e35a18db86882e1d3f0d24e1f2	
      const float MAX_INT = 32678.0;
      for (int i = 0; i < len; i++) {
      b8:	cmp	r3, #0
      ba:	ble.n	f8 <AudioConvert_F32toI16::update()+0x5c>
      bc:	.word	0x1cb11c58
      c0:	adds	r3, r4, #4
        out->data[i] = (int16_t)(max(min( (in->data[i] * MAX_INT), MAX_INT), -MAX_INT));
      c2:	vldr	s14, [pc, #100]	; 128 <AudioConvert_F32toI16::update()+0x8c>
      c6:	add.w	r0, r4, r0, lsl #2
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
      ca:	vldr	s13, [pc, #96]	; 12c <AudioConvert_F32toI16::update()+0x90>
      ce:	vldmia	r3!, {s15}
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
      d2:	movw	r2, #32678	; 0x7fa6
      d6:	.short	0xee67
      d8:	ldrb	r7, [r0, #10]
      da:	.short	0xeef4
      dc:	ldrb	r7, [r0, #11]
      de:	.short	0xeef1
      e0:			; <UNDEFINED> instruction: 0xfa10d505
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
      e4:	.word	0x7ae6eef4
      e8:	ldr	r2, [pc, #68]	; (130 <AudioConvert_F32toI16::update()+0x94>)
      ea:	.short	0xeef1
      ec:			; <UNDEFINED> instruction: 0xfa10da13
    };

   static void convertAudio_F32toI16(audio_block_f32_t *in, audio_block_t *out, int len) {
      //WEA Method.  Should look at CMSIS arm_float_to_q15 instead: https://www.keil.com/pack/doc/CMSIS/DSP/html/group__float__to__x.html#ga215456e35a18db86882e1d3f0d24e1f2	
      const float MAX_INT = 32678.0;
      for (int i = 0; i < len; i++) {
      f0:	.word	0xf8214283
        out->data[i] = (int16_t)(max(min( (in->data[i] * MAX_INT), MAX_INT), -MAX_INT));
      f4:	cmp	r7, #2
    };

   static void convertAudio_F32toI16(audio_block_f32_t *in, audio_block_t *out, int len) {
      //WEA Method.  Should look at CMSIS arm_float_to_q15 instead: https://www.keil.com/pack/doc/CMSIS/DSP/html/group__float__to__x.html#ga215456e35a18db86882e1d3f0d24e1f2	
      const float MAX_INT = 32678.0;
      for (int i = 0; i < len; i++) {
      f6:	bne.n	ce <AudioConvert_F32toI16::update()+0x32>
      
      //convert back to int16
      convertAudio_F32toI16(float_block, int_block, float_block->length);

      //return audio to the system
      AudioStream::transmit(int_block);
      f8:	mov	r0, r5
      fa:	movs	r2, #0
      fc:	mov	r1, r6
      fe:	bl	a31c <AudioStream::transmit(audio_block_struct*, unsigned char)>
      AudioStream::release(int_block);
     102:	mov	r0, r6
     104:	bl	a2c8 <AudioStream::release(audio_block_struct*)>
      AudioStream_F32::release(float_block);
     108:	mov	r0, r4
    };
     10a:	add	sp, #8
     10c:	ldmia.w	sp!, {r4, r5, r6, lr}
      convertAudio_F32toI16(float_block, int_block, float_block->length);

      //return audio to the system
      AudioStream::transmit(int_block);
      AudioStream::release(int_block);
      AudioStream_F32::release(float_block);
     110:	.word	0xbb9ef002
    };
     114:	add	sp, #8
     116:	pop	{r4, r5, r6, pc}
     118:	vcvt.s32.f32	s15, s15
     11c:	vstr	s15, [sp, #4]
     120:	ldrsh.w	r2, [sp, #4]
     124:	.word	0xbf00e7e4
     128:	ldr	r4, [pc, #0]	; (12c <AudioConvert_F32toI16::update()+0x90>)
     12a:	.short	0x46ff
     12c:	ldr	r4, [pc, #0]	; (130 <AudioConvert_F32toI16::update()+0x94>)
     12e:	.short	0xc6ff
     130:	strh	r2, [r3, #2]
     132:	Address 0x00000132 is out of bounds.


00000134 <AudioConvert_I16toF32::update()>:
  //GUI: inputs:1, outputs:1  //this line used for automatic generation of GUI node
  public:
    AudioConvert_I16toF32(void) : AudioStream_F32(1, inputQueueArray_f32) { };
	AudioConvert_I16toF32(const AudioSettings_F32 &settings) : AudioStream_F32(1, inputQueueArray_f32) { };
	
    void update(void) {	
     134:	.word	0x2100b5f8
     138:	mov	r6, r0
      //get the Int16 block
      audio_block_t *int_block;
      int_block = AudioStream::receiveReadOnly(); //int16 data block
     13a:	.short	0xf00a
     13c:	vst2.16	{d11-d14}, [r9 :64], r0
      if (int_block==NULL) return;
     140:	.word	0xf0024607

      //allocate a float block
      audio_block_f32_t *float_block;
      float_block = AudioStream_F32::allocate_f32(); 
     144:	smlawb	r6, r9, r5, r4
      if (float_block == NULL) {
     148:	.word	0xf8d0b300
      	  AudioStream::release(int_block);
      	  return;
      }
      
      //convert to float
      convertAudio_I16toF32(int_block, float_block, float_block->length);
     14c:	movs	r2, #8
     14e:	.short	0x1d01
    };
    
    static void convertAudio_I16toF32(audio_block_t *in, audio_block_f32_t *out, int len) {
      //WEA Method.  Should look at CMSIS arm_q15_to_float instead: https://www.keil.com/pack/doc/CMSIS/DSP/html/group__q15__to__x.html#gaf8b0d2324de273fc430b0e61ad4e9eb2
      const float MAX_INT = 32678.0;
      for (int i = 0; i < len; i++) out->data[i] = (float)(in->data[i]);
     150:	cmp	r2, #0
     152:	.short	0xdd0e
     154:	adds	r4, r2, #1
     156:	.short	0x1cb8
     158:	mov	r3, r1
     15a:	.short	0xeb05
     15c:	lsls	r4, r0, #18
     15e:	.short	0xf930
     160:	vceq.f32	d14, d2, d7
     164:	.word	0xeef8ea90
     168:	ldrb	r7, [r4, #11]
     16a:	.short	0xece3
     16c:	ldrb	r1, [r0, #8]
     16e:	cmp	r3, r4
     170:	bne.n	15e <AudioConvert_I16toF32::update()+0x2a>
      arm_scale_f32(out->data, 1.0/MAX_INT, out->data, out->length); //divide by 32678 to get -1.0 to +1.0
     172:	.short	0x4608
     174:	vldr	s0, [pc, #32]	; 198 <AudioConvert_I16toF32::update()+0x64>
     178:	bl	a49c <arm_scale_f32>
      
      //convert to float
      convertAudio_I16toF32(int_block, float_block, float_block->length);

      //transmit the audio and return it to the system
      AudioStream_F32::transmit(float_block,0);
     17c:	mov	r0, r6
     17e:	movs	r2, #0
     180:	mov	r1, r5
     182:	bl	2898 <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)>
      AudioStream_F32::release(float_block);
     186:	mov	r0, r5
     188:	bl	2850 <AudioStream_F32::release(audio_block_f32_t*)>
      AudioStream::release(int_block);
     18c:	mov	r0, r7
    };
     18e:	.short	0xe8bd
     190:	lsrs	r0, r7
      convertAudio_I16toF32(int_block, float_block, float_block->length);

      //transmit the audio and return it to the system
      AudioStream_F32::transmit(float_block,0);
      AudioStream_F32::release(float_block);
      AudioStream::release(int_block);
     192:	b.w	a2c8 <AudioStream::release(audio_block_struct*)>
     196:	.short	0xbdf8
     198:	ldrh	r7, [r7, r0]
     19a:	.short	0x3800

0000019c <Paavo::AudioManager::AudioManager()>:
#include <Audio.h>
#include <OpenAudio_ArduinoLibrary.h>

namespace Paavo
{
    class AudioManager
     19c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     1a0:	.word	0x22044604
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     1a4:	movs	r0, #0

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     1a6:	.short	0x4f6e
#include "DMAChannel.h"

class AudioOutputI2SQuad : public AudioStream
{
public:
	AudioOutputI2SQuad(void) : AudioStream(4, inputQueueArray) { begin(); }
     1a8:	add.w	r5, r4, #24
     1ac:	.word	0x46037262
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     1b0:	mov	r1, r0
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
     1b2:	.short	0x462a

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     1b4:	str	r5, [r4, #16]
			active = false;
     1b6:	.short	0x7220
			destination_list = NULL;
     1b8:	str	r0, [r4, #12]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     1ba:	str	r7, [r4, #0]
     1bc:	.word	0x6922e000
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     1c0:	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     1c4:	.word	0x7a623301
     1c8:	cmp	r2, r3
     1ca:	bgt.n	1be <Paavo::AudioManager::AudioManager()+0x22>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     1cc:	ldr	r5, [pc, #404]	; (364 <Paavo::AudioManager::AudioManager()+0x1c8>)
     1ce:	.short	0x682a
     1d0:	cbnz	r2, 1d6 <Paavo::AudioManager::AudioManager()+0x3a>
     1d2:	.short	0xe0c1
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     1d4:	mov	r2, r3
     1d6:	ldr	r3, [r2, #20]
     1d8:	cmp	r3, #0
     1da:	bne.n	1d4 <Paavo::AudioManager::AudioManager()+0x38>
				p->next_update = this;
     1dc:	.word	0x26006154
     1e0:	ldr	r3, [pc, #388]	; (368 <Paavo::AudioManager::AudioManager()+0x1cc>)
     1e2:	.short	0x4620
     1e4:	add.w	r9, r4, #260	; 0x104
			}
			next_update = NULL;
     1e8:	.word	0x80a66166
			cpu_cycles = 0;
			cpu_cycles_max = 0;
     1ec:	strh	r6, [r4, #6]
			numConnections = 0;
     1ee:	strb	r6, [r4, #10]
     1f0:	.word	0xf0006023
     1f4:			; <UNDEFINED> instruction: 0xfff5f8df
     1f8:	.word	0x46308178
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     1fc:	add.w	r3, r4, #84	; 0x54

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     200:	.word	0xf8df2601
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     204:	add	r1, pc, #384	; (adr r1, 388 <setup+0x10>)
     206:	.short	0xf1a3
     208:	lsrs	r0, r1, #12
     20a:	.short	0xf1a3
     20c:	lsrs	r4, r5, #16
     20e:	.short	0xf1a3
     210:	lsrs	r4, r0, #24
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
     212:	.short	0x2200
     214:	mov	r1, fp

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     216:	.short	0xf843
     218:	ldrb	r4, [r5, #16]
     21a:	.short	0xf803
     21c:	ldr	r3, [r4, #64]	; 0x40
			active = false;
     21e:	.short	0xf803
     220:	lsrs	r4, r4, #16
			destination_list = NULL;
     222:	.short	0xf843
     224:	lsrs	r0, r4, #16

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     226:	.short	0xf843
     228:	pop	{r2, r3, r4}
     22a:	b.n	230 <Paavo::AudioManager::AudioManager()+0x94>
     22c:	.word	0x1c1cf853
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     230:	str.w	r0, [r1, r2, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     234:	.word	0xf8133201
     238:	adds	r3, r4, #0
     23a:	cmp	r1, r2
     23c:	.word	0x6829dcf6
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     240:	cbnz	r1, 246 <Paavo::AudioManager::AudioManager()+0xaa>
     242:	.short	0xe083
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     244:	mov	r1, r2
     246:	.short	0x694a
     248:	cmp	r2, #0
     24a:	.short	0xd1fb
				p->next_update = this;
     24c:	str.w	ip, [r1, #20]
			}
			next_update = NULL;
     250:	.word	0x0c18f843
     254:	adds	r3, #44	; 0x2c
			cpu_cycles = 0;
     256:	.short	0xf823
     258:	lsrs	r4, r2, #17
			cpu_cycles_max = 0;
     25a:	.short	0xf823
     25c:	lsrs	r2, r2, #17
			numConnections = 0;
     25e:	.short	0xf803
     260:	lsrs	r6, r1, #17


class AudioStream_F32 : public AudioStream {
  public:
    AudioStream_F32(unsigned char n_input_f32, audio_block_f32_t **iqueue) : AudioStream(1, inputQueueArray_i16), 
        num_inputs_f32(n_input_f32), inputQueue_f32(iqueue) {
     262:	.short	0xf803
     264:	ldr	r0, [r0, #68]	; 0x44
     266:	str.w	lr, [r3, #-56]
      //active_f32 = false;
      destination_list_f32 = NULL;
     26a:	.short	0xf843
     26c:	lsrs	r4, r7, #16
      for (int i=0; i < n_input_f32; i++) {
        inputQueue_f32[i] = NULL;
     26e:	.short	0xf843
     270:	lsrs	r0, r6, #16

class AudioConvert_F32toI16 : public AudioStream_F32 //receive Float and transmits Int
{
  //GUI: inputs:1, outputs:1  //this line used for automatic generation of GUI node
  public:
    AudioConvert_F32toI16(void) : AudioStream_F32(1, inputQueueArray_Float) {};
     272:	str.w	r8, [r3, #-88]
     276:	cmp	r3, r9
     278:	bne.n	206 <Paavo::AudioManager::AudioManager()+0x6a>
     27a:	.short	0xf504
     27c:	ldrb	r6, [r5, #6]
     27e:	.short	0xf8df
     280:	strh	r4, [r6, #6]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     282:	movs	r6, #1
			active = false;
     284:	.word	0xf8df2000
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     288:	add	r0, pc, #880	; (adr r0, 5fc <Paavo::GUI::init()+0x1c4>)
     28a:	.short	0xf1a3
     28c:	lsrs	r0, r1, #12
     28e:	.short	0xf1a3
     290:	lsrs	r4, r5, #16
     292:	.short	0xf1a3
     294:	lsrs	r4, r0, #24
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
     296:	.short	0x2200
     298:	mov	r1, fp

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     29a:	.short	0xf843
     29c:	ldrb	r4, [r5, #16]
     29e:	.short	0xf803
     2a0:	ldr	r3, [r4, #64]	; 0x40
			active = false;
     2a2:	strb.w	r0, [r3, #-36]
			destination_list = NULL;
     2a6:	.short	0xf843
     2a8:	lsrs	r0, r4, #16

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     2aa:	str.w	fp, [r3, #-28]
     2ae:	.short	0xe001
     2b0:	ldr.w	r1, [r3, #-28]
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     2b4:	.word	0x0022f841
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     2b8:	adds	r2, #1
     2ba:	.short	0xf813
     2bc:	adds	r3, r4, #0
     2be:	.short	0x4291
     2c0:	bgt.n	2b0 <Paavo::AudioManager::AudioManager()+0x114>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     2c2:	.short	0x6829
     2c4:	cbnz	r1, 2ca <Paavo::AudioManager::AudioManager()+0x12e>
     2c6:	.short	0xe044
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     2c8:	mov	r1, r2
     2ca:	ldr	r2, [r1, #20]
     2cc:	cmp	r2, #0
     2ce:	bne.n	2c8 <Paavo::AudioManager::AudioManager()+0x12c>
				p->next_update = this;
     2d0:	str.w	ip, [r1, #20]
			}
			next_update = NULL;
     2d4:	str.w	r0, [r3, #-24]
     2d8:	.word	0xf823332c
			cpu_cycles = 0;
     2dc:	lsrs	r4, r2, #17
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
     2de:	movs	r1, #0
			cpu_cycles = 0;
			cpu_cycles_max = 0;
     2e0:	.word	0x0c52f823
			numConnections = 0;
     2e4:	strb.w	r0, [r3, #-78]


class AudioStream_F32 : public AudioStream {
  public:
    AudioStream_F32(unsigned char n_input_f32, audio_block_f32_t **iqueue) : AudioStream(1, inputQueueArray_i16), 
        num_inputs_f32(n_input_f32), inputQueue_f32(iqueue) {
     2e8:	strb.w	r6, [r3, #-64]
     2ec:	.word	0xec38f843
      //active_f32 = false;
      destination_list_f32 = NULL;
     2f0:	str.w	r0, [r3, #-60]
      for (int i=0; i < n_input_f32; i++) {
        inputQueue_f32[i] = NULL;
     2f4:	str.w	r0, [r3, #-48]

class AudioConvert_I16toF32 : public AudioStream_F32 //receive Int and transmits Float
{
  //GUI: inputs:1, outputs:1  //this line used for automatic generation of GUI node
  public:
    AudioConvert_I16toF32(void) : AudioStream_F32(1, inputQueueArray_f32) { };
     2f8:	.word	0x8c58f843
     2fc:	cmp	r3, r9
     2fe:	.short	0xd1c4
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     300:	ldr	r2, [r5, #0]
     302:	.short	0xf504
     304:	strb	r0, [r3, #2]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     306:	.short	0xf8c4
     308:	strb	r0, [r6, #4]
     30a:	.short	0xf884
     30c:	asrs	r1, r7, #4
     30e:	.short	0xf8c4
     310:	asrs	r0, r0, #5
			active = false;
     312:	.short	0xf884
     314:	asrs	r0, r7, #4
			destination_list = NULL;
     316:	.short	0xf8c4
     318:	asrs	r4, r7, #4
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     31a:	.short	0x4b12
     31c:	cbnz	r2, 322 <Paavo::AudioManager::AudioManager()+0x186>
     31e:	.short	0xe01d
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     320:	mov	r2, r3
     322:	ldr	r3, [r2, #20]
     324:	cmp	r3, #0
     326:	bne.n	320 <Paavo::AudioManager::AudioManager()+0x184>
				p->next_update = this;
     328:	str	r0, [r2, #20]
			}
			next_update = NULL;
     32a:	movs	r3, #0
#include "AudioStream.h"

class AudioInputUSB : public AudioStream
{
public:
	AudioInputUSB(void) : AudioStream(0, NULL) { begin(); }
     32c:	.word	0xf8c44a0f
     330:	adds	r1, #68	; 0x44
			cpu_cycles = 0;
     332:	.short	0xf8a4
     334:	adds	r1, #52	; 0x34
			cpu_cycles_max = 0;
     336:	strh.w	r3, [r4, #310]	; 0x136
			numConnections = 0;
     33a:	.short	0xf884
     33c:	adds	r1, #58	; 0x3a
     33e:	.short	0xf8c4
     340:	movs	r1, #48	; 0x30
     342:	bl	9cc8 <AudioInputUSB::begin()>
     346:	.short	0x4620
     348:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
     34c:	.word	0xc000f8ca
     350:	b.n	250 <Paavo::AudioManager::AudioManager()+0xb4>
     352:	.short	0xf8ca
     354:	stmia	r0!, {}
     356:	.short	0xe7bd
     358:	str	r4, [r5, #0]
     35a:	b.n	1de <Paavo::AudioManager::AudioManager()+0x42>
     35c:	str	r0, [r3, #0]
     35e:	b.n	32a <Paavo::AudioManager::AudioManager()+0x18e>
     360:	movs	r0, r1
     362:	.short	0x2000
     364:	movs	r6, #80	; 0x50
     366:	.short	0x2000
     368:	lsls	r0, r0, #2
     36a:	.short	0x2000
     36c:	lsrs	r0, r0, #18
     36e:	movs	r0, #0
     370:	movs	r0, r4
     372:	.short	0x2000
     374:	movs	r4, r2
     376:	.short	0x2000

00000378 <setup>:

Paavo::AudioManager am;
Paavo::GUI gui(&am);

void setup(void)
{
     378:	push	{r3, lr}
  Serial.begin(1);
  delay(1000);
     37a:	.short	0xf44f
     37c:	strb	r2, [r7, #1]
     37e:	.short	0xf008
     380:	vbif	d2, d15, d3
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
     384:	.word	0xf0084806
     388:	vsub.i16	d4, d5, d6
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     38c:	.word	0xfbbaf009
  Serial.println(F("Paavo starttaileepi"));
  am.init();
     390:	ldr	r0, [pc, #20]	; (3a8 <setup+0x30>)
     392:	.short	0xf000
     394:	mla	r8, fp, r5, r4
  gui.init();
}
     398:	.word	0x4008e8bd
{
  Serial.begin(1);
  delay(1000);
  Serial.println(F("Paavo starttaileepi"));
  am.init();
  gui.init();
     39c:	b.w	438 <Paavo::GUI::init()>
     3a0:	movs	r4, r4
     3a2:	.short	0x2000
     3a4:	asrs	r4, r5, #1
     3a6:	movs	r0, #0
     3a8:	subs	r4, r3, r1
     3aa:	.short	0x2000
     3ac:	subs	r0, r4, r7
     3ae:	.short	0x2000

000003b0 <loop>:
}

void loop(void)
{
     3b0:	push	{r3, lr}
#if SYNTH_DEBUG > 0
  debug.update();
     3b2:	.short	0x4804
     3b4:	bl	ca4 <OADebug::update()>
#endif
gui.update();
     3b8:	.word	0xe8bd4803

     3bc:	ands	r0, r1
void loop(void)
{
#if SYNTH_DEBUG > 0
  debug.update();
#endif
gui.update();
     3be:	.short	0xf000
     3c0:	rev	r3, r5
     3c2:	nop
     3c4:	.word	0x20001bcc
     3c8:	subs	r0, r4, r7
     3ca:	.short	0x2000

000003cc <_GLOBAL__sub_I_debug>:

     3cc:	push	{r4, r5, r6, r7, lr}
#if SYNTH_DEBUG > 0
#include "inc/OADebug.h"
OADebug debug;
#endif

Paavo::AudioManager am;
     3ce:	.short	0x4d14
#if SYNTH_DEBUG > 0
  debug.update();
#endif
gui.update();

     3d0:	sub	sp, #20
#if SYNTH_DEBUG > 0
#include "inc/OADebug.h"
OADebug debug;
#endif

Paavo::AudioManager am;
     3d2:	.short	0x4e14
{
    class GUI
    {
    public:
        GUI(AudioManager *ptrAudioManager)
        {
     3d4:	movs	r7, #0
     3d6:	.short	0x4c14
     3d8:	mov	r0, r5
     3da:	bl	19c <Paavo::AudioManager::AudioManager()>
     3de:	mov	r2, r6
     3e0:	.word	0x49124628
     3e4:	bl	a508 <__aeabi_atexit>
     3e8:	.word	0x230c4620
     3ec:	movs	r2, #13
     3ee:	.short	0x210b
     3f0:	strb.w	r7, [r0], #32
     3f4:	.word	0x23089302
     3f8:	str	r2, [sp, #4]
     3fa:	.short	0x2209
     3fc:	str	r1, [sp, #0]
     3fe:	.short	0x210a
     400:	bl	3074 <ILI9341_t3n::ILI9341_t3n(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     404:	.word	0x46324b0a
Paavo::GUI gui(&am);
     408:	mov	r0, r4
     40a:	.short	0x681b
     40c:	ldr	r1, [pc, #36]	; (434 <_GLOBAL__sub_I_debug+0x68>)
            am = ptrAudioManager;
     40e:	.short	0xf8c4
     410:	str	r4, [r4, r7]
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
     412:	.short	0xf8c4
     414:	adds	r1, #248	; 0xf8
#if SYNTH_DEBUG > 0
  debug.update();
#endif
gui.update();

     416:	.short	0xb005
     418:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#include "inc/OADebug.h"
OADebug debug;
#endif

Paavo::AudioManager am;
Paavo::GUI gui(&am);
     41c:	.word	0xb874f00a
     420:	subs	r4, r3, r1
     422:	.short	0x2000
     424:	lsrs	r0, r2, #28
     426:	.short	0x2000
     428:	subs	r0, r4, r7
     42a:	.short	0x2000
     42c:	lsrs	r5, r0, #5
     42e:	.short	0x0000
     430:	movs	r4, #136	; 0x88
     432:	.short	0x2000
     434:	lsls	r5, r7, #1
	...

00000438 <Paavo::GUI::init()>:
#include "inc/GUI.h"

void Paavo::GUI::init()
{
     438:	.word	0x4ff0e92d
     43c:	mov	r6, r0
     43e:	.short	0xb083
    tftFrameBuffer = new uint16_t[ILI9341_TFTHEIGHT * ILI9341_TFTWIDTH];
     440:	mov.w	r0, #153600	; 0x25800

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     444:	.word	0xb304f8df
    tft.begin(26000000);
     448:	add.w	r7, r6, #32
#include "inc/GUI.h"

void Paavo::GUI::init()
{
    tftFrameBuffer = new uint16_t[ILI9341_TFTHEIGHT * ILI9341_TFTWIDTH];
     44c:	.word	0xf822f00a
    tft.begin(26000000);
     450:	ldr	r2, [pc, #748]	; (740 <Paavo::GUI::init()+0x308>)
#include "inc/GUI.h"

void Paavo::GUI::init()
{
    tftFrameBuffer = new uint16_t[ILI9341_TFTHEIGHT * ILI9341_TFTWIDTH];
     452:	.short	0xf8c6
     454:	lsls	r0, r4, #7
    tft.begin(26000000);
     456:	.short	0x4638
     458:	ldr	r1, [pc, #744]	; (744 <Paavo::GUI::init()+0x30c>)
     45a:	.short	0xf00d
     45c:	vqshlu.s32	d20, d24, #17
    //tft.setRotation(1);
    tft.setFrameBuffer(tftFrameBuffer);
     460:	.word	0x11e0f8d6
     464:	bl	31a8 <ILI9341_t3n::setFrameBuffer(unsigned short*)>
    tft.useFrameBuffer(true);
     468:	.word	0x46382101
     46c:	bl	31bc <ILI9341_t3n::useFrameBuffer(bool)>
    delay(10);
     470:	.word	0xf008200a
     474:	cdp2	1, 12, cr2, cr5, cr0, {0}
    tft.fillScreen(ILI9341_BLACK);
     478:	mov	r0, r7
     47a:	bl	4cb8 <ILI9341_t3n::fillScreen(unsigned short)>
    tft.updateScreen();
     47e:	.short	0x4638
     480:	bl	3e0c <ILI9341_t3n::updateScreen()>
    osc[0] = new Oscilloscope(am->getMaster(0), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4);
     484:	.word	0xf8d62100
     488:	lsls	r4, r4, #7
     48a:	bl	b24 <Paavo::AudioManager::getMaster(unsigned char)>
     48e:	.short	0x9000
     490:	movs	r0, #60	; 0x3c
     492:	bl	a490 <operator new(unsigned int)>
     496:	mov	r4, r0
     498:	movs	r2, #1
			active = false;
     49a:	.short	0x2000
namespace Paavo
{
    class Oscilloscope : public AudioStream
    {
    public:
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height) : AudioStream(1, inputQueueArray)
     49c:	add.w	r1, r4, #28

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     4a0:	.word	0xb000f8c4
     4a4:	strb	r2, [r4, #9]
			active = false;
			destination_list = NULL;
     4a6:	mov	r3, r0
     4a8:	.word	0x6121460a
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     4ac:	strb	r0, [r4, #8]
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     4ae:	mov	r1, r0
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
     4b0:	str	r0, [r4, #12]
     4b2:	b.n	4b6 <Paavo::GUI::init()+0x7e>
     4b4:	ldr	r2, [r4, #16]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     4b6:	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     4ba:	adds	r3, #1
     4bc:	ldrb	r2, [r4, #9]
     4be:	cmp	r2, r3
     4c0:	bgt.n	4b4 <Paavo::GUI::init()+0x7c>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     4c2:	ldr.w	r8, [pc, #644]	; 748 <Paavo::GUI::init()+0x310>
     4c6:	ldr.w	r2, [r8]
     4ca:	cbnz	r2, 4d0 <Paavo::GUI::init()+0x98>
     4cc:	b.n	804 <Paavo::GUI::init()+0x3cc>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     4ce:	mov	r2, r3
     4d0:	ldr	r3, [r2, #20]
     4d2:	cmp	r3, #0
     4d4:	bne.n	4ce <Paavo::GUI::init()+0x96>
				p->next_update = this;
     4d6:	str	r4, [r2, #20]
     4d8:	ldr.w	sl, [pc, #628]	; 750 <Paavo::GUI::init()+0x318>
			}
			next_update = NULL;
     4dc:	movs	r5, #0
        {
            display = ptrDisplay;
            _width = width;
     4de:	mov.w	r1, #320	; 0x140
            _height = height;
     4e2:	movs	r2, #60	; 0x3c
     4e4:	ldr.w	r0, [sl]
            _offset_x = 0;
            _offset_y = 0;
            mapMaxY = height / 2;
     4e8:	movs	r3, #30
namespace Paavo
{
    class Oscilloscope : public AudioStream
    {
    public:
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height) : AudioStream(1, inputQueueArray)
     4ea:	ldr.w	r9, [pc, #616]	; 754 <Paavo::GUI::init()+0x31c>
     4ee:	str	r0, [r4, #56]	; 0x38
            _width = width;
            _height = height;
            _offset_x = 0;
            _offset_y = 0;
            mapMaxY = height / 2;
            oldPixelValue = new uint16_t[width]{};
     4f0:	mov.w	r0, #640	; 0x280
    {
    public:
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height) : AudioStream(1, inputQueueArray)
        {
            display = ptrDisplay;
            _width = width;
     4f4:	strh	r1, [r4, #36]	; 0x24
            _height = height;
     4f6:	strh	r2, [r4, #38]	; 0x26
    class Oscilloscope : public AudioStream
    {
    public:
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height) : AudioStream(1, inputQueueArray)
        {
            display = ptrDisplay;
     4f8:	str	r7, [r4, #32]
     4fa:	str	r5, [r4, #20]
			cpu_cycles = 0;
     4fc:	strh	r5, [r4, #4]
			cpu_cycles_max = 0;
     4fe:	strh	r5, [r4, #6]
			numConnections = 0;
     500:	strb	r5, [r4, #10]
namespace Paavo
{
    class Oscilloscope : public AudioStream
    {
    public:
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height) : AudioStream(1, inputQueueArray)
     502:	strb.w	r5, [r4, #52]	; 0x34
        {
            display = ptrDisplay;
            _width = width;
            _height = height;
            _offset_x = 0;
     506:	strh	r5, [r4, #40]	; 0x28
            _offset_y = 0;
     508:	strh	r5, [r4, #42]	; 0x2a
namespace Paavo
{
    class Oscilloscope : public AudioStream
    {
    public:
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height) : AudioStream(1, inputQueueArray)
     50a:	str.w	r9, [r4]
            display = ptrDisplay;
            _width = width;
            _height = height;
            _offset_x = 0;
            _offset_y = 0;
            mapMaxY = height / 2;
     50e:	strb.w	r3, [r4, #44]	; 0x2c
            oldPixelValue = new uint16_t[width]{};
     512:	bl	a494 <operator new[](unsigned int)>
     516:	mov	lr, r0
     518:	mov	r1, r5
     51a:	add.w	r0, r0, #640	; 0x280
     51e:	mov	r2, lr
     520:	movs	r5, #0
     522:	strh.w	r1, [r2], #2
     526:	cmp	r2, r0
     528:	mov	r3, r5
     52a:	bne.n	520 <Paavo::GUI::init()+0xe8>
     52c:	str.w	lr, [r4, #48]	; 0x30
            patchConverterOscilloscope = new AudioConnection(as, 0, *this, 0);
     530:	movs	r0, #20
     532:	str	r3, [sp, #4]
     534:	bl	a490 <operator new(unsigned int)>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     538:	ldr	r3, [sp, #0]
     53a:	strb	r5, [r0, #9]
     53c:	str	r5, [r0, #12]
		{ isConnected = false;
     53e:	str	r0, [sp, #0]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     540:	stmia.w	r0, {r3, r4}
     544:	ldr	r3, [sp, #4]
     546:	strb	r3, [r0, #8]
		{ isConnected = false;
     548:	strb	r3, [r0, #16]
		  connect(); }
     54a:	bl	a368 <AudioConnection::connect()>
     54e:	ldr	r2, [sp, #0]
    osc[1] = new Oscilloscope(am->getMaster(1), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4, 0, ILI9341_TFTWIDTH / 4);
     550:	movs	r1, #1
    tft.setFrameBuffer(tftFrameBuffer);
    tft.useFrameBuffer(true);
    delay(10);
    tft.fillScreen(ILI9341_BLACK);
    tft.updateScreen();
    osc[0] = new Oscilloscope(am->getMaster(0), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4);
     552:	str.w	r4, [r6, #488]	; 0x1e8
     556:	str	r2, [r4, #24]
    osc[1] = new Oscilloscope(am->getMaster(1), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4, 0, ILI9341_TFTWIDTH / 4);
     558:	ldr.w	r0, [r6, #484]	; 0x1e4
     55c:	bl	b24 <Paavo::AudioManager::getMaster(unsigned char)>
     560:	str	r0, [sp, #0]
     562:	movs	r0, #60	; 0x3c
     564:	bl	a490 <operator new(unsigned int)>
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     568:	ldr	r3, [sp, #4]
     56a:	mov	r4, r0
        }
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height, uint16_t offset_x, uint16_t offset_y) : AudioStream(1, inputQueueArray)
     56c:	add.w	r1, r0, #28

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     570:	mov.w	lr, #1
			active = false;
     574:	strb	r3, [r0, #8]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     576:	str.w	fp, [r0]
			active = false;
			destination_list = NULL;
     57a:	mov	r2, r5
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     57c:	mov	r0, r5
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
     57e:	str	r5, [r4, #12]
     580:	mov	r3, r1

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     582:	strb.w	lr, [r4, #9]
     586:	str	r1, [r4, #16]
     588:	b.n	58c <Paavo::GUI::init()+0x154>
     58a:	ldr	r3, [r4, #16]
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     58c:	str.w	r0, [r3, r2, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     590:	adds	r2, #1
     592:	ldrb	r3, [r4, #9]
     594:	cmp	r3, r2
     596:	bgt.n	58a <Paavo::GUI::init()+0x152>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     598:	ldr.w	r2, [r8]
     59c:	ldr	r3, [pc, #424]	; (748 <Paavo::GUI::init()+0x310>)
     59e:	cbnz	r2, 5a4 <Paavo::GUI::init()+0x16c>
     5a0:	b.n	80a <Paavo::GUI::init()+0x3d2>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     5a2:	mov	r2, r3
     5a4:	ldr	r3, [r2, #20]
     5a6:	cmp	r3, #0
     5a8:	bne.n	5a2 <Paavo::GUI::init()+0x16a>
				p->next_update = this;
     5aa:	str	r4, [r2, #20]
			}
			next_update = NULL;
     5ac:	movs	r5, #0
     5ae:	ldr.w	lr, [sl]
        {
            display = ptrDisplay;
            _width = width;
     5b2:	mov.w	r1, #320	; 0x140
            _height = height;
     5b6:	movs	r3, #60	; 0x3c
            _offset_x = offset_x;
            _offset_y = offset_y;
            mapMaxY = height / 2;
     5b8:	movs	r2, #30
     5ba:	str.w	lr, [r4, #56]	; 0x38
            patchConverterOscilloscope = new AudioConnection(as, 0, *this, 0);
        }
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height, uint16_t offset_x, uint16_t offset_y) : AudioStream(1, inputQueueArray)
        {
            display = ptrDisplay;
            _width = width;
     5be:	strh	r1, [r4, #36]	; 0x24
            _height = height;
            _offset_x = offset_x;
            _offset_y = offset_y;
            mapMaxY = height / 2;
            oldPixelValue = new uint16_t[width]{};
     5c0:	mov.w	r0, #640	; 0x280
            display = ptrDisplay;
            _width = width;
            _height = height;
            _offset_x = offset_x;
            _offset_y = offset_y;
            mapMaxY = height / 2;
     5c4:	strb.w	r2, [r4, #44]	; 0x2c
            _offset_y = 0;
            mapMaxY = height / 2;
            oldPixelValue = new uint16_t[width]{};
            patchConverterOscilloscope = new AudioConnection(as, 0, *this, 0);
        }
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height, uint16_t offset_x, uint16_t offset_y) : AudioStream(1, inputQueueArray)
     5c8:	str.w	r9, [r4]
        {
            display = ptrDisplay;
     5cc:	str	r7, [r4, #32]
     5ce:	str	r5, [r4, #20]
			cpu_cycles = 0;
     5d0:	strh	r5, [r4, #4]
			cpu_cycles_max = 0;
     5d2:	strh	r5, [r4, #6]
			numConnections = 0;
     5d4:	strb	r5, [r4, #10]
            _offset_y = 0;
            mapMaxY = height / 2;
            oldPixelValue = new uint16_t[width]{};
            patchConverterOscilloscope = new AudioConnection(as, 0, *this, 0);
        }
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height, uint16_t offset_x, uint16_t offset_y) : AudioStream(1, inputQueueArray)
     5d6:	strb.w	r5, [r4, #52]	; 0x34
        {
            display = ptrDisplay;
            _width = width;
            _height = height;
            _offset_x = offset_x;
     5da:	strh	r5, [r4, #40]	; 0x28
        }
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height, uint16_t offset_x, uint16_t offset_y) : AudioStream(1, inputQueueArray)
        {
            display = ptrDisplay;
            _width = width;
            _height = height;
     5dc:	strh	r3, [r4, #38]	; 0x26
            _offset_x = offset_x;
            _offset_y = offset_y;
     5de:	strh	r3, [r4, #42]	; 0x2a
            mapMaxY = height / 2;
            oldPixelValue = new uint16_t[width]{};
     5e0:	bl	a494 <operator new[](unsigned int)>
     5e4:	mov	lr, r0
     5e6:	mov	r1, r5
     5e8:	add.w	r0, r0, #640	; 0x280
     5ec:	mov	r2, lr
     5ee:	movs	r5, #0
     5f0:	strh.w	r1, [r2], #2
     5f4:	cmp	r2, r0
     5f6:	mov	r3, r5
     5f8:	bne.n	5ee <Paavo::GUI::init()+0x1b6>
     5fa:	str.w	lr, [r4, #48]	; 0x30
            patchConverterOscilloscope = new AudioConnection(as, 0, *this, 0);
     5fe:	movs	r0, #20
     600:	str	r3, [sp, #4]
     602:	bl	a490 <operator new(unsigned int)>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     606:	ldr	r3, [sp, #0]
     608:	strb	r5, [r0, #9]
     60a:	str	r5, [r0, #12]
		{ isConnected = false;
     60c:	str	r0, [sp, #0]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     60e:	stmia.w	r0, {r3, r4}
     612:	ldr	r3, [sp, #4]
     614:	strb	r3, [r0, #8]
		{ isConnected = false;
     616:	strb	r3, [r0, #16]
		  connect(); }
     618:	bl	a368 <AudioConnection::connect()>
     61c:	ldr	r2, [sp, #0]
    osc[2] = new Oscilloscope(am->getMaster(2), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4, 0, ILI9341_TFTWIDTH / 2);
     61e:	movs	r1, #2
    tft.useFrameBuffer(true);
    delay(10);
    tft.fillScreen(ILI9341_BLACK);
    tft.updateScreen();
    osc[0] = new Oscilloscope(am->getMaster(0), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4);
    osc[1] = new Oscilloscope(am->getMaster(1), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4, 0, ILI9341_TFTWIDTH / 4);
     620:	str.w	r4, [r6, #492]	; 0x1ec
     624:	str	r2, [r4, #24]
    osc[2] = new Oscilloscope(am->getMaster(2), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4, 0, ILI9341_TFTWIDTH / 2);
     626:	ldr.w	r0, [r6, #484]	; 0x1e4
     62a:	bl	b24 <Paavo::AudioManager::getMaster(unsigned char)>
     62e:	str	r0, [sp, #0]
     630:	movs	r0, #60	; 0x3c
     632:	bl	a490 <operator new(unsigned int)>
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     636:	ldr	r3, [sp, #4]
     638:	mov	r4, r0
            _offset_y = 0;
            mapMaxY = height / 2;
            oldPixelValue = new uint16_t[width]{};
            patchConverterOscilloscope = new AudioConnection(as, 0, *this, 0);
        }
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height, uint16_t offset_x, uint16_t offset_y) : AudioStream(1, inputQueueArray)
     63a:	add.w	r1, r0, #28

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     63e:	mov.w	lr, #1
			active = false;
     642:	strb	r3, [r0, #8]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     644:	str.w	fp, [r0]
			active = false;
			destination_list = NULL;
     648:	mov	r2, r5
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     64a:	mov	r0, r5
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
     64c:	str	r5, [r4, #12]
     64e:	mov	r3, r1

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     650:	strb.w	lr, [r4, #9]
     654:	str	r1, [r4, #16]
     656:	b.n	65a <Paavo::GUI::init()+0x222>
     658:	ldr	r3, [r4, #16]
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     65a:	str.w	r0, [r3, r2, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     65e:	adds	r2, #1
     660:	ldrb	r3, [r4, #9]
     662:	cmp	r3, r2
     664:	bgt.n	658 <Paavo::GUI::init()+0x220>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     666:	ldr.w	r2, [r8]
     66a:	ldr	r3, [pc, #220]	; (748 <Paavo::GUI::init()+0x310>)
     66c:	cbnz	r2, 672 <Paavo::GUI::init()+0x23a>
     66e:	b.n	80e <Paavo::GUI::init()+0x3d6>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     670:	mov	r2, r3
     672:	ldr	r3, [r2, #20]
     674:	cmp	r3, #0
     676:	bne.n	670 <Paavo::GUI::init()+0x238>
				p->next_update = this;
     678:	str	r4, [r2, #20]
			}
			next_update = NULL;
     67a:	movs	r5, #0
     67c:	ldr.w	r0, [sl]
        {
            display = ptrDisplay;
            _width = width;
     680:	mov.w	lr, #320	; 0x140
            _height = height;
     684:	movs	r1, #60	; 0x3c
            _offset_x = offset_x;
            _offset_y = offset_y;
     686:	movs	r2, #120	; 0x78
            mapMaxY = height / 2;
     688:	movs	r3, #30
     68a:	str	r0, [r4, #56]	; 0x38
            oldPixelValue = new uint16_t[width]{};
     68c:	mov.w	r0, #640	; 0x280
            patchConverterOscilloscope = new AudioConnection(as, 0, *this, 0);
        }
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height, uint16_t offset_x, uint16_t offset_y) : AudioStream(1, inputQueueArray)
        {
            display = ptrDisplay;
            _width = width;
     690:	strh.w	lr, [r4, #36]	; 0x24
            _height = height;
     694:	strh	r1, [r4, #38]	; 0x26
            _offset_x = offset_x;
            _offset_y = offset_y;
     696:	strh	r2, [r4, #42]	; 0x2a
            _offset_y = 0;
            mapMaxY = height / 2;
            oldPixelValue = new uint16_t[width]{};
            patchConverterOscilloscope = new AudioConnection(as, 0, *this, 0);
        }
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height, uint16_t offset_x, uint16_t offset_y) : AudioStream(1, inputQueueArray)
     698:	str.w	r9, [r4]
        {
            display = ptrDisplay;
     69c:	str	r7, [r4, #32]
     69e:	str	r5, [r4, #20]
			cpu_cycles = 0;
     6a0:	strh	r5, [r4, #4]
			cpu_cycles_max = 0;
     6a2:	strh	r5, [r4, #6]
			numConnections = 0;
     6a4:	strb	r5, [r4, #10]
            _offset_y = 0;
            mapMaxY = height / 2;
            oldPixelValue = new uint16_t[width]{};
            patchConverterOscilloscope = new AudioConnection(as, 0, *this, 0);
        }
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height, uint16_t offset_x, uint16_t offset_y) : AudioStream(1, inputQueueArray)
     6a6:	strb.w	r5, [r4, #52]	; 0x34
        {
            display = ptrDisplay;
            _width = width;
            _height = height;
            _offset_x = offset_x;
     6aa:	strh	r5, [r4, #40]	; 0x28
            _offset_y = offset_y;
            mapMaxY = height / 2;
     6ac:	strb.w	r3, [r4, #44]	; 0x2c
            oldPixelValue = new uint16_t[width]{};
     6b0:	bl	a494 <operator new[](unsigned int)>
     6b4:	mov	lr, r0
     6b6:	mov	r1, r5
     6b8:	add.w	r0, r0, #640	; 0x280
     6bc:	mov	r2, lr
     6be:	movs	r5, #0
     6c0:	strh.w	r1, [r2], #2
     6c4:	cmp	r2, r0
     6c6:	mov	r3, r5
     6c8:	bne.n	6be <Paavo::GUI::init()+0x286>
     6ca:	str.w	lr, [r4, #48]	; 0x30
            patchConverterOscilloscope = new AudioConnection(as, 0, *this, 0);
     6ce:	movs	r0, #20
     6d0:	str	r3, [sp, #4]
     6d2:	bl	a490 <operator new(unsigned int)>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     6d6:	ldr	r3, [sp, #0]
     6d8:	strb	r5, [r0, #9]
     6da:	str	r5, [r0, #12]
		{ isConnected = false;
     6dc:	str	r0, [sp, #0]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     6de:	stmia.w	r0, {r3, r4}
     6e2:	ldr	r3, [sp, #4]
     6e4:	strb	r3, [r0, #8]
		{ isConnected = false;
     6e6:	strb	r3, [r0, #16]
		  connect(); }
     6e8:	bl	a368 <AudioConnection::connect()>
     6ec:	ldr	r2, [sp, #0]
    osc[3] = new Oscilloscope(am->getMaster(3), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4, 0, (ILI9341_TFTWIDTH / 2) + (ILI9341_TFTWIDTH / 4));
     6ee:	movs	r1, #3
    delay(10);
    tft.fillScreen(ILI9341_BLACK);
    tft.updateScreen();
    osc[0] = new Oscilloscope(am->getMaster(0), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4);
    osc[1] = new Oscilloscope(am->getMaster(1), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4, 0, ILI9341_TFTWIDTH / 4);
    osc[2] = new Oscilloscope(am->getMaster(2), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4, 0, ILI9341_TFTWIDTH / 2);
     6f0:	str.w	r4, [r6, #496]	; 0x1f0
     6f4:	str	r2, [r4, #24]
    osc[3] = new Oscilloscope(am->getMaster(3), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4, 0, (ILI9341_TFTWIDTH / 2) + (ILI9341_TFTWIDTH / 4));
     6f6:	ldr.w	r0, [r6, #484]	; 0x1e4
     6fa:	bl	b24 <Paavo::AudioManager::getMaster(unsigned char)>
     6fe:	str	r0, [sp, #0]
     700:	movs	r0, #60	; 0x3c
     702:	bl	a490 <operator new(unsigned int)>
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     706:	ldr	r3, [sp, #4]
     708:	mov	r4, r0

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     70a:	mov.w	lr, #1
            _offset_y = 0;
            mapMaxY = height / 2;
            oldPixelValue = new uint16_t[width]{};
            patchConverterOscilloscope = new AudioConnection(as, 0, *this, 0);
        }
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height, uint16_t offset_x, uint16_t offset_y) : AudioStream(1, inputQueueArray)
     70e:	adds	r0, #28
			active = false;
			destination_list = NULL;
     710:	mov	r1, r5
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     712:	strb	r3, [r4, #8]
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     714:	mov	r2, r5

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     716:	str.w	fp, [r4]
			active = false;
			destination_list = NULL;
     71a:	mov	r3, r0
     71c:	str	r5, [r4, #12]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     71e:	strb.w	lr, [r4, #9]
     722:	str	r0, [r4, #16]
     724:	b.n	728 <Paavo::GUI::init()+0x2f0>
     726:	ldr	r3, [r4, #16]
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     728:	str.w	r2, [r3, r1, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     72c:	adds	r1, #1
     72e:	ldrb	r3, [r4, #9]
     730:	cmp	r3, r1
     732:	bgt.n	726 <Paavo::GUI::init()+0x2ee>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     734:	ldr.w	r1, [r8]
     738:	ldr	r3, [pc, #12]	; (748 <Paavo::GUI::init()+0x310>)
     73a:	cbnz	r1, 75a <Paavo::GUI::init()+0x322>
     73c:	b.n	812 <Paavo::GUI::init()+0x3da>
     73e:	nop
     740:	.word	0x001e8480
     744:	.word	0x018cba80
     748:	.word	0x20002650
     74c:	.word	0x20000008
     750:	.word	0x20002488
     754:	.word	0x20000040
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     758:	mov	r1, r3
     75a:	ldr	r3, [r1, #20]
     75c:	cmp	r3, #0
     75e:	bne.n	758 <Paavo::GUI::init()+0x320>
				p->next_update = this;
     760:	str	r4, [r1, #20]
     762:	ldr.w	r3, [sl]
			}
			next_update = NULL;
     766:	movs	r5, #0
        {
            display = ptrDisplay;
            _width = width;
            _height = height;
            _offset_x = offset_x;
            _offset_y = offset_y;
     768:	movs	r1, #180	; 0xb4
            patchConverterOscilloscope = new AudioConnection(as, 0, *this, 0);
        }
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height, uint16_t offset_x, uint16_t offset_y) : AudioStream(1, inputQueueArray)
        {
            display = ptrDisplay;
            _width = width;
     76a:	mov.w	ip, #320	; 0x140
            _height = height;
     76e:	mov.w	lr, #60	; 0x3c
     772:	str	r3, [r4, #56]	; 0x38
            _offset_x = offset_x;
            _offset_y = offset_y;
            mapMaxY = height / 2;
     774:	movs	r3, #30
        {
            display = ptrDisplay;
            _width = width;
            _height = height;
            _offset_x = offset_x;
            _offset_y = offset_y;
     776:	strh	r1, [r4, #42]	; 0x2a
            _offset_y = 0;
            mapMaxY = height / 2;
            oldPixelValue = new uint16_t[width]{};
            patchConverterOscilloscope = new AudioConnection(as, 0, *this, 0);
        }
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height, uint16_t offset_x, uint16_t offset_y) : AudioStream(1, inputQueueArray)
     778:	str.w	r9, [r4]
            _width = width;
            _height = height;
            _offset_x = offset_x;
            _offset_y = offset_y;
            mapMaxY = height / 2;
            oldPixelValue = new uint16_t[width]{};
     77c:	mov.w	r0, #640	; 0x280
            display = ptrDisplay;
            _width = width;
            _height = height;
            _offset_x = offset_x;
            _offset_y = offset_y;
            mapMaxY = height / 2;
     780:	strb.w	r3, [r4, #44]	; 0x2c
            oldPixelValue = new uint16_t[width]{};
            patchConverterOscilloscope = new AudioConnection(as, 0, *this, 0);
        }
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height, uint16_t offset_x, uint16_t offset_y) : AudioStream(1, inputQueueArray)
        {
            display = ptrDisplay;
     784:	str	r7, [r4, #32]
     786:	str	r5, [r4, #20]
			cpu_cycles = 0;
     788:	strh	r5, [r4, #4]
			cpu_cycles_max = 0;
     78a:	strh	r5, [r4, #6]
			numConnections = 0;
     78c:	strb	r5, [r4, #10]
            _offset_y = 0;
            mapMaxY = height / 2;
            oldPixelValue = new uint16_t[width]{};
            patchConverterOscilloscope = new AudioConnection(as, 0, *this, 0);
        }
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height, uint16_t offset_x, uint16_t offset_y) : AudioStream(1, inputQueueArray)
     78e:	strb.w	r5, [r4, #52]	; 0x34
        {
            display = ptrDisplay;
            _width = width;
            _height = height;
            _offset_x = offset_x;
     792:	strh	r5, [r4, #40]	; 0x28
            patchConverterOscilloscope = new AudioConnection(as, 0, *this, 0);
        }
        Oscilloscope(AudioStream &as, ILI9341_t3n *ptrDisplay, uint16_t width, uint16_t height, uint16_t offset_x, uint16_t offset_y) : AudioStream(1, inputQueueArray)
        {
            display = ptrDisplay;
            _width = width;
     794:	strh.w	ip, [r4, #36]	; 0x24
            _height = height;
     798:	strh.w	lr, [r4, #38]	; 0x26
            _offset_x = offset_x;
            _offset_y = offset_y;
            mapMaxY = height / 2;
            oldPixelValue = new uint16_t[width]{};
     79c:	bl	a494 <operator new[](unsigned int)>
     7a0:	mov	r2, r0
     7a2:	mov	r1, r5
     7a4:	add.w	r0, r0, #640	; 0x280
     7a8:	mov	r3, r2
     7aa:	strh.w	r1, [r3], #2
     7ae:	cmp	r3, r0
     7b0:	mov.w	r5, #0
     7b4:	bne.n	7aa <Paavo::GUI::init()+0x372>
     7b6:	str	r2, [r4, #48]	; 0x30
            patchConverterOscilloscope = new AudioConnection(as, 0, *this, 0);
     7b8:	movs	r0, #20
     7ba:	bl	a490 <operator new(unsigned int)>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     7be:	ldr	r3, [sp, #0]
     7c0:	mov	r8, r0
     7c2:	stmia.w	r0, {r3, r4}
     7c6:	strb.w	r5, [r8, #8]
     7ca:	strb	r5, [r0, #9]
     7cc:	str	r5, [r0, #12]
		{ isConnected = false;
     7ce:	strb.w	r5, [r8, #16]
		  connect(); }
     7d2:	bl	a368 <AudioConnection::connect()>
    osc[0]->init();
     7d6:	ldr.w	r0, [r6, #488]	; 0x1e8
    tft.fillScreen(ILI9341_BLACK);
    tft.updateScreen();
    osc[0] = new Oscilloscope(am->getMaster(0), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4);
    osc[1] = new Oscilloscope(am->getMaster(1), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4, 0, ILI9341_TFTWIDTH / 4);
    osc[2] = new Oscilloscope(am->getMaster(2), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4, 0, ILI9341_TFTWIDTH / 2);
    osc[3] = new Oscilloscope(am->getMaster(3), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4, 0, (ILI9341_TFTWIDTH / 2) + (ILI9341_TFTWIDTH / 4));
     7da:	str.w	r4, [r6, #500]	; 0x1f4
     7de:	str.w	r8, [r4, #24]
    osc[0]->init();
     7e2:	bl	940 <Paavo::Oscilloscope::init()>
    osc[1]->init();
     7e6:	ldr.w	r0, [r6, #492]	; 0x1ec
     7ea:	bl	940 <Paavo::Oscilloscope::init()>
    osc[2]->init();
     7ee:	ldr.w	r0, [r6, #496]	; 0x1f0
     7f2:	bl	940 <Paavo::Oscilloscope::init()>
    osc[3]->init();
     7f6:	ldr.w	r0, [r6, #500]	; 0x1f4
}
     7fa:	add	sp, #12
     7fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    osc[2] = new Oscilloscope(am->getMaster(2), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4, 0, ILI9341_TFTWIDTH / 2);
    osc[3] = new Oscilloscope(am->getMaster(3), &tft, ILI9341_TFTHEIGHT, ILI9341_TFTWIDTH / 4, 0, (ILI9341_TFTWIDTH / 2) + (ILI9341_TFTWIDTH / 4));
    osc[0]->init();
    osc[1]->init();
    osc[2]->init();
    osc[3]->init();
     800:	b.w	940 <Paavo::Oscilloscope::init()>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
     804:	str.w	r4, [r8]
     808:	b.n	4d8 <Paavo::GUI::init()+0xa0>
     80a:	str	r4, [r3, #0]
     80c:	b.n	5ac <Paavo::GUI::init()+0x174>
     80e:	str	r4, [r3, #0]
     810:	b.n	67a <Paavo::GUI::init()+0x242>
     812:	str	r4, [r3, #0]
     814:	b.n	762 <Paavo::GUI::init()+0x32a>
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
     816:	nop

00000818 <Paavo::GUI::update()>:
     818:	ldr	r3, [pc, #28]	; (838 <Paavo::GUI::update()+0x20>)
}

void Paavo::GUI::update()
{
    if (lastScreenUpdate > 17 && !tft.asyncUpdateActive()) //50fps
     81a:	ldr.w	r2, [r0, #504]	; 0x1f8
     81e:	ldr	r3, [r3, #0]
     820:	subs	r3, r3, r2
     822:	cmp	r3, #17
     824:	bls.n	836 <Paavo::GUI::update()+0x1e>
  void dumpDMASettings();
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  uint16_t *getFrameBuffer() { return _pfbtft; }
  uint32_t frameCount() { return _dma_frame_count; }
  uint16_t subFrameCount() { return _dma_sub_frame_count; }
  boolean asyncUpdateActive(void) { return (_dma_state & ILI9341_DMA_ACTIVE); }
     826:	ldrb.w	r3, [r0, #244]	; 0xf4
     82a:	lsls	r3, r3, #24
     82c:	bmi.n	836 <Paavo::GUI::update()+0x1e>
        tft.updateScreenAsync();
     82e:	adds	r0, #32
     830:	movs	r1, #0
     832:	b.w	3238 <ILI9341_t3n::updateScreenAsync(bool)>
     836:	bx	lr
     838:	.word	0x20002488

0000083c <Paavo::Oscilloscope::AudioToPixel(short*)>:
#include "inc/oscilloscope.h"

namespace Paavo
{
    void Oscilloscope::AudioToPixel(int16_t *audio)
    {
     83c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if (!display || lastUpdate < SCOPE_UPDATE_INTERVAL)
     840:	ldr	r3, [r0, #32]
     842:	cmp	r3, #0
     844:	beq.n	8f8 <Paavo::Oscilloscope::AudioToPixel(short*)+0xbc>
     846:	ldr	r3, [pc, #192]	; (908 <Paavo::Oscilloscope::AudioToPixel(short*)+0xcc>)
     848:	ldr	r2, [r0, #56]	; 0x38
     84a:	ldr	r3, [r3, #0]
     84c:	subs	r3, r3, r2
     84e:	cmp	r3, #16
     850:	bls.n	8f8 <Paavo::Oscilloscope::AudioToPixel(short*)+0xbc>
     852:	mov	r9, r1
     854:	mov	r5, r0
            return;
        //const int16_t *begin = audio;
        const int16_t *end = audio + AUDIO_BLOCK_SAMPLES;
        static uint16_t pixel_x = 0;
        __disable_irq();
     856:	cpsid	i
     858:	ldr	r6, [pc, #176]	; (90c <Paavo::Oscilloscope::AudioToPixel(short*)+0xd0>)
     85a:	subs	r7, r1, #2
     85c:	add.w	r9, r9, #254	; 0xfe
     860:	ldr	r1, [r0, #48]	; 0x30
        do
        {
            int16_t pixel_y;
            int16_t wave_data = *audio;
            if (wave_data < -30000)
     862:	ldr.w	sl, [pc, #176]	; 914 <Paavo::Oscilloscope::AudioToPixel(short*)+0xd8>
     866:	mov.w	fp, #0
     86a:	b.n	8c6 <Paavo::Oscilloscope::AudioToPixel(short*)+0x8a>
     86c:	ldrh	r4, [r5, #38]	; 0x26
            else if (wave_data > 30000)
                pixel_y = _height;
            else
                pixel_y = map(wave_data, -30000, 30000, -mapMaxY, mapMaxY) + mapMaxY;
            pixel_y += _offset_y;
            pixel_x += _offset_x;
     86e:	ldrh	r0, [r6, #0]
            display->drawPixel(oldPixelValue[pixel_x], pixel_x, ILI9341_BLACK);
     870:	movs	r3, #0
            else if (wave_data > 30000)
                pixel_y = _height;
            else
                pixel_y = map(wave_data, -30000, 30000, -mapMaxY, mapMaxY) + mapMaxY;
            pixel_y += _offset_y;
            pixel_x += _offset_x;
     872:	ldrh.w	lr, [r5, #40]	; 0x28
                pixel_y = 0;
            else if (wave_data > 30000)
                pixel_y = _height;
            else
                pixel_y = map(wave_data, -30000, 30000, -mapMaxY, mapMaxY) + mapMaxY;
            pixel_y += _offset_y;
     876:	ldrh	r2, [r5, #42]	; 0x2a
            pixel_x += _offset_x;
     878:	add	lr, r0
            display->drawPixel(oldPixelValue[pixel_x], pixel_x, ILI9341_BLACK);
     87a:	ldr	r0, [r5, #32]
                pixel_y = 0;
            else if (wave_data > 30000)
                pixel_y = _height;
            else
                pixel_y = map(wave_data, -30000, 30000, -mapMaxY, mapMaxY) + mapMaxY;
            pixel_y += _offset_y;
     87c:	add	r4, r2
            pixel_x += _offset_x;
     87e:	ldr.w	r8, [pc, #140]	; 90c <Paavo::Oscilloscope::AudioToPixel(short*)+0xd0>
     882:	uxth.w	lr, lr
                pixel_y = 0;
            else if (wave_data > 30000)
                pixel_y = _height;
            else
                pixel_y = map(wave_data, -30000, 30000, -mapMaxY, mapMaxY) + mapMaxY;
            pixel_y += _offset_y;
     886:	uxth	r4, r4
            pixel_x += _offset_x;
            display->drawPixel(oldPixelValue[pixel_x], pixel_x, ILI9341_BLACK);
     888:	ldrsh.w	r1, [r1, lr, lsl #1]
     88c:	sxth.w	r2, lr
            else if (wave_data > 30000)
                pixel_y = _height;
            else
                pixel_y = map(wave_data, -30000, 30000, -mapMaxY, mapMaxY) + mapMaxY;
            pixel_y += _offset_y;
            pixel_x += _offset_x;
     890:	strh.w	lr, [r6]
            display->drawPixel(oldPixelValue[pixel_x], pixel_x, ILI9341_BLACK);
     894:	bl	439c <ILI9341_t3n::drawPixel(short, short, unsigned short)>
            display->drawPixel(pixel_y, pixel_x, ILI9341_WHITE);
     898:	sxth	r1, r4
     89a:	movw	r3, #65535	; 0xffff
     89e:	ldrsh.w	r2, [r6]
     8a2:	ldr	r0, [r5, #32]
     8a4:	bl	439c <ILI9341_t3n::drawPixel(short, short, unsigned short)>
            oldPixelValue[pixel_x] = pixel_y;
     8a8:	ldrh	r2, [r6, #0]
     8aa:	ldr	r1, [r5, #48]	; 0x30
            audio++;
            pixel_x++;
     8ac:	adds	r3, r2, #1
                pixel_y = map(wave_data, -30000, 30000, -mapMaxY, mapMaxY) + mapMaxY;
            pixel_y += _offset_y;
            pixel_x += _offset_x;
            display->drawPixel(oldPixelValue[pixel_x], pixel_x, ILI9341_BLACK);
            display->drawPixel(pixel_y, pixel_x, ILI9341_WHITE);
            oldPixelValue[pixel_x] = pixel_y;
     8ae:	strh.w	r4, [r1, r2, lsl #1]
            audio++;
            pixel_x++;
     8b2:	uxth	r3, r3
            if (pixel_x == _width)
     8b4:	ldrsh.w	r2, [r5, #36]	; 0x24
     8b8:	cmp	r3, r2
            pixel_x += _offset_x;
            display->drawPixel(oldPixelValue[pixel_x], pixel_x, ILI9341_BLACK);
            display->drawPixel(pixel_y, pixel_x, ILI9341_WHITE);
            oldPixelValue[pixel_x] = pixel_y;
            audio++;
            pixel_x++;
     8ba:	strh	r3, [r6, #0]
            if (pixel_x == _width)
                pixel_x = 0;
     8bc:	it	eq
     8be:	strheq.w	fp, [r8]
        } while (audio < end);
     8c2:	cmp	r9, r7
     8c4:	beq.n	8fc <Paavo::Oscilloscope::AudioToPixel(short*)+0xc0>
        static uint16_t pixel_x = 0;
        __disable_irq();
        do
        {
            int16_t pixel_y;
            int16_t wave_data = *audio;
     8c6:	ldrsh.w	r3, [r7, #2]!
            if (wave_data < -30000)
                pixel_y = 0;
            else if (wave_data > 30000)
     8ca:	movw	r2, #30000	; 0x7530
        __disable_irq();
        do
        {
            int16_t pixel_y;
            int16_t wave_data = *audio;
            if (wave_data < -30000)
     8ce:	movs	r4, #0
     8d0:	cmp	r3, sl
     8d2:	blt.n	86e <Paavo::Oscilloscope::AudioToPixel(short*)+0x32>
                pixel_y = 0;
            else if (wave_data > 30000)
                pixel_y = _height;
            else
                pixel_y = map(wave_data, -30000, 30000, -mapMaxY, mapMaxY) + mapMaxY;
     8d4:	mov	r4, r2
        {
            int16_t pixel_y;
            int16_t wave_data = *audio;
            if (wave_data < -30000)
                pixel_y = 0;
            else if (wave_data > 30000)
     8d6:	cmp	r3, r2
                pixel_y = _height;
            else
                pixel_y = map(wave_data, -30000, 30000, -mapMaxY, mapMaxY) + mapMaxY;
     8d8:	add	r4, r3
        {
            int16_t pixel_y;
            int16_t wave_data = *audio;
            if (wave_data < -30000)
                pixel_y = 0;
            else if (wave_data > 30000)
     8da:	bgt.n	86c <Paavo::Oscilloscope::AudioToPixel(short*)+0x30>
                pixel_y = _height;
            else
                pixel_y = map(wave_data, -30000, 30000, -mapMaxY, mapMaxY) + mapMaxY;
     8dc:	ldrb.w	r3, [r5, #44]	; 0x2c
     8e0:	lsls	r3, r3, #1
     8e2:	mla	r4, r3, r4, r4
     8e6:	ldr	r3, [pc, #40]	; (910 <Paavo::Oscilloscope::AudioToPixel(short*)+0xd4>)
     8e8:	smull	r3, r2, r3, r4
     8ec:	asrs	r3, r4, #31
     8ee:	add	r4, r2
     8f0:	rsb	r4, r3, r4, asr #15
     8f4:	uxth	r4, r4
     8f6:	b.n	86e <Paavo::Oscilloscope::AudioToPixel(short*)+0x32>
     8f8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8fc:	ldr	r3, [pc, #8]	; (908 <Paavo::Oscilloscope::AudioToPixel(short*)+0xcc>)
     8fe:	ldr	r3, [r3, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
     900:	str	r3, [r5, #56]	; 0x38
            pixel_x++;
            if (pixel_x == _width)
                pixel_x = 0;
        } while (audio < end);
        lastUpdate = 0;
        __enable_irq();
     902:	cpsie	i
     904:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     908:	.word	0x20002488
     90c:	.word	0x20001de0
     910:	.word	0x8bcecc31
     914:	.word	0xffff8ad0

00000918 <Paavo::Oscilloscope::update()>:
    {
    }

    void Oscilloscope::update(void)
    {
        if (!display)
     918:	ldr	r2, [r0, #32]
     91a:	cbz	r2, 93c <Paavo::Oscilloscope::update()+0x24>
            return;
        audio_block_t *block = NULL;

        block = receiveReadOnly(0);
     91c:	movs	r1, #0
    void Oscilloscope::init()
    {
    }

    void Oscilloscope::update(void)
    {
     91e:	push	{r3, r4, r5, lr}
     920:	mov	r4, r0
        if (!display)
            return;
        audio_block_t *block = NULL;

        block = receiveReadOnly(0);
     922:	bl	a350 <AudioStream::receiveReadOnly(unsigned int)>
        if (!block)
     926:	mov	r5, r0
     928:	cbz	r0, 93e <Paavo::Oscilloscope::update()+0x26>
            return;
        AudioToPixel(block->data);
     92a:	mov	r0, r4
     92c:	adds	r1, r5, #4
     92e:	bl	83c <Paavo::Oscilloscope::AudioToPixel(short*)>
        release(block);
     932:	mov	r0, r5
    }
     934:	ldmia.w	sp!, {r3, r4, r5, lr}

        block = receiveReadOnly(0);
        if (!block)
            return;
        AudioToPixel(block->data);
        release(block);
     938:	b.w	a2c8 <AudioStream::release(audio_block_struct*)>
     93c:	bx	lr
     93e:	pop	{r3, r4, r5, pc}

00000940 <Paavo::Oscilloscope::init()>:
        __enable_irq();
        return;
    }

    void Oscilloscope::init()
    {
     940:	bx	lr
    return (uint16_t)((result >> 16) | result); // contract result
  }
  void Pixel(int16_t x, int16_t y, uint16_t color)
      __attribute__((always_inline)) {
    x += _originx;
    y += _originy;
     942:	nop

00000944 <Paavo::AudioManager::~AudioManager()>:
#include "inc/AudioManager.h"
#include <Audio.h>
#include <OpenAudio_ArduinoLibrary.h>
namespace Paavo
{
    AudioManager::~AudioManager()
     944:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
        for (AudioConnection *ac : patchUsbToFloat)
     948:	add.w	r6, r0, #328	; 0x148
     94c:	add.w	r4, r0, #336	; 0x150
#include "inc/AudioManager.h"
#include <Audio.h>
#include <OpenAudio_ArduinoLibrary.h>
namespace Paavo
{
    AudioManager::~AudioManager()
     950:	mov	r7, r0
    {
        for (AudioConnection *ac : patchUsbToFloat)
     952:	cmp	r6, r4
     954:	beq.n	96e <Paavo::AudioManager::~AudioManager()+0x2a>
     956:	ldr.w	r5, [r6], #4
		next_dest(NULL)
		{ isConnected = false;
		  connect(); }
	friend class AudioStream;
	~AudioConnection() {
		disconnect();
     95a:	mov	r0, r5
            delete ac;
     95c:	cbz	r5, 96a <Paavo::AudioManager::~AudioManager()+0x26>
     95e:	bl	a3d0 <AudioConnection::disconnect()>
     962:	mov	r0, r5
     964:	movs	r1, #20
     966:	bl	a498 <operator delete(void*, unsigned int)>
#include <OpenAudio_ArduinoLibrary.h>
namespace Paavo
{
    AudioManager::~AudioManager()
    {
        for (AudioConnection *ac : patchUsbToFloat)
     96a:	cmp	r4, r6
     96c:	bne.n	956 <Paavo::AudioManager::~AudioManager()+0x12>
            delete ac;
        for (AudioConnection_F32 *ac : patch)
     96e:	add.w	r6, r7, #352	; 0x160
     972:	add.w	r8, r7, #368	; 0x170
     976:	cmp	r6, r8
     978:	beq.n	98a <Paavo::AudioManager::~AudioManager()+0x46>
     97a:	mov	r5, r6
            delete ac;
     97c:	ldr.w	r0, [r5], #4
     980:	movs	r1, #16
     982:	bl	a498 <operator delete(void*, unsigned int)>
{
    AudioManager::~AudioManager()
    {
        for (AudioConnection *ac : patchUsbToFloat)
            delete ac;
        for (AudioConnection_F32 *ac : patch)
     986:	cmp	r8, r5
     988:	bne.n	97c <Paavo::AudioManager::~AudioManager()+0x38>
            delete ac;
        for (AudioConnection *ac : patchFloatToOut)
     98a:	cmp	r4, r6
     98c:	beq.n	9a6 <Paavo::AudioManager::~AudioManager()+0x62>
     98e:	ldr.w	r5, [r4], #4
     992:	mov	r0, r5
            delete ac;
     994:	cbz	r5, 9a2 <Paavo::AudioManager::~AudioManager()+0x5e>
     996:	bl	a3d0 <AudioConnection::disconnect()>
     99a:	mov	r0, r5
     99c:	movs	r1, #20
     99e:	bl	a498 <operator delete(void*, unsigned int)>
    {
        for (AudioConnection *ac : patchUsbToFloat)
            delete ac;
        for (AudioConnection_F32 *ac : patch)
            delete ac;
        for (AudioConnection *ac : patchFloatToOut)
     9a2:	cmp	r6, r4
     9a4:	bne.n	98e <Paavo::AudioManager::~AudioManager()+0x4a>
            delete ac;
    }
     9a6:	mov	r0, r7
     9a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000009ac <Paavo::AudioManager::init()>:

    void AudioManager::init()
    {
     9ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        AudioMemory(20);
     9b0:	movs	r1, #20
        for (AudioConnection *ac : patchFloatToOut)
            delete ac;
    }

    void AudioManager::init()
    {
     9b2:	sub	sp, #12
     9b4:	mov	r5, r0
        AudioMemory(20);
     9b6:	ldr	r0, [pc, #360]	; (b20 <Paavo::AudioManager::init()+0x174>)
     9b8:	bl	e448 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
        AudioMemory_F32(10);
     9bc:	movs	r0, #10
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     9be:	movs	r4, #0
     9c0:	bl	27a0 <AudioMemory_F32(int)>
        patchUsbToFloat[0] = new AudioConnection(usb1, 0, int2Float[0], 0);
     9c4:	add.w	r8, r5, #304	; 0x130
     9c8:	add.w	r9, r5, #216	; 0xd8
     9cc:	movs	r0, #20
        patchUsbToFloat[1] = new AudioConnection(usb1, 1, int2Float[1], 0);
     9ce:	add.w	r6, r5, #260	; 0x104

    void AudioManager::init()
    {
        AudioMemory(20);
        AudioMemory_F32(10);
        patchUsbToFloat[0] = new AudioConnection(usb1, 0, int2Float[0], 0);
     9d2:	bl	a490 <operator new(unsigned int)>
        patchUsbToFloat[1] = new AudioConnection(usb1, 1, int2Float[1], 0);
        patch[0] = new AudioConnection_F32(int2Float[0], 0, float2Int[0], 0);
        patch[1] = new AudioConnection_F32(int2Float[1], 0, float2Int[1], 0);
     9d6:	add.w	r3, r5, #84	; 0x54

    void AudioManager::init()
    {
        AudioMemory(20);
        AudioMemory_F32(10);
        patchUsbToFloat[0] = new AudioConnection(usb1, 0, int2Float[0], 0);
     9da:	mov	r7, r0
     9dc:	strb	r4, [r0, #8]
     9de:	str.w	r8, [r0]
     9e2:	mov.w	sl, #1
     9e6:	str.w	r9, [r0, #4]
        patchUsbToFloat[1] = new AudioConnection(usb1, 1, int2Float[1], 0);
        patch[0] = new AudioConnection_F32(int2Float[0], 0, float2Int[0], 0);
     9ea:	add.w	fp, r5, #40	; 0x28
     9ee:	strb	r4, [r0, #9]
     9f0:	str	r4, [r0, #12]
		{ isConnected = false;
     9f2:	strb	r4, [r0, #16]
        patch[1] = new AudioConnection_F32(int2Float[1], 0, float2Int[1], 0);
     9f4:	str	r3, [sp, #0]
		  connect(); }
     9f6:	bl	a368 <AudioConnection::connect()>

    void AudioManager::init()
    {
        AudioMemory(20);
        AudioMemory_F32(10);
        patchUsbToFloat[0] = new AudioConnection(usb1, 0, int2Float[0], 0);
     9fa:	str.w	r7, [r5, #328]	; 0x148
        patchUsbToFloat[1] = new AudioConnection(usb1, 1, int2Float[1], 0);
     9fe:	movs	r0, #20
     a00:	bl	a490 <operator new(unsigned int)>
     a04:	mov	r7, r0
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     a06:	str.w	r8, [r0]
        patch[0] = new AudioConnection_F32(int2Float[0], 0, float2Int[0], 0);
        patch[1] = new AudioConnection_F32(int2Float[1], 0, float2Int[1], 0);
        patch[2] = new AudioConnection_F32(int2Float[0], 0, float2Int[2], 0);
     a0a:	add.w	r8, r5, #128	; 0x80
     a0e:	strb	r4, [r0, #9]
     a10:	str	r4, [r0, #12]
		{ isConnected = false;
     a12:	strb	r4, [r0, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     a14:	str	r6, [r0, #4]
     a16:	strb.w	sl, [r0, #8]
		{ isConnected = false;
		  connect(); }
     a1a:	bl	a368 <AudioConnection::connect()>
    void AudioManager::init()
    {
        AudioMemory(20);
        AudioMemory_F32(10);
        patchUsbToFloat[0] = new AudioConnection(usb1, 0, int2Float[0], 0);
        patchUsbToFloat[1] = new AudioConnection(usb1, 1, int2Float[1], 0);
     a1e:	str.w	r7, [r5, #332]	; 0x14c
        patch[0] = new AudioConnection_F32(int2Float[0], 0, float2Int[0], 0);
     a22:	movs	r0, #16
     a24:	bl	a490 <operator new(unsigned int)>
     a28:	mov	r7, r0
      { connect(); }
    AudioConnection_F32(AudioStream_F32 &source, unsigned char sourceOutput,
      AudioStream_F32 &destination, unsigned char destinationInput) :
      src(source), dst(destination),
      src_index(sourceOutput), dest_index(destinationInput),
      next_dest(NULL)
     a2a:	str.w	r9, [r0]
     a2e:	strb	r4, [r0, #8]
     a30:	strb	r4, [r0, #9]
     a32:	str	r4, [r0, #12]
     a34:	str.w	fp, [r0, #4]
      { connect(); }
     a38:	bl	28e4 <AudioConnection_F32::connect()>
     a3c:	str.w	r7, [r5, #352]	; 0x160
        patch[1] = new AudioConnection_F32(int2Float[1], 0, float2Int[1], 0);
     a40:	movs	r0, #16
     a42:	bl	a490 <operator new(unsigned int)>
      { connect(); }
    AudioConnection_F32(AudioStream_F32 &source, unsigned char sourceOutput,
      AudioStream_F32 &destination, unsigned char destinationInput) :
      src(source), dst(destination),
      src_index(sourceOutput), dest_index(destinationInput),
      next_dest(NULL)
     a46:	ldr	r3, [sp, #0]
     a48:	mov	r7, r0
     a4a:	str	r6, [r0, #0]
     a4c:	str	r3, [r0, #4]
     a4e:	strb	r4, [r0, #8]
     a50:	strb	r4, [r0, #9]
     a52:	str	r4, [r0, #12]
      { connect(); }
     a54:	bl	28e4 <AudioConnection_F32::connect()>
     a58:	str.w	r7, [r5, #356]	; 0x164
        patch[2] = new AudioConnection_F32(int2Float[0], 0, float2Int[2], 0);
     a5c:	movs	r0, #16
        patch[3] = new AudioConnection_F32(int2Float[1], 0, float2Int[3], 0);
     a5e:	add.w	r7, r5, #172	; 0xac
        AudioMemory_F32(10);
        patchUsbToFloat[0] = new AudioConnection(usb1, 0, int2Float[0], 0);
        patchUsbToFloat[1] = new AudioConnection(usb1, 1, int2Float[1], 0);
        patch[0] = new AudioConnection_F32(int2Float[0], 0, float2Int[0], 0);
        patch[1] = new AudioConnection_F32(int2Float[1], 0, float2Int[1], 0);
        patch[2] = new AudioConnection_F32(int2Float[0], 0, float2Int[2], 0);
     a62:	bl	a490 <operator new(unsigned int)>
      { connect(); }
    AudioConnection_F32(AudioStream_F32 &source, unsigned char sourceOutput,
      AudioStream_F32 &destination, unsigned char destinationInput) :
      src(source), dst(destination),
      src_index(sourceOutput), dest_index(destinationInput),
      next_dest(NULL)
     a66:	str.w	r9, [r0]
     a6a:	strb	r4, [r0, #8]
     a6c:	strb	r4, [r0, #9]
     a6e:	str	r4, [r0, #12]
     a70:	str.w	r8, [r0, #4]
     a74:	str	r0, [sp, #4]
      { connect(); }
     a76:	bl	28e4 <AudioConnection_F32::connect()>
     a7a:	ldr	r3, [sp, #4]
        patch[3] = new AudioConnection_F32(int2Float[1], 0, float2Int[3], 0);
     a7c:	movs	r0, #16
        AudioMemory_F32(10);
        patchUsbToFloat[0] = new AudioConnection(usb1, 0, int2Float[0], 0);
        patchUsbToFloat[1] = new AudioConnection(usb1, 1, int2Float[1], 0);
        patch[0] = new AudioConnection_F32(int2Float[0], 0, float2Int[0], 0);
        patch[1] = new AudioConnection_F32(int2Float[1], 0, float2Int[1], 0);
        patch[2] = new AudioConnection_F32(int2Float[0], 0, float2Int[2], 0);
     a7e:	str.w	r3, [r5, #360]	; 0x168
        patch[3] = new AudioConnection_F32(int2Float[1], 0, float2Int[3], 0);
     a82:	bl	a490 <operator new(unsigned int)>
      { connect(); }
    AudioConnection_F32(AudioStream_F32 &source, unsigned char sourceOutput,
      AudioStream_F32 &destination, unsigned char destinationInput) :
      src(source), dst(destination),
      src_index(sourceOutput), dest_index(destinationInput),
      next_dest(NULL)
     a86:	str	r6, [r0, #0]
     a88:	strb	r4, [r0, #8]
     a8a:	strb	r4, [r0, #9]
     a8c:	str	r4, [r0, #12]
     a8e:	str	r7, [r0, #4]
     a90:	str	r0, [sp, #4]
      { connect(); }
     a92:	bl	28e4 <AudioConnection_F32::connect()>
     a96:	ldr	r3, [sp, #4]
        patchFloatToOut[0] = new AudioConnection(float2Int[0], 0, audioOutput, 0);
     a98:	movs	r0, #20
        patchUsbToFloat[0] = new AudioConnection(usb1, 0, int2Float[0], 0);
        patchUsbToFloat[1] = new AudioConnection(usb1, 1, int2Float[1], 0);
        patch[0] = new AudioConnection_F32(int2Float[0], 0, float2Int[0], 0);
        patch[1] = new AudioConnection_F32(int2Float[1], 0, float2Int[1], 0);
        patch[2] = new AudioConnection_F32(int2Float[0], 0, float2Int[2], 0);
        patch[3] = new AudioConnection_F32(int2Float[1], 0, float2Int[3], 0);
     a9a:	str.w	r3, [r5, #364]	; 0x16c
        patchFloatToOut[0] = new AudioConnection(float2Int[0], 0, audioOutput, 0);
     a9e:	bl	a490 <operator new(unsigned int)>
     aa2:	mov	r6, r0
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     aa4:	str.w	fp, [r0]
     aa8:	str	r5, [r0, #4]
     aaa:	strb	r4, [r0, #8]
     aac:	strb	r4, [r0, #9]
     aae:	str	r4, [r0, #12]
		{ isConnected = false;
     ab0:	strb	r4, [r0, #16]
		  connect(); }
     ab2:	bl	a368 <AudioConnection::connect()>
     ab6:	str.w	r6, [r5, #336]	; 0x150
        patchFloatToOut[1] = new AudioConnection(float2Int[1], 0, audioOutput, 1);
     aba:	movs	r0, #20
     abc:	bl	a490 <operator new(unsigned int)>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     ac0:	ldr	r3, [sp, #0]
     ac2:	mov	r6, r0
     ac4:	strb.w	sl, [r0, #9]
     ac8:	strb	r4, [r0, #8]
     aca:	str	r4, [r0, #12]
		{ isConnected = false;
     acc:	strb	r4, [r0, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     ace:	stmia.w	r0, {r3, r5}
		{ isConnected = false;
		  connect(); }
     ad2:	bl	a368 <AudioConnection::connect()>
     ad6:	str.w	r6, [r5, #340]	; 0x154
        patchFloatToOut[2] = new AudioConnection(float2Int[2], 0, audioOutput, 2);
     ada:	movs	r0, #20
     adc:	bl	a490 <operator new(unsigned int)>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     ae0:	movs	r3, #2
     ae2:	mov	r6, r0
     ae4:	str.w	r8, [r0]
     ae8:	strb	r3, [r0, #9]
     aea:	str	r5, [r0, #4]
     aec:	strb	r4, [r0, #8]
     aee:	str	r4, [r0, #12]
		{ isConnected = false;
     af0:	strb	r4, [r0, #16]
		  connect(); }
     af2:	bl	a368 <AudioConnection::connect()>
     af6:	str.w	r6, [r5, #344]	; 0x158
        patchFloatToOut[3] = new AudioConnection(float2Int[3], 0, audioOutput, 3);
     afa:	movs	r0, #20
     afc:	bl	a490 <operator new(unsigned int)>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     b00:	movs	r3, #3
     b02:	mov	r6, r0
     b04:	str	r7, [r0, #0]
     b06:	str	r5, [r0, #4]
     b08:	strb	r4, [r0, #8]
     b0a:	str	r4, [r0, #12]
		{ isConnected = false;
     b0c:	strb	r4, [r0, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     b0e:	strb	r3, [r0, #9]
		{ isConnected = false;
		  connect(); }
     b10:	bl	a368 <AudioConnection::connect()>
     b14:	str.w	r6, [r5, #348]	; 0x15c
    }
     b18:	add	sp, #12
     b1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b1e:	nop
     b20:	.word	0x20200000

00000b24 <Paavo::AudioManager::getMaster(unsigned char)>:
    {
    }

    AudioStream &AudioManager::getMaster(uint8_t num)
    {
        if (num < 4)
     b24:	cmp	r1, #3
            return float2Int[num];
     b26:	itt	ls
     b28:	movls	r3, #44	; 0x2c
     b2a:	mlals	r0, r3, r1, r0
        else
            return float2Int[0];
     b2e:	adds	r0, #40	; 0x28
    }
     b30:	bx	lr
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
     b32:	nop

00000b34 <OADebug::performanceCheck()>:
{
    Serial.printf("CPU: %.2f%%, Mem: %d F32 %d I16\n", cpu, memF32, memI16);
}

void OADebug::performanceCheck()
{
     b34:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b38:	ldr	r3, [pc, #224]	; (c1c <OADebug::performanceCheck()+0xe8>)
     b3a:	sub	sp, #12
    static unsigned long last = 0;
    unsigned long now = millis();
    if ((now - last) > 1000)
     b3c:	ldr	r5, [pc, #224]	; (c20 <OADebug::performanceCheck()+0xec>)
     b3e:	ldr	r6, [r3, #0]
     b40:	ldr	r3, [r5, #0]
     b42:	subs	r3, r6, r3
     b44:	cmp.w	r3, #1000	; 0x3e8
     b48:	bls.n	bf4 <OADebug::performanceCheck()+0xc0>
    {
        last = now;
        float cpu = AudioProcessorUsageMax();
     b4a:	ldr	r3, [pc, #216]	; (c24 <OADebug::performanceCheck()+0xf0>)
     b4c:	mov	r4, r0
     b4e:	vldr	s9, [pc, #216]	; c28 <OADebug::performanceCheck()+0xf4>
     b52:	ldr	r2, [r3, #0]
     b54:	ldr	r3, [r3, #0]
     b56:	lsrs	r2, r2, #7
     b58:	vldr	s10, [pc, #208]	; c2c <OADebug::performanceCheck()+0xf8>
     b5c:	lsrs	r3, r3, #6
     b5e:	vldr	s11, [pc, #208]	; c30 <OADebug::performanceCheck()+0xfc>
     b62:	vmov	s15, r2
     b66:	ldr.w	sl, [pc, #224]	; c48 <OADebug::performanceCheck()+0x114>
        uint8_t memI16 = AudioMemoryUsageMax();
        uint8_t memF32 = AudioMemoryUsageMax_F32();
     b6a:	ldr.w	r9, [pc, #224]	; c4c <OADebug::performanceCheck()+0x118>
    static unsigned long last = 0;
    unsigned long now = millis();
    if ((now - last) > 1000)
    {
        last = now;
        float cpu = AudioProcessorUsageMax();
     b6e:	vcvt.f32.s32	s14, s15
     b72:	vmov	s15, r3
     b76:	ldrh.w	r3, [sl]
     b7a:	vcvt.f32.s32	s15, s15
        uint8_t memI16 = AudioMemoryUsageMax();
        uint8_t memF32 = AudioMemoryUsageMax_F32();
     b7e:	ldrb.w	r7, [r9]
    static unsigned long last = 0;
    unsigned long now = millis();
    if ((now - last) > 1000)
    {
        last = now;
        float cpu = AudioProcessorUsageMax();
     b82:	vdiv.f32	s12, s14, s9
        uint8_t memI16 = AudioMemoryUsageMax();
        uint8_t memF32 = AudioMemoryUsageMax_F32();
        if ((statsMemF32 != memF32) || (statsMemI16 != memI16) || fabs(statsCpu - cpu) > 1)
     b86:	ldrb	r2, [r0, #5]
    unsigned long now = millis();
    if ((now - last) > 1000)
    {
        last = now;
        float cpu = AudioProcessorUsageMax();
        uint8_t memI16 = AudioMemoryUsageMax();
     b88:	ldr.w	fp, [pc, #196]	; c50 <OADebug::performanceCheck()+0x11c>
        uint8_t memF32 = AudioMemoryUsageMax_F32();
        if ((statsMemF32 != memF32) || (statsMemI16 != memI16) || fabs(statsCpu - cpu) > 1)
     b8c:	cmp	r2, r7
{
    static unsigned long last = 0;
    unsigned long now = millis();
    if ((now - last) > 1000)
    {
        last = now;
     b8e:	str	r6, [r5, #0]
        float cpu = AudioProcessorUsageMax();
        uint8_t memI16 = AudioMemoryUsageMax();
     b90:	ldrb.w	r8, [fp]
    static unsigned long last = 0;
    unsigned long now = millis();
    if ((now - last) > 1000)
    {
        last = now;
        float cpu = AudioProcessorUsageMax();
     b94:	vdiv.f32	s13, s15, s9
     b98:	vmov	s15, r3
     b9c:	vcvt.f32.s32	s15, s15
     ba0:	vmul.f32	s12, s12, s10
     ba4:	vdiv.f32	s14, s12, s11
     ba8:	vmul.f32	s13, s13, s10
     bac:	vdiv.f32	s12, s13, s11
     bb0:	vadd.f32	s15, s14, s15
     bb4:	vdiv.f32	s14, s15, s12
        uint8_t memI16 = AudioMemoryUsageMax();
        uint8_t memF32 = AudioMemoryUsageMax_F32();
        if ((statsMemF32 != memF32) || (statsMemI16 != memI16) || fabs(statsCpu - cpu) > 1)
     bb8:	beq.n	bfa <OADebug::performanceCheck()+0xc6>
#include "inc/OADebug.h"

void OADebug::printResources(float cpu, uint8_t memF32, uint8_t memI16)
{
    Serial.printf("CPU: %.2f%%, Mem: %d F32 %d I16\n", cpu, memF32, memI16);
     bba:	str.w	r8, [sp, #4]
     bbe:	str	r7, [sp, #0]
     bc0:	ldr	r1, [pc, #112]	; (c34 <OADebug::performanceCheck()+0x100>)
     bc2:	ldr	r0, [pc, #116]	; (c38 <OADebug::performanceCheck()+0x104>)
     bc4:	vcvt.f64.f32	d7, s14
     bc8:	vmov	r2, r3, d7
     bcc:	bl	9b34 <Print::printf(char const*, ...)>
        if ((statsMemF32 != memF32) || (statsMemI16 != memI16) || fabs(statsCpu - cpu) > 1)
        {
            printResources(cpu, memF32, memI16);
        }
        AudioProcessorUsageMaxReset();
        AudioMemoryUsageMaxReset();
     bd0:	ldr	r3, [pc, #104]	; (c3c <OADebug::performanceCheck()+0x108>)
        uint8_t memF32 = AudioMemoryUsageMax_F32();
        if ((statsMemF32 != memF32) || (statsMemI16 != memI16) || fabs(statsCpu - cpu) > 1)
        {
            printResources(cpu, memF32, memI16);
        }
        AudioProcessorUsageMaxReset();
     bd2:	ldr	r2, [pc, #108]	; (c40 <OADebug::performanceCheck()+0x10c>)
        AudioMemoryUsageMaxReset();
     bd4:	ldrh	r1, [r3, #0]
        AudioMemoryUsageMaxReset_F32();
     bd6:	ldr	r3, [pc, #108]	; (c44 <OADebug::performanceCheck()+0x110>)
        uint8_t memF32 = AudioMemoryUsageMax_F32();
        if ((statsMemF32 != memF32) || (statsMemI16 != memI16) || fabs(statsCpu - cpu) > 1)
        {
            printResources(cpu, memF32, memI16);
        }
        AudioProcessorUsageMaxReset();
     bd8:	ldrh	r0, [r2, #0]
        AudioMemoryUsageMaxReset();
        AudioMemoryUsageMaxReset_F32();
     bda:	ldrb	r2, [r3, #0]
        last = now;
        statsCpu = 0;
     bdc:	movs	r3, #0
        uint8_t memF32 = AudioMemoryUsageMax_F32();
        if ((statsMemF32 != memF32) || (statsMemI16 != memI16) || fabs(statsCpu - cpu) > 1)
        {
            printResources(cpu, memF32, memI16);
        }
        AudioProcessorUsageMaxReset();
     bde:	strh.w	r0, [sl]
        AudioMemoryUsageMaxReset();
     be2:	strh.w	r1, [fp]
        AudioMemoryUsageMaxReset_F32();
     be6:	strb.w	r2, [r9]
        last = now;
     bea:	str	r6, [r5, #0]
        statsCpu = 0;
        statsMemF32 = memF32;
     bec:	strb	r7, [r4, #5]
        statsMemI16 = memI16;
     bee:	strb.w	r8, [r4, #4]
        }
        AudioProcessorUsageMaxReset();
        AudioMemoryUsageMaxReset();
        AudioMemoryUsageMaxReset_F32();
        last = now;
        statsCpu = 0;
     bf2:	str	r3, [r4, #0]
        statsMemF32 = memF32;
        statsMemI16 = memI16;
    }
}
     bf4:	add	sp, #12
     bf6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
        last = now;
        float cpu = AudioProcessorUsageMax();
        uint8_t memI16 = AudioMemoryUsageMax();
        uint8_t memF32 = AudioMemoryUsageMax_F32();
        if ((statsMemF32 != memF32) || (statsMemI16 != memI16) || fabs(statsCpu - cpu) > 1)
     bfa:	ldrb	r3, [r0, #4]
     bfc:	cmp	r3, r8
     bfe:	bne.n	bba <OADebug::performanceCheck()+0x86>
     c00:	vldr	s15, [r0]
     c04:	vmov.f32	s13, #112	; 0x3f800000  1.0
     c08:	vsub.f32	s15, s15, s14
     c0c:	vabs.f32	s15, s15
     c10:	vcmpe.f32	s15, s13
     c14:	vmrs	APSR_nzcv, fpscr
     c18:	bgt.n	bba <OADebug::performanceCheck()+0x86>
     c1a:	b.n	bd0 <OADebug::performanceCheck()+0x9c>
     c1c:	.word	0x20002488
     c20:	.word	0x20001de4
     c24:	.word	0x20001010
     c28:	.word	0x472c4400
     c2c:	.word	0x43000000
     c30:	.word	0x42c80000
     c34:	.word	0x20000044
     c38:	.word	0x2000106c
     c3c:	.word	0x200026cc
     c40:	.word	0x200026ce
     c44:	.word	0x20002170
     c48:	.word	0x2000264c
     c4c:	.word	0x20002171
     c50:	.word	0x2000264a

00000c54 <OADebug::selectCommand(char)>:
    }
}

void OADebug::selectCommand(char c)
{
    switch (c)
     c54:	cmp	r1, #13
     c56:	beq.n	c8e <OADebug::selectCommand(char)+0x3a>
     c58:	cmp	r1, #115	; 0x73
     c5a:	beq.n	c6a <OADebug::selectCommand(char)+0x16>
     c5c:	cmp	r1, #9
     c5e:	beq.n	c62 <OADebug::selectCommand(char)+0xe>
     c60:	bx	lr
        // print cpu and mem usage
        printResources(statsCpu, statsMemF32, statsMemI16);
        break;
    case '\t':
        // reboot Teensy
        *(uint32_t *)0xE000ED0C = 0x5FA0004;
     c62:	ldr	r3, [pc, #48]	; (c94 <OADebug::selectCommand(char)+0x40>)
     c64:	ldr	r2, [pc, #48]	; (c98 <OADebug::selectCommand(char)+0x44>)
     c66:	str	r2, [r3, #0]
        break;
    default:
        break;
    }
}
     c68:	bx	lr
#include "inc/OADebug.h"

void OADebug::printResources(float cpu, uint8_t memF32, uint8_t memI16)
{
    Serial.printf("CPU: %.2f%%, Mem: %d F32 %d I16\n", cpu, memF32, memI16);
     c6a:	vldr	s15, [r0]
        statsMemI16 = memI16;
    }
}

void OADebug::selectCommand(char c)
{
     c6e:	push	{r4, lr}
#include "inc/OADebug.h"

void OADebug::printResources(float cpu, uint8_t memF32, uint8_t memI16)
{
    Serial.printf("CPU: %.2f%%, Mem: %d F32 %d I16\n", cpu, memF32, memI16);
     c70:	vcvt.f64.f32	d7, s15
     c74:	ldrb	r4, [r0, #4]
     c76:	ldrb	r1, [r0, #5]
        statsMemI16 = memI16;
    }
}

void OADebug::selectCommand(char c)
{
     c78:	sub	sp, #8
#include "inc/OADebug.h"

void OADebug::printResources(float cpu, uint8_t memF32, uint8_t memI16)
{
    Serial.printf("CPU: %.2f%%, Mem: %d F32 %d I16\n", cpu, memF32, memI16);
     c7a:	ldr	r0, [pc, #32]	; (c9c <OADebug::selectCommand(char)+0x48>)
     c7c:	stmia.w	sp, {r1, r4}
     c80:	ldr	r1, [pc, #28]	; (ca0 <OADebug::selectCommand(char)+0x4c>)
     c82:	vmov	r2, r3, d7
     c86:	bl	9b34 <Print::printf(char const*, ...)>
        *(uint32_t *)0xE000ED0C = 0x5FA0004;
        break;
    default:
        break;
    }
}
     c8a:	add	sp, #8
     c8c:	pop	{r4, pc}
void OADebug::selectCommand(char c)
{
    switch (c)
    {
    case '\r':
        Serial.println();
     c8e:	ldr	r0, [pc, #12]	; (c9c <OADebug::selectCommand(char)+0x48>)
     c90:	b.w	9b04 <Print::println()>
     c94:	.word	0xe000ed0c
     c98:	.word	0x05fa0004
     c9c:	.word	0x2000106c
     ca0:	.word	0x20000044

00000ca4 <OADebug::update()>:
        break;
    }
}

void OADebug::update()
{
     ca4:	push	{r4, lr}
     ca6:	mov	r4, r0
    performanceCheck();
     ca8:	bl	b34 <OADebug::performanceCheck()>
     cac:	b.n	cba <OADebug::update()+0x16>
public:
	constexpr usb_seremu_class() {}
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
     cae:	bl	8ee8 <usb_seremu_getchar>
    while (Serial.available())
        selectCommand(Serial.read());
     cb2:	uxtb	r1, r0
     cb4:	mov	r0, r4
     cb6:	bl	c54 <OADebug::selectCommand(char)>
{
public:
	constexpr usb_seremu_class() {}
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
     cba:	bl	8f94 <usb_seremu_available>
}

void OADebug::update()
{
    performanceCheck();
    while (Serial.available())
     cbe:	cmp	r0, #0
     cc0:	bne.n	cae <OADebug::update()+0xa>
     cc2:	pop	{r4, pc}

00000cc4 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     cc4:	push	{r4, lr}
     cc6:	mov	r4, r0
		release();
     cc8:	bl	9998 <DMAChannel::release()>
	}
     ccc:	mov	r0, r4
     cce:	pop	{r4, pc}

00000cd0 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
uint16_t  AudioOutputI2SOct::ch6_offset = 0;
uint16_t  AudioOutputI2SOct::ch7_offset = 0;
uint16_t  AudioOutputI2SOct::ch8_offset = 0;
bool AudioOutputI2SOct::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
DMAChannel AudioOutputI2SOct::dma(false);
     cd0:	ldr	r2, [pc, #8]	; (cdc <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
     cd2:	ldr	r1, [pc, #12]	; (ce0 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
     cd4:	ldr	r0, [pc, #12]	; (ce4 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
     cd6:	b.w	a508 <__aeabi_atexit>
     cda:	nop
     cdc:	.word	0x20000f10
     ce0:	.word	0x00000cc5
     ce4:	.word	0x20001de8

00000ce8 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
     ce8:	ldr	r2, [pc, #8]	; (cf4 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
     cea:	ldr	r1, [pc, #12]	; (cf8 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
     cec:	ldr	r0, [pc, #12]	; (cfc <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
     cee:	b.w	a508 <__aeabi_atexit>
     cf2:	nop
     cf4:	.word	0x20000f10
     cf8:	.word	0x00000cc5
     cfc:	.word	0x20001df0

00000d00 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
     d00:	ldr	r2, [pc, #8]	; (d0c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
     d02:	ldr	r1, [pc, #12]	; (d10 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
     d04:	ldr	r0, [pc, #12]	; (d14 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
     d06:	b.w	a508 <__aeabi_atexit>
     d0a:	nop
     d0c:	.word	0x20000f10
     d10:	.word	0x00000cc5
     d14:	.word	0x20001df8

00000d18 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211_2::dma(false);
     d18:	ldr	r2, [pc, #8]	; (d24 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
     d1a:	ldr	r1, [pc, #12]	; (d28 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
     d1c:	ldr	r0, [pc, #12]	; (d2c <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
     d1e:	b.w	a508 <__aeabi_atexit>
     d22:	nop
     d24:	.word	0x20000f10
     d28:	.word	0x00000cc5
     d2c:	.word	0x20001e00

00000d30 <AudioOutputI2S::config_i2s()>:
#endif
#endif


void AudioOutputI2S::config_i2s(void)
{
     d30:	push	{r3, r4, r5, r6, r7, lr}
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK

#elif defined(__IMXRT1062__)

	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     d32:	ldr	r5, [pc, #160]	; (dd4 <AudioOutputI2S::config_i2s()+0xa4>)

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
     d34:	ldr	r4, [pc, #160]	; (dd8 <AudioOutputI2S::config_i2s()+0xa8>)
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK

#elif defined(__IMXRT1062__)

	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     d36:	ldr	r3, [r5, #124]	; 0x7c
     d38:	orr.w	r3, r3, #786432	; 0xc0000
     d3c:	str	r3, [r5, #124]	; 0x7c

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
     d3e:	ldr	r3, [r4, #8]
     d40:	cmp	r3, #0
     d42:	blt.n	dd0 <AudioOutputI2S::config_i2s()+0xa0>
	if (I2S1_RCSR & I2S_RCSR_RE) return;
     d44:	ldr.w	r3, [r4, #136]	; 0x88
     d48:	cmp	r3, #0
     d4a:	blt.n	dd0 <AudioOutputI2S::config_i2s()+0xa0>

	double C = ((double)fs * 256 * n1 * n2) / 24000000;
	int c0 = C;
	int c2 = 10000;
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);
     d4c:	movs	r3, #0
     d4e:	movw	r2, #10000	; 0x2710
     d52:	mov.w	r1, #2240	; 0x8c0
     d56:	movs	r0, #28
     d58:	bl	e450 <___Z14set_audioClockilmb_veneer>

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     d5c:	ldr	r1, [r5, #28]
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     d5e:	ldr	r2, [pc, #124]	; (ddc <AudioOutputI2S::config_i2s()+0xac>)
	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

	CORE_PIN23_CONFIG = 3;  //1:MCLK
     d60:	movs	r6, #3
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     d62:	bic.w	r1, r1, #3072	; 0xc00
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     d66:	ldr.w	lr, [pc, #144]	; df8 <AudioOutputI2S::config_i2s()+0xc8>
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     d6a:	ldr	r3, [pc, #116]	; (de0 <AudioOutputI2S::config_i2s()+0xb0>)
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
     d6c:	movs	r7, #0
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     d6e:	orr.w	r1, r1, #2048	; 0x800
	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

	CORE_PIN23_CONFIG = 3;  //1:MCLK
     d72:	ldr	r0, [pc, #112]	; (de4 <AudioOutputI2S::config_i2s()+0xb4>)
	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
     d74:	mov.w	ip, #1
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     d78:	str	r1, [r5, #28]
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     d7a:	ldr	r1, [r5, #40]	; 0x28
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     d7c:	ands	r2, r1
	I2S1_TMR = 0;
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
     d7e:	mov.w	r1, #65536	; 0x10000
	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     d82:	orr.w	r2, r2, #206	; 0xce
     d86:	str	r2, [r5, #40]	; 0x28

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     d88:	ldr.w	r2, [lr, #4]

	I2S1_TMR = 0;
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
     d8c:	ldr	r5, [pc, #88]	; (de8 <AudioOutputI2S::config_i2s()+0xb8>)
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     d8e:	ands	r3, r2
	I2S1_TCR1 = I2S_TCR1_RFW(1);
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
     d90:	ldr	r2, [pc, #88]	; (dec <AudioOutputI2S::config_i2s()+0xbc>)
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     d92:	orr.w	r3, r3, #524288	; 0x80000
     d96:	str.w	r3, [lr, #4]

	CORE_PIN23_CONFIG = 3;  //1:MCLK
     d9a:	str.w	r6, [r0, #288]	; 0x120
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
     d9e:	ldr	r3, [pc, #80]	; (df0 <AudioOutputI2S::config_i2s()+0xc0>)
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

	CORE_PIN23_CONFIG = 3;  //1:MCLK
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     da0:	str.w	r6, [r0, #296]	; 0x128
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     da4:	str.w	r6, [r0, #292]	; 0x124

	I2S1_RMR = 0;
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
		    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
     da8:	ldr	r0, [pc, #72]	; (df4 <AudioOutputI2S::config_i2s()+0xc4>)
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
     daa:	str	r7, [r4, #96]	; 0x60
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
     dac:	str.w	ip, [r4, #12]
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
     db0:	str	r5, [r4, #16]
	I2S1_TCR3 = I2S_TCR3_TCE;
     db2:	str	r1, [r4, #20]
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
     db4:	str	r2, [r4, #24]
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
     db6:	str	r3, [r4, #28]

	I2S1_RMR = 0;
     db8:	str.w	r7, [r4, #224]	; 0xe0
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
     dbc:	str.w	ip, [r4, #140]	; 0x8c
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
		    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
     dc0:	str.w	r0, [r4, #144]	; 0x90
	I2S1_RCR3 = I2S_RCR3_RCE;
     dc4:	str.w	r1, [r4, #148]	; 0x94
	I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((32-1)) | I2S_RCR4_MF
		    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
     dc8:	str.w	r2, [r4, #152]	; 0x98
	I2S1_RCR5 = I2S_RCR5_WNW((32-1)) | I2S_RCR5_W0W((32-1)) | I2S_RCR5_FBT((32-1));
     dcc:	str.w	r3, [r4, #156]	; 0x9c
     dd0:	pop	{r3, r4, r5, r6, r7, pc}
     dd2:	nop
     dd4:	.word	0x400fc000
     dd8:	.word	0x40384000
     ddc:	.word	0xfffffe00
     de0:	.word	0xfff7fff8
     de4:	.word	0x401f8000
     de8:	.word	0x47000001
     dec:	.word	0x00011f1b
     df0:	.word	0x1f1f1f00
     df4:	.word	0x07000001
     df8:	.word	0x400ac000

00000dfc <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
     dfc:	ldr	r2, [pc, #8]	; (e08 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
     dfe:	ldr	r1, [pc, #12]	; (e0c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
     e00:	ldr	r0, [pc, #12]	; (e10 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
     e02:	b.w	a508 <__aeabi_atexit>
     e06:	nop
     e08:	.word	0x20000f10
     e0c:	.word	0x00000cc5
     e10:	.word	0x20001e08

00000e14 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
static uint32_t spdif_rx_buffer[AUDIO_BLOCK_SAMPLES * 4];
audio_block_t * AudioInputSPDIF3::block_left = NULL;
audio_block_t * AudioInputSPDIF3::block_right = NULL;
uint16_t AudioInputSPDIF3::block_offset = 0;
bool AudioInputSPDIF3::update_responsibility = false;
DMAChannel AudioInputSPDIF3::dma(false);
     e14:	ldr	r2, [pc, #8]	; (e20 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
     e16:	ldr	r1, [pc, #12]	; (e24 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
     e18:	ldr	r0, [pc, #12]	; (e28 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
     e1a:	b.w	a508 <__aeabi_atexit>
     e1e:	nop
     e20:	.word	0x20000f10
     e24:	.word	0x00000cc5
     e28:	.word	0x20001e10

00000e2c <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
     e2c:	ldr	r2, [pc, #8]	; (e38 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
     e2e:	ldr	r1, [pc, #12]	; (e3c <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
     e30:	ldr	r0, [pc, #12]	; (e40 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
     e32:	b.w	a508 <__aeabi_atexit>
     e36:	nop
     e38:	.word	0x20000f10
     e3c:	.word	0x00000cc5
     e40:	.word	0x20001e18

00000e44 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
audio_block_t * AudioInputTDM2::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM2::update_responsibility = false;
DMAChannel AudioInputTDM2::dma(false);
     e44:	ldr	r2, [pc, #8]	; (e50 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
     e46:	ldr	r1, [pc, #12]	; (e54 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
     e48:	ldr	r0, [pc, #12]	; (e58 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
     e4a:	b.w	a508 <__aeabi_atexit>
     e4e:	nop
     e50:	.word	0x20000f10
     e54:	.word	0x00000cc5
     e58:	.word	0x20001e20

00000e5c <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:

extern "C" void xbar_connect(unsigned int input, unsigned int output);

#define FILTERLEN 15

DMAChannel AudioInputAnalog::dma(false);
     e5c:	ldr	r2, [pc, #8]	; (e68 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
     e5e:	ldr	r1, [pc, #12]	; (e6c <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
     e60:	ldr	r0, [pc, #12]	; (e70 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
     e62:	b.w	a508 <__aeabi_atexit>
     e66:	nop
     e68:	.word	0x20000f10
     e6c:	.word	0x00000cc5
     e70:	.word	0x20001e28

00000e74 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
     e74:	ldr	r2, [pc, #8]	; (e80 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
     e76:	ldr	r1, [pc, #12]	; (e84 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
     e78:	ldr	r0, [pc, #12]	; (e88 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
     e7a:	b.w	a508 <__aeabi_atexit>
     e7e:	nop
     e80:	.word	0x20000f10
     e84:	.word	0x00000cc5
     e88:	.word	0x20001e30

00000e8c <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
     e8c:	ldr	r2, [pc, #8]	; (e98 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
     e8e:	ldr	r1, [pc, #12]	; (e9c <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
     e90:	ldr	r0, [pc, #12]	; (ea0 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
     e92:	b.w	a508 <__aeabi_atexit>
     e96:	nop
     e98:	.word	0x20000f10
     e9c:	.word	0x00000cc5
     ea0:	.word	0x20001e38

00000ea4 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
     ea4:	ldr	r2, [pc, #8]	; (eb0 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
     ea6:	ldr	r1, [pc, #12]	; (eb4 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
     ea8:	ldr	r0, [pc, #12]	; (eb8 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
     eaa:	b.w	a508 <__aeabi_atexit>
     eae:	nop
     eb0:	.word	0x20000f10
     eb4:	.word	0x00000cc5
     eb8:	.word	0x20001e40

00000ebc <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
audio_block_t * AudioOutputTDM2::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM2::update_responsibility = false;
DMAChannel AudioOutputTDM2::dma(false);
     ebc:	ldr	r2, [pc, #8]	; (ec8 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
     ebe:	ldr	r1, [pc, #12]	; (ecc <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
     ec0:	ldr	r0, [pc, #12]	; (ed0 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
     ec2:	b.w	a508 <__aeabi_atexit>
     ec6:	nop
     ec8:	.word	0x20000f10
     ecc:	.word	0x00000cc5
     ed0:	.word	0x20001e48

00000ed4 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
audio_block_t * AudioOutputI2S2::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S2::block_right_2nd = NULL;
uint16_t  AudioOutputI2S2::block_left_offset = 0;
uint16_t  AudioOutputI2S2::block_right_offset = 0;
bool AudioOutputI2S2::update_responsibility = false;
DMAChannel AudioOutputI2S2::dma(false);
     ed4:	ldr	r2, [pc, #8]	; (ee0 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
     ed6:	ldr	r1, [pc, #12]	; (ee4 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
     ed8:	ldr	r0, [pc, #12]	; (ee8 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
     eda:	b.w	a508 <__aeabi_atexit>
     ede:	nop
     ee0:	.word	0x20000f10
     ee4:	.word	0x00000cc5
     ee8:	.word	0x20001e50

00000eec <AudioOutputI2SQuad::isr()>:
	uint32_t saddr;
	const int16_t *src1, *src2, *src3, *src4;
	const int16_t *zeros = (const int16_t *)zerodata;
	int16_t *dest;

	saddr = (uint32_t)(dma.TCD->SADDR);
     eec:	ldr	r3, [pc, #376]	; (1068 <AudioOutputI2SQuad::isr()+0x17c>)
	dma.attachInterrupt(isr);
#endif
}

void AudioOutputI2SQuad::isr(void)
{
     eee:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t saddr;
	const int16_t *src1, *src2, *src3, *src4;
	const int16_t *zeros = (const int16_t *)zerodata;
	int16_t *dest;

	saddr = (uint32_t)(dma.TCD->SADDR);
     ef2:	ldr	r2, [r3, #0]
	dma.attachInterrupt(isr);
#endif
}

void AudioOutputI2SQuad::isr(void)
{
     ef4:	sub	sp, #12
	const int16_t *zeros = (const int16_t *)zerodata;
	int16_t *dest;

	saddr = (uint32_t)(dma.TCD->SADDR);
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
     ef6:	ldr	r4, [pc, #372]	; (106c <AudioOutputI2SQuad::isr()+0x180>)
     ef8:	ldrb	r1, [r3, #4]
     efa:	add.w	r5, r4, #512	; 0x200
	uint32_t saddr;
	const int16_t *src1, *src2, *src3, *src4;
	const int16_t *zeros = (const int16_t *)zerodata;
	int16_t *dest;

	saddr = (uint32_t)(dma.TCD->SADDR);
     efe:	ldr	r3, [r2, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     f00:	ldr	r2, [pc, #364]	; (1070 <AudioOutputI2SQuad::isr()+0x184>)
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
     f02:	cmp	r3, r5
     f04:	strb	r1, [r2, #31]
     f06:	bcs.n	f1c <AudioOutputI2SQuad::isr()+0x30>
		// DMA is transmitting the first half of the buffer
		// so we must fill the second half
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
		if (update_responsibility) update_all();
     f08:	ldr	r3, [pc, #360]	; (1074 <AudioOutputI2SQuad::isr()+0x188>)
     f0a:	ldrb	r3, [r3, #0]
     f0c:	cmp	r3, #0
     f0e:	beq.n	fe2 <AudioOutputI2SQuad::isr()+0xf6>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
     f10:	ldr	r3, [pc, #356]	; (1078 <AudioOutputI2SQuad::isr()+0x18c>)
     f12:	movs	r2, #64	; 0x40
     f14:	mov	r4, r5
     f16:	add.w	r5, r5, #512	; 0x200
     f1a:	str	r2, [r3, #0]
	} else {
		dest = (int16_t *)i2s_tx_buffer;
	}

	src1 = (block_ch1_1st) ? block_ch1_1st->data + ch1_offset : zeros;
     f1c:	ldr.w	r9, [pc, #372]	; 1094 <AudioOutputI2SQuad::isr()+0x1a8>
     f20:	ldr.w	r1, [r9]
     f24:	cmp	r1, #0
     f26:	beq.n	ff4 <AudioOutputI2SQuad::isr()+0x108>
     f28:	ldr	r3, [pc, #336]	; (107c <AudioOutputI2SQuad::isr()+0x190>)
     f2a:	adds	r1, #4
	src2 = (block_ch2_1st) ? block_ch2_1st->data + ch2_offset : zeros;
     f2c:	ldr.w	r8, [pc, #360]	; 1098 <AudioOutputI2SQuad::isr()+0x1ac>
		if (update_responsibility) update_all();
	} else {
		dest = (int16_t *)i2s_tx_buffer;
	}

	src1 = (block_ch1_1st) ? block_ch1_1st->data + ch1_offset : zeros;
     f30:	ldrh	r3, [r3, #0]
	src2 = (block_ch2_1st) ? block_ch2_1st->data + ch2_offset : zeros;
     f32:	ldr.w	r2, [r8]
		if (update_responsibility) update_all();
	} else {
		dest = (int16_t *)i2s_tx_buffer;
	}

	src1 = (block_ch1_1st) ? block_ch1_1st->data + ch1_offset : zeros;
     f36:	add.w	r1, r1, r3, lsl #1
	src2 = (block_ch2_1st) ? block_ch2_1st->data + ch2_offset : zeros;
     f3a:	cmp	r2, #0
     f3c:	beq.n	1002 <AudioOutputI2SQuad::isr()+0x116>
     f3e:	ldr	r3, [pc, #320]	; (1080 <AudioOutputI2SQuad::isr()+0x194>)
     f40:	adds	r2, #4
	src3 = (block_ch3_1st) ? block_ch3_1st->data + ch3_offset : zeros;
     f42:	ldr	r7, [pc, #320]	; (1084 <AudioOutputI2SQuad::isr()+0x198>)
	} else {
		dest = (int16_t *)i2s_tx_buffer;
	}

	src1 = (block_ch1_1st) ? block_ch1_1st->data + ch1_offset : zeros;
	src2 = (block_ch2_1st) ? block_ch2_1st->data + ch2_offset : zeros;
     f44:	ldrh	r3, [r3, #0]
     f46:	add.w	r2, r2, r3, lsl #1
	src3 = (block_ch3_1st) ? block_ch3_1st->data + ch3_offset : zeros;
     f4a:	ldr	r3, [r7, #0]
     f4c:	cmp	r3, #0
     f4e:	beq.n	100c <AudioOutputI2SQuad::isr()+0x120>
     f50:	ldr	r0, [pc, #308]	; (1088 <AudioOutputI2SQuad::isr()+0x19c>)
     f52:	adds	r3, #4
	src4 = (block_ch4_1st) ? block_ch4_1st->data + ch4_offset : zeros;
     f54:	ldr	r6, [pc, #308]	; (108c <AudioOutputI2SQuad::isr()+0x1a0>)
		dest = (int16_t *)i2s_tx_buffer;
	}

	src1 = (block_ch1_1st) ? block_ch1_1st->data + ch1_offset : zeros;
	src2 = (block_ch2_1st) ? block_ch2_1st->data + ch2_offset : zeros;
	src3 = (block_ch3_1st) ? block_ch3_1st->data + ch3_offset : zeros;
     f56:	ldrh	r0, [r0, #0]
     f58:	add.w	r3, r3, r0, lsl #1
	src4 = (block_ch4_1st) ? block_ch4_1st->data + ch4_offset : zeros;
     f5c:	ldr	r0, [r6, #0]
     f5e:	cmp	r0, #0
     f60:	beq.n	1016 <AudioOutputI2SQuad::isr()+0x12a>
     f62:	ldr.w	lr, [pc, #312]	; 109c <AudioOutputI2SQuad::isr()+0x1b0>
     f66:	adds	r0, #4
     f68:	ldrh.w	lr, [lr]
     f6c:	add.w	r0, r0, lr, lsl #1

#if 1
	memcpy_tointerleaveQuad(dest, src1, src2, src3, src4);
     f70:	str	r0, [sp, #0]
     f72:	mov	r0, r4
     f74:	bl	7dc2 <memcpy_tointerleaveQuad>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     f78:	bic.w	r0, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
     f7c:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     f80:	ldr	r3, [pc, #268]	; (1090 <AudioOutputI2SQuad::isr()+0x1a4>)
     f82:	str	r0, [r3, #0]
		location += 32;
     f84:	adds	r0, #32
	} while (location < end_addr);
     f86:	cmp	r0, r5
     f88:	bcc.n	f82 <AudioOutputI2SQuad::isr()+0x96>
	asm("dsb");
     f8a:	dsb	sy
	asm("isb");
     f8e:	isb	sy
		*dest++ = *src4++;
	}
#endif
	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (block_ch1_1st) {
     f92:	ldr.w	r0, [r9]
     f96:	ldr	r4, [pc, #252]	; (1094 <AudioOutputI2SQuad::isr()+0x1a8>)
     f98:	cbz	r0, fa6 <AudioOutputI2SQuad::isr()+0xba>
		if (ch1_offset == 0) {
     f9a:	ldr	r3, [pc, #224]	; (107c <AudioOutputI2SQuad::isr()+0x190>)
     f9c:	ldrh	r2, [r3, #0]
     f9e:	cmp	r2, #0
     fa0:	bne.n	1054 <AudioOutputI2SQuad::isr()+0x168>
			ch1_offset = AUDIO_BLOCK_SAMPLES/2;
     fa2:	movs	r2, #64	; 0x40
     fa4:	strh	r2, [r3, #0]
			release(block_ch1_1st);
			block_ch1_1st = block_ch1_2nd;
			block_ch1_2nd = NULL;
		}
	}
	if (block_ch2_1st) {
     fa6:	ldr.w	r0, [r8]
     faa:	ldr	r4, [pc, #236]	; (1098 <AudioOutputI2SQuad::isr()+0x1ac>)
     fac:	cbz	r0, fba <AudioOutputI2SQuad::isr()+0xce>
		if (ch2_offset == 0) {
     fae:	ldr	r3, [pc, #208]	; (1080 <AudioOutputI2SQuad::isr()+0x194>)
     fb0:	ldrh	r2, [r3, #0]
     fb2:	cmp	r2, #0
     fb4:	bne.n	1042 <AudioOutputI2SQuad::isr()+0x156>
			ch2_offset = AUDIO_BLOCK_SAMPLES/2;
     fb6:	movs	r2, #64	; 0x40
     fb8:	strh	r2, [r3, #0]
			release(block_ch2_1st);
			block_ch2_1st = block_ch2_2nd;
			block_ch2_2nd = NULL;
		}
	}
	if (block_ch3_1st) {
     fba:	ldr	r0, [r7, #0]
     fbc:	ldr	r4, [pc, #196]	; (1084 <AudioOutputI2SQuad::isr()+0x198>)
     fbe:	cbz	r0, fcc <AudioOutputI2SQuad::isr()+0xe0>
		if (ch3_offset == 0) {
     fc0:	ldr	r3, [pc, #196]	; (1088 <AudioOutputI2SQuad::isr()+0x19c>)
     fc2:	ldrh	r2, [r3, #0]
     fc4:	cmp	r2, #0
     fc6:	bne.n	1030 <AudioOutputI2SQuad::isr()+0x144>
			ch3_offset = AUDIO_BLOCK_SAMPLES/2;
     fc8:	movs	r2, #64	; 0x40
     fca:	strh	r2, [r3, #0]
			release(block_ch3_1st);
			block_ch3_1st = block_ch3_2nd;
			block_ch3_2nd = NULL;
		}
	}
	if (block_ch4_1st) {
     fcc:	ldr	r0, [r6, #0]
     fce:	ldr	r4, [pc, #188]	; (108c <AudioOutputI2SQuad::isr()+0x1a0>)
     fd0:	cbz	r0, fdc <AudioOutputI2SQuad::isr()+0xf0>
		if (ch4_offset == 0) {
     fd2:	ldr	r3, [pc, #200]	; (109c <AudioOutputI2SQuad::isr()+0x1b0>)
     fd4:	ldrh	r2, [r3, #0]
     fd6:	cbnz	r2, 101a <AudioOutputI2SQuad::isr()+0x12e>
			ch4_offset = AUDIO_BLOCK_SAMPLES/2;
     fd8:	movs	r2, #64	; 0x40
     fda:	strh	r2, [r3, #0]
			release(block_ch4_1st);
			block_ch4_1st = block_ch4_2nd;
			block_ch4_2nd = NULL;
		}
	}
}
     fdc:	add	sp, #12
     fde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (update_responsibility) update_all();
	} else {
		dest = (int16_t *)i2s_tx_buffer;
	}

	src1 = (block_ch1_1st) ? block_ch1_1st->data + ch1_offset : zeros;
     fe2:	ldr.w	r9, [pc, #176]	; 1094 <AudioOutputI2SQuad::isr()+0x1a8>
     fe6:	mov	r4, r5
     fe8:	add.w	r5, r5, #512	; 0x200
     fec:	ldr.w	r1, [r9]
     ff0:	cmp	r1, #0
     ff2:	bne.n	f28 <AudioOutputI2SQuad::isr()+0x3c>
	src2 = (block_ch2_1st) ? block_ch2_1st->data + ch2_offset : zeros;
     ff4:	ldr.w	r8, [pc, #160]	; 1098 <AudioOutputI2SQuad::isr()+0x1ac>
		if (update_responsibility) update_all();
	} else {
		dest = (int16_t *)i2s_tx_buffer;
	}

	src1 = (block_ch1_1st) ? block_ch1_1st->data + ch1_offset : zeros;
     ff8:	ldr	r1, [pc, #164]	; (10a0 <AudioOutputI2SQuad::isr()+0x1b4>)
	src2 = (block_ch2_1st) ? block_ch2_1st->data + ch2_offset : zeros;
     ffa:	ldr.w	r2, [r8]
     ffe:	cmp	r2, #0
    1000:	bne.n	f3e <AudioOutputI2SQuad::isr()+0x52>
	src3 = (block_ch3_1st) ? block_ch3_1st->data + ch3_offset : zeros;
    1002:	ldr	r7, [pc, #128]	; (1084 <AudioOutputI2SQuad::isr()+0x198>)
	} else {
		dest = (int16_t *)i2s_tx_buffer;
	}

	src1 = (block_ch1_1st) ? block_ch1_1st->data + ch1_offset : zeros;
	src2 = (block_ch2_1st) ? block_ch2_1st->data + ch2_offset : zeros;
    1004:	ldr	r2, [pc, #152]	; (10a0 <AudioOutputI2SQuad::isr()+0x1b4>)
	src3 = (block_ch3_1st) ? block_ch3_1st->data + ch3_offset : zeros;
    1006:	ldr	r3, [r7, #0]
    1008:	cmp	r3, #0
    100a:	bne.n	f50 <AudioOutputI2SQuad::isr()+0x64>
	src4 = (block_ch4_1st) ? block_ch4_1st->data + ch4_offset : zeros;
    100c:	ldr	r6, [pc, #124]	; (108c <AudioOutputI2SQuad::isr()+0x1a0>)
		dest = (int16_t *)i2s_tx_buffer;
	}

	src1 = (block_ch1_1st) ? block_ch1_1st->data + ch1_offset : zeros;
	src2 = (block_ch2_1st) ? block_ch2_1st->data + ch2_offset : zeros;
	src3 = (block_ch3_1st) ? block_ch3_1st->data + ch3_offset : zeros;
    100e:	ldr	r3, [pc, #144]	; (10a0 <AudioOutputI2SQuad::isr()+0x1b4>)
	src4 = (block_ch4_1st) ? block_ch4_1st->data + ch4_offset : zeros;
    1010:	ldr	r0, [r6, #0]
    1012:	cmp	r0, #0
    1014:	bne.n	f62 <AudioOutputI2SQuad::isr()+0x76>
    1016:	ldr	r0, [pc, #136]	; (10a0 <AudioOutputI2SQuad::isr()+0x1b4>)
    1018:	b.n	f70 <AudioOutputI2SQuad::isr()+0x84>
	}
	if (block_ch4_1st) {
		if (ch4_offset == 0) {
			ch4_offset = AUDIO_BLOCK_SAMPLES/2;
		} else {
			ch4_offset = 0;
    101a:	movs	r5, #0
    101c:	strh	r5, [r3, #0]
			release(block_ch4_1st);
    101e:	bl	a2c8 <AudioStream::release(audio_block_struct*)>
			block_ch4_1st = block_ch4_2nd;
    1022:	ldr	r3, [pc, #128]	; (10a4 <AudioOutputI2SQuad::isr()+0x1b8>)
    1024:	ldr	r2, [r3, #0]
			block_ch4_2nd = NULL;
    1026:	str	r5, [r3, #0]
		if (ch4_offset == 0) {
			ch4_offset = AUDIO_BLOCK_SAMPLES/2;
		} else {
			ch4_offset = 0;
			release(block_ch4_1st);
			block_ch4_1st = block_ch4_2nd;
    1028:	str	r2, [r4, #0]
			block_ch4_2nd = NULL;
		}
	}
}
    102a:	add	sp, #12
    102c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	}
	if (block_ch3_1st) {
		if (ch3_offset == 0) {
			ch3_offset = AUDIO_BLOCK_SAMPLES/2;
		} else {
			ch3_offset = 0;
    1030:	movs	r5, #0
    1032:	strh	r5, [r3, #0]
			release(block_ch3_1st);
    1034:	bl	a2c8 <AudioStream::release(audio_block_struct*)>
			block_ch3_1st = block_ch3_2nd;
    1038:	ldr	r3, [pc, #108]	; (10a8 <AudioOutputI2SQuad::isr()+0x1bc>)
    103a:	ldr	r2, [r3, #0]
			block_ch3_2nd = NULL;
    103c:	str	r5, [r3, #0]
		if (ch3_offset == 0) {
			ch3_offset = AUDIO_BLOCK_SAMPLES/2;
		} else {
			ch3_offset = 0;
			release(block_ch3_1st);
			block_ch3_1st = block_ch3_2nd;
    103e:	str	r2, [r4, #0]
    1040:	b.n	fcc <AudioOutputI2SQuad::isr()+0xe0>
	}
	if (block_ch2_1st) {
		if (ch2_offset == 0) {
			ch2_offset = AUDIO_BLOCK_SAMPLES/2;
		} else {
			ch2_offset = 0;
    1042:	movs	r5, #0
    1044:	strh	r5, [r3, #0]
			release(block_ch2_1st);
    1046:	bl	a2c8 <AudioStream::release(audio_block_struct*)>
			block_ch2_1st = block_ch2_2nd;
    104a:	ldr	r3, [pc, #96]	; (10ac <AudioOutputI2SQuad::isr()+0x1c0>)
    104c:	ldr	r2, [r3, #0]
			block_ch2_2nd = NULL;
    104e:	str	r5, [r3, #0]
		if (ch2_offset == 0) {
			ch2_offset = AUDIO_BLOCK_SAMPLES/2;
		} else {
			ch2_offset = 0;
			release(block_ch2_1st);
			block_ch2_1st = block_ch2_2nd;
    1050:	str	r2, [r4, #0]
    1052:	b.n	fba <AudioOutputI2SQuad::isr()+0xce>

	if (block_ch1_1st) {
		if (ch1_offset == 0) {
			ch1_offset = AUDIO_BLOCK_SAMPLES/2;
		} else {
			ch1_offset = 0;
    1054:	movs	r5, #0
    1056:	strh	r5, [r3, #0]
			release(block_ch1_1st);
    1058:	bl	a2c8 <AudioStream::release(audio_block_struct*)>
			block_ch1_1st = block_ch1_2nd;
    105c:	ldr	r3, [pc, #80]	; (10b0 <AudioOutputI2SQuad::isr()+0x1c4>)
    105e:	ldr	r2, [r3, #0]
			block_ch1_2nd = NULL;
    1060:	str	r5, [r3, #0]
		if (ch1_offset == 0) {
			ch1_offset = AUDIO_BLOCK_SAMPLES/2;
		} else {
			ch1_offset = 0;
			release(block_ch1_1st);
			block_ch1_1st = block_ch1_2nd;
    1062:	str	r2, [r4, #0]
    1064:	b.n	fa6 <AudioOutputI2SQuad::isr()+0xba>
    1066:	nop
    1068:	.word	0x20001e64
    106c:	.word	0x20201460
    1070:	.word	0x400e8000
    1074:	.word	0x20001e7c
    1078:	.word	0xe000e208
    107c:	.word	0x20001e74
    1080:	.word	0x20001e84
    1084:	.word	0x20001e90
    1088:	.word	0x20001e6c
    108c:	.word	0x20001e80
    1090:	.word	0xe000ef70
    1094:	.word	0x20001e78
    1098:	.word	0x20001e70
    109c:	.word	0x20001e58
    10a0:	.word	0x20000084
    10a4:	.word	0x20001e5c
    10a8:	.word	0x20001e60
    10ac:	.word	0x20001e88
    10b0:	.word	0x20001e8c

000010b4 <AudioOutputI2SQuad::update()>:
	}
}


void AudioOutputI2SQuad::update(void)
{
    10b4:	push	{r3, r4, r5, r6, r7, lr}
	audio_block_t *block, *tmp;

	block = receiveReadOnly(0); // channel 1
    10b6:	movs	r1, #0
	}
}


void AudioOutputI2SQuad::update(void)
{
    10b8:	mov	r4, r0
	audio_block_t *block, *tmp;

	block = receiveReadOnly(0); // channel 1
    10ba:	bl	a350 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    10be:	cbz	r0, 10e4 <AudioOutputI2SQuad::update()+0x30>
		__disable_irq();
    10c0:	cpsid	i
		if (block_ch1_1st == NULL) {
    10c2:	ldr	r2, [pc, #236]	; (11b0 <AudioOutputI2SQuad::update()+0xfc>)
    10c4:	ldr	r3, [r2, #0]
    10c6:	cmp	r3, #0
    10c8:	beq.n	119c <AudioOutputI2SQuad::update()+0xe8>
			block_ch1_1st = block;
			ch1_offset = 0;
			__enable_irq();
		} else if (block_ch1_2nd == NULL) {
    10ca:	ldr	r1, [pc, #232]	; (11b4 <AudioOutputI2SQuad::update()+0x100>)
    10cc:	ldr	r5, [r1, #0]
    10ce:	cmp	r5, #0
    10d0:	beq.n	117c <AudioOutputI2SQuad::update()+0xc8>
			__enable_irq();
		} else {
			tmp = block_ch1_1st;
			block_ch1_1st = block_ch1_2nd;
			block_ch1_2nd = block;
			ch1_offset = 0;
    10d2:	ldr	r6, [pc, #228]	; (11b8 <AudioOutputI2SQuad::update()+0x104>)
    10d4:	movs	r7, #0
		} else if (block_ch1_2nd == NULL) {
			block_ch1_2nd = block;
			__enable_irq();
		} else {
			tmp = block_ch1_1st;
			block_ch1_1st = block_ch1_2nd;
    10d6:	str	r5, [r2, #0]
			block_ch1_2nd = block;
    10d8:	str	r0, [r1, #0]
			ch1_offset = 0;
    10da:	strh	r7, [r6, #0]
			__enable_irq();
    10dc:	cpsie	i
			release(tmp);
    10de:	mov	r0, r3
    10e0:	bl	a2c8 <AudioStream::release(audio_block_struct*)>
		}
	}
	block = receiveReadOnly(1); // channel 2
    10e4:	movs	r1, #1
    10e6:	mov	r0, r4
    10e8:	bl	a350 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    10ec:	cbz	r0, 1112 <AudioOutputI2SQuad::update()+0x5e>
		__disable_irq();
    10ee:	cpsid	i
		if (block_ch2_1st == NULL) {
    10f0:	ldr	r2, [pc, #200]	; (11bc <AudioOutputI2SQuad::update()+0x108>)
    10f2:	ldr	r3, [r2, #0]
    10f4:	cmp	r3, #0
    10f6:	beq.n	1188 <AudioOutputI2SQuad::update()+0xd4>
			block_ch2_1st = block;
			ch2_offset = 0;
			__enable_irq();
		} else if (block_ch2_2nd == NULL) {
    10f8:	ldr	r1, [pc, #196]	; (11c0 <AudioOutputI2SQuad::update()+0x10c>)
    10fa:	ldr	r5, [r1, #0]
    10fc:	cmp	r5, #0
    10fe:	beq.n	1176 <AudioOutputI2SQuad::update()+0xc2>
			__enable_irq();
		} else {
			tmp = block_ch2_1st;
			block_ch2_1st = block_ch2_2nd;
			block_ch2_2nd = block;
			ch2_offset = 0;
    1100:	ldr	r6, [pc, #192]	; (11c4 <AudioOutputI2SQuad::update()+0x110>)
    1102:	movs	r7, #0
		} else if (block_ch2_2nd == NULL) {
			block_ch2_2nd = block;
			__enable_irq();
		} else {
			tmp = block_ch2_1st;
			block_ch2_1st = block_ch2_2nd;
    1104:	str	r5, [r2, #0]
			block_ch2_2nd = block;
    1106:	str	r0, [r1, #0]
			ch2_offset = 0;
    1108:	strh	r7, [r6, #0]
			__enable_irq();
    110a:	cpsie	i
			release(tmp);
    110c:	mov	r0, r3
    110e:	bl	a2c8 <AudioStream::release(audio_block_struct*)>
		}
	}
	block = receiveReadOnly(2); // channel 3
    1112:	movs	r1, #2
    1114:	mov	r0, r4
    1116:	bl	a350 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    111a:	cbz	r0, 113e <AudioOutputI2SQuad::update()+0x8a>
		__disable_irq();
    111c:	cpsid	i
		if (block_ch3_1st == NULL) {
    111e:	ldr	r2, [pc, #168]	; (11c8 <AudioOutputI2SQuad::update()+0x114>)
    1120:	ldr	r3, [r2, #0]
    1122:	cmp	r3, #0
    1124:	beq.n	1192 <AudioOutputI2SQuad::update()+0xde>
			block_ch3_1st = block;
			ch3_offset = 0;
			__enable_irq();
		} else if (block_ch3_2nd == NULL) {
    1126:	ldr	r1, [pc, #164]	; (11cc <AudioOutputI2SQuad::update()+0x118>)
    1128:	ldr	r5, [r1, #0]
    112a:	cbz	r5, 1170 <AudioOutputI2SQuad::update()+0xbc>
			__enable_irq();
		} else {
			tmp = block_ch3_1st;
			block_ch3_1st = block_ch3_2nd;
			block_ch3_2nd = block;
			ch3_offset = 0;
    112c:	ldr	r6, [pc, #160]	; (11d0 <AudioOutputI2SQuad::update()+0x11c>)
    112e:	movs	r7, #0
		} else if (block_ch3_2nd == NULL) {
			block_ch3_2nd = block;
			__enable_irq();
		} else {
			tmp = block_ch3_1st;
			block_ch3_1st = block_ch3_2nd;
    1130:	str	r5, [r2, #0]
			block_ch3_2nd = block;
    1132:	str	r0, [r1, #0]
			ch3_offset = 0;
    1134:	strh	r7, [r6, #0]
			__enable_irq();
    1136:	cpsie	i
			release(tmp);
    1138:	mov	r0, r3
    113a:	bl	a2c8 <AudioStream::release(audio_block_struct*)>
		}
	}
	block = receiveReadOnly(3); // channel 4
    113e:	mov	r0, r4
    1140:	movs	r1, #3
    1142:	bl	a350 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    1146:	cbz	r0, 116e <AudioOutputI2SQuad::update()+0xba>
		__disable_irq();
    1148:	cpsid	i
		if (block_ch4_1st == NULL) {
    114a:	ldr	r2, [pc, #136]	; (11d4 <AudioOutputI2SQuad::update()+0x120>)
    114c:	ldr	r3, [r2, #0]
    114e:	cmp	r3, #0
    1150:	beq.n	11a6 <AudioOutputI2SQuad::update()+0xf2>
			block_ch4_1st = block;
			ch4_offset = 0;
			__enable_irq();
		} else if (block_ch4_2nd == NULL) {
    1152:	ldr	r1, [pc, #132]	; (11d8 <AudioOutputI2SQuad::update()+0x124>)
    1154:	ldr	r4, [r1, #0]
    1156:	cbz	r4, 1182 <AudioOutputI2SQuad::update()+0xce>
			__enable_irq();
		} else {
			tmp = block_ch4_1st;
			block_ch4_1st = block_ch4_2nd;
			block_ch4_2nd = block;
			ch4_offset = 0;
    1158:	ldr	r5, [pc, #128]	; (11dc <AudioOutputI2SQuad::update()+0x128>)
    115a:	movs	r6, #0
		} else if (block_ch4_2nd == NULL) {
			block_ch4_2nd = block;
			__enable_irq();
		} else {
			tmp = block_ch4_1st;
			block_ch4_1st = block_ch4_2nd;
    115c:	str	r4, [r2, #0]
			block_ch4_2nd = block;
    115e:	str	r0, [r1, #0]
			ch4_offset = 0;
    1160:	strh	r6, [r5, #0]
			__enable_irq();
    1162:	cpsie	i
			release(tmp);
    1164:	mov	r0, r3
		}
	}
}
    1166:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			tmp = block_ch4_1st;
			block_ch4_1st = block_ch4_2nd;
			block_ch4_2nd = block;
			ch4_offset = 0;
			__enable_irq();
			release(tmp);
    116a:	b.w	a2c8 <AudioStream::release(audio_block_struct*)>
    116e:	pop	{r3, r4, r5, r6, r7, pc}
		if (block_ch3_1st == NULL) {
			block_ch3_1st = block;
			ch3_offset = 0;
			__enable_irq();
		} else if (block_ch3_2nd == NULL) {
			block_ch3_2nd = block;
    1170:	str	r0, [r1, #0]
			__enable_irq();
    1172:	cpsie	i
    1174:	b.n	113e <AudioOutputI2SQuad::update()+0x8a>
		if (block_ch2_1st == NULL) {
			block_ch2_1st = block;
			ch2_offset = 0;
			__enable_irq();
		} else if (block_ch2_2nd == NULL) {
			block_ch2_2nd = block;
    1176:	str	r0, [r1, #0]
			__enable_irq();
    1178:	cpsie	i
    117a:	b.n	1112 <AudioOutputI2SQuad::update()+0x5e>
		if (block_ch1_1st == NULL) {
			block_ch1_1st = block;
			ch1_offset = 0;
			__enable_irq();
		} else if (block_ch1_2nd == NULL) {
			block_ch1_2nd = block;
    117c:	str	r0, [r1, #0]
			__enable_irq();
    117e:	cpsie	i
    1180:	b.n	10e4 <AudioOutputI2SQuad::update()+0x30>
		if (block_ch4_1st == NULL) {
			block_ch4_1st = block;
			ch4_offset = 0;
			__enable_irq();
		} else if (block_ch4_2nd == NULL) {
			block_ch4_2nd = block;
    1182:	str	r0, [r1, #0]
			__enable_irq();
    1184:	cpsie	i
    1186:	pop	{r3, r4, r5, r6, r7, pc}
	block = receiveReadOnly(1); // channel 2
	if (block) {
		__disable_irq();
		if (block_ch2_1st == NULL) {
			block_ch2_1st = block;
			ch2_offset = 0;
    1188:	ldr	r1, [pc, #56]	; (11c4 <AudioOutputI2SQuad::update()+0x110>)
	}
	block = receiveReadOnly(1); // channel 2
	if (block) {
		__disable_irq();
		if (block_ch2_1st == NULL) {
			block_ch2_1st = block;
    118a:	str	r0, [r2, #0]
			ch2_offset = 0;
    118c:	strh	r3, [r1, #0]
			__enable_irq();
    118e:	cpsie	i
    1190:	b.n	1112 <AudioOutputI2SQuad::update()+0x5e>
	block = receiveReadOnly(2); // channel 3
	if (block) {
		__disable_irq();
		if (block_ch3_1st == NULL) {
			block_ch3_1st = block;
			ch3_offset = 0;
    1192:	ldr	r1, [pc, #60]	; (11d0 <AudioOutputI2SQuad::update()+0x11c>)
	}
	block = receiveReadOnly(2); // channel 3
	if (block) {
		__disable_irq();
		if (block_ch3_1st == NULL) {
			block_ch3_1st = block;
    1194:	str	r0, [r2, #0]
			ch3_offset = 0;
    1196:	strh	r3, [r1, #0]
			__enable_irq();
    1198:	cpsie	i
    119a:	b.n	113e <AudioOutputI2SQuad::update()+0x8a>
	block = receiveReadOnly(0); // channel 1
	if (block) {
		__disable_irq();
		if (block_ch1_1st == NULL) {
			block_ch1_1st = block;
			ch1_offset = 0;
    119c:	ldr	r1, [pc, #24]	; (11b8 <AudioOutputI2SQuad::update()+0x104>)

	block = receiveReadOnly(0); // channel 1
	if (block) {
		__disable_irq();
		if (block_ch1_1st == NULL) {
			block_ch1_1st = block;
    119e:	str	r0, [r2, #0]
			ch1_offset = 0;
    11a0:	strh	r3, [r1, #0]
			__enable_irq();
    11a2:	cpsie	i
    11a4:	b.n	10e4 <AudioOutputI2SQuad::update()+0x30>
	block = receiveReadOnly(3); // channel 4
	if (block) {
		__disable_irq();
		if (block_ch4_1st == NULL) {
			block_ch4_1st = block;
			ch4_offset = 0;
    11a6:	ldr	r1, [pc, #52]	; (11dc <AudioOutputI2SQuad::update()+0x128>)
	}
	block = receiveReadOnly(3); // channel 4
	if (block) {
		__disable_irq();
		if (block_ch4_1st == NULL) {
			block_ch4_1st = block;
    11a8:	str	r0, [r2, #0]
			ch4_offset = 0;
    11aa:	strh	r3, [r1, #0]
			__enable_irq();
    11ac:	cpsie	i
    11ae:	pop	{r3, r4, r5, r6, r7, pc}
    11b0:	.word	0x20001e78
    11b4:	.word	0x20001e8c
    11b8:	.word	0x20001e74
    11bc:	.word	0x20001e70
    11c0:	.word	0x20001e88
    11c4:	.word	0x20001e84
    11c8:	.word	0x20001e90
    11cc:	.word	0x20001e60
    11d0:	.word	0x20001e6c
    11d4:	.word	0x20001e80
    11d8:	.word	0x20001e5c
    11dc:	.word	0x20001e58

000011e0 <AudioOutputI2SQuad::begin()>:
DMAChannel AudioOutputI2SQuad::dma(false);

static const uint32_t zerodata[AUDIO_BLOCK_SAMPLES/4] = {0};

void AudioOutputI2SQuad::begin(void)
{
    11e0:	push	{r3, r4, r5, r6, r7, lr}
	dma.begin(true); // Allocate the DMA channel first
    11e2:	ldr	r5, [pc, #204]	; (12b0 <AudioOutputI2SQuad::begin()+0xd0>)
    11e4:	movs	r1, #1

	block_ch1_1st = NULL;
    11e6:	movs	r4, #0
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
	dma.attachInterrupt(isr);

#elif defined(__IMXRT1062__)
	const int pinoffset = 0; // TODO: make this configurable...
	memset(i2s_tx_buffer, 0, sizeof(i2s_tx_buffer));
    11e8:	ldr	r6, [pc, #200]	; (12b4 <AudioOutputI2SQuad::begin()+0xd4>)

static const uint32_t zerodata[AUDIO_BLOCK_SAMPLES/4] = {0};

void AudioOutputI2SQuad::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    11ea:	mov	r0, r5

	block_ch1_1st = NULL;
	block_ch2_1st = NULL;
	block_ch3_1st = NULL;
    11ec:	ldr	r7, [pc, #200]	; (12b8 <AudioOutputI2SQuad::begin()+0xd8>)

static const uint32_t zerodata[AUDIO_BLOCK_SAMPLES/4] = {0};

void AudioOutputI2SQuad::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    11ee:	bl	98f8 <DMAChannel::begin(bool)>

	block_ch1_1st = NULL;
	block_ch2_1st = NULL;
    11f2:	ldr	r3, [pc, #200]	; (12bc <AudioOutputI2SQuad::begin()+0xdc>)

void AudioOutputI2SQuad::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first

	block_ch1_1st = NULL;
    11f4:	ldr	r2, [pc, #200]	; (12c0 <AudioOutputI2SQuad::begin()+0xe0>)
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
	dma.attachInterrupt(isr);

#elif defined(__IMXRT1062__)
	const int pinoffset = 0; // TODO: make this configurable...
	memset(i2s_tx_buffer, 0, sizeof(i2s_tx_buffer));
    11f6:	mov	r1, r4
void AudioOutputI2SQuad::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first

	block_ch1_1st = NULL;
	block_ch2_1st = NULL;
    11f8:	str	r4, [r3, #0]
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
	dma.attachInterrupt(isr);

#elif defined(__IMXRT1062__)
	const int pinoffset = 0; // TODO: make this configurable...
	memset(i2s_tx_buffer, 0, sizeof(i2s_tx_buffer));
    11fa:	mov	r0, r6
	dma.begin(true); // Allocate the DMA channel first

	block_ch1_1st = NULL;
	block_ch2_1st = NULL;
	block_ch3_1st = NULL;
	block_ch4_1st = NULL;
    11fc:	ldr	r3, [pc, #196]	; (12c4 <AudioOutputI2SQuad::begin()+0xe4>)

void AudioOutputI2SQuad::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first

	block_ch1_1st = NULL;
    11fe:	str	r4, [r2, #0]
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
	dma.attachInterrupt(isr);

#elif defined(__IMXRT1062__)
	const int pinoffset = 0; // TODO: make this configurable...
	memset(i2s_tx_buffer, 0, sizeof(i2s_tx_buffer));
    1200:	mov.w	r2, #1024	; 0x400
	dma.begin(true); // Allocate the DMA channel first

	block_ch1_1st = NULL;
	block_ch2_1st = NULL;
	block_ch3_1st = NULL;
	block_ch4_1st = NULL;
    1204:	str	r4, [r3, #0]
{
	dma.begin(true); // Allocate the DMA channel first

	block_ch1_1st = NULL;
	block_ch2_1st = NULL;
	block_ch3_1st = NULL;
    1206:	str	r4, [r7, #0]
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
	dma.attachInterrupt(isr);

#elif defined(__IMXRT1062__)
	const int pinoffset = 0; // TODO: make this configurable...
	memset(i2s_tx_buffer, 0, sizeof(i2s_tx_buffer));
    1208:	bl	af48 <memset>
	AudioOutputI2S::config_i2s();
    120c:	bl	d30 <AudioOutputI2S::config_i2s()>
	I2S1_TCR3 = I2S_TCR3_TCE_2CH << pinoffset;
    1210:	ldr	r2, [pc, #180]	; (12c8 <AudioOutputI2SQuad::begin()+0xe8>)
    1212:	mov.w	r1, #196608	; 0x30000
	switch (pinoffset) {
	  case 0:
		CORE_PIN7_CONFIG  = 3;
    1216:	ldr	r3, [pc, #180]	; (12cc <AudioOutputI2SQuad::begin()+0xec>)
    1218:	movs	r0, #3
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_DMLOE |
		DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
		DMA_TCD_NBYTES_MLOFFYES_NBYTES(4);
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2 + pinoffset * 4);
    121a:	ldr	r7, [pc, #180]	; (12d0 <AudioOutputI2SQuad::begin()+0xf0>)

#elif defined(__IMXRT1062__)
	const int pinoffset = 0; // TODO: make this configurable...
	memset(i2s_tx_buffer, 0, sizeof(i2s_tx_buffer));
	AudioOutputI2S::config_i2s();
	I2S1_TCR3 = I2S_TCR3_TCE_2CH << pinoffset;
    121c:	str	r1, [r2, #20]
	  case 2:
		CORE_PIN9_CONFIG  = 3;
		CORE_PIN6_CONFIG  = 3;
	}
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
    121e:	mov.w	lr, #2
	memset(i2s_tx_buffer, 0, sizeof(i2s_tx_buffer));
	AudioOutputI2S::config_i2s();
	I2S1_TCR3 = I2S_TCR3_TCE_2CH << pinoffset;
	switch (pinoffset) {
	  case 0:
		CORE_PIN7_CONFIG  = 3;
    1222:	str.w	r0, [r3, #384]	; 0x180
	dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_DMLOE |
		DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
		DMA_TCD_NBYTES_MLOFFYES_NBYTES(4);
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2 + pinoffset * 4);
	dma.TCD->DOFF = 4;
    1226:	mov.w	ip, #4
	AudioOutputI2S::config_i2s();
	I2S1_TCR3 = I2S_TCR3_TCE_2CH << pinoffset;
	switch (pinoffset) {
	  case 0:
		CORE_PIN7_CONFIG  = 3;
		CORE_PIN32_CONFIG = 3;
    122a:	str.w	r0, [r3, #364]	; 0x16c
		CORE_PIN9_CONFIG  = 3;
		CORE_PIN6_CONFIG  = 3;
	}
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    122e:	movw	r0, #257	; 0x101
		break;
	  case 2:
		CORE_PIN9_CONFIG  = 3;
		CORE_PIN6_CONFIG  = 3;
	}
	dma.TCD->SADDR = i2s_tx_buffer;
    1232:	ldr	r3, [r5, #0]
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    1234:	strh	r0, [r3, #6]
	dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_DMLOE |
		DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
		DMA_TCD_NBYTES_MLOFFYES_NBYTES(4);
    1236:	ldr	r0, [pc, #156]	; (12d4 <AudioOutputI2SQuad::begin()+0xf4>)
		break;
	  case 2:
		CORE_PIN9_CONFIG  = 3;
		CORE_PIN6_CONFIG  = 3;
	}
	dma.TCD->SADDR = i2s_tx_buffer;
    1238:	str	r6, [r3, #0]
		DMA_TCD_NBYTES_MLOFFYES_NBYTES(4);
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2 + pinoffset * 4);
	dma.TCD->DOFF = 4;
	dma.TCD->CITER_ELINKNO = AUDIO_BLOCK_SAMPLES * 2;
	dma.TCD->DLASTSGA = -8;
    123a:	mvn.w	r6, #7
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_DMLOE |
		DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
		DMA_TCD_NBYTES_MLOFFYES_NBYTES(4);
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2 + pinoffset * 4);
    123e:	str	r7, [r3, #16]
	dma.TCD->DOFF = 4;
	dma.TCD->CITER_ELINKNO = AUDIO_BLOCK_SAMPLES * 2;
    1240:	mov.w	r7, #256	; 0x100
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_DMLOE |
		DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
		DMA_TCD_NBYTES_MLOFFYES_NBYTES(4);
    1244:	str	r0, [r3, #8]
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    1246:	ldr	r0, [pc, #144]	; (12d8 <AudioOutputI2SQuad::begin()+0xf8>)
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2 + pinoffset * 4);
	dma.TCD->DOFF = 4;
	dma.TCD->CITER_ELINKNO = AUDIO_BLOCK_SAMPLES * 2;
    1248:	strh	r7, [r3, #22]
	  case 2:
		CORE_PIN9_CONFIG  = 3;
		CORE_PIN6_CONFIG  = 3;
	}
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
    124a:	strh.w	lr, [r3, #4]
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2 + pinoffset * 4);
	dma.TCD->DOFF = 4;
	dma.TCD->CITER_ELINKNO = AUDIO_BLOCK_SAMPLES * 2;
	dma.TCD->DLASTSGA = -8;
	dma.TCD->BITER_ELINKNO = AUDIO_BLOCK_SAMPLES * 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    124e:	mov.w	lr, #6
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2 + pinoffset * 4);
	dma.TCD->DOFF = 4;
	dma.TCD->CITER_ELINKNO = AUDIO_BLOCK_SAMPLES * 2;
	dma.TCD->DLASTSGA = -8;
	dma.TCD->BITER_ELINKNO = AUDIO_BLOCK_SAMPLES * 2;
    1252:	strh	r7, [r3, #30]
		DMA_TCD_NBYTES_MLOFFYES_NBYTES(4);
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2 + pinoffset * 4);
	dma.TCD->DOFF = 4;
	dma.TCD->CITER_ELINKNO = AUDIO_BLOCK_SAMPLES * 2;
	dma.TCD->DLASTSGA = -8;
    1254:	str	r6, [r3, #24]
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_DMLOE |
		DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
		DMA_TCD_NBYTES_MLOFFYES_NBYTES(4);
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    1256:	str	r0, [r3, #12]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    1258:	ldrb	r6, [r5, #4]
    125a:	ldr	r0, [pc, #128]	; (12dc <AudioOutputI2SQuad::begin()+0xfc>)
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    125c:	ldr	r7, [pc, #128]	; (12e0 <AudioOutputI2SQuad::begin()+0x100>)
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2 + pinoffset * 4);
	dma.TCD->DOFF = 4;
	dma.TCD->CITER_ELINKNO = AUDIO_BLOCK_SAMPLES * 2;
	dma.TCD->DLASTSGA = -8;
	dma.TCD->BITER_ELINKNO = AUDIO_BLOCK_SAMPLES * 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    125e:	strh.w	lr, [r3, #28]
	dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_DMLOE |
		DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
		DMA_TCD_NBYTES_MLOFFYES_NBYTES(4);
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2 + pinoffset * 4);
	dma.TCD->DOFF = 4;
    1262:	strh.w	ip, [r3, #20]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
    1266:	str.w	r4, [r0, r6, lsl #2]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    126a:	ldr	r3, [pc, #120]	; (12e4 <AudioOutputI2SQuad::begin()+0x104>)
	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    126c:	str.w	r7, [r0, r6, lsl #2]
    1270:	ldrb	r4, [r5, #4]
	dma.TCD->BITER_ELINKNO = AUDIO_BLOCK_SAMPLES * 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_TX);
	dma.enable();
	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    1272:	ldr	r0, [pc, #116]	; (12e8 <AudioOutputI2SQuad::begin()+0x108>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    1274:	strb	r4, [r3, #27]
	dma.TCD->DLASTSGA = -8;
	dma.TCD->BITER_ELINKNO = AUDIO_BLOCK_SAMPLES * 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_TX);
	dma.enable();
	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    1276:	ldr.w	r3, [r2, #136]	; 0x88
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
	I2S1_TCR3 = I2S_TCR3_TCE_2CH << pinoffset;
	update_responsibility = update_setup();
    127a:	ldr	r7, [pc, #112]	; (12ec <AudioOutputI2SQuad::begin()+0x10c>)
	dma.TCD->DLASTSGA = -8;
	dma.TCD->BITER_ELINKNO = AUDIO_BLOCK_SAMPLES * 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_TX);
	dma.enable();
	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    127c:	orr.w	r3, r3, #2415919104	; 0x90000000

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    1280:	ldr	r4, [pc, #108]	; (12f0 <AudioOutputI2SQuad::begin()+0x110>)
    1282:	ldr	r6, [pc, #112]	; (12f4 <AudioOutputI2SQuad::begin()+0x114>)
    1284:	str.w	r3, [r2, #136]	; 0x88
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    1288:	str	r0, [r2, #8]
	I2S1_TCR3 = I2S_TCR3_TCE_2CH << pinoffset;
    128a:	str	r1, [r2, #20]
	update_responsibility = update_setup();
    128c:	bl	a44c <AudioStream::update_setup()>
    1290:	ldrb	r3, [r5, #4]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1292:	movs	r2, #1
    1294:	strb	r0, [r7, #0]
    1296:	and.w	r1, r3, #31

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    129a:	add.w	r5, r3, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    129e:	asrs	r3, r3, #5
    12a0:	lsls	r2, r1
    12a2:	ldr	r1, [pc, #84]	; (12f8 <AudioOutputI2SQuad::begin()+0x118>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    12a4:	str.w	r6, [r4, r5, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    12a8:	str.w	r2, [r1, r3, lsl #2]
    12ac:	pop	{r3, r4, r5, r6, r7, pc}
    12ae:	nop
    12b0:	.word	0x20001e64
    12b4:	.word	0x20201460
    12b8:	.word	0x20001e90
    12bc:	.word	0x20001e70
    12c0:	.word	0x20001e78
    12c4:	.word	0x20001e80
    12c8:	.word	0x40384000
    12cc:	.word	0x401f8000
    12d0:	.word	0x40384022
    12d4:	.word	0x7fffe004
    12d8:	.word	0xfffffc00
    12dc:	.word	0x400ec000
    12e0:	.word	0x80000014
    12e4:	.word	0x400e8000
    12e8:	.word	0x90000001
    12ec:	.word	0x20001e7c
    12f0:	.word	0x20004400
    12f4:	.word	0x00000eed
    12f8:	.word	0xe000e100

000012fc <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    12fc:	ldr	r2, [pc, #8]	; (1308 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    12fe:	ldr	r1, [pc, #12]	; (130c <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    1300:	ldr	r0, [pc, #12]	; (1310 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    1302:	b.w	a508 <__aeabi_atexit>
    1306:	nop
    1308:	.word	0x20000f10
    130c:	.word	0x00000cc5
    1310:	.word	0x20001e64

00001314 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
audio_block_t * AudioOutputSPDIF3::block_left_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_left_2nd = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_2nd = nullptr;
bool AudioOutputSPDIF3::update_responsibility = false;
DMAChannel AudioOutputSPDIF3::dma(false);
    1314:	ldr	r2, [pc, #8]	; (1320 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
    1316:	ldr	r1, [pc, #12]	; (1324 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
    1318:	ldr	r0, [pc, #12]	; (1328 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
    131a:	b.w	a508 <__aeabi_atexit>
    131e:	nop
    1320:	.word	0x20000f10
    1324:	.word	0x00000cc5
    1328:	.word	0x20001e94

0000132c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    132c:	ldr	r2, [pc, #8]	; (1338 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    132e:	ldr	r1, [pc, #12]	; (133c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    1330:	ldr	r0, [pc, #12]	; (1340 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    1332:	b.w	a508 <__aeabi_atexit>
    1336:	nop
    1338:	.word	0x20000f10
    133c:	.word	0x00000cc5
    1340:	.word	0x20001e9c

00001344 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    1344:	ldr	r2, [pc, #8]	; (1350 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    1346:	ldr	r1, [pc, #12]	; (1354 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    1348:	ldr	r0, [pc, #12]	; (1358 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    134a:	b.w	a508 <__aeabi_atexit>
    134e:	nop
    1350:	.word	0x20000f10
    1354:	.word	0x00000cc5
    1358:	.word	0x20001ea4

0000135c <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
    135c:	ldr	r2, [pc, #8]	; (1368 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
    135e:	ldr	r1, [pc, #12]	; (136c <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
    1360:	ldr	r0, [pc, #12]	; (1370 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
    1362:	b.w	a508 <__aeabi_atexit>
    1366:	nop
    1368:	.word	0x20000f10
    136c:	.word	0x00000cc5
    1370:	.word	0x20001eac

00001374 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE>:
volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

volatile bool AsyncAudioInputSPDIF3::lockChanged=false;
volatile bool AsyncAudioInputSPDIF3::locked=false;
DMAChannel AsyncAudioInputSPDIF3::dma(false);
    1374:	ldr	r2, [pc, #8]	; (1380 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0xc>)
    1376:	ldr	r1, [pc, #12]	; (1384 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0x10>)
    1378:	ldr	r0, [pc, #12]	; (1388 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0x14>)
    137a:	b.w	a508 <__aeabi_atexit>
    137e:	nop
    1380:	.word	0x20000f10
    1384:	.word	0x00000cc5
    1388:	.word	0x20001eb4

0000138c <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
    138c:	ldr	r2, [pc, #8]	; (1398 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
    138e:	ldr	r1, [pc, #12]	; (139c <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
    1390:	ldr	r0, [pc, #12]	; (13a0 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
    1392:	b.w	a508 <__aeabi_atexit>
    1396:	nop
    1398:	.word	0x20000f10
    139c:	.word	0x00000cc5
    13a0:	.word	0x20001ebc

000013a4 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
    13a4:	ldr	r2, [pc, #8]	; (13b0 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
    13a6:	ldr	r1, [pc, #12]	; (13b4 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
    13a8:	ldr	r0, [pc, #12]	; (13b8 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
    13aa:	b.w	a508 <__aeabi_atexit>
    13ae:	nop
    13b0:	.word	0x20000f10
    13b4:	.word	0x00000cc5
    13b8:	.word	0x20001ec4

000013bc <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    13bc:	ldr	r2, [pc, #8]	; (13c8 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    13be:	ldr	r1, [pc, #12]	; (13cc <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    13c0:	ldr	r0, [pc, #12]	; (13d0 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    13c2:	b.w	a508 <__aeabi_atexit>
    13c6:	nop
    13c8:	.word	0x20000f10
    13cc:	.word	0x00000cc5
    13d0:	.word	0x20001ecc

000013d4 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    13d4:	movs	r0, #0
    13d6:	bx	lr

000013d8 <Print::flush()>:
	virtual void flush()				{ }
    13d8:	bx	lr
    13da:	nop

000013dc <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    13dc:	ldr	r3, [pc, #24]	; (13f8 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
    13de:	movs	r2, #0
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    13e0:	movs	r0, #2
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    13e2:	ldr	r1, [pc, #24]	; (13fc <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    13e4:	strb	r2, [r3, #2]
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    13e6:	str	r0, [r3, #4]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    13e8:	str	r1, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    13ea:	strb.w	r2, [r3, #36]	; 0x24
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    13ee:	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    13f2:	strb.w	r2, [r3, #50]	; 0x32
    13f6:	bx	lr
    13f8:	.word	0x20001ed4
    13fc:	.word	0x2000010c

00001400 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    1400:	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    1402:	ldr	r4, [pc, #104]	; (146c <SdVolume::cacheFlush()+0x6c>)
    1404:	ldrb	r3, [r4, #0]
    1406:	cbnz	r3, 140c <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    1408:	movs	r0, #1
}
    140a:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    140c:	ldr	r5, [pc, #96]	; (1470 <SdVolume::cacheFlush()+0x70>)
    140e:	ldr	r3, [pc, #100]	; (1474 <SdVolume::cacheFlush()+0x74>)
    1410:	ldr	r0, [r5, #0]
    1412:	ldr	r1, [r3, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    1414:	ldrb	r3, [r0, #0]
    1416:	cmp	r3, #254	; 0xfe
    1418:	beq.n	144a <SdVolume::cacheFlush()+0x4a>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    141a:	ldr	r2, [pc, #92]	; (1478 <SdVolume::cacheFlush()+0x78>)
    141c:	bl	1fcc <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    1420:	cbz	r0, 1446 <SdVolume::cacheFlush()+0x46>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    1422:	ldr	r6, [pc, #88]	; (147c <SdVolume::cacheFlush()+0x7c>)
    1424:	ldr	r1, [r6, #0]
    1426:	cbnz	r1, 1430 <SdVolume::cacheFlush()+0x30>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    1428:	movs	r3, #0
  }
  return true;
    142a:	movs	r0, #1
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    142c:	strb	r3, [r4, #0]
    142e:	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    1430:	ldr	r0, [r5, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    1432:	ldrb	r3, [r0, #0]
    1434:	cmp	r3, #254	; 0xfe
    1436:	beq.n	1458 <SdVolume::cacheFlush()+0x58>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    1438:	ldr	r2, [pc, #60]	; (1478 <SdVolume::cacheFlush()+0x78>)
    143a:	bl	1fcc <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    143e:	cbz	r0, 1446 <SdVolume::cacheFlush()+0x46>
        return false;
      }
      cacheMirrorBlock_ = 0;
    1440:	movs	r3, #0
    1442:	str	r3, [r6, #0]
    1444:	b.n	1428 <SdVolume::cacheFlush()+0x28>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    1446:	movs	r0, #0
    1448:	pop	{r4, r5, r6, pc}
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    144a:	ldr	r0, [pc, #44]	; (1478 <SdVolume::cacheFlush()+0x78>)
    144c:	bl	1890 <SDHC_CardWriteBlock(void const*, unsigned long)>
    1450:	clz	r0, r0
    1454:	lsrs	r0, r0, #5
    1456:	b.n	1420 <SdVolume::cacheFlush()+0x20>
    1458:	ldr	r0, [pc, #28]	; (1478 <SdVolume::cacheFlush()+0x78>)
    145a:	bl	1890 <SDHC_CardWriteBlock(void const*, unsigned long)>
    145e:	clz	r0, r0
    1462:	lsrs	r0, r0, #5
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    1464:	cmp	r0, #0
    1466:	bne.n	1440 <SdVolume::cacheFlush()+0x40>
    1468:	b.n	1446 <SdVolume::cacheFlush()+0x46>
    146a:	nop
    146c:	.word	0x20002130
    1470:	.word	0x20001f2c
    1474:	.word	0x20000f14
    1478:	.word	0x20001f30
    147c:	.word	0x20001f28

00001480 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    1480:	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    1482:	ldr	r5, [pc, #72]	; (14cc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x4c>)
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    1484:	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    1486:	ldr	r3, [r5, #0]
    1488:	cmp	r3, r0
    148a:	beq.n	14b0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x30>
    148c:	mov	r4, r0
    if (!cacheFlush()) return false;
    148e:	bl	1400 <SdVolume::cacheFlush()>
    1492:	cbnz	r0, 1498 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    1494:	movs	r0, #0
    1496:	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    1498:	ldr	r3, [pc, #52]	; (14d0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x50>)
    149a:	ldr	r0, [r3, #0]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    149c:	ldrb	r3, [r0, #0]
    149e:	cmp	r3, #254	; 0xfe
    14a0:	beq.n	14bc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    14a2:	ldr	r2, [pc, #48]	; (14d4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    14a4:	mov	r1, r4
    14a6:	bl	1edc <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    14aa:	cmp	r0, #0
    14ac:	beq.n	1494 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    14ae:	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    14b0:	ldr	r3, [pc, #36]	; (14d8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x58>)
  return true;
    14b2:	movs	r0, #1
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
    14b4:	ldrb	r1, [r3, #0]
    14b6:	orrs	r1, r6
    14b8:	strb	r1, [r3, #0]
  return true;
}
    14ba:	pop	{r4, r5, r6, pc}
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    14bc:	mov	r1, r4
    14be:	ldr	r0, [pc, #20]	; (14d4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    14c0:	bl	1798 <SDHC_CardReadBlock(void*, unsigned long)>
    14c4:	clz	r0, r0
    14c8:	lsrs	r0, r0, #5
    14ca:	b.n	14aa <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    14cc:	.word	0x20000f14
    14d0:	.word	0x20001f2c
    14d4:	.word	0x20001f30
    14d8:	.word	0x20002130

000014dc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    14dc:	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    14de:	ldrb.w	r3, [r0, #32]
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    14e2:	mov	r5, r0
    14e4:	mov	r6, r1
    14e6:	mov	r7, r2
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    14e8:	cmp	r3, #16

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    14ea:	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    14ec:	ldr	r3, [pc, #96]	; (1550 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    14ee:	beq.n	1520 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    14f0:	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    14f4:	ldr	r3, [r3, #0]
    14f6:	cmp	r4, r3
    14f8:	bne.n	152a <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4e>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    14fa:	and.w	r1, r6, #127	; 0x7f
    14fe:	ldr	r2, [pc, #84]	; (1554 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    1500:	str.w	r7, [r2, r1, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    1504:	ldr	r1, [pc, #80]	; (1558 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    1506:	ldrb	r0, [r5, #24]
    1508:	ldrb	r2, [r1, #0]
    150a:	cmp	r0, #1
    150c:	orr.w	r2, r2, #1
    1510:	strb	r2, [r1, #0]
    1512:	bls.n	1548 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
    1514:	ldr	r1, [r5, #8]
  return true;
    1516:	movs	r0, #1
    cacheBuffer_.fat32[cluster & 0X7F] = value;
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    1518:	ldr	r2, [pc, #64]	; (155c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    151a:	add	r3, r1
    151c:	str	r3, [r2, #0]
    151e:	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1520:	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    1524:	ldr	r3, [r3, #0]
    1526:	cmp	r4, r3
    1528:	beq.n	153c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x60>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    152a:	movs	r1, #0
    152c:	mov	r0, r4
    152e:	bl	1480 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    1532:	cbz	r0, 154a <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
  }
  // store entry
  if (fatType_ == 16) {
    1534:	ldrb.w	r3, [r5, #32]
    1538:	cmp	r3, #16
    153a:	bne.n	154c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x70>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    153c:	uxtb	r1, r6
    153e:	ldr	r2, [pc, #20]	; (1554 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    1540:	mov	r3, r4
    1542:	strh.w	r7, [r2, r1, lsl #1]
    1546:	b.n	1504 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    1548:	movs	r0, #1
}
    154a:	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    154c:	mov	r3, r4
    154e:	b.n	14fa <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    1550:	.word	0x20000f14
    1554:	.word	0x20001f30
    1558:	.word	0x20002130
    155c:	.word	0x20001f28

00001560 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    1560:	ldr	r3, [r0, #12]
    1562:	adds	r3, #1
    1564:	cmp	r3, r1
    1566:	bcc.n	159a <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    1568:	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    156a:	ldrb.w	r3, [r0, #32]
    156e:	mov	r4, r0
    1570:	mov	r6, r2
    1572:	mov	r5, r1
    1574:	cmp	r3, #16
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    1576:	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    1578:	ldr	r3, [pc, #80]	; (15cc <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    157a:	beq.n	159e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    157c:	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    1580:	ldr	r3, [r3, #0]
    1582:	cmp	r0, r3
    1584:	bne.n	15a8 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x48>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    1586:	and.w	r1, r5, #127	; 0x7f
    158a:	ldr	r3, [pc, #68]	; (15d0 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
    158c:	movs	r0, #1
    158e:	ldr.w	r3, [r3, r1, lsl #2]
    1592:	bic.w	r3, r3, #4026531840	; 0xf0000000
    1596:	str	r3, [r6, #0]
  }
  return true;
}
    1598:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    159a:	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    159c:	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    159e:	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    15a2:	ldr	r3, [r3, #0]
    15a4:	cmp	r0, r3
    15a6:	beq.n	15b8 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x58>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    15a8:	movs	r1, #0
    15aa:	bl	1480 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    15ae:	cbz	r0, 15c6 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x66>
  }
  if (fatType_ == 16) {
    15b0:	ldrb.w	r3, [r4, #32]
    15b4:	cmp	r3, #16
    15b6:	bne.n	1586 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    15b8:	uxtb	r1, r5
    15ba:	ldr	r3, [pc, #20]	; (15d0 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
    15bc:	movs	r0, #1
    15be:	ldrh.w	r3, [r3, r1, lsl #1]
    15c2:	str	r3, [r6, #0]
    15c4:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    15c6:	movs	r0, #0
    15c8:	pop	{r4, r5, r6, pc}
    15ca:	nop
    15cc:	.word	0x20000f14
    15d0:	.word	0x20001f30

000015d4 <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    15d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    15d8:	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    15da:	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    15dc:	cbz	r7, 1638 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    15de:	adds	r7, #1

    // don't save new start location
    setStart = false;
    15e0:	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    15e4:	ldr	r3, [r0, #12]
    15e6:	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    15ea:	cbz	r3, 1630 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    15ec:	mov	fp, r1
    15ee:	mov	r6, r0
    15f0:	mov	r9, r2
    15f2:	mov	r4, r7
    15f4:	movs	r5, #0
    15f6:	b.n	1604 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    15f8:	mov	r4, r3
    15fa:	mov	r7, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    15fc:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    15fe:	ldr	r3, [r6, #12]
    1600:	cmp	r3, r5
    1602:	bls.n	1630 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    1604:	cmp	r8, r4
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    1606:	add	r2, sp, #4
    1608:	mov	r0, r6
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    160a:	bcs.n	1610 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x3c>
      bgnCluster = endCluster = 2;
    160c:	movs	r4, #2
    160e:	mov	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    1610:	mov	r1, r4
    1612:	bl	1560 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    1616:	adds	r3, r4, #1
    1618:	cbz	r0, 1630 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    if (f != 0) {
    161a:	ldr	r2, [sp, #4]
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    161c:	subs	r1, r3, r7
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
    161e:	cmp	r2, #0
    1620:	bne.n	15f8 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    1622:	cmp	fp, r1
    1624:	beq.n	1648 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x74>
    1626:	mov	r4, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    1628:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    162a:	ldr	r3, [r6, #12]
    162c:	cmp	r3, r5
    162e:	bhi.n	1604 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    1630:	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    1632:	add	sp, #12
    1634:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    1638:	sub.w	sl, r1, #1

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    163c:	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    163e:	clz	sl, sl
    1642:	mov.w	sl, sl, lsr #5
    1646:	b.n	15e4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    1648:	cmp	r4, #1
    164a:	bls.n	1630 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    164c:	ldr	r3, [r6, #12]
    164e:	adds	r3, #1
    1650:	cmp	r4, r3
    1652:	bhi.n	1630 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    1654:	mvn.w	r2, #4026531840	; 0xf0000000
    1658:	mov	r1, r4
    165a:	mov	r0, r6
    165c:	bl	14dc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    1660:	cmp	r0, #0
    1662:	beq.n	1630 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // link clusters
  while (endCluster > bgnCluster) {
    1664:	cmp	r7, r4
    1666:	bcs.n	1692 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    1668:	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    166a:	cmp	r4, #1
    166c:	bls.n	1630 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    166e:	ldr	r3, [r6, #12]
    1670:	adds	r3, #1
    1672:	cmp	r4, r3
    1674:	bhi.n	1630 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    1676:	adds	r2, r4, #1
    1678:	mov	r1, r4
    167a:	mov	r0, r6
    167c:	bl	14dc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    1680:	cmp	r0, #0
    1682:	beq.n	1630 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    1684:	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    1686:	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    168a:	beq.n	1692 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    168c:	cmp	r4, #1
    168e:	bne.n	166e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9a>
    1690:	b.n	1630 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    1692:	ldr.w	r1, [r9]
    1696:	cbz	r1, 16b0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xdc>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    1698:	cmp	r1, #1
    169a:	bls.n	1630 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    169c:	ldr	r3, [r6, #12]
    169e:	adds	r3, #1
    16a0:	cmp	r1, r3
    16a2:	bhi.n	1630 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    16a4:	mov	r2, r7
    16a6:	mov	r0, r6
    16a8:	bl	14dc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    16ac:	cmp	r0, #0
    16ae:	beq.n	1630 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    16b0:	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    16b4:	cmp.w	sl, #0
    16b8:	beq.n	16c2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xee>
    16ba:	adds	r7, #1

  return true;
    16bc:	movs	r0, #1
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    16be:	str	r7, [r6, #0]
    16c0:	b.n	1632 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  return true;
    16c2:	movs	r0, #1
    16c4:	b.n	1632 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    16c6:	nop

000016c8 <SDHC_CMD_Do(unsigned long)>:

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    16c8:	ldr	r3, [pc, #128]	; (174c <SDHC_CMD_Do(unsigned long)+0x84>)
    16ca:	ldr	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    16cc:	mov	r1, r3
	return SDHC_RESULT_OK;
}

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
    16ce:	push	{r4}
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    16d0:	orr.w	r2, r2, #128	; 0x80

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    16d4:	mov	r4, r3

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    16d6:	str	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    16d8:	ldr	r2, [r1, #36]	; 0x24
    16da:	ldr	r3, [pc, #112]	; (174c <SDHC_CMD_Do(unsigned long)+0x84>)
    16dc:	lsls	r2, r2, #31
    16de:	bmi.n	16d8 <SDHC_CMD_Do(unsigned long)+0x10>
    16e0:	ldr	r2, [r4, #36]	; 0x24
    16e2:	lsls	r2, r2, #30
    16e4:	bmi.n	16d8 <SDHC_CMD_Do(unsigned long)+0x10>
  SDHC_XFERTYP = xfertyp;
    16e6:	str	r0, [r3, #12]

// waits for status bits sets
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    16e8:	mov.w	r2, #16777216	; 0x1000000
  do
  { result = SDHC_IRQSTAT & mask;
    16ec:	mov	r0, r3
    16ee:	b.n	16f2 <SDHC_CMD_Do(unsigned long)+0x2a>
    timeout--;
  } while (!result && (timeout));
    16f0:	cbz	r2, 171e <SDHC_CMD_Do(unsigned long)+0x56>
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    16f2:	ldr	r1, [r0, #48]	; 0x30
    timeout--;
    16f4:	subs	r2, #1
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    16f6:	ldr	r3, [pc, #88]	; (1750 <SDHC_CMD_Do(unsigned long)+0x88>)
    16f8:	ldr	r4, [pc, #80]	; (174c <SDHC_CMD_Do(unsigned long)+0x84>)
    16fa:	ands	r3, r1
    timeout--;
  } while (!result && (timeout));
    16fc:	cmp	r3, #0
    16fe:	beq.n	16f0 <SDHC_CMD_Do(unsigned long)+0x28>
  if (timeout) return result;
    1700:	cbz	r2, 171e <SDHC_CMD_Do(unsigned long)+0x56>
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
    1702:	cmp	r3, #1
    1704:	bne.n	171e <SDHC_CMD_Do(unsigned long)+0x56>
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    1706:	ldr	r3, [r4, #48]	; 0x30
    1708:	tst.w	r3, #128	; 0x80
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    170c:	ldr	r3, [r4, #48]	; 0x30
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    170e:	beq.n	1730 <SDHC_CMD_Do(unsigned long)+0x68>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    1710:	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NOT_READY;
    1714:	movs	r0, #3
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    1716:	str	r3, [r4, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    1718:	ldr.w	r4, [sp], #4
    171c:	bx	lr

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    171e:	ldr	r2, [pc, #44]	; (174c <SDHC_CMD_Do(unsigned long)+0x84>)
      return SDHC_RESULT_ERROR;
    1720:	movs	r0, #1

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    1722:	ldr	r3, [pc, #48]	; (1754 <SDHC_CMD_Do(unsigned long)+0x8c>)
    1724:	ldr	r1, [r2, #48]	; 0x30
    1726:	orrs	r3, r1
    1728:	str	r3, [r2, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    172a:	ldr.w	r4, [sp], #4
    172e:	bx	lr
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    1730:	ands.w	r0, r3, #65536	; 0x10000
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    1734:	ldr	r3, [r4, #48]	; 0x30
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    1736:	beq.n	1742 <SDHC_CMD_Do(unsigned long)+0x7a>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    1738:	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NO_RESPONSE;
    173c:	movs	r0, #5
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    173e:	str	r3, [r4, #48]	; 0x30
    1740:	b.n	172a <SDHC_CMD_Do(unsigned long)+0x62>
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
    1742:	orr.w	r3, r3, #1
    1746:	str	r3, [r4, #48]	; 0x30
    1748:	b.n	172a <SDHC_CMD_Do(unsigned long)+0x62>
    174a:	nop
    174c:	.word	0x402c0000
    1750:	.word	0x000e0001
    1754:	.word	0x000f0001

00001758 <SDHC_CMD12_StopTransferWaitForBusy()>:
  return result;
}

// sends CMD12 to stop transfer and first waits to ready SDCArd
static int SDHC_CMD12_StopTransferWaitForBusy(void)
{
    1758:	push	{r4, r5, r6, lr}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    175a:	ldr	r5, [pc, #52]	; (1790 <SDHC_CMD12_StopTransferWaitForBusy()+0x38>)
    175c:	movs	r6, #0
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    175e:	ldr	r0, [pc, #52]	; (1794 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
{
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
    1760:	movw	r4, #999	; 0x3e7
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    1764:	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1766:	bl	16c8 <SDHC_CMD_Do(unsigned long)>
    176a:	mov	r3, r0
    176c:	b.n	177c <SDHC_CMD12_StopTransferWaitForBusy()+0x24>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    176e:	cbnz	r3, 1784 <SDHC_CMD12_StopTransferWaitForBusy()+0x2c>
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    1770:	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1772:	bl	16c8 <SDHC_CMD_Do(unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    1776:	subs	r4, #1

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1778:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    177a:	beq.n	1788 <SDHC_CMD12_StopTransferWaitForBusy()+0x30>
    177c:	ldr	r2, [r5, #36]	; 0x24

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    177e:	ldr	r0, [pc, #20]	; (1794 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    1780:	lsls	r2, r2, #29
    1782:	bmi.n	176e <SDHC_CMD12_StopTransferWaitForBusy()+0x16>
    1784:	mov	r0, r3
    1786:	pop	{r4, r5, r6, pc}

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1788:	cmp	r0, #0
    178a:	it	eq
    178c:	moveq	r0, #5

  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    178e:	pop	{r4, r5, r6, pc}
    1790:	.word	0x402c0000
    1794:	.word	0x0cdb0000

00001798 <SDHC_CardReadBlock(void*, unsigned long)>:
{
  int result;
  uint32_t* pData = (uint32_t*)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0)
    1798:	ldr	r3, [pc, #224]	; (187c <SDHC_CardReadBlock(void*, unsigned long)+0xe4>)
    179a:	ldrb	r2, [r3, #0]
    179c:	cbz	r2, 17a2 <SDHC_CardReadBlock(void*, unsigned long)+0xa>
     return SDHC_RESULT_NOT_READY;
    179e:	movs	r0, #3
    17a0:	bx	lr
#if 1
// read a block from disk, using polling
//   buff - pointer on buffer where read data should be stored
//   sector - index of start sector
int SDHC_CardReadBlock(void * buff, uint32_t sector)
{
    17a2:	push	{r4, r5, r6, lr}
  // Check if this is ready
  if (sdCardDesc.status != 0)
     return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    17a4:	ldrb	r3, [r3, #1]
    17a6:	mov	r6, r0
    17a8:	cbnz	r3, 17ac <SDHC_CardReadBlock(void*, unsigned long)+0x14>
    sector *= 512;
    17aa:	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
    17ac:	ldr	r5, [pc, #208]	; (1880 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    17ae:	movw	r3, #65535	; 0xffff
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    17b2:	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    17b6:	ldr	r0, [pc, #204]	; (1884 <SDHC_CardReadBlock(void*, unsigned long)+0xec>)

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    17b8:	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL;
    17ba:	ldr	r3, [r5, #72]	; 0x48
    17bc:	orr.w	r3, r3, #16
    17c0:	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    17c2:	str	r1, [r5, #8]

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    17c4:	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    17c6:	bl	16c8 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    17ca:	cmp	r0, #0
    17cc:	bne.n	186a <SDHC_CardReadBlock(void*, unsigned long)+0xd2>
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    17ce:	mov	r4, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    17d0:	ldr	r3, [r5, #16]
    17d2:	add.w	r2, r6, #64	; 0x40
    17d6:	add.w	r0, r6, #576	; 0x240
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    17da:	mov	r1, r5
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    17dc:	ldr	r3, [r4, #48]	; 0x30
    17de:	ldr	r6, [pc, #160]	; (1880 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    17e0:	orr.w	r5, r3, #32
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    17e4:	tst.w	r3, #7340032	; 0x700000
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    17e8:	str	r5, [r4, #48]	; 0x30
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    17ea:	bne.n	186c <SDHC_CardReadBlock(void*, unsigned long)+0xd4>
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    17ec:	ldr	r3, [r4, #36]	; 0x24
    17ee:	lsls	r5, r3, #20
    17f0:	bpl.n	17ec <SDHC_CardReadBlock(void*, unsigned long)+0x54>
		*pData++ = SDHC_DATPORT;
    17f2:	ldr	r3, [r1, #32]
    17f4:	adds	r2, #64	; 0x40
    17f6:	str.w	r3, [r2, #-128]
		*pData++ = SDHC_DATPORT;
    17fa:	ldr	r3, [r1, #32]
    17fc:	str.w	r3, [r2, #-124]
		*pData++ = SDHC_DATPORT;
    1800:	ldr	r3, [r1, #32]
    1802:	str.w	r3, [r2, #-120]
		*pData++ = SDHC_DATPORT;
    1806:	ldr	r3, [r1, #32]
    1808:	str.w	r3, [r2, #-116]
		*pData++ = SDHC_DATPORT;
    180c:	ldr	r3, [r1, #32]
    180e:	str.w	r3, [r2, #-112]
		*pData++ = SDHC_DATPORT;
    1812:	ldr	r3, [r1, #32]
    1814:	str.w	r3, [r2, #-108]
		*pData++ = SDHC_DATPORT;
    1818:	ldr	r3, [r1, #32]
    181a:	str.w	r3, [r2, #-104]
		*pData++ = SDHC_DATPORT;
    181e:	ldr	r3, [r1, #32]
    1820:	str.w	r3, [r2, #-100]
		*pData++ = SDHC_DATPORT;
    1824:	ldr	r3, [r1, #32]
    1826:	str.w	r3, [r2, #-96]
		*pData++ = SDHC_DATPORT;
    182a:	ldr	r3, [r1, #32]
    182c:	str.w	r3, [r2, #-92]
		*pData++ = SDHC_DATPORT;
    1830:	ldr	r3, [r1, #32]
    1832:	str.w	r3, [r2, #-88]
		*pData++ = SDHC_DATPORT;
    1836:	ldr	r3, [r1, #32]
    1838:	str.w	r3, [r2, #-84]
		*pData++ = SDHC_DATPORT;
    183c:	ldr	r3, [r1, #32]
    183e:	str.w	r3, [r2, #-80]
		*pData++ = SDHC_DATPORT;
    1842:	ldr	r3, [r1, #32]
    1844:	str.w	r3, [r2, #-76]
		*pData++ = SDHC_DATPORT;
    1848:	ldr	r3, [r1, #32]
    184a:	str.w	r3, [r2, #-72]
		*pData++ = SDHC_DATPORT;
    184e:	ldr	r3, [r1, #32]
    1850:	str.w	r3, [r2, #-68]
static int SDHC_ReadBlock(uint32_t* pData)
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
    1854:	cmp	r2, r0
    1856:	bne.n	17dc <SDHC_CardReadBlock(void*, unsigned long)+0x44>
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
	}
	return SDHC_RESULT_OK;
    1858:	movs	r0, #0
  result = SDHC_CMD17_ReadBlock(sector);
  if(result != SDHC_RESULT_OK) return result;
  result = SDHC_ReadBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    185a:	ldr	r1, [pc, #36]	; (1880 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    185c:	ldr	r3, [r1, #48]	; 0x30
    185e:	ldr	r2, [pc, #32]	; (1880 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    1860:	lsls	r3, r3, #30
    1862:	bpl.n	185c <SDHC_CardReadBlock(void*, unsigned long)+0xc4>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);
    1864:	ldr	r3, [pc, #32]	; (1888 <SDHC_CardReadBlock(void*, unsigned long)+0xf0>)
    1866:	str	r3, [r2, #48]	; 0x30

  return result;
    1868:	pop	{r4, r5, r6, pc}
}
    186a:	pop	{r4, r5, r6, pc}
	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
    186c:	ldr	r2, [pc, #28]	; (188c <SDHC_CardReadBlock(void*, unsigned long)+0xf4>)
    186e:	orrs	r2, r3
    1870:	str	r2, [r6, #48]	; 0x30
			SDHC_CMD12_StopTransferWaitForBusy();
    1872:	bl	1758 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    1876:	movs	r0, #1
    1878:	b.n	185a <SDHC_CardReadBlock(void*, unsigned long)+0xc2>
    187a:	nop
    187c:	.word	0x20002134
    1880:	.word	0x402c0000
    1884:	.word	0x113a0010
    1888:	.word	0x01000022
    188c:	.word	0x00700020

00001890 <SDHC_CardWriteBlock(void const*, unsigned long)>:
//
// RETURNS:     result of operation
//-----------------------------------------------------------------------------
#if 1
int SDHC_CardWriteBlock(const void * buff, uint32_t sector)
{
    1890:	push	{r3, r4, r5, r6, r7, lr}
  int result;
  const uint32_t *pData = (const uint32_t *)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    1892:	ldr	r3, [pc, #160]	; (1934 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa4>)
    1894:	ldrb	r2, [r3, #0]
    1896:	cbz	r2, 189c <SDHC_CardWriteBlock(void const*, unsigned long)+0xc>
    1898:	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);

  return result;
}
    189a:	pop	{r3, r4, r5, r6, r7, pc}

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    189c:	ldrb	r3, [r3, #1]
    189e:	mov	r4, r0
    18a0:	cbnz	r3, 18a4 <SDHC_CardWriteBlock(void const*, unsigned long)+0x14>
    sector *= 512;
    18a2:	lsls	r1, r1, #9

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    18a4:	ldr	r5, [pc, #144]	; (1938 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    18a6:	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    18aa:	ldr	r0, [pc, #144]	; (193c <SDHC_CardWriteBlock(void const*, unsigned long)+0xac>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    18ac:	ldr	r3, [r5, #48]	; 0x30
    18ae:	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
	SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_DTDSEL;
    18b0:	ldr	r3, [r5, #72]	; 0x48
    18b2:	bic.w	r3, r3, #16
    18b6:	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    18b8:	str	r1, [r5, #8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    18ba:	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    18bc:	bl	16c8 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    18c0:	cmp	r0, #0
    18c2:	bne.n	189a <SDHC_CardWriteBlock(void const*, unsigned long)+0xa>
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    18c4:	mov	r2, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    18c6:	ldr	r3, [r5, #16]
    18c8:	add.w	r7, r4, #512	; 0x200
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    18cc:	mov	r6, r5
    18ce:	ldr	r3, [r2, #48]	; 0x30
    18d0:	ldr	r1, [pc, #100]	; (1938 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    18d2:	lsls	r0, r3, #27
    18d4:	bpl.n	18ce <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    18d6:	ldr	r3, [r6, #48]	; 0x30
    18d8:	tst.w	r3, #7340032	; 0x700000
    18dc:	bne.n	1912 <SDHC_CardWriteBlock(void const*, unsigned long)+0x82>
    18de:	add.w	r1, r4, #64	; 0x40
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    18e2:	ldr.w	r3, [r4], #4
    18e6:	ldr	r5, [pc, #80]	; (1938 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    18e8:	cmp	r1, r4
			SDHC_DATPORT = *pData++;
    18ea:	str	r3, [r2, #32]
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    18ec:	bne.n	18e2 <SDHC_CardWriteBlock(void const*, unsigned long)+0x52>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;
    18ee:	ldr	r3, [r6, #48]	; 0x30
    18f0:	orr.w	r3, r3, #16
    18f4:	str	r3, [r6, #48]	; 0x30

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    18f6:	ldr	r3, [r6, #48]	; 0x30
    18f8:	ands.w	r0, r3, #7340032	; 0x700000
    18fc:	bne.n	1922 <SDHC_CardWriteBlock(void const*, unsigned long)+0x92>
static int SDHC_WriteBlock(const uint32_t* pData)
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
    18fe:	cmp	r7, r1
    1900:	bne.n	18ce <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
  result = SDHC_CMD24_WriteBlock(sector);
  if (result != SDHC_RESULT_OK) return result;
  result = SDHC_WriteBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    1902:	ldr	r1, [pc, #52]	; (1938 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    1904:	ldr	r3, [r1, #48]	; 0x30
    1906:	ldr	r2, [pc, #48]	; (1938 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    1908:	lsls	r3, r3, #30
    190a:	bpl.n	1904 <SDHC_CardWriteBlock(void const*, unsigned long)+0x74>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);
    190c:	ldr	r3, [pc, #48]	; (1940 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb0>)
    190e:	str	r3, [r2, #48]	; 0x30

  return result;
    1910:	pop	{r3, r4, r5, r6, r7, pc}

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    1912:	ldr	r2, [r1, #48]	; 0x30
    1914:	ldr	r3, [pc, #44]	; (1944 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    1916:	orrs	r3, r2
    1918:	str	r3, [r1, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    191a:	bl	1758 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    191e:	movs	r0, #1
    1920:	b.n	1902 <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    1922:	ldr	r2, [r5, #48]	; 0x30
    1924:	ldr	r3, [pc, #28]	; (1944 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    1926:	orrs	r3, r2
    1928:	str	r3, [r5, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    192a:	bl	1758 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    192e:	movs	r0, #1
    1930:	b.n	1902 <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
    1932:	nop
    1934:	.word	0x20002134
    1938:	.word	0x402c0000
    193c:	.word	0x183a0000
    1940:	.word	0x01000012
    1944:	.word	0x00700010

00001948 <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    1948:	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    194a:	ldrsb.w	r3, [r0, #5]
    194e:	cmp	r3, #0
    1950:	blt.n	195a <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    1952:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    1956:	b.w	1400 <SdVolume::cacheFlush()>
    195a:	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    195c:	movs	r1, #1
    195e:	ldr	r0, [r0, #16]
    1960:	bl	1480 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    1964:	cbz	r0, 19a8 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    1966:	ldrb	r5, [r4, #20]
    1968:	ldr	r3, [pc, #64]	; (19ac <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    196a:	adds.w	r5, r3, r5, lsl #5
    196e:	beq.n	19a8 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    1970:	ldrb	r3, [r4, #6]
    1972:	cmp	r3, #1
    1974:	bls.n	19a2 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5a>

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    1976:	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    1978:	ldr	r1, [pc, #52]	; (19b0 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    197a:	lsrs	r2, r3, #16

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    197c:	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    197e:	ldr	r3, [r1, #0]
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    1980:	strh	r2, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    1982:	cbz	r3, 1992 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4a>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    1984:	add.w	r1, r5, #22
    1988:	add.w	r0, r5, #24
    198c:	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    198e:	ldrh	r3, [r5, #24]
    1990:	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    1992:	ldrb	r3, [r4, #5]
    1994:	and.w	r3, r3, #127	; 0x7f
    1998:	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    199a:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    199e:	b.w	1400 <SdVolume::cacheFlush()>
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    19a2:	ldr	r3, [r4, #24]
    19a4:	str	r3, [r5, #28]
    19a6:	b.n	1976 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x2e>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    19a8:	movs	r0, #0
    19aa:	pop	{r3, r4, r5, pc}
    19ac:	.word	0x20001f30
    19b0:	.word	0x20002144

000019b4 <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    19b4:	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    19b6:	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    19ba:	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    19bc:	movs	r1, #1
    19be:	ldr	r0, [r0, #32]
    19c0:	bl	15d4 <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    19c4:	cbz	r0, 19dc <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    19c6:	ldr	r3, [r4, #28]
    19c8:	cbnz	r3, 19da <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    19ca:	ldrb	r3, [r4, #5]
    19cc:	movs	r0, #1
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    19ce:	ldr	r2, [r4, #8]
    flags_ |= F_FILE_DIR_DIRTY;
    19d0:	orn	r3, r3, #127	; 0x7f
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    19d4:	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    19d6:	strb	r3, [r4, #5]
    19d8:	pop	{r4, pc}
  }
  return true;
    19da:	movs	r0, #1
}
    19dc:	pop	{r4, pc}
    19de:	nop

000019e0 <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    19e0:	push	{r3, r4, r5, r6, r7, lr}
    19e2:	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    19e4:	cbz	r3, 19ec <SdFile::seekSet(unsigned long)+0xc>
    19e6:	ldr	r2, [r0, #24]
    19e8:	cmp	r2, r1
    19ea:	bcs.n	19f0 <SdFile::seekSet(unsigned long)+0x10>
    19ec:	movs	r0, #0
    19ee:	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    19f0:	cmp	r3, #2
    19f2:	mov	r7, r1
    19f4:	mov	r5, r0
    19f6:	beq.n	1a32 <SdFile::seekSet(unsigned long)+0x52>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    19f8:	cbz	r7, 1a38 <SdFile::seekSet(unsigned long)+0x58>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    19fa:	ldr	r3, [r5, #32]
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    19fc:	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    19fe:	ldr	r1, [r5, #12]
    1a00:	ldrb	r3, [r3, #16]
    1a02:	subs	r2, r1, #1
    1a04:	adds	r3, #9
    1a06:	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    1a08:	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    1a0a:	cmp	r2, r4
    1a0c:	bhi.n	1a14 <SdFile::seekSet(unsigned long)+0x34>
    1a0e:	cbz	r1, 1a14 <SdFile::seekSet(unsigned long)+0x34>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    1a10:	subs	r4, r4, r2
    1a12:	b.n	1a18 <SdFile::seekSet(unsigned long)+0x38>
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    1a14:	ldr	r3, [r5, #28]
    1a16:	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    1a18:	add.w	r6, r5, #8
    1a1c:	b.n	1a2c <SdFile::seekSet(unsigned long)+0x4c>
    1a1e:	ldr	r1, [r5, #8]
    1a20:	subs	r4, #1
    1a22:	ldr	r0, [r5, #32]
    1a24:	bl	1560 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    1a28:	cmp	r0, #0
    1a2a:	beq.n	19ec <SdFile::seekSet(unsigned long)+0xc>
    1a2c:	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    1a2e:	cmp	r4, #0
    1a30:	bne.n	1a1e <SdFile::seekSet(unsigned long)+0x3e>
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    1a32:	str	r7, [r5, #12]
    return true;
    1a34:	movs	r0, #1
    1a36:	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    1a38:	str	r7, [r5, #8]
    curPosition_ = 0;
    return true;
    1a3a:	movs	r0, #1
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    1a3c:	str	r7, [r5, #12]
    return true;
    1a3e:	pop	{r3, r4, r5, r6, r7, pc}

00001a40 <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    1a40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a44:	sub	sp, #20
    1a46:	mov	r7, r0
    1a48:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    1a4a:	ldrb	r2, [r0, #6]
    1a4c:	cmp	r2, #1
    1a4e:	beq.n	1a5c <SdFile::write(void const*, unsigned int)+0x1c>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    1a50:	movs	r3, #1

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    1a52:	movs	r0, #0
    1a54:	strb	r3, [r7, #4]
}
    1a56:	add	sp, #20
    1a58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    1a5c:	ldrb	r2, [r0, #5]
    1a5e:	lsls	r4, r2, #30
    1a60:	bpl.n	1a50 <SdFile::write(void const*, unsigned int)+0x10>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    1a62:	lsls	r3, r2, #29
    1a64:	mov	fp, r1
    1a66:	bpl.n	1a7a <SdFile::write(void const*, unsigned int)+0x3a>
    1a68:	ldr	r1, [r7, #24]
    1a6a:	ldr	r3, [r7, #12]
    1a6c:	cmp	r3, r1
    1a6e:	beq.w	1bf2 <SdFile::write(void const*, unsigned int)+0x1b2>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    1a72:	bl	19e0 <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    1a76:	cmp	r0, #0
    1a78:	beq.n	1a50 <SdFile::write(void const*, unsigned int)+0x10>
  }

  while (nToWrite > 0) {
    1a7a:	ldr	r3, [sp, #4]
    1a7c:	ldr	r1, [r7, #12]
    1a7e:	cmp	r3, #0
    1a80:	beq.w	1c0e <SdFile::write(void const*, unsigned int)+0x1ce>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    1a84:	ldr.w	r8, [sp, #4]
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    1a88:	ldr.w	r9, [pc, #412]	; 1c28 <SdFile::write(void const*, unsigned int)+0x1e8>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    1a8c:	ldr.w	sl, [pc, #412]	; 1c2c <SdFile::write(void const*, unsigned int)+0x1ec>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    1a90:	ldr	r0, [r7, #32]
    uint16_t blockOffset = curPosition_ & 0X1FF;
    1a92:	ubfx	r6, r1, #0, #9
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    1a96:	ldrb	r2, [r0, #4]
    1a98:	subs	r2, #1
    1a9a:	and.w	r5, r2, r1, lsr #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    1a9e:	ands.w	r5, r5, #255	; 0xff
    1aa2:	bne.n	1b4c <SdFile::write(void const*, unsigned int)+0x10c>
    1aa4:	cmp	r6, #0
    1aa6:	bne.n	1b4c <SdFile::write(void const*, unsigned int)+0x10c>
      // start of new cluster
      if (curCluster_ == 0) {
    1aa8:	ldr	r1, [r7, #8]
    1aaa:	cmp	r1, #0
    1aac:	bne.n	1ba2 <SdFile::write(void const*, unsigned int)+0x162>
        if (firstCluster_ == 0) {
    1aae:	ldr	r2, [r7, #28]
    1ab0:	cmp	r2, #0
    1ab2:	beq.w	1bc8 <SdFile::write(void const*, unsigned int)+0x188>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    1ab6:	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    1ab8:	rsb	r4, r6, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1abc:	subs	r2, #2
    1abe:	ldrb.w	lr, [r0, #16]
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    1ac2:	uxth	r4, r4

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1ac4:	ldr	r1, [r0, #20]
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    1ac6:	cmp	r4, r8
    1ac8:	bls.n	1b50 <SdFile::write(void const*, unsigned int)+0x110>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1aca:	lsl.w	r2, r2, lr
    1ace:	add	r5, r1
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    1ad0:	uxth.w	r4, r8

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1ad4:	add	r5, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    1ad6:	cbnz	r6, 1ae0 <SdFile::write(void const*, unsigned int)+0xa0>
    1ad8:	ldr	r0, [r7, #12]
    1ada:	ldr	r2, [r7, #24]
    1adc:	cmp	r0, r2
    1ade:	bcs.n	1b88 <SdFile::write(void const*, unsigned int)+0x148>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    1ae0:	mov	r0, r5
    1ae2:	movs	r1, #1
    1ae4:	bl	1480 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    1ae8:	cmp	r0, #0
    1aea:	beq.n	1a50 <SdFile::write(void const*, unsigned int)+0x10>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    1aec:	add	r6, r9
      uint8_t* end = dst + n;
    1aee:	add.w	lr, r6, r4
      while (dst != end) *dst++ = *src++;
    1af2:	cmp	r6, lr
    1af4:	beq.n	1b12 <SdFile::write(void const*, unsigned int)+0xd2>
    1af6:	add.w	r1, fp, #4294967295
    1afa:	subs	r2, r6, #1
    1afc:	add.w	r5, lr, #4294967295
    1b00:	ldrb.w	r0, [r1, #1]!
    1b04:	strb.w	r0, [r2, #1]!
    1b08:	cmp	r5, r2
    1b0a:	bne.n	1b00 <SdFile::write(void const*, unsigned int)+0xc0>
    1b0c:	rsb	r6, r6, lr
    1b10:	add	fp, r6
    }
    nToWrite -= n;
    curPosition_ += n;
    1b12:	ldr	r5, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    1b14:	subs.w	r8, r8, r4
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    1b18:	add.w	r1, r4, r5
    1b1c:	str	r1, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    1b1e:	bne.n	1a90 <SdFile::write(void const*, unsigned int)+0x50>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    1b20:	ldr	r3, [r7, #24]
    1b22:	cmp	r1, r3
    1b24:	bls.n	1bfc <SdFile::write(void const*, unsigned int)+0x1bc>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    1b26:	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    1b28:	str	r1, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    1b2a:	orr.w	r2, r2, #128	; 0x80
    1b2e:	strb	r2, [r7, #5]
  } else if (dateTime_ && nbyte) {
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    1b30:	lsls	r2, r2, #28
    1b32:	bpl.n	1b44 <SdFile::write(void const*, unsigned int)+0x104>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    1b34:	ldrb	r3, [r7, #6]
    1b36:	cmp	r3, #0
    1b38:	beq.n	1a50 <SdFile::write(void const*, unsigned int)+0x10>
    1b3a:	mov	r0, r7
    1b3c:	bl	1948 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    1b40:	cmp	r0, #0
    1b42:	beq.n	1a50 <SdFile::write(void const*, unsigned int)+0x10>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    1b44:	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    1b46:	add	sp, #20
    1b48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b4c:	ldr	r2, [r7, #8]
    1b4e:	b.n	1ab8 <SdFile::write(void const*, unsigned int)+0x78>

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1b50:	lsl.w	r2, r2, lr
    1b54:	add	r5, r1
    if (n == 512) {
    1b56:	cmp.w	r4, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1b5a:	add	r5, r2
    if (n == 512) {
    1b5c:	bne.n	1ad6 <SdFile::write(void const*, unsigned int)+0x96>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    1b5e:	ldr.w	r2, [sl]
    1b62:	cmp	r5, r2
    1b64:	beq.n	1bda <SdFile::write(void const*, unsigned int)+0x19a>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    1b66:	ldr	r2, [pc, #176]	; (1c18 <SdFile::write(void const*, unsigned int)+0x1d8>)
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    1b68:	mov	r1, r5
    1b6a:	ldr	r0, [r2, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    1b6c:	ldrb	r2, [r0, #0]
    1b6e:	cmp	r2, #254	; 0xfe
    1b70:	beq.n	1be4 <SdFile::write(void const*, unsigned int)+0x1a4>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    1b72:	mov	r2, fp
    1b74:	bl	1fcc <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    1b78:	cmp	r0, #0
    1b7a:	beq.w	1a50 <SdFile::write(void const*, unsigned int)+0x10>
      src += 512;
    1b7e:	add.w	fp, fp, #512	; 0x200
    1b82:	mov.w	r4, #512	; 0x200
    1b86:	b.n	1b12 <SdFile::write(void const*, unsigned int)+0xd2>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    1b88:	bl	1400 <SdVolume::cacheFlush()>
    1b8c:	cmp	r0, #0
    1b8e:	beq.w	1a50 <SdFile::write(void const*, unsigned int)+0x10>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    1b92:	ldr	r1, [pc, #136]	; (1c1c <SdFile::write(void const*, unsigned int)+0x1dc>)
        SdVolume::cacheBlockNumber_ = block;
    1b94:	str.w	r5, [sl]
    1b98:	ldrb	r2, [r1, #0]
    1b9a:	orr.w	r2, r2, #1
    1b9e:	strb	r2, [r1, #0]
    1ba0:	b.n	1aec <SdFile::write(void const*, unsigned int)+0xac>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    1ba2:	add	r2, sp, #12
    1ba4:	bl	1560 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    1ba8:	cmp	r0, #0
    1baa:	beq.w	1a56 <SdFile::write(void const*, unsigned int)+0x16>
        if (vol_->isEOC(next)) {
    1bae:	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    1bb0:	movw	r1, #65528	; 0xfff8
    1bb4:	ldr	r3, [pc, #104]	; (1c20 <SdFile::write(void const*, unsigned int)+0x1e0>)
    1bb6:	ldrb.w	r4, [r0, #32]
    1bba:	ldr	r2, [sp, #12]
    1bbc:	cmp	r4, #16
    1bbe:	it	ne
    1bc0:	movne	r1, r3
    1bc2:	cmp	r2, r1
    1bc4:	bcc.w	1ab6 <SdFile::write(void const*, unsigned int)+0x76>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    1bc8:	mov	r0, r7
    1bca:	bl	19b4 <SdFile::addCluster()>
    1bce:	cmp	r0, #0
    1bd0:	beq.w	1a50 <SdFile::write(void const*, unsigned int)+0x10>
    1bd4:	ldr	r0, [r7, #32]
    1bd6:	ldr	r2, [r7, #8]
    1bd8:	b.n	1ab8 <SdFile::write(void const*, unsigned int)+0x78>
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    1bda:	mov.w	r2, #4294967295
    1bde:	str.w	r2, [sl]
    1be2:	b.n	1b66 <SdFile::write(void const*, unsigned int)+0x126>
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    1be4:	mov	r0, fp
    1be6:	bl	1890 <SDHC_CardWriteBlock(void const*, unsigned long)>
    1bea:	clz	r0, r0
    1bee:	lsrs	r0, r0, #5
    1bf0:	b.n	1b78 <SdFile::write(void const*, unsigned int)+0x138>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    1bf2:	ldr	r3, [sp, #4]
    1bf4:	cmp	r3, #0
    1bf6:	bne.w	1a84 <SdFile::write(void const*, unsigned int)+0x44>
    1bfa:	b.n	1b30 <SdFile::write(void const*, unsigned int)+0xf0>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    1bfc:	ldr	r3, [pc, #36]	; (1c24 <SdFile::write(void const*, unsigned int)+0x1e4>)
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    1bfe:	ldrb	r2, [r7, #5]
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    1c00:	ldr	r3, [r3, #0]
    1c02:	cmp	r3, #0
    1c04:	beq.n	1b30 <SdFile::write(void const*, unsigned int)+0xf0>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    1c06:	orr.w	r2, r2, #128	; 0x80
    1c0a:	strb	r2, [r7, #5]
    1c0c:	b.n	1b30 <SdFile::write(void const*, unsigned int)+0xf0>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    1c0e:	ldr	r3, [r7, #24]
    1c10:	cmp	r3, r1
    1c12:	bcc.n	1b26 <SdFile::write(void const*, unsigned int)+0xe6>
    1c14:	ldrb	r2, [r7, #5]
    1c16:	b.n	1b30 <SdFile::write(void const*, unsigned int)+0xf0>
    1c18:	.word	0x20001f2c
    1c1c:	.word	0x20002130
    1c20:	.word	0x0ffffff8
    1c24:	.word	0x20002144
    1c28:	.word	0x20001f30
    1c2c:	.word	0x20000f14

00001c30 <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    1c30:	push	{lr}
    1c32:	sub	sp, #12
  return write(&b, 1);
    1c34:	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    1c36:	add	r3, sp, #8
    1c38:	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    1c3c:	mov	r1, r3
    1c3e:	bl	1a40 <SdFile::write(void const*, unsigned int)>
}
    1c42:	add	sp, #12
    1c44:	ldr.w	pc, [sp], #4

00001c48 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    1c48:	push	{r4, r5, r6, r7, lr}
    1c4a:	ldr	r6, [pc, #156]	; (1ce8 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa0>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1c4c:	movs	r7, #255	; 0xff
    1c4e:	ldr	r5, [pc, #156]	; (1cec <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>)
    1c50:	ldr.w	lr, [r6]
    1c54:	ldr	r3, [r5, #0]
    1c56:	str	r7, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1c58:	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1c5a:	tst.w	r4, #2031616	; 0x1f0000
    1c5e:	beq.n	1c58 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x10>
    1c60:	ldr	r4, [r3, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    1c62:	uxtb	r4, r4
    1c64:	cmp	r4, #255	; 0xff
    1c66:	beq.n	1c74 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x2c>
    1c68:	ldr	r4, [r6, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    1c6a:	rsb	r4, lr, r4
    1c6e:	cmp.w	r4, #300	; 0x12c
    1c72:	bcc.n	1c56 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xe>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1c74:	orr.w	r4, r1, #64	; 0x40
    1c78:	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1c7a:	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1c7c:	tst.w	r4, #2031616	; 0x1f0000
    1c80:	beq.n	1c7a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x32>
    1c82:	ldr	r4, [r3, #116]	; 0x74
    1c84:	movs	r6, #24
    1c86:	lsr.w	r4, r2, r6
    1c8a:	uxtb	r4, r4
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1c8c:	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1c8e:	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1c90:	tst.w	r4, #2031616	; 0x1f0000
    1c94:	beq.n	1c8e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x46>
    1c96:	subs	r6, #8
    1c98:	ldr	r4, [r3, #116]	; 0x74

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    1c9a:	cmn.w	r6, #8
    1c9e:	bne.n	1c86 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x3e>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    1ca0:	cbz	r1, 1ce2 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x9a>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    1ca2:	cmp	r1, #8
    1ca4:	ite	eq
    1ca6:	moveq	r2, #135	; 0x87
    1ca8:	movne	r2, #255	; 0xff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1caa:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1cac:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1cae:	tst.w	r2, #2031616	; 0x1f0000
    1cb2:	beq.n	1cac <Sd2Card::cardCommand(unsigned char, unsigned long)+0x64>
    1cb4:	ldr	r2, [r3, #116]	; 0x74
    1cb6:	movs	r1, #0
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1cb8:	movs	r4, #255	; 0xff
    1cba:	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1cbc:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1cbe:	tst.w	r2, #2031616	; 0x1f0000
    1cc2:	beq.n	1cbc <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
    1cc4:	ldr	r2, [r3, #116]	; 0x74
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    1cc6:	uxtb	r3, r1
    1cc8:	adds	r1, #1
    1cca:	subs	r3, #255	; 0xff
    1ccc:	uxtb	r2, r2
    1cce:	it	ne
    1cd0:	movne	r3, #1
    1cd2:	strb	r2, [r0, #1]
    1cd4:	ands.w	r3, r3, r2, lsr #7
    1cd8:	beq.n	1cde <Sd2Card::cardCommand(unsigned char, unsigned long)+0x96>
    1cda:	ldr	r3, [r5, #0]
    1cdc:	b.n	1cba <Sd2Card::cardCommand(unsigned char, unsigned long)+0x72>
  return status_;
}
    1cde:	mov	r0, r2
    1ce0:	pop	{r4, r5, r6, r7, pc}
    1ce2:	movs	r2, #149	; 0x95
    1ce4:	b.n	1caa <Sd2Card::cardCommand(unsigned char, unsigned long)+0x62>
    1ce6:	nop
    1ce8:	.word	0x20002488
    1cec:	.word	0x20000f18

00001cf0 <Sd2Card::chipSelectHigh()>:
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    1cf0:	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    1cf2:	movs	r1, #1
    1cf4:	ldrb	r0, [r0, #0]
    1cf6:	bl	94c4 <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    1cfa:	ldr	r1, [pc, #76]	; (1d48 <Sd2Card::chipSelectHigh()+0x58>)
    1cfc:	ldrb	r3, [r1, #0]
    1cfe:	cbz	r3, 1d3c <Sd2Card::chipSelectHigh()+0x4c>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    1d00:	ldr	r2, [pc, #72]	; (1d4c <Sd2Card::chipSelectHigh()+0x5c>)
    chip_select_asserted = 0;
    1d02:	movs	r0, #0
    1d04:	ldrb	r3, [r2, #19]
    1d06:	strb	r0, [r1, #0]
    1d08:	mov	r1, r3
    1d0a:	cbz	r3, 1d3c <Sd2Card::chipSelectHigh()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    1d0c:	lsls	r0, r3, #31
    1d0e:	bpl.n	1d16 <Sd2Card::chipSelectHigh()+0x26>
    1d10:	ldr	r4, [r2, #40]	; 0x28
    1d12:	ldr	r0, [pc, #60]	; (1d50 <Sd2Card::chipSelectHigh()+0x60>)
    1d14:	str	r4, [r0, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    1d16:	lsls	r3, r3, #30
    1d18:	bpl.n	1d22 <Sd2Card::chipSelectHigh()+0x32>
    1d1a:	ldr	r0, [r2, #44]	; 0x2c
    1d1c:	ldr	r3, [pc, #52]	; (1d54 <Sd2Card::chipSelectHigh()+0x64>)
    1d1e:	ldrb	r1, [r2, #19]
    1d20:	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    1d22:	lsls	r4, r1, #29
    1d24:	bpl.n	1d2e <Sd2Card::chipSelectHigh()+0x3e>
    1d26:	ldr	r0, [r2, #48]	; 0x30
    1d28:	ldr	r3, [pc, #44]	; (1d58 <Sd2Card::chipSelectHigh()+0x68>)
    1d2a:	ldrb	r1, [r2, #19]
    1d2c:	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    1d2e:	lsls	r0, r1, #28
    1d30:	bmi.n	1d3e <Sd2Card::chipSelectHigh()+0x4e>
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    1d32:	lsls	r3, r1, #27
    1d34:	bpl.n	1d3c <Sd2Card::chipSelectHigh()+0x4c>
    1d36:	ldr	r2, [r2, #56]	; 0x38
    1d38:	ldr	r3, [pc, #32]	; (1d5c <Sd2Card::chipSelectHigh()+0x6c>)
    1d3a:	str	r2, [r3, #0]
    1d3c:	pop	{r4, pc}
		#endif
		if (interruptMasksUsed) {
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    1d3e:	ldr	r0, [r2, #52]	; 0x34
    1d40:	ldr	r3, [pc, #28]	; (1d60 <Sd2Card::chipSelectHigh()+0x70>)
    1d42:	ldrb	r1, [r2, #19]
    1d44:	str	r0, [r3, #0]
    1d46:	b.n	1d32 <Sd2Card::chipSelectHigh()+0x42>
    1d48:	.word	0x20002150
    1d4c:	.word	0x20000f18
    1d50:	.word	0xe000e100
    1d54:	.word	0xe000e104
    1d58:	.word	0xe000e108
    1d5c:	.word	0xe000e110
    1d60:	.word	0xe000e10c

00001d64 <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    1d64:	ldr	r2, [pc, #256]	; (1e68 <Sd2Card::chipSelectLow()+0x104>)
    1d66:	ldrb	r3, [r2, #0]
    1d68:	cbz	r3, 1d72 <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    1d6a:	ldrb	r0, [r0, #0]
    1d6c:	movs	r1, #0
    1d6e:	b.w	94c4 <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    1d72:	ldr	r3, [pc, #248]	; (1e6c <Sd2Card::chipSelectLow()+0x108>)
    1d74:	ldr	r1, [pc, #248]	; (1e70 <Sd2Card::chipSelectLow()+0x10c>)
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    1d76:	push	{r4, r5, r6, r7, lr}
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    1d78:	movs	r4, #1
    1d7a:	ldrb	r6, [r3, #19]
    1d7c:	ldr	r5, [r1, #0]
    1d7e:	strb	r4, [r2, #0]
    1d80:	ldr	r4, [r1, #4]
    1d82:	cmp	r6, #0
    1d84:	beq.n	1dea <Sd2Card::chipSelectLow()+0x86>
			__disable_irq();
    1d86:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1d88:	ldrb	r1, [r3, #19]
    1d8a:	lsls	r6, r1, #31
    1d8c:	mov	r2, r1
    1d8e:	bpl.n	1da2 <Sd2Card::chipSelectLow()+0x3e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1d90:	ldr.w	lr, [pc, #252]	; 1e90 <Sd2Card::chipSelectLow()+0x12c>
    1d94:	ldr	r7, [r3, #20]
    1d96:	ldr.w	r6, [lr]
    1d9a:	ands	r6, r7
    1d9c:	str	r6, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    1d9e:	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    1da2:	lsls	r7, r1, #30
    1da4:	bpl.n	1db4 <Sd2Card::chipSelectLow()+0x50>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1da6:	ldr	r6, [pc, #204]	; (1e74 <Sd2Card::chipSelectLow()+0x110>)
    1da8:	ldr	r1, [r3, #24]
    1daa:	ldr	r7, [r6, #0]
    1dac:	ldrb	r2, [r3, #19]
    1dae:	ands	r1, r7
    1db0:	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1db2:	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x04) {
    1db4:	lsls	r6, r2, #29
    1db6:	bpl.n	1dc6 <Sd2Card::chipSelectLow()+0x62>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1db8:	ldr	r6, [pc, #188]	; (1e78 <Sd2Card::chipSelectLow()+0x114>)
    1dba:	ldr	r1, [r3, #28]
    1dbc:	ldr	r7, [r6, #0]
    1dbe:	ldrb	r2, [r3, #19]
    1dc0:	ands	r1, r7
    1dc2:	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1dc4:	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x08) {
    1dc6:	lsls	r1, r2, #28
    1dc8:	bpl.n	1dd8 <Sd2Card::chipSelectLow()+0x74>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    1dca:	ldr	r6, [pc, #176]	; (1e7c <Sd2Card::chipSelectLow()+0x118>)
    1dcc:	ldr	r1, [r3, #32]
    1dce:	ldr	r7, [r6, #0]
    1dd0:	ldrb	r2, [r3, #19]
    1dd2:	ands	r1, r7
    1dd4:	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1dd6:	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x10) {
    1dd8:	lsls	r2, r2, #27
    1dda:	bpl.n	1de8 <Sd2Card::chipSelectLow()+0x84>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    1ddc:	ldr	r1, [pc, #160]	; (1e80 <Sd2Card::chipSelectLow()+0x11c>)
    1dde:	ldr	r2, [r3, #36]	; 0x24
    1de0:	ldr	r6, [r1, #0]
    1de2:	ands	r2, r6
    1de4:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1de6:	str	r2, [r1, #0]
			}
			__enable_irq();
    1de8:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    1dea:	ldr	r2, [r3, #8]
    1dec:	ldr	r1, [pc, #124]	; (1e6c <Sd2Card::chipSelectLow()+0x108>)
    1dee:	cmp	r2, r5
    1df0:	beq.n	1e4a <Sd2Card::chipSelectLow()+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    1df2:	ldr	r2, [pc, #144]	; (1e84 <Sd2Card::chipSelectLow()+0x120>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1df4:	ldr	r6, [pc, #144]	; (1e88 <Sd2Card::chipSelectLow()+0x124>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    1df6:	ldr	r2, [r2, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    1df8:	str	r5, [r1, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1dfa:	ubfx	r1, r2, #4, #2
    1dfe:	ubfx	r2, r2, #26, #3
    1e02:	ldr.w	r1, [r6, r1, lsl #2]
    1e06:	adds	r2, #1
    1e08:	udiv	r1, r1, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    1e0c:	cbz	r5, 1e46 <Sd2Card::chipSelectLow()+0xe2>
    1e0e:	udiv	r2, r1, r5

			if (d && clkhz/d > _clock) d++;
    1e12:	cbz	r2, 1e26 <Sd2Card::chipSelectLow()+0xc2>
    1e14:	udiv	r1, r1, r2
    1e18:	cmp	r1, r5
    1e1a:	it	hi
    1e1c:	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    1e1e:	cmp.w	r2, #258	; 0x102
    1e22:	bcc.n	1e4e <Sd2Card::chipSelectLow()+0xea>
    1e24:	ldr	r2, [pc, #100]	; (1e8c <Sd2Card::chipSelectLow()+0x128>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1e26:	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1e28:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    1e2a:	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1e2c:	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    1e2e:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    1e30:	str	r6, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1e32:	str	r5, [r3, #36]	; 0x24
		port().CCR = _ccr;
    1e34:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    1e36:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    1e38:	str	r1, [r3, #16]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    1e3a:	movs	r1, #0
    1e3c:	ldrb	r0, [r0, #0]
}
    1e3e:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    1e42:	b.w	94c4 <digitalWrite>

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    1e46:	mov	r2, r1
    1e48:	b.n	1e12 <Sd2Card::chipSelectLow()+0xae>
    1e4a:	ldr	r2, [r1, #12]
    1e4c:	b.n	1e28 <Sd2Card::chipSelectLow()+0xc4>

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    1e4e:	cmp	r2, #2
    1e50:	it	ls
    1e52:	movls	r2, #0
    1e54:	bls.n	1e26 <Sd2Card::chipSelectLow()+0xc2>
    1e56:	subs	r2, #2
    1e58:	lsrs	r5, r2, #1
    1e5a:	lsls	r1, r5, #16
    1e5c:	orr.w	r2, r2, r5, lsl #8
    1e60:	and.w	r1, r1, #16711680	; 0xff0000
    1e64:	orrs	r2, r1
    1e66:	b.n	1e26 <Sd2Card::chipSelectLow()+0xc2>
    1e68:	.word	0x20002150
    1e6c:	.word	0x20000f18
    1e70:	.word	0x20002148
    1e74:	.word	0xe000e184
    1e78:	.word	0xe000e188
    1e7c:	.word	0xe000e18c
    1e80:	.word	0xe000e190
    1e84:	.word	0x400fc000
    1e88:	.word	0x20000068
    1e8c:	.word	0x007f7fff
    1e90:	.word	0xe000e180

00001e94 <Sd2Card::waitStartBlock()>:
    1e94:	ldr	r1, [pc, #60]	; (1ed4 <Sd2Card::waitStartBlock()+0x40>)
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    1e96:	push	{r4, r5, r6}
    1e98:	ldr	r5, [pc, #60]	; (1ed8 <Sd2Card::waitStartBlock()+0x44>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1e9a:	movs	r4, #255	; 0xff
    1e9c:	ldr	r6, [r1, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1e9e:	ldr	r2, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1ea0:	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1ea2:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1ea4:	tst.w	r3, #2031616	; 0x1f0000
    1ea8:	beq.n	1ea2 <Sd2Card::waitStartBlock()+0xe>
    1eaa:	ldr	r3, [r2, #116]	; 0x74
    1eac:	uxtb	r3, r3
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    1eae:	cmp	r3, #255	; 0xff
    1eb0:	strb	r3, [r0, #1]
    1eb2:	bne.n	1ec4 <Sd2Card::waitStartBlock()+0x30>
    1eb4:	ldr	r3, [r1, #0]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    1eb6:	subs	r3, r3, r6
    1eb8:	cmp.w	r3, #300	; 0x12c
    1ebc:	bls.n	1e9e <Sd2Card::waitStartBlock()+0xa>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    1ebe:	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    1ec0:	pop	{r4, r5, r6}
    1ec2:	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    1ec4:	sub.w	r0, r3, #254	; 0xfe
    1ec8:	clz	r0, r0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    1ecc:	pop	{r4, r5, r6}
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    1ece:	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    1ed0:	bx	lr
    1ed2:	nop
    1ed4:	.word	0x20002488
    1ed8:	.word	0x20000f18

00001edc <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    1edc:	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    1ede:	ldrb	r3, [r0, #2]

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    1ee0:	mov	r5, r1
    1ee2:	mov	r4, r0
    1ee4:	mov	r6, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    1ee6:	cmp	r3, #3
    1ee8:	it	ne
    1eea:	lslne	r5, r1, #9
  chipSelectLow();
    1eec:	bl	1d64 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    1ef0:	movs	r1, #17
    1ef2:	mov	r2, r5
    1ef4:	mov	r0, r4
    1ef6:	bl	1c48 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    1efa:	cbnz	r0, 1f04 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    1efc:	mov	r0, r4
    1efe:	bl	1e94 <Sd2Card::waitStartBlock()>
    1f02:	cbnz	r0, 1f0e <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    1f04:	mov	r0, r4
    1f06:	bl	1cf0 <Sd2Card::chipSelectHigh()>
  return false;
    1f0a:	movs	r0, #0
}
    1f0c:	pop	{r4, r5, r6, pc}
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
		port().TCR = tcr;	// restore back
		return port().RDR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    1f0e:	ldr	r5, [pc, #68]	; (1f54 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x78>)
 static  uint8_t spiRec(void) {
	return SPI.transfer(0xff);
 }
 
 static void spiRec(uint8_t* buf, size_t len) {
	memset(buf, 0xFF, len);
    1f10:	mov.w	r2, #512	; 0x200
    1f14:	movs	r1, #255	; 0xff
    1f16:	mov	r0, r6
    1f18:	bl	af48 <memset>
    1f1c:	mov.w	r3, #512	; 0x200
    1f20:	mov	r2, r6
    1f22:	mov	r0, r5
    1f24:	mov	r1, r6
    1f26:	bl	26d4 <SPIClass::transfer(void const*, void*, unsigned int)>
    1f2a:	ldr	r3, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1f2c:	movs	r2, #255	; 0xff
    1f2e:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1f30:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1f32:	tst.w	r2, #2031616	; 0x1f0000
    1f36:	beq.n	1f30 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x54>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1f38:	movs	r2, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    1f3a:	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1f3c:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1f3e:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1f40:	tst.w	r2, #2031616	; 0x1f0000
    1f44:	beq.n	1f3e <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x62>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    1f46:	mov	r0, r4
    1f48:	ldr	r3, [r3, #116]	; 0x74
    1f4a:	bl	1cf0 <Sd2Card::chipSelectHigh()>
  return true;
    1f4e:	movs	r0, #1
    1f50:	pop	{r4, r5, r6, pc}
    1f52:	nop
    1f54:	.word	0x20000f18

00001f58 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    1f58:	ldr	r3, [pc, #108]	; (1fc8 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x70>)
    1f5a:	push	{r4}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1f5c:	ldr	r4, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1f5e:	str	r1, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1f60:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1f62:	tst.w	r3, #2031616	; 0x1f0000
    1f66:	beq.n	1f60 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8>
    1f68:	subs	r1, r2, #1
    1f6a:	ldr	r3, [r4, #116]	; 0x74
    1f6c:	addw	r2, r2, #511	; 0x1ff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1f70:	ldrb.w	r3, [r1, #1]!
    1f74:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1f76:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1f78:	tst.w	r3, #2031616	; 0x1f0000
    1f7c:	beq.n	1f76 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x1e>
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    1f7e:	cmp	r1, r2
    1f80:	ldr	r3, [r4, #116]	; 0x74
    1f82:	bne.n	1f70 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x18>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1f84:	movs	r3, #255	; 0xff
    1f86:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1f88:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1f8a:	tst.w	r3, #2031616	; 0x1f0000
    1f8e:	beq.n	1f88 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x30>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1f90:	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    1f92:	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1f94:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1f96:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1f98:	tst.w	r3, #2031616	; 0x1f0000
    1f9c:	beq.n	1f96 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x3e>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1f9e:	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    1fa0:	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1fa2:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1fa4:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1fa6:	tst.w	r3, #2031616	; 0x1f0000
    1faa:	beq.n	1fa4 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x4c>
    1fac:	ldr	r3, [r4, #116]	; 0x74
    1fae:	uxtb	r3, r3
    1fb0:	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    1fb4:	strb	r3, [r0, #1]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    1fb6:	ldr.w	r4, [sp], #4
    1fba:	sub.w	r0, r2, #5
    1fbe:	clz	r0, r0
    1fc2:	lsrs	r0, r0, #5
    1fc4:	bx	lr
    1fc6:	nop
    1fc8:	.word	0x20000f18

00001fcc <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    1fcc:	push	{r3, r4, r5, r6, r7, lr}
    1fce:	mov	r5, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    1fd0:	cbz	r1, 1fee <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    1fd2:	ldrb	r3, [r0, #2]
    1fd4:	mov	r4, r1
    1fd6:	mov	r6, r2
    1fd8:	cmp	r3, #3
    1fda:	it	ne
    1fdc:	lslne	r4, r1, #9
  chipSelectLow();
    1fde:	bl	1d64 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    1fe2:	movs	r1, #24
    1fe4:	mov	r2, r4
    1fe6:	mov	r0, r5
    1fe8:	bl	1c48 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    1fec:	cbz	r0, 1ff8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2c>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    1fee:	mov	r0, r5
    1ff0:	bl	1cf0 <Sd2Card::chipSelectHigh()>
  return false;
    1ff4:	movs	r0, #0
}
    1ff6:	pop	{r3, r4, r5, r6, r7, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    1ff8:	mov	r2, r6
    1ffa:	movs	r1, #254	; 0xfe
    1ffc:	mov	r0, r5
    1ffe:	bl	1f58 <Sd2Card::writeData(unsigned char, unsigned char const*)>
    2002:	cmp	r0, #0
    2004:	beq.n	1fee <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    2006:	ldr	r1, [pc, #84]	; (205c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x90>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2008:	movs	r0, #255	; 0xff
    200a:	ldr	r6, [pc, #84]	; (2060 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x94>)
    200c:	ldr	r7, [r1, #0]
    200e:	ldr	r2, [r6, #0]
    2010:	str	r0, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2012:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2014:	tst.w	r3, #2031616	; 0x1f0000
    2018:	beq.n	2012 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x46>
    201a:	ldr	r4, [r2, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    201c:	uxtb	r4, r4
    201e:	cmp	r4, #255	; 0xff
    2020:	beq.n	202e <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x62>
    2022:	ldr	r3, [r1, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    2024:	subs	r3, r3, r7
    2026:	cmp.w	r3, #600	; 0x258
    202a:	bcc.n	2010 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x44>
    202c:	b.n	1fee <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    202e:	movs	r2, #0
    2030:	movs	r1, #13
    2032:	mov	r0, r5
    2034:	bl	1c48 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    2038:	cmp	r0, #0
    203a:	bne.n	1fee <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    203c:	ldr	r2, [r6, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    203e:	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2040:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2042:	tst.w	r3, #2031616	; 0x1f0000
    2046:	beq.n	2040 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x74>
    2048:	ldr	r3, [r2, #116]	; 0x74
    204a:	tst.w	r3, #255	; 0xff
    204e:	bne.n	1fee <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    2050:	mov	r0, r5
    2052:	bl	1cf0 <Sd2Card::chipSelectHigh()>
  return true;
    2056:	movs	r0, #1
    2058:	pop	{r3, r4, r5, r6, r7, pc}
    205a:	nop
    205c:	.word	0x20002488
    2060:	.word	0x20000f18

00002064 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    2064:	ldr	r3, [pc, #8]	; (2070 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    2066:	movs	r2, #7
    2068:	ldr	r1, [pc, #8]	; (2074 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x10>)
    206a:	stmia.w	r3, {r1, r2}
    206e:	bx	lr
    2070:	.word	0x20002148
    2074:	.word	0x003d0900

00002078 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    2078:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    207a:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    207c:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    207e:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2080:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2082:	beq.n	208c <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    2084:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2088:	b.w	99cc <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    208c:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    208e:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2092:	bx	r3

00002094 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    2094:	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    2096:	movw	r5, #513	; 0x201
    209a:	ldr	r4, [r0, #0]
    209c:	str	r5, [r4, #16]

	while (count > 0) {
    209e:	cbz	r3, 20e8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
    20a0:	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    20a2:	cbz	r1, 20e2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
    20a4:	ldrb	r5, [r1, #0]
    20a6:	adds	r1, #1
		count--; // how many bytes left to output.
    20a8:	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    20aa:	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    20ac:	ldr	r5, [r4, #112]	; 0x70
    20ae:	lsls	r5, r5, #30
    20b0:	bmi.n	20c0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    20b2:	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
    20b4:	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    20b6:	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    20b8:	cbz	r2, 20c0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
    20ba:	strb	r5, [r2, #0]
    20bc:	adds	r2, #1
    20be:	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    20c0:	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    20c2:	lsls	r5, r5, #31
    20c4:	bpl.n	20ac <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    20c6:	cmp	r3, #0
    20c8:	bne.n	20a2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    20ca:	cbz	r6, 20e8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    20cc:	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    20ce:	ldr	r3, [r1, #112]	; 0x70
    20d0:	lsls	r3, r3, #30
    20d2:	bmi.n	20ce <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    20d4:	ldr	r3, [r1, #116]	; 0x74
    20d6:	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
    20d8:	cbz	r2, 20de <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
    20da:	strb	r3, [r2, #0]
    20dc:	adds	r2, #1
			count_read--;
    20de:	subs	r6, #1
    20e0:	b.n	20ca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    20e2:	ldrb.w	r5, [r0, #60]	; 0x3c
    20e6:	b.n	20a8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    20e8:	pop	{r4, r5, r6}
    20ea:	bx	lr

000020ec <_spi_dma_rxISR1()>:

SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);

#if defined(__IMXRT1062__)
// T4 has two other possible SPI objects...
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    20ec:	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    20ee:	ldr	r4, [pc, #192]	; (21b0 <_spi_dma_rxISR1()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    20f0:	ldr	r3, [pc, #192]	; (21b4 <_spi_dma_rxISR1()+0xc8>)
    20f2:	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
    20f4:	ldr	r5, [r4, #68]	; 0x44
    20f6:	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    20f8:	ldr	r2, [r4, #64]	; 0x40
    20fa:	strb	r1, [r3, #31]
    20fc:	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    20fe:	strb	r1, [r3, #28]
    2100:	ldrb	r1, [r0, #4]
    2102:	strb	r1, [r3, #28]
    2104:	cbz	r2, 2146 <_spi_dma_rxISR1()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    2106:	cmp.w	r2, #32768	; 0x8000
    210a:	bcs.n	213e <_spi_dma_rxISR1()+0x52>
    210c:	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
    210e:	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2110:	ldrh	r1, [r3, #30]
    2112:	lsls	r6, r1, #16
    2114:	bmi.n	218e <_spi_dma_rxISR1()+0xa2>
		tcd->BITER = len & 0x7fff;
    2116:	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    2118:	ldrh	r1, [r3, #30]
    211a:	uxth	r1, r1
    211c:	strh	r1, [r3, #22]
    211e:	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2120:	ldrh	r1, [r3, #30]
    2122:	lsls	r1, r1, #16
    2124:	bmi.n	2180 <_spi_dma_rxISR1()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2126:	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    2128:	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    212a:	ldrh	r2, [r3, #30]
    212c:	uxth	r2, r2
    212e:	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    2130:	str	r1, [r4, #64]	; 0x40
    2132:	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    2134:	ldr	r3, [pc, #124]	; (21b4 <_spi_dma_rxISR1()+0xc8>)
    2136:	strb	r2, [r3, #27]
    2138:	ldrb	r2, [r5, #4]
    213a:	strb	r2, [r3, #27]
    213c:	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
    213e:	ldr	r3, [pc, #120]	; (21b8 <_spi_dma_rxISR1()+0xcc>)
    2140:	add	r3, r2
    2142:	str	r3, [r4, #64]	; 0x40
    2144:	b.n	2132 <_spi_dma_rxISR1()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2146:	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2148:	movs	r5, #15
    214a:	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    214c:	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2150:	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
    2152:	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2156:	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2158:	movs	r6, #3
		_dma_event_responder->triggerEvent();
    215a:	ldr	r5, [r1, #0]
    215c:	ldr	r1, [pc, #92]	; (21bc <_spi_dma_rxISR1()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    215e:	str	r2, [r3, #28]
    2160:	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2162:	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    2166:	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2168:	strb.w	r6, [r4, #61]	; 0x3d
    216c:	bne.n	219e <_spi_dma_rxISR1()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    216e:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2170:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2172:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2174:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2176:	beq.n	21a8 <_spi_dma_rxISR1()+0xbc>

SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);

#if defined(__IMXRT1062__)
// T4 has two other possible SPI objects...
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2178:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    217c:	b.w	99cc <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2180:	ldrh	r1, [r3, #30]
    2182:	ubfx	r2, r2, #0, #9
    2186:	and.w	r1, r1, #65024	; 0xfe00
    218a:	orrs	r2, r1
    218c:	b.n	2126 <_spi_dma_rxISR1()+0x3a>
    218e:	ldrh	r1, [r3, #30]
    2190:	ubfx	r6, r2, #0, #9
    2194:	and.w	r1, r1, #65024	; 0xfe00
    2198:	orrs	r1, r6
    219a:	strh	r1, [r3, #30]
    219c:	b.n	2118 <_spi_dma_rxISR1()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    219e:	mov	r3, r5
    21a0:	mov	r1, r2

SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);

#if defined(__IMXRT1062__)
// T4 has two other possible SPI objects...
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    21a2:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    21a6:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    21a8:	ldr	r3, [r0, #8]

SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);

#if defined(__IMXRT1062__)
// T4 has two other possible SPI objects...
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    21aa:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    21ae:	bx	r3
    21b0:	.word	0x20000f68
    21b4:	.word	0x400e8000
    21b8:	.word	0xffff8001
    21bc:	.word	0x00002079

000021c0 <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    21c0:	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    21c2:	ldr	r4, [pc, #192]	; (2284 <_spi_dma_rxISR0()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    21c4:	ldr	r3, [pc, #192]	; (2288 <_spi_dma_rxISR0()+0xc8>)
    21c6:	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
    21c8:	ldr	r5, [r4, #68]	; 0x44
    21ca:	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    21cc:	ldr	r2, [r4, #64]	; 0x40
    21ce:	strb	r1, [r3, #31]
    21d0:	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    21d2:	strb	r1, [r3, #28]
    21d4:	ldrb	r1, [r0, #4]
    21d6:	strb	r1, [r3, #28]
    21d8:	cbz	r2, 221a <_spi_dma_rxISR0()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    21da:	cmp.w	r2, #32768	; 0x8000
    21de:	bcs.n	2212 <_spi_dma_rxISR0()+0x52>
    21e0:	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
    21e2:	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    21e4:	ldrh	r1, [r3, #30]
    21e6:	lsls	r6, r1, #16
    21e8:	bmi.n	2262 <_spi_dma_rxISR0()+0xa2>
		tcd->BITER = len & 0x7fff;
    21ea:	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    21ec:	ldrh	r1, [r3, #30]
    21ee:	uxth	r1, r1
    21f0:	strh	r1, [r3, #22]
    21f2:	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    21f4:	ldrh	r1, [r3, #30]
    21f6:	lsls	r1, r1, #16
    21f8:	bmi.n	2254 <_spi_dma_rxISR0()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    21fa:	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    21fc:	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    21fe:	ldrh	r2, [r3, #30]
    2200:	uxth	r2, r2
    2202:	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    2204:	str	r1, [r4, #64]	; 0x40
    2206:	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    2208:	ldr	r3, [pc, #124]	; (2288 <_spi_dma_rxISR0()+0xc8>)
    220a:	strb	r2, [r3, #27]
    220c:	ldrb	r2, [r5, #4]
    220e:	strb	r2, [r3, #27]
    2210:	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
    2212:	ldr	r3, [pc, #120]	; (228c <_spi_dma_rxISR0()+0xcc>)
    2214:	add	r3, r2
    2216:	str	r3, [r4, #64]	; 0x40
    2218:	b.n	2206 <_spi_dma_rxISR0()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    221a:	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    221c:	movs	r5, #15
    221e:	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2220:	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2224:	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
    2226:	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    222a:	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    222c:	movs	r6, #3
		_dma_event_responder->triggerEvent();
    222e:	ldr	r5, [r1, #0]
    2230:	ldr	r1, [pc, #92]	; (2290 <_spi_dma_rxISR0()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    2232:	str	r2, [r3, #28]
    2234:	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2236:	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    223a:	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    223c:	strb.w	r6, [r4, #61]	; 0x3d
    2240:	bne.n	2272 <_spi_dma_rxISR0()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2242:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2244:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2246:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2248:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    224a:	beq.n	227c <_spi_dma_rxISR0()+0xbc>
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    224c:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2250:	b.w	99cc <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2254:	ldrh	r1, [r3, #30]
    2256:	ubfx	r2, r2, #0, #9
    225a:	and.w	r1, r1, #65024	; 0xfe00
    225e:	orrs	r2, r1
    2260:	b.n	21fa <_spi_dma_rxISR0()+0x3a>
    2262:	ldrh	r1, [r3, #30]
    2264:	ubfx	r6, r2, #0, #9
    2268:	and.w	r1, r1, #65024	; 0xfe00
    226c:	orrs	r1, r6
    226e:	strh	r1, [r3, #30]
    2270:	b.n	21ec <_spi_dma_rxISR0()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2272:	mov	r3, r5
    2274:	mov	r1, r2
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2276:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    227a:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    227c:	ldr	r3, [r0, #8]
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    227e:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2282:	bx	r3
    2284:	.word	0x20000f18
    2288:	.word	0x400e8000
    228c:	.word	0xffff8001
    2290:	.word	0x00002079

00002294 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    2294:	ldr	r3, [r0, #4]
#elif defined(__arm__) && defined(TEENSYDUINO) && (defined(__IMXRT1052__) || defined(__IMXRT1062__))

//#include "debug/printf.h"

void SPIClass::begin()
{
    2296:	push	{r4, r5, r6, r7, lr}

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    2298:	ldmia.w	r3, {r1, r7}

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    229c:	ldr.w	lr, [pc, #508]	; 249c <SPIClass::begin()+0x208>

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    22a0:	movs	r6, #184	; 0xb8

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    22a2:	ldr	r2, [r1, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    22a4:	movs	r5, #2


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    22a6:	ldr	r4, [pc, #468]	; (247c <SPIClass::begin()+0x1e8>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    22a8:	bic.w	r2, r2, r7

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    22ac:	ldr	r7, [pc, #464]	; (2480 <SPIClass::begin()+0x1ec>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    22ae:	str	r2, [r1, #0]

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    22b0:	ldr.w	r2, [lr, #24]
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    22b4:	ands	r4, r2

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    22b6:	ldr	r2, [pc, #460]	; (2484 <SPIClass::begin()+0x1f0>)


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    22b8:	orrs	r7, r4
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    22ba:	movs	r4, #15


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    22bc:	str.w	r7, [lr, #24]

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    22c0:	ldrb	r7, [r0, #16]
    22c2:	add	r7, r3
    22c4:	ldrb	r7, [r7, #16]
    22c6:	add.w	r7, r2, r7, lsl #4
    22ca:	ldr	r7, [r7, #8]
    22cc:	str	r6, [r7, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    22ce:	ldrb	r7, [r0, #17]
    22d0:	add	r7, r3
    22d2:	ldrb.w	r7, [r7, #36]	; 0x24
    22d6:	add.w	r7, r2, r7, lsl #4
    22da:	ldr	r7, [r7, #8]
    22dc:	str	r6, [r7, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    22de:	ldrb	r7, [r0, #18]
    22e0:	add	r7, r3
    22e2:	ldrb.w	r7, [r7, #56]	; 0x38
    22e6:	add.w	r7, r2, r7, lsl #4
    22ea:	ldr	r7, [r7, #8]
    22ec:	str	r6, [r7, #0]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    22ee:	ldr	r7, [r1, #0]
    22f0:	ldr	r6, [r3, #4]
    22f2:	orrs	r6, r7
    22f4:	str	r6, [r1, #0]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    22f6:	ldrb	r1, [r0, #16]
    22f8:	adds	r6, r3, r1
    22fa:	add.w	r1, r3, r1, lsl #2
    22fe:	ldrb	r6, [r6, #16]
    2300:	ldr	r7, [r1, #20]
    2302:	add.w	r1, r2, r6, lsl #4
    2306:	ldr	r1, [r1, #4]
    2308:	str	r7, [r1, #0]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    230a:	ldrb	r1, [r0, #17]
    230c:	adds	r6, r3, r1
    230e:	adds	r1, #10
    2310:	ldrb.w	r6, [r6, #36]	; 0x24
    2314:	ldr.w	r7, [r3, r1, lsl #2]
    2318:	add.w	r1, r2, r6, lsl #4
    231c:	ldr	r1, [r1, #4]
    231e:	str	r7, [r1, #0]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    2320:	ldrb	r1, [r0, #18]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    2322:	ldr.w	lr, [r3, #72]	; 0x48

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    2326:	adds	r6, r3, r1
    2328:	add.w	r1, r3, r1, lsl #2

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    232c:	ldr	r7, [r3, #32]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    232e:	ldrb.w	r6, [r6, #56]	; 0x38
    2332:	ldr	r1, [r1, #60]	; 0x3c
    2334:	add.w	r2, r2, r6, lsl #4

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    2338:	ldr	r6, [r3, #52]	; 0x34

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    233a:	ldr	r2, [r2, #4]
    233c:	str	r1, [r2, #0]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    233e:	ldrb	r1, [r0, #18]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2340:	ldr	r2, [r0, #0]
    2342:	add	r1, r3
    2344:	ldrb.w	r1, [r1, #68]	; 0x44
    2348:	str.w	r1, [lr]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    234c:	ldrb	r1, [r0, #16]
    234e:	add	r1, r3
    2350:	ldrb	r1, [r1, #28]
    2352:	str	r1, [r7, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    2354:	ldrb	r1, [r0, #17]
    2356:	add	r3, r1
    2358:	ldrb.w	r3, [r3, #48]	; 0x30
    235c:	str	r3, [r6, #0]

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    235e:	str	r5, [r2, #16]

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    2360:	str	r4, [r2, #88]	; 0x58

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    2362:	ldrb	r3, [r0, #19]
    2364:	cmp	r3, #0
    2366:	beq.n	23bc <SPIClass::begin()+0x128>
			__disable_irq();
    2368:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    236a:	ldrb	r3, [r0, #19]
    236c:	lsls	r4, r3, #31
    236e:	bpl.n	237e <SPIClass::begin()+0xea>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    2370:	ldr	r2, [pc, #276]	; (2488 <SPIClass::begin()+0x1f4>)
    2372:	ldr	r3, [r0, #20]
    2374:	ldr	r1, [r2, #0]
    2376:	ands	r3, r1
    2378:	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    237a:	str	r3, [r2, #0]
    237c:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x02) {
    237e:	lsls	r1, r3, #30
    2380:	bpl.n	2390 <SPIClass::begin()+0xfc>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    2382:	ldr	r2, [pc, #264]	; (248c <SPIClass::begin()+0x1f8>)
    2384:	ldr	r3, [r0, #24]
    2386:	ldr	r1, [r2, #0]
    2388:	ands	r3, r1
    238a:	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    238c:	str	r3, [r2, #0]
    238e:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x04) {
    2390:	lsls	r2, r3, #29
    2392:	bpl.n	23a2 <SPIClass::begin()+0x10e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    2394:	ldr	r2, [pc, #248]	; (2490 <SPIClass::begin()+0x1fc>)
    2396:	ldr	r3, [r0, #28]
    2398:	ldr	r1, [r2, #0]
    239a:	ands	r3, r1
    239c:	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    239e:	str	r3, [r2, #0]
    23a0:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x08) {
    23a2:	lsls	r7, r3, #28
    23a4:	bpl.n	23b4 <SPIClass::begin()+0x120>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    23a6:	ldr	r2, [pc, #236]	; (2494 <SPIClass::begin()+0x200>)
    23a8:	ldr	r3, [r0, #32]
    23aa:	ldr	r1, [r2, #0]
    23ac:	ands	r3, r1
    23ae:	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    23b0:	str	r3, [r2, #0]
    23b2:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x10) {
    23b4:	lsls	r6, r3, #27
    23b6:	bmi.n	2450 <SPIClass::begin()+0x1bc>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    23b8:	cpsie	i
    23ba:	ldr	r2, [r0, #0]
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    23bc:	ldr	r5, [pc, #216]	; (2498 <SPIClass::begin()+0x204>)
    23be:	ldr	r3, [r0, #8]
    23c0:	cmp	r3, r5
    23c2:	beq.n	245e <SPIClass::begin()+0x1ca>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    23c4:	ldr	r3, [pc, #212]	; (249c <SPIClass::begin()+0x208>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    23c6:	str	r5, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
    23c8:	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    23ca:	ldr	r4, [pc, #212]	; (24a0 <SPIClass::begin()+0x20c>)
    23cc:	ubfx	r6, r3, #4, #2
    23d0:	ubfx	r1, r3, #26, #3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    23d4:	ldr	r3, [pc, #204]	; (24a4 <SPIClass::begin()+0x210>)

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    23d6:	ldr.w	r4, [r4, r6, lsl #2]
    23da:	adds	r1, #1
    23dc:	udiv	r1, r4, r1
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    23e0:	umull	r4, r3, r3, r1

			if (d && clkhz/d > _clock) d++;
    23e4:	lsrs	r3, r3, #20
    23e6:	bne.n	243c <SPIClass::begin()+0x1a8>
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    23e8:	str	r3, [r0, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    23ea:	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    23ec:	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
    23ee:	movs	r4, #7
		port().CR = LPSPI_CR_MEN;
    23f0:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    23f2:	str	r6, [r2, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    23f4:	str	r5, [r2, #36]	; 0x24
		port().CCR = _ccr;
    23f6:	str	r3, [r2, #64]	; 0x40
		port().TCR = settings.tcr;
    23f8:	str	r4, [r2, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    23fa:	str	r1, [r2, #16]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    23fc:	ldrb	r3, [r0, #19]
    23fe:	cbz	r3, 243a <SPIClass::begin()+0x1a6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    2400:	lsls	r5, r3, #31
    2402:	bpl.n	240c <SPIClass::begin()+0x178>
    2404:	ldr	r3, [pc, #160]	; (24a8 <SPIClass::begin()+0x214>)
    2406:	ldr	r2, [r0, #40]	; 0x28
    2408:	str	r2, [r3, #0]
    240a:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    240c:	lsls	r4, r3, #30
    240e:	bpl.n	2418 <SPIClass::begin()+0x184>
    2410:	ldr	r3, [pc, #152]	; (24ac <SPIClass::begin()+0x218>)
    2412:	ldr	r2, [r0, #44]	; 0x2c
    2414:	str	r2, [r3, #0]
    2416:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    2418:	lsls	r1, r3, #29
    241a:	bpl.n	2424 <SPIClass::begin()+0x190>
    241c:	ldr	r3, [pc, #144]	; (24b0 <SPIClass::begin()+0x21c>)
    241e:	ldr	r2, [r0, #48]	; 0x30
    2420:	str	r2, [r3, #0]
    2422:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    2424:	lsls	r2, r3, #28
    2426:	bpl.n	2430 <SPIClass::begin()+0x19c>
    2428:	ldr	r3, [pc, #136]	; (24b4 <SPIClass::begin()+0x220>)
    242a:	ldr	r2, [r0, #52]	; 0x34
    242c:	str	r2, [r3, #0]
    242e:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    2430:	lsls	r3, r3, #27
    2432:	bpl.n	243a <SPIClass::begin()+0x1a6>
    2434:	ldr	r2, [r0, #56]	; 0x38
    2436:	ldr	r3, [pc, #128]	; (24b8 <SPIClass::begin()+0x224>)
    2438:	str	r2, [r3, #0]
    243a:	pop	{r4, r5, r6, r7, pc}
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
    243c:	udiv	r1, r1, r3
    2440:	cmp	r1, r5
    2442:	it	hi
    2444:	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    2446:	cmp.w	r3, #258	; 0x102
    244a:	bcc.n	2462 <SPIClass::begin()+0x1ce>
    244c:	ldr	r3, [pc, #108]	; (24bc <SPIClass::begin()+0x228>)
    244e:	b.n	23e8 <SPIClass::begin()+0x154>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    2450:	ldr	r2, [pc, #108]	; (24c0 <SPIClass::begin()+0x22c>)
    2452:	ldr	r3, [r0, #36]	; 0x24
    2454:	ldr	r1, [r2, #0]
    2456:	ands	r3, r1
    2458:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    245a:	str	r3, [r2, #0]
    245c:	b.n	23b8 <SPIClass::begin()+0x124>
    245e:	ldr	r3, [r0, #12]
    2460:	b.n	23ea <SPIClass::begin()+0x156>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    2462:	cmp	r3, #2
    2464:	it	ls
    2466:	movls	r3, #0
    2468:	bls.n	23e8 <SPIClass::begin()+0x154>
    246a:	subs	r3, #2
    246c:	lsrs	r4, r3, #1
    246e:	lsls	r1, r4, #16
    2470:	orr.w	r3, r3, r4, lsl #8
    2474:	and.w	r1, r1, #16711680	; 0xff0000
    2478:	orrs	r3, r1
    247a:	b.n	23e8 <SPIClass::begin()+0x154>
    247c:	.word	0xe3ffffcf
    2480:	.word	0x08000010
    2484:	.word	0x200008e0
    2488:	.word	0xe000e180
    248c:	.word	0xe000e184
    2490:	.word	0xe000e188
    2494:	.word	0xe000e18c
    2498:	.word	0x003d0900
    249c:	.word	0x400fc000
    24a0:	.word	0x20000068
    24a4:	.word	0x431bde83
    24a8:	.word	0xe000e100
    24ac:	.word	0xe000e104
    24b0:	.word	0xe000e108
    24b4:	.word	0xe000e10c
    24b8:	.word	0xe000e110
    24bc:	.word	0x007f7fff
    24c0:	.word	0xe000e190

000024c4 <SPIClass::pinIsChipSelect(unsigned char)>:
	port().CR = LPSPI_CR_MEN;
}


uint8_t SPIClass::pinIsChipSelect(uint8_t pin)
{
    24c4:	ldr	r3, [r0, #4]
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
		if (pin == hardware().cs_pin[i]) return hardware().cs_mask[i];
    24c6:	ldrb.w	r2, [r3, #76]	; 0x4c
    24ca:	cmp	r2, r1
    24cc:	beq.n	24e2 <SPIClass::pinIsChipSelect(unsigned char)+0x1e>
    24ce:	ldrb.w	r2, [r3, #77]	; 0x4d
    24d2:	cmp	r2, r1
    24d4:	beq.n	24ec <SPIClass::pinIsChipSelect(unsigned char)+0x28>
    24d6:	ldrb.w	r2, [r3, #78]	; 0x4e
    24da:	cmp	r2, r1
    24dc:	beq.n	24f0 <SPIClass::pinIsChipSelect(unsigned char)+0x2c>
	}
	return 0;
    24de:	movs	r0, #0
}
    24e0:	bx	lr
}


uint8_t SPIClass::pinIsChipSelect(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
    24e2:	movs	r2, #0
		if (pin == hardware().cs_pin[i]) return hardware().cs_mask[i];
    24e4:	add	r3, r2
    24e6:	ldrb.w	r0, [r3, #92]	; 0x5c
    24ea:	bx	lr
}


uint8_t SPIClass::pinIsChipSelect(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
    24ec:	movs	r2, #1
    24ee:	b.n	24e4 <SPIClass::pinIsChipSelect(unsigned char)+0x20>
    24f0:	movs	r2, #2
    24f2:	b.n	24e4 <SPIClass::pinIsChipSelect(unsigned char)+0x20>

000024f4 <SPIClass::pinIsMOSI(unsigned char)>:
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    24f4:	ldr	r3, [r0, #4]


bool SPIClass::pinIsMOSI(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
		if (pin == hardware().mosi_pin[i]) return true;
    24f6:	ldrb.w	r2, [r3, #36]	; 0x24
    24fa:	cmp	r2, r1
    24fc:	beq.n	250c <SPIClass::pinIsMOSI(unsigned char)+0x18>
    24fe:	ldrb.w	r3, [r3, #37]	; 0x25
    2502:	subs	r0, r3, r1
    2504:	clz	r0, r0
    2508:	lsrs	r0, r0, #5
    250a:	bx	lr
    250c:	movs	r0, #1
	}
	return false;
}
    250e:	bx	lr

00002510 <SPIClass::pinIsMISO(unsigned char)>:
    2510:	ldr	r3, [r0, #4]

bool SPIClass::pinIsMISO(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
		if (pin == hardware().miso_pin[i]) return true;
    2512:	ldrb	r2, [r3, #16]
    2514:	cmp	r2, r1
    2516:	beq.n	2524 <SPIClass::pinIsMISO(unsigned char)+0x14>
    2518:	ldrb	r3, [r3, #17]
    251a:	subs	r0, r3, r1
    251c:	clz	r0, r0
    2520:	lsrs	r0, r0, #5
    2522:	bx	lr
    2524:	movs	r0, #1
	}
	return false;
}
    2526:	bx	lr

00002528 <SPIClass::pinIsSCK(unsigned char)>:
    2528:	ldr	r3, [r0, #4]

bool SPIClass::pinIsSCK(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
		if (pin == hardware().sck_pin[i]) return true;
    252a:	ldrb.w	r2, [r3, #56]	; 0x38
    252e:	cmp	r2, r1
    2530:	beq.n	2540 <SPIClass::pinIsSCK(unsigned char)+0x18>
    2532:	ldrb.w	r3, [r3, #57]	; 0x39
    2536:	subs	r0, r3, r1
    2538:	clz	r0, r0
    253c:	lsrs	r0, r0, #5
    253e:	bx	lr
    2540:	movs	r0, #1
	}
	return false;
}
    2542:	bx	lr

00002544 <SPIClass::setCS(unsigned char)>:

// setCS() is not intended for use from normal Arduino programs/sketches.
uint8_t SPIClass::setCS(uint8_t pin)
{
    2544:	ldr	r3, [r0, #4]
    2546:	push	{r4}
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
		if (pin == hardware().cs_pin[i]) {
    2548:	ldrb.w	r2, [r3, #76]	; 0x4c
    254c:	cmp	r2, r1
    254e:	beq.n	2568 <SPIClass::setCS(unsigned char)+0x24>
    2550:	ldrb.w	r2, [r3, #77]	; 0x4d
    2554:	cmp	r2, r1
    2556:	beq.n	2590 <SPIClass::setCS(unsigned char)+0x4c>
    2558:	ldrb.w	r2, [r3, #78]	; 0x4e
    255c:	cmp	r2, r1
    255e:	beq.n	2594 <SPIClass::setCS(unsigned char)+0x50>
			if (hardware().pcs_select_input_register[i])
				*hardware().pcs_select_input_register[i] = hardware().pcs_select_val[i];
			return hardware().cs_mask[i];
		}
	}
	return 0;
    2560:	movs	r0, #0
}
    2562:	ldr.w	r4, [sp], #4
    2566:	bx	lr
}

// setCS() is not intended for use from normal Arduino programs/sketches.
uint8_t SPIClass::setCS(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
    2568:	movs	r2, #0
		if (pin == hardware().cs_pin[i]) {
			*(portConfigRegister(pin)) = hardware().cs_mux[i];
    256a:	ldr	r0, [pc, #44]	; (2598 <SPIClass::setCS(unsigned char)+0x54>)
    256c:	add.w	r4, r3, r2, lsl #2
			if (hardware().pcs_select_input_register[i])
				*hardware().pcs_select_input_register[i] = hardware().pcs_select_val[i];
    2570:	add	r3, r2
// setCS() is not intended for use from normal Arduino programs/sketches.
uint8_t SPIClass::setCS(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
		if (pin == hardware().cs_pin[i]) {
			*(portConfigRegister(pin)) = hardware().cs_mux[i];
    2572:	add.w	r1, r0, r1, lsl #4
    2576:	ldr	r0, [r4, #80]	; 0x50
    2578:	ldr	r1, [r1, #4]
    257a:	str	r0, [r1, #0]
			if (hardware().pcs_select_input_register[i])
    257c:	ldr	r1, [r4, #100]	; 0x64
    257e:	cbz	r1, 2586 <SPIClass::setCS(unsigned char)+0x42>
				*hardware().pcs_select_input_register[i] = hardware().pcs_select_val[i];
    2580:	ldrb.w	r2, [r3, #95]	; 0x5f
    2584:	str	r2, [r1, #0]
			return hardware().cs_mask[i];
    2586:	ldrb.w	r0, [r3, #92]	; 0x5c
		}
	}
	return 0;
}
    258a:	ldr.w	r4, [sp], #4
    258e:	bx	lr
}

// setCS() is not intended for use from normal Arduino programs/sketches.
uint8_t SPIClass::setCS(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
    2590:	movs	r2, #1
    2592:	b.n	256a <SPIClass::setCS(unsigned char)+0x26>
    2594:	movs	r2, #2
    2596:	b.n	256a <SPIClass::setCS(unsigned char)+0x26>
    2598:	.word	0x200008e0

0000259c <SPIClass::setMOSI(unsigned char)>:
    259c:	ldr	r2, [r0, #4]
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    259e:	ldrb	r3, [r0, #17]
    25a0:	add	r3, r2
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    25a2:	push	{r4, r5, r6, r7, lr}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    25a4:	ldrb.w	r3, [r3, #36]	; 0x24
    25a8:	cmp	r3, r1
    25aa:	beq.n	25bc <SPIClass::setMOSI(unsigned char)+0x20>
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
    25ac:	ldrb.w	r3, [r2, #36]	; 0x24
    25b0:	cmp	r1, r3
    25b2:	beq.n	25be <SPIClass::setMOSI(unsigned char)+0x22>
    25b4:	ldrb.w	r3, [r2, #37]	; 0x25
    25b8:	cmp	r1, r3
    25ba:	beq.n	25fc <SPIClass::setMOSI(unsigned char)+0x60>
    25bc:	pop	{r4, r5, r6, r7, pc}
    25be:	movs	r4, #0
    25c0:	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    25c2:	ldr	r6, [r2, #0]
    25c4:	ldr	r5, [r2, #4]
    25c6:	ldr	r6, [r6, #0]
    25c8:	tst	r6, r5
    25ca:	beq.n	25f8 <SPIClass::setMOSI(unsigned char)+0x5c>
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    25cc:	ldr	r5, [pc, #52]	; (2604 <SPIClass::setMOSI(unsigned char)+0x68>)
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
    25ce:	adds	r6, r2, r1
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    25d0:	mov.w	lr, #184	; 0xb8
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
					hardware().mosi_select_input_register = hardware().mosi_select_val[i];
    25d4:	ldr	r7, [r2, #52]	; 0x34
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    25d6:	add.w	r3, r5, r3, lsl #4
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
    25da:	adds	r1, #10
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    25dc:	ldr	r3, [r3, #8]
    25de:	str.w	lr, [r3]
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
    25e2:	ldrb.w	r3, [r6, #36]	; 0x24
    25e6:	ldr.w	r2, [r2, r1, lsl #2]
    25ea:	add.w	r5, r5, r3, lsl #4
    25ee:	ldr	r3, [r5, #4]
    25f0:	str	r2, [r3, #0]
					hardware().mosi_select_input_register = hardware().mosi_select_val[i];
    25f2:	ldrb.w	r3, [r6, #48]	; 0x30
    25f6:	str	r3, [r7, #0]
				}	
				mosi_pin_index = i;
    25f8:	strb	r4, [r0, #17]
				return;
    25fa:	b.n	25bc <SPIClass::setMOSI(unsigned char)+0x20>

void SPIClass::setMOSI(uint8_t pin)
{
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
    25fc:	movs	r4, #1
}

void SPIClass::setMOSI(uint8_t pin)
{
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    25fe:	mov	r1, r4
    2600:	b.n	25c2 <SPIClass::setMOSI(unsigned char)+0x26>
    2602:	nop
    2604:	.word	0x200008e0

00002608 <SPIClass::setMISO(unsigned char)>:
    2608:	ldr	r2, [r0, #4]
	}
}

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
    260a:	ldrb	r3, [r0, #16]
    260c:	add	r3, r2
		}
	}
}

void SPIClass::setMISO(uint8_t pin)
{
    260e:	push	{r4, r5, r6, r7}
	if (pin != hardware().miso_pin[miso_pin_index]) {
    2610:	ldrb	r3, [r3, #16]
    2612:	cmp	r3, r1
    2614:	beq.n	2622 <SPIClass::setMISO(unsigned char)+0x1a>
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
    2616:	ldrb	r3, [r2, #16]
    2618:	cmp	r1, r3
    261a:	beq.n	2626 <SPIClass::setMISO(unsigned char)+0x1e>
    261c:	ldrb	r3, [r2, #17]
    261e:	cmp	r1, r3
    2620:	beq.n	265e <SPIClass::setMISO(unsigned char)+0x56>
				miso_pin_index = i;
				return;
			}
		}
	}
}
    2622:	pop	{r4, r5, r6, r7}
    2624:	bx	lr

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
    2626:	movs	r4, #0
    2628:	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    262a:	ldr	r6, [r2, #0]
    262c:	ldr	r5, [r2, #4]
    262e:	ldr	r6, [r6, #0]
    2630:	tst	r6, r5
    2632:	beq.n	265a <SPIClass::setMISO(unsigned char)+0x52>
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    2634:	ldr	r5, [pc, #44]	; (2664 <SPIClass::setMISO(unsigned char)+0x5c>)
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    2636:	adds	r6, r2, r1
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    2638:	movs	r7, #184	; 0xb8
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    263a:	adds	r1, #4
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    263c:	add.w	r3, r5, r3, lsl #4
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    2640:	add.w	r1, r2, r1, lsl #2
					hardware().miso_select_input_register = hardware().miso_select_val[i];
    2644:	ldr	r2, [r2, #32]
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    2646:	ldr	r3, [r3, #8]
    2648:	str	r7, [r3, #0]
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    264a:	ldrb	r3, [r6, #16]
    264c:	ldr	r1, [r1, #4]
    264e:	add.w	r5, r5, r3, lsl #4
    2652:	ldr	r3, [r5, #4]
    2654:	str	r1, [r3, #0]
					hardware().miso_select_input_register = hardware().miso_select_val[i];
    2656:	ldrb	r3, [r6, #28]
    2658:	str	r3, [r2, #0]
				}	
				miso_pin_index = i;
    265a:	strb	r4, [r0, #16]
				return;
    265c:	b.n	2622 <SPIClass::setMISO(unsigned char)+0x1a>

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
    265e:	movs	r4, #1
}

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
    2660:	mov	r1, r4
    2662:	b.n	262a <SPIClass::setMISO(unsigned char)+0x22>
    2664:	.word	0x200008e0

00002668 <SPIClass::setSCK(unsigned char)>:
    2668:	ldr	r2, [r0, #4]
	}
}

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
    266a:	ldrb	r3, [r0, #18]
    266c:	add	r3, r2
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    266e:	push	{r4, r5, r6, r7}
	if (pin != hardware().sck_pin[sck_pin_index]) {
    2670:	ldrb.w	r3, [r3, #56]	; 0x38
    2674:	cmp	r3, r1
    2676:	beq.n	2688 <SPIClass::setSCK(unsigned char)+0x20>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
    2678:	ldrb.w	r3, [r2, #56]	; 0x38
    267c:	cmp	r1, r3
    267e:	beq.n	268c <SPIClass::setSCK(unsigned char)+0x24>
    2680:	ldrb.w	r3, [r2, #57]	; 0x39
    2684:	cmp	r1, r3
    2686:	beq.n	26c8 <SPIClass::setSCK(unsigned char)+0x60>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    2688:	pop	{r4, r5, r6, r7}
    268a:	bx	lr

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
    268c:	movs	r4, #0
    268e:	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    2690:	ldr	r6, [r2, #0]
    2692:	ldr	r5, [r2, #4]
    2694:	ldr	r6, [r6, #0]
    2696:	tst	r6, r5
    2698:	beq.n	26c4 <SPIClass::setSCK(unsigned char)+0x5c>
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    269a:	ldr	r5, [pc, #52]	; (26d0 <SPIClass::setSCK(unsigned char)+0x68>)
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    269c:	adds	r6, r2, r1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    269e:	movs	r7, #184	; 0xb8
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    26a0:	adds	r1, #14
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    26a2:	add.w	r3, r5, r3, lsl #4
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    26a6:	add.w	r1, r2, r1, lsl #2
					hardware().sck_select_input_register = hardware().sck_select_val[i];
    26aa:	ldr	r2, [r2, #72]	; 0x48
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    26ac:	ldr	r3, [r3, #8]
    26ae:	str	r7, [r3, #0]
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    26b0:	ldrb.w	r3, [r6, #56]	; 0x38
    26b4:	ldr	r1, [r1, #4]
    26b6:	add.w	r5, r5, r3, lsl #4
    26ba:	ldr	r3, [r5, #4]
    26bc:	str	r1, [r3, #0]
					hardware().sck_select_input_register = hardware().sck_select_val[i];
    26be:	ldrb.w	r3, [r6, #68]	; 0x44
    26c2:	str	r3, [r2, #0]
				}	
				sck_pin_index = i;
    26c4:	strb	r4, [r0, #18]
				return;
    26c6:	b.n	2688 <SPIClass::setSCK(unsigned char)+0x20>

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
    26c8:	movs	r4, #1
}

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    26ca:	mov	r1, r4
    26cc:	b.n	2690 <SPIClass::setSCK(unsigned char)+0x28>
    26ce:	nop
    26d0:	.word	0x200008e0

000026d4 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    26d4:	cbz	r3, 26da <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    26d6:	b.w	2094 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    26da:	bx	lr

000026dc <allocate_f32_memory(int)>:
uint8_t AudioStream_F32::f32_memory_used_max = 0;

audio_block_f32_t* allocate_f32_memory(const int num) {
	static bool firstTime=true;
	static audio_block_f32_t *data_f32;
	if (firstTime == true) {
    26dc:	ldr	r3, [pc, #88]	; (2738 <allocate_f32_memory(int)+0x5c>)
    26de:	ldrb	r2, [r3, #0]
    26e0:	cbz	r2, 2730 <allocate_f32_memory(int)+0x54>
		firstTime = false;
    26e2:	movs	r2, #0
		data_f32 = new audio_block_f32_t[num];
    26e4:	cmp.w	r0, #4030464	; 0x3d8000
uint32_t AudioStream_F32::f32_memory_pool_available_mask[6];

uint8_t AudioStream_F32::f32_memory_used = 0;
uint8_t AudioStream_F32::f32_memory_used_max = 0;

audio_block_f32_t* allocate_f32_memory(const int num) {
    26e8:	push	{r4, r5, r6, lr}
	static bool firstTime=true;
	static audio_block_f32_t *data_f32;
	if (firstTime == true) {
		firstTime = false;
    26ea:	strb	r2, [r3, #0]
		data_f32 = new audio_block_f32_t[num];
    26ec:	bls.n	2726 <allocate_f32_memory(int)+0x4a>
    26ee:	mov.w	r3, #4294967295
    26f2:	mov	r4, r0
    26f4:	mov	r0, r3
    26f6:	bl	a494 <operator new[](unsigned int)>
    26fa:	mov	r6, r0
    26fc:	cbz	r4, 271e <allocate_f32_memory(int)+0x42>
    26fe:	add.w	r3, r0, #532	; 0x214
    2702:	movs	r2, #0
//modeled on the existing teensy audio block struct, which uses Int16
//https://github.com/PaulStoffregen/cores/blob/268848cdb0121f26b7ef6b82b4fb54abbe465427/teensy3/AudioStream.h
// Added id, per Tympan.  Should not disturb existing programs.  Bob Larkin June 2020
class audio_block_f32_t {
	public:
		audio_block_f32_t(void) {};
    2704:	movs	r1, #128	; 0x80
    2706:	ldr	r5, [pc, #52]	; (273c <allocate_f32_memory(int)+0x60>)
    2708:	adds	r2, #1
    270a:	str.w	r1, [r3, #-16]
    270e:	str.w	r1, [r3, #-12]
    2712:	cmp	r2, r4
    2714:	str.w	r5, [r3, #-8]
    2718:	add.w	r3, r3, #532	; 0x214
    271c:	bne.n	2708 <allocate_f32_memory(int)+0x2c>
    271e:	ldr	r3, [pc, #32]	; (2740 <allocate_f32_memory(int)+0x64>)
    2720:	mov	r0, r6
    2722:	str	r6, [r3, #0]
    2724:	pop	{r4, r5, r6, pc}
    2726:	mov.w	r3, #532	; 0x214
    272a:	mul.w	r3, r3, r0
    272e:	b.n	26f2 <allocate_f32_memory(int)+0x16>
    2730:	ldr	r3, [pc, #12]	; (2740 <allocate_f32_memory(int)+0x64>)
    2732:	ldr	r0, [r3, #0]
	}
	return data_f32;
}
    2734:	bx	lr
    2736:	nop
    2738:	.word	0x20001008
    273c:	.word	0x472c4400
    2740:	.word	0x2000216c

00002744 <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)>:
}

// Set up the pool of audio data blocks
// placing them all onto the free list
void AudioStream_F32::initialize_f32_memory(audio_block_f32_t *data, unsigned int num)
{
    2744:	cmp	r1, #192	; 0xc0
    2746:	push	{r4, r5, r6, r7}
    2748:	it	cs
    274a:	movcs	r1, #192	; 0xc0
  unsigned int i;

  //Serial.println("AudioStream_F32 initialize_memory");
  //delay(10);
  if (num > 192) num = 192;
  __disable_irq();
    274c:	cpsid	i
  f32_memory_pool = data;
  for (i=0; i < 6; i++) {
    f32_memory_pool_available_mask[i] = 0;
    274e:	movs	r3, #0
    2750:	ldr	r6, [pc, #68]	; (2798 <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)+0x54>)

  //Serial.println("AudioStream_F32 initialize_memory");
  //delay(10);
  if (num > 192) num = 192;
  __disable_irq();
  f32_memory_pool = data;
    2752:	ldr	r2, [pc, #72]	; (279c <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)+0x58>)
  for (i=0; i < 6; i++) {
    f32_memory_pool_available_mask[i] = 0;
    2754:	str	r3, [r6, #0]

  //Serial.println("AudioStream_F32 initialize_memory");
  //delay(10);
  if (num > 192) num = 192;
  __disable_irq();
  f32_memory_pool = data;
    2756:	str	r0, [r2, #0]
  for (i=0; i < 6; i++) {
    f32_memory_pool_available_mask[i] = 0;
    2758:	str	r3, [r6, #4]
    275a:	str	r3, [r6, #8]
    275c:	str	r3, [r6, #12]
    275e:	str	r3, [r6, #16]
    2760:	str	r3, [r6, #20]
  }
  for (i=0; i < num; i++) {
    2762:	cbz	r1, 2790 <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)+0x4c>
    f32_memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    2764:	movs	r7, #1
    2766:	lsrs	r5, r3, #5
    2768:	and.w	r4, r3, #31
  __disable_irq();
  f32_memory_pool = data;
  for (i=0; i < 6; i++) {
    f32_memory_pool_available_mask[i] = 0;
  }
  for (i=0; i < num; i++) {
    276c:	adds	r3, #1
    f32_memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    276e:	ldr.w	r2, [r6, r5, lsl #2]
    2772:	lsl.w	r4, r7, r4
  __disable_irq();
  f32_memory_pool = data;
  for (i=0; i < 6; i++) {
    f32_memory_pool_available_mask[i] = 0;
  }
  for (i=0; i < num; i++) {
    2776:	cmp	r3, r1
    f32_memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    2778:	orr.w	r2, r2, r4
    277c:	str.w	r2, [r6, r5, lsl #2]
  __disable_irq();
  f32_memory_pool = data;
  for (i=0; i < 6; i++) {
    f32_memory_pool_available_mask[i] = 0;
  }
  for (i=0; i < num; i++) {
    2780:	bne.n	2766 <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)+0x22>
    2782:	movs	r3, #0
    f32_memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
  }
  for (i=0; i < num; i++) {
    data[i].memory_pool_index = i;
    2784:	strb	r3, [r0, #1]
    f32_memory_pool_available_mask[i] = 0;
  }
  for (i=0; i < num; i++) {
    f32_memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
  }
  for (i=0; i < num; i++) {
    2786:	adds	r3, #1
    2788:	add.w	r0, r0, #532	; 0x214
    278c:	cmp	r3, r1
    278e:	bne.n	2784 <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)+0x40>
    data[i].memory_pool_index = i;
  }
  __enable_irq();
    2790:	cpsie	i

} // end initialize_memory
    2792:	pop	{r4, r5, r6, r7}
    2794:	bx	lr
    2796:	nop
    2798:	.word	0x20002154
    279c:	.word	0x20002174

000027a0 <AudioMemory_F32(int)>:
		firstTime = false;
		data_f32 = new audio_block_f32_t[num];
	}
	return data_f32;
}
void AudioMemory_F32(const int num) {
    27a0:	push	{r4, lr}
    27a2:	mov	r4, r0
	audio_block_f32_t *data_f32 = allocate_f32_memory(num);
    27a4:	bl	26dc <allocate_f32_memory(int)>
	if (data_f32 != NULL) AudioStream_F32::initialize_f32_memory(data_f32, num);
    27a8:	cbz	r0, 27b4 <AudioMemory_F32(int)+0x14>
    27aa:	mov	r1, r4
}
    27ac:	ldmia.w	sp!, {r4, lr}
	}
	return data_f32;
}
void AudioMemory_F32(const int num) {
	audio_block_f32_t *data_f32 = allocate_f32_memory(num);
	if (data_f32 != NULL) AudioStream_F32::initialize_f32_memory(data_f32, num);
    27b0:	b.w	2744 <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)>
    27b4:	pop	{r4, pc}
    27b6:	nop

000027b8 <AudioStream_F32::allocate_f32()>:
} // end initialize_memory

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_f32_t * AudioStream_F32::allocate_f32(void)
{
    27b8:	push	{r4, r5, r6}
  uint32_t *p;
  audio_block_f32_t *block;
  uint8_t used;

  p = f32_memory_pool_available_mask;
  __disable_irq();
    27ba:	cpsid	i
  do {
    avail = *p; if (avail) break;
    27bc:	ldr	r3, [pc, #128]	; (2840 <AudioStream_F32::allocate_f32()+0x88>)
    27be:	ldr	r0, [r3, #0]
    27c0:	cbnz	r0, 27cc <AudioStream_F32::allocate_f32()+0x14>
    p++; avail = *p; if (avail) break;
    27c2:	ldr	r0, [r3, #4]
    27c4:	cbz	r0, 2812 <AudioStream_F32::allocate_f32()+0x5a>
    27c6:	adds	r3, #4
    27c8:	movs	r1, #32
    27ca:	b.n	27ce <AudioStream_F32::allocate_f32()+0x16>
    27cc:	movs	r1, #0
    //Serial.println("alloc_f32:null");
    return NULL;
  } while (0);
  n = __builtin_clz(avail);
  *p = avail & ~(0x80000000 >> n);
  used = f32_memory_used + 1;
    27ce:	ldr	r6, [pc, #116]	; (2844 <AudioStream_F32::allocate_f32()+0x8c>)
    p++; avail = *p; if (avail) break;
    __enable_irq();
    //Serial.println("alloc_f32:null");
    return NULL;
  } while (0);
  n = __builtin_clz(avail);
    27d0:	clz	r5, r0
  *p = avail & ~(0x80000000 >> n);
    27d4:	mov.w	r4, #2147483648	; 0x80000000
  used = f32_memory_used + 1;
    27d8:	ldrb	r2, [r6, #0]
    __enable_irq();
    //Serial.println("alloc_f32:null");
    return NULL;
  } while (0);
  n = __builtin_clz(avail);
  *p = avail & ~(0x80000000 >> n);
    27da:	lsrs	r4, r5
  used = f32_memory_used + 1;
    27dc:	adds	r2, #1
    __enable_irq();
    //Serial.println("alloc_f32:null");
    return NULL;
  } while (0);
  n = __builtin_clz(avail);
  *p = avail & ~(0x80000000 >> n);
    27de:	bic.w	r0, r0, r4
  used = f32_memory_used + 1;
    27e2:	uxtb	r2, r2
    __enable_irq();
    //Serial.println("alloc_f32:null");
    return NULL;
  } while (0);
  n = __builtin_clz(avail);
  *p = avail & ~(0x80000000 >> n);
    27e4:	str	r0, [r3, #0]
  used = f32_memory_used + 1;
  f32_memory_used = used;
    27e6:	strb	r2, [r6, #0]
  __enable_irq();
    27e8:	cpsie	i
  index = p - f32_memory_pool_available_mask;
  block = f32_memory_pool + ((index << 5) + (31 - n));
    27ea:	mov.w	r0, #532	; 0x214
    27ee:	subs	r1, r1, r5
    27f0:	movw	r3, #16492	; 0x406c
    27f4:	ldr	r5, [pc, #80]	; (2848 <AudioStream_F32::allocate_f32()+0x90>)
    27f6:	mul.w	r1, r0, r1
  block->ref_count = 1;
    27fa:	movs	r4, #1
  *p = avail & ~(0x80000000 >> n);
  used = f32_memory_used + 1;
  f32_memory_used = used;
  __enable_irq();
  index = p - f32_memory_pool_available_mask;
  block = f32_memory_pool + ((index << 5) + (31 - n));
    27fc:	ldr	r0, [r5, #0]
    27fe:	add	r3, r1
  block->ref_count = 1;
  if (used > f32_memory_used_max) f32_memory_used_max = used;
    2800:	ldr	r1, [pc, #72]	; (284c <AudioStream_F32::allocate_f32()+0x94>)
  used = f32_memory_used + 1;
  f32_memory_used = used;
  __enable_irq();
  index = p - f32_memory_pool_available_mask;
  block = f32_memory_pool + ((index << 5) + (31 - n));
  block->ref_count = 1;
    2802:	strb	r4, [r0, r3]
  *p = avail & ~(0x80000000 >> n);
  used = f32_memory_used + 1;
  f32_memory_used = used;
  __enable_irq();
  index = p - f32_memory_pool_available_mask;
  block = f32_memory_pool + ((index << 5) + (31 - n));
    2804:	add	r0, r3
  block->ref_count = 1;
  if (used > f32_memory_used_max) f32_memory_used_max = used;
    2806:	ldrb	r3, [r1, #0]
    2808:	cmp	r3, r2
    280a:	it	cc
    280c:	strbcc	r2, [r1, #0]
  //Serial.print("alloc_f32:");
  //Serial.println((uint32_t)block, HEX);
  return block;
}
    280e:	pop	{r4, r5, r6}
    2810:	bx	lr
  p = f32_memory_pool_available_mask;
  __disable_irq();
  do {
    avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    2812:	ldr	r0, [r3, #8]
    2814:	cbnz	r0, 2820 <AudioStream_F32::allocate_f32()+0x68>
    p++; avail = *p; if (avail) break;
    2816:	ldr	r0, [r3, #12]
    2818:	cbz	r0, 2826 <AudioStream_F32::allocate_f32()+0x6e>
    281a:	adds	r3, #12
    281c:	movs	r1, #96	; 0x60
    281e:	b.n	27ce <AudioStream_F32::allocate_f32()+0x16>
  p = f32_memory_pool_available_mask;
  __disable_irq();
  do {
    avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    2820:	adds	r3, #8
    2822:	movs	r1, #64	; 0x40
    2824:	b.n	27ce <AudioStream_F32::allocate_f32()+0x16>
    p++; avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    2826:	ldr	r0, [r3, #16]
    2828:	cbnz	r0, 2834 <AudioStream_F32::allocate_f32()+0x7c>
    p++; avail = *p; if (avail) break;
    282a:	ldr	r0, [r3, #20]
    282c:	cbz	r0, 283a <AudioStream_F32::allocate_f32()+0x82>
    282e:	adds	r3, #20
    2830:	movs	r1, #160	; 0xa0
    2832:	b.n	27ce <AudioStream_F32::allocate_f32()+0x16>
  do {
    avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    2834:	adds	r3, #16
    2836:	movs	r1, #128	; 0x80
    2838:	b.n	27ce <AudioStream_F32::allocate_f32()+0x16>
    p++; avail = *p; if (avail) break;
    __enable_irq();
    283a:	cpsie	i
    //Serial.println("alloc_f32:null");
    return NULL;
    283c:	b.n	280e <AudioStream_F32::allocate_f32()+0x56>
    283e:	nop
    2840:	.word	0x20002154
    2844:	.word	0x20002170
    2848:	.word	0x20002174
    284c:	.word	0x20002171

00002850 <AudioStream_F32::release(audio_block_f32_t*)>:
// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream_F32::release(audio_block_f32_t *block)
{
  uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    2850:	ldrb	r2, [r0, #1]
  uint32_t index = block->memory_pool_index >> 5;

  __disable_irq();
    2852:	cpsid	i
  if (block->ref_count > 1) {
    2854:	ldrb	r3, [r0, #0]
    2856:	cmp	r3, #1
    2858:	bls.n	2862 <AudioStream_F32::release(audio_block_f32_t*)+0x12>
    block->ref_count--;
    285a:	subs	r3, #1
    285c:	strb	r3, [r0, #0]
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
    f32_memory_used--;
  }
  __enable_irq();
    285e:	cpsie	i
    2860:	bx	lr
  if (block->ref_count > 1) {
    block->ref_count--;
  } else {
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
    2862:	mvns	r0, r2
    2864:	mov.w	r3, #2147483648	; 0x80000000
// other streams have ownership, the block is
// returned to the free pool
void AudioStream_F32::release(audio_block_f32_t *block)
{
  uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
  uint32_t index = block->memory_pool_index >> 5;
    2868:	asrs	r2, r2, #5
  if (block->ref_count > 1) {
    block->ref_count--;
  } else {
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
    286a:	and.w	r0, r0, #31

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream_F32::release(audio_block_f32_t *block)
{
    286e:	push	{r4, r5}
  if (block->ref_count > 1) {
    block->ref_count--;
  } else {
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
    2870:	ldr	r5, [pc, #28]	; (2890 <AudioStream_F32::release(audio_block_f32_t*)+0x40>)
    2872:	lsr.w	r0, r3, r0
    f32_memory_used--;
    2876:	ldr	r4, [pc, #28]	; (2894 <AudioStream_F32::release(audio_block_f32_t*)+0x44>)
  if (block->ref_count > 1) {
    block->ref_count--;
  } else {
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
    2878:	ldr.w	r1, [r5, r2, lsl #2]
    f32_memory_used--;
    287c:	ldrb	r3, [r4, #0]
  if (block->ref_count > 1) {
    block->ref_count--;
  } else {
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
    287e:	orrs	r1, r0
    f32_memory_used--;
    2880:	subs	r3, #1
  if (block->ref_count > 1) {
    block->ref_count--;
  } else {
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
    2882:	str.w	r1, [r5, r2, lsl #2]
    f32_memory_used--;
    2886:	strb	r3, [r4, #0]
  }
  __enable_irq();
    2888:	cpsie	i
}
    288a:	pop	{r4, r5}
    288c:	bx	lr
    288e:	nop
    2890:	.word	0x20002154
    2894:	.word	0x20002170

00002898 <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)>:
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream_F32::transmit(audio_block_f32_t *block, unsigned char index)
{
  //Serial.print("AudioStream_F32: transmit().  start...index = ");Serial.println(index);
  for (AudioConnection_F32 *c = destination_list_f32; c != NULL; c = c->next_dest) {
    2898:	ldr	r3, [r0, #28]
    289a:	cbz	r3, 28ca <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream_F32::transmit(audio_block_f32_t *block, unsigned char index)
{
    289c:	push	{r4, r5}
    289e:	b.n	28a4 <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)+0xc>
  //Serial.print("AudioStream_F32: transmit().  start...index = ");Serial.println(index);
  for (AudioConnection_F32 *c = destination_list_f32; c != NULL; c = c->next_dest) {
    28a0:	ldr	r3, [r3, #12]
    28a2:	cbz	r3, 28c8 <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)+0x30>
  	  //Serial.print("  : loop1, c->src_index = ");Serial.println(c->src_index);
    if (c->src_index == index) {
    28a4:	ldrb	r0, [r3, #8]
    28a6:	cmp	r0, r2
    28a8:	bne.n	28a0 <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)+0x8>
    	//Serial.println("  : if1");
      if (c->dst.inputQueue_f32[c->dest_index] == NULL) {
    28aa:	ldr	r0, [r3, #4]
    28ac:	ldrb	r4, [r3, #9]
    28ae:	ldr	r0, [r0, #32]
    28b0:	ldr.w	r5, [r0, r4, lsl #2]
    28b4:	cmp	r5, #0
    28b6:	bne.n	28a0 <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)+0x8>
      	  //Serial.println("  : if2");
        c->dst.inputQueue_f32[c->dest_index] = block;
    28b8:	str.w	r1, [r0, r4, lsl #2]
        block->ref_count++;
    28bc:	ldrb	r0, [r1, #0]
    28be:	adds	r0, #1
    28c0:	strb	r0, [r1, #0]
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream_F32::transmit(audio_block_f32_t *block, unsigned char index)
{
  //Serial.print("AudioStream_F32: transmit().  start...index = ");Serial.println(index);
  for (AudioConnection_F32 *c = destination_list_f32; c != NULL; c = c->next_dest) {
    28c2:	ldr	r3, [r3, #12]
    28c4:	cmp	r3, #0
    28c6:	bne.n	28a4 <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)+0xc>
          //Serial.print("  : block->ref_count = "); Serial.println(block->ref_count);
      }
    }
  } 
  //Serial.println("AudioStream_F32: transmit(). finished.");
}
    28c8:	pop	{r4, r5}
    28ca:	bx	lr

000028cc <AudioStream_F32::receiveReadOnly_f32(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_f32_t * AudioStream_F32::receiveReadOnly_f32(unsigned int index)
{
  audio_block_f32_t *in;

  if (index >= num_inputs_f32) return NULL;
    28cc:	ldrb	r3, [r0, #24]
    28ce:	cmp	r3, r1
    28d0:	bls.n	28e0 <AudioStream_F32::receiveReadOnly_f32(unsigned int)+0x14>
  in = inputQueue_f32[index];
    28d2:	ldr	r3, [r0, #32]
  inputQueue_f32[index] = NULL;
    28d4:	movs	r2, #0
audio_block_f32_t * AudioStream_F32::receiveReadOnly_f32(unsigned int index)
{
  audio_block_f32_t *in;

  if (index >= num_inputs_f32) return NULL;
  in = inputQueue_f32[index];
    28d6:	ldr.w	r0, [r3, r1, lsl #2]
  inputQueue_f32[index] = NULL;
    28da:	str.w	r2, [r3, r1, lsl #2]
  return in;
    28de:	bx	lr
// may be shared with other streams, so it must not be written
audio_block_f32_t * AudioStream_F32::receiveReadOnly_f32(unsigned int index)
{
  audio_block_f32_t *in;

  if (index >= num_inputs_f32) return NULL;
    28e0:	movs	r0, #0
  in = inputQueue_f32[index];
  inputQueue_f32[index] = NULL;
  return in;
}
    28e2:	bx	lr

000028e4 <AudioConnection_F32::connect()>:
}

void AudioConnection_F32::connect(void) {
  AudioConnection_F32 *p;
  
  if (dest_index > dst.num_inputs_f32) return;
    28e4:	ldr	r3, [r0, #4]
    28e6:	ldrb	r2, [r0, #9]
    28e8:	ldrb	r3, [r3, #24]
    28ea:	cmp	r2, r3
    28ec:	bhi.n	290c <AudioConnection_F32::connect()+0x28>
  __disable_irq();
    28ee:	cpsid	i
  p = src.destination_list_f32;
    28f0:	ldr	r1, [r0, #0]
    28f2:	ldr	r2, [r1, #28]
  if (p == NULL) {
    28f4:	cbnz	r2, 28fa <AudioConnection_F32::connect()+0x16>
    28f6:	b.n	290e <AudioConnection_F32::connect()+0x2a>
    28f8:	mov	r2, r3
    src.destination_list_f32 = this;
  } else {
    while (p->next_dest) p = p->next_dest;
    28fa:	ldr	r3, [r2, #12]
    28fc:	cmp	r3, #0
    28fe:	bne.n	28f8 <AudioConnection_F32::connect()+0x14>
    p->next_dest = this;
    2900:	str	r0, [r2, #12]
  }
  src.active = true;
  dst.active = true;
    2902:	ldr	r2, [r0, #4]
    src.destination_list_f32 = this;
  } else {
    while (p->next_dest) p = p->next_dest;
    p->next_dest = this;
  }
  src.active = true;
    2904:	movs	r3, #1
    2906:	strb	r3, [r1, #8]
  dst.active = true;
    2908:	strb	r3, [r2, #8]
  __enable_irq();
    290a:	cpsie	i
    290c:	bx	lr
  
  if (dest_index > dst.num_inputs_f32) return;
  __disable_irq();
  p = src.destination_list_f32;
  if (p == NULL) {
    src.destination_list_f32 = this;
    290e:	str	r0, [r1, #28]
    2910:	b.n	2902 <AudioConnection_F32::connect()+0x1e>
    2912:	nop

00002914 <ILI9341_t3n::write(unsigned char)>:
  }
}

// overwrite functions from class Print:

size_t ILI9341_t3n::write(uint8_t c) { return write(&c, 1); }
    2914:	push	{r4, lr}
    2916:	sub	sp, #8
    2918:	ldr	r4, [r0, #0]
    291a:	movs	r2, #1
    291c:	add	r3, sp, #8
    291e:	strb.w	r1, [r3, #-1]!
    2922:	mov	r1, r3
    2924:	ldr	r3, [r4, #4]
    2926:	blx	r3
    2928:	add	sp, #8
    292a:	pop	{r4, pc}

0000292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>:
    return 1;
  return 0;
}

static uint32_t fetchbits_unsigned(const uint8_t *p, uint32_t index,
                                   uint32_t required) {
    292c:	push	{r4, r5, r6, r7, lr}
    292e:	mov	r7, r0
  do {
    uint8_t b = p[index >> 3];
    uint32_t avail = 8 - (index & 7);
    if (avail <= required) {
      val <<= avail;
      val |= b & ((1 << avail) - 1);
    2930:	mov.w	lr, #1
  return 0;
}

static uint32_t fetchbits_unsigned(const uint8_t *p, uint32_t index,
                                   uint32_t required) {
  uint32_t val = 0;
    2934:	movs	r0, #0
    2936:	b.n	2942 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)+0x16>
  do {
    uint8_t b = p[index >> 3];
    uint32_t avail = 8 - (index & 7);
    if (avail <= required) {
      val <<= avail;
      val |= b & ((1 << avail) - 1);
    2938:	ands	r4, r5
}

static uint32_t fetchbits_unsigned(const uint8_t *p, uint32_t index,
                                   uint32_t required) {
  uint32_t val = 0;
  do {
    293a:	subs	r2, r2, r3
    uint8_t b = p[index >> 3];
    uint32_t avail = 8 - (index & 7);
    if (avail <= required) {
      val <<= avail;
      val |= b & ((1 << avail) - 1);
    293c:	orr.w	r0, r4, r6
}

static uint32_t fetchbits_unsigned(const uint8_t *p, uint32_t index,
                                   uint32_t required) {
  uint32_t val = 0;
  do {
    2940:	beq.n	2976 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)+0x4a>
    uint8_t b = p[index >> 3];
    uint32_t avail = 8 - (index & 7);
    2942:	and.w	r3, r1, #7

static uint32_t fetchbits_unsigned(const uint8_t *p, uint32_t index,
                                   uint32_t required) {
  uint32_t val = 0;
  do {
    uint8_t b = p[index >> 3];
    2946:	lsrs	r4, r1, #3
    uint32_t avail = 8 - (index & 7);
    2948:	rsb	r3, r3, #8

static uint32_t fetchbits_unsigned(const uint8_t *p, uint32_t index,
                                   uint32_t required) {
  uint32_t val = 0;
  do {
    uint8_t b = p[index >> 3];
    294c:	ldrb	r4, [r7, r4]
    uint32_t avail = 8 - (index & 7);
    if (avail <= required) {
      val <<= avail;
      val |= b & ((1 << avail) - 1);
    294e:	lsl.w	r5, lr, r3
                                   uint32_t required) {
  uint32_t val = 0;
  do {
    uint8_t b = p[index >> 3];
    uint32_t avail = 8 - (index & 7);
    if (avail <= required) {
    2952:	cmp	r2, r3
      val <<= avail;
    2954:	lsl.w	r6, r0, r3
      val |= b & ((1 << avail) - 1);
      index += avail;
    2958:	add	r1, r3
  do {
    uint8_t b = p[index >> 3];
    uint32_t avail = 8 - (index & 7);
    if (avail <= required) {
      val <<= avail;
      val |= b & ((1 << avail) - 1);
    295a:	add.w	r5, r5, #4294967295
                                   uint32_t required) {
  uint32_t val = 0;
  do {
    uint8_t b = p[index >> 3];
    uint32_t avail = 8 - (index & 7);
    if (avail <= required) {
    295e:	bcs.n	2938 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)+0xc>
      index += avail;
      required -= avail;
    } else {
      b >>= avail - required;
      val <<= required;
      val |= b & ((1 << required) - 1);
    2960:	movs	r1, #1
    2962:	subs	r3, r3, r2
      val |= b & ((1 << avail) - 1);
      index += avail;
      required -= avail;
    } else {
      b >>= avail - required;
      val <<= required;
    2964:	lsls	r0, r2
      val |= b & ((1 << required) - 1);
    2966:	lsl.w	r2, r1, r2
    296a:	asr.w	r3, r4, r3
    296e:	subs	r4, r2, #1
    2970:	ands	r3, r4
    2972:	orrs	r0, r3
      break;
    }
  } while (required);
  return val;
}
    2974:	pop	{r4, r5, r6, r7, pc}
    2976:	pop	{r4, r5, r6, r7, pc}

00002978 <SPIClass::endTransaction() [clone .part.9]>:
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    2978:	ldrb	r3, [r0, #19]
    297a:	lsls	r2, r3, #30
    297c:	bpl.n	2986 <SPIClass::endTransaction() [clone .part.9]+0xe>
    297e:	ldr	r3, [pc, #44]	; (29ac <SPIClass::endTransaction() [clone .part.9]+0x34>)
    2980:	ldr	r2, [r0, #44]	; 0x2c
    2982:	str	r2, [r3, #0]
    2984:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    2986:	lsls	r1, r3, #29
    2988:	bpl.n	2992 <SPIClass::endTransaction() [clone .part.9]+0x1a>
    298a:	ldr	r3, [pc, #36]	; (29b0 <SPIClass::endTransaction() [clone .part.9]+0x38>)
    298c:	ldr	r2, [r0, #48]	; 0x30
    298e:	str	r2, [r3, #0]
    2990:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    2992:	lsls	r2, r3, #28
    2994:	bpl.n	299e <SPIClass::endTransaction() [clone .part.9]+0x26>
    2996:	ldr	r3, [pc, #28]	; (29b4 <SPIClass::endTransaction() [clone .part.9]+0x3c>)
    2998:	ldr	r2, [r0, #52]	; 0x34
    299a:	str	r2, [r3, #0]
    299c:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    299e:	lsls	r3, r3, #27
    29a0:	bpl.n	29a8 <SPIClass::endTransaction() [clone .part.9]+0x30>
    29a2:	ldr	r2, [r0, #56]	; 0x38
    29a4:	ldr	r3, [pc, #16]	; (29b8 <SPIClass::endTransaction() [clone .part.9]+0x40>)
    29a6:	str	r2, [r3, #0]
    29a8:	bx	lr
    29aa:	nop
    29ac:	.word	0xe000e104
    29b0:	.word	0xe000e108
    29b4:	.word	0xe000e10c
    29b8:	.word	0xe000e110

000029bc <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]>:
#endif

#ifdef ENABLE_ILI9341_FRAMEBUFFER
//==============================================
#ifdef ENABLE_ILI9341_FRAMEBUFFER
void ILI9341_t3n::initDMASettings(void) {
    29bc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
// 320*240/3 = 25600
#ifdef DEBUG_ASYNC_LEDS
  digitalWriteFast(DEBUG_PIN_4, !digitalReadFast(DEBUG_PIN_4));
#endif
  if (_dma_state & ILI9341_DMA_EVER_INIT) { // Have we init this stuff before?
    29c0:	ldrb.w	r3, [r0, #212]	; 0xd4
#endif

#ifdef ENABLE_ILI9341_FRAMEBUFFER
//==============================================
#ifdef ENABLE_ILI9341_FRAMEBUFFER
void ILI9341_t3n::initDMASettings(void) {
    29c4:	mov	r4, r0
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
// 320*240/3 = 25600
#ifdef DEBUG_ASYNC_LEDS
  digitalWriteFast(DEBUG_PIN_4, !digitalReadFast(DEBUG_PIN_4));
#endif
  if (_dma_state & ILI9341_DMA_EVER_INIT) { // Have we init this stuff before?
    29c6:	and.w	r3, r3, #8
    29ca:	cmp	r3, #0
    29cc:	beq.n	2a6a <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0xae>
		TCD->CITER = len;
	}
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
    29ce:	ldr.w	r1, [r0, #224]	; 0xe0
		TCD->SOFF = 2;
		TCD->ATTR_SRC = 1;
    29d2:	movs	r6, #1
    // Try to just set the buffers...
    _dmasettings[0].sourceBuffer(_pfbtft, (COUNT_WORDS_WRITE)*2);
    29d4:	ldr.w	r5, [r0, #176]	; 0xb0
	}
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 2;
    29d8:	movs	r2, #2
		TCD->ATTR_SRC = 1;
    29da:	strb	r6, [r1, #7]
		TCD->NBYTES = 2;
		TCD->SLAST = -len;
		TCD->BITER = len / 2;
    29dc:	mov.w	r3, #25600	; 0x6400
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 2;
		TCD->ATTR_SRC = 1;
		TCD->NBYTES = 2;
    29e0:	ldr.w	r0, [r0, #224]	; 0xe0
		TCD->CITER = len;
	}
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
    29e4:	str	r5, [r1, #0]
		TCD->SOFF = 2;
    29e6:	strh	r2, [r1, #4]
		TCD->ATTR_SRC = 1;
		TCD->NBYTES = 2;
    29e8:	str	r2, [r0, #8]
		TCD->SLAST = -len;
    29ea:	ldr.w	r0, [r4, #224]	; 0xe0
    29ee:	ldr	r1, [pc, #772]	; (2cf4 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x338>)
		TCD->BITER = len / 2;
    29f0:	strh	r3, [r0, #30]
		TCD->CITER = len / 2;
    29f2:	ldr.w	r5, [r4, #224]	; 0xe0
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 2;
		TCD->ATTR_SRC = 1;
		TCD->NBYTES = 2;
		TCD->SLAST = -len;
    29f6:	str	r1, [r0, #12]
		TCD->BITER = len / 2;
		TCD->CITER = len / 2;
    29f8:	strh	r3, [r5, #22]
    _dmasettings[1].sourceBuffer(&_pfbtft[COUNT_WORDS_WRITE],
    29fa:	ldr.w	r5, [r4, #176]	; 0xb0
		TCD->CITER = len;
	}
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
    29fe:	ldr.w	r0, [r4, #288]	; 0x120
    2a02:	add.w	r5, r5, #51200	; 0xc800
		TCD->SOFF = 2;
		TCD->ATTR_SRC = 1;
    2a06:	strb	r6, [r0, #7]
		TCD->NBYTES = 2;
    2a08:	ldr.w	r7, [r4, #288]	; 0x120
		TCD->CITER = len;
	}
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
    2a0c:	str	r5, [r0, #0]
		TCD->SOFF = 2;
    2a0e:	strh	r2, [r0, #4]
		TCD->ATTR_SRC = 1;
		TCD->NBYTES = 2;
    2a10:	str	r2, [r7, #8]
		TCD->SLAST = -len;
    2a12:	ldr.w	r0, [r4, #288]	; 0x120
		TCD->BITER = len / 2;
    2a16:	strh	r3, [r0, #30]
		TCD->CITER = len / 2;
    2a18:	ldr.w	r5, [r4, #288]	; 0x120
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 2;
		TCD->ATTR_SRC = 1;
		TCD->NBYTES = 2;
		TCD->SLAST = -len;
    2a1c:	str	r1, [r0, #12]
		TCD->BITER = len / 2;
		TCD->CITER = len / 2;
    2a1e:	strh	r3, [r5, #22]
                                 COUNT_WORDS_WRITE * 2);
    _dmasettings[2].sourceBuffer(&_pfbtft[COUNT_WORDS_WRITE * 2],
    2a20:	ldr.w	r5, [r4, #176]	; 0xb0
		TCD->CITER = len;
	}
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
    2a24:	ldr.w	r0, [r4, #352]	; 0x160
    2a28:	add.w	r5, r5, #102400	; 0x19000
		TCD->SOFF = 2;
		TCD->ATTR_SRC = 1;
    2a2c:	strb	r6, [r0, #7]
		TCD->NBYTES = 2;
    2a2e:	ldr.w	r6, [r4, #352]	; 0x160
	}
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 2;
    2a32:	strh	r2, [r0, #4]
		TCD->CITER = len;
	}
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
    2a34:	str	r5, [r0, #0]
		TCD->SOFF = 2;
		TCD->ATTR_SRC = 1;
		TCD->NBYTES = 2;
    2a36:	str	r2, [r6, #8]
		TCD->SLAST = -len;
    2a38:	ldr.w	r2, [r4, #352]	; 0x160
    2a3c:	str	r1, [r2, #12]
		TCD->BITER = len / 2;
    2a3e:	strh	r3, [r2, #30]
		TCD->CITER = len / 2;
    2a40:	ldr.w	r2, [r4, #352]	; 0x160
    2a44:	strh	r3, [r2, #22]
                                 COUNT_WORDS_WRITE * 2);
    // and maybe the interrupt settings...
    if (_frame_callback_on_HalfDone)
    2a46:	ldrb.w	r3, [r4, #204]	; 0xcc
	void interruptAtCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_INTMAJOR;
	}

	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
    2a4a:	ldr.w	r2, [r4, #288]	; 0x120
    2a4e:	cmp	r3, #0
    2a50:	bne.w	2c88 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x2cc>
      _dmasettings[1].interruptAtHalf();
    else
      _dmasettings[1].TCD->CSR &= ~DMA_TCD_CSR_INTHALF;
    2a54:	ldrh	r3, [r2, #28]
    2a56:	bic.w	r3, r3, #4
    2a5a:	lsls	r3, r3, #16
    2a5c:	lsrs	r3, r3, #16
    2a5e:	strh	r3, [r2, #28]
// Serial.printf("Init DMA Settings: TX:%d size:%d\n", dmaTXevent,
// _dma_write_size_words);

#endif
  _dma_state =
      ILI9341_DMA_INIT | ILI9341_DMA_EVER_INIT; // Should be first thing set!
    2a60:	movs	r3, #9
    2a62:	strb.w	r3, [r4, #212]	; 0xd4
    2a66:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dma_state & ILI9341_DMA_INIT) { // should test for init, but...
    return;                            // we already init this.
  }

  // Serial.println("InitDMASettings");
  uint8_t dmaTXevent = _spi_hardware->tx_dma_channel;
    2a6a:	ldr	r2, [r4, #12]
    2a6c:	and.w	r0, r3, #255	; 0xff
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 2;
		TCD->ATTR_SRC = 1;
    2a70:	movs	r5, #1
		TCD->CITER = len;
	}
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
    2a72:	ldr.w	r3, [r4, #224]	; 0xe0
      _dmasettings[1].interruptAtHalf();
    else
      _dmasettings[1].TCD->CSR &= ~DMA_TCD_CSR_INTHALF;
  } else {
    // First time we init...
    _dmasettings[0].sourceBuffer(_pfbtft, (COUNT_WORDS_WRITE)*2);
    2a76:	ldr.w	r7, [r4, #176]	; 0xb0
		TCD->SOFF = 2;
    2a7a:	movs	r1, #2
  if (_dma_state & ILI9341_DMA_INIT) { // should test for init, but...
    return;                            // we already init this.
  }

  // Serial.println("InitDMASettings");
  uint8_t dmaTXevent = _spi_hardware->tx_dma_channel;
    2a7c:	ldrb.w	fp, [r2, #8]
		TCD->ATTR_SRC = 1;
		TCD->NBYTES = 2;
		TCD->SLAST = -len;
		TCD->BITER = len / 2;
    2a80:	mov.w	r2, #25600	; 0x6400
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 2;
		TCD->ATTR_SRC = 1;
    2a84:	strb	r5, [r3, #7]
		TCD->NBYTES = 2;
    2a86:	ldr.w	r5, [r4, #224]	; 0xe0
		TCD->CITER = len;
	}
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
    2a8a:	str	r7, [r3, #0]
		TCD->SOFF = 2;
    2a8c:	strh	r1, [r3, #4]
		TCD->ATTR_SRC = 1;
		TCD->NBYTES = 2;
    2a8e:	str	r1, [r5, #8]
		TCD->SLAST = -len;
    2a90:	ldr.w	r3, [r4, #224]	; 0xe0
    2a94:	ldr	r7, [pc, #604]	; (2cf4 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x338>)
		TCD->BITER = len / 2;
    2a96:	strh	r2, [r3, #30]
		TCD->CITER = len / 2;
    2a98:	ldr.w	r5, [r4, #224]	; 0xe0
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 2;
		TCD->ATTR_SRC = 1;
		TCD->NBYTES = 2;
		TCD->SLAST = -len;
    2a9c:	str	r7, [r3, #12]
		TCD->BITER = len / 2;
		TCD->CITER = len / 2;
    2a9e:	strh	r2, [r5, #22]
    else
      _dmasettings[1].TCD->CSR &= ~DMA_TCD_CSR_INTHALF;
  } else {
    // First time we init...
    _dmasettings[0].sourceBuffer(_pfbtft, (COUNT_WORDS_WRITE)*2);
    _dmasettings[0].destination(_pimxrt_spi->TDR);
    2aa0:	ldr	r3, [r4, #28]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    2aa2:	ldr.w	r2, [r4, #224]	; 0xe0
    2aa6:	adds	r3, #100	; 0x64
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
    2aa8:	strb	r1, [r2, #6]
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
    2aaa:	cmp.w	r3, #1073741824	; 0x40000000
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
    2aae:	strh	r0, [r2, #20]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    2ab0:	str	r3, [r2, #16]
    2ab2:	ldr.w	r0, [r4, #224]	; 0xe0
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
    2ab6:	bcs.w	2c9c <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x2e0>
    2aba:	movs	r3, #4
    2abc:	str	r3, [r0, #8]
    2abe:	ldr.w	r0, [r4, #224]	; 0xe0
    _dmasettings[0].TCD->ATTR_DST = 1;
    2ac2:	mov.w	lr, #1
		TCD->DLASTSGA = 0;
    2ac6:	movs	r7, #0
	}
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 2;
    2ac8:	movs	r5, #2
		TCD->ATTR_SRC = 1;
		TCD->NBYTES = 2;
		TCD->SLAST = -len;
		TCD->BITER = len / 2;
    2aca:	mov.w	ip, #25600	; 0x6400
    2ace:	strb.w	lr, [r0, #6]
	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
	}

	void replaceSettingsOnCompletion(const DMABaseClass &settings) {
		TCD->DLASTSGA = (int32_t)(settings.TCD);
    2ad2:	ldr.w	r2, [r4, #224]	; 0xe0
    2ad6:	ldr.w	r1, [r4, #288]	; 0x120
		TCD->CSR &= ~DMA_TCD_CSR_DONE;
    2ada:	ldrh	r3, [r2, #28]
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
		TCD->DLASTSGA = 0;
    2adc:	str	r7, [r0, #24]
		TCD->CSR |= DMA_TCD_CSR_DREQ;
	}

	void replaceSettingsOnCompletion(const DMABaseClass &settings) {
		TCD->DLASTSGA = (int32_t)(settings.TCD);
		TCD->CSR &= ~DMA_TCD_CSR_DONE;
    2ade:	bic.w	r3, r3, #128	; 0x80
    _dmasettings[0].replaceSettingsOnCompletion(_dmasettings[1]);

    _dmasettings[1].sourceBuffer(&_pfbtft[COUNT_WORDS_WRITE],
    2ae2:	ldr.w	r0, [r4, #176]	; 0xb0
	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
	}

	void replaceSettingsOnCompletion(const DMABaseClass &settings) {
		TCD->DLASTSGA = (int32_t)(settings.TCD);
    2ae6:	str	r1, [r2, #24]
		TCD->CSR &= ~DMA_TCD_CSR_DONE;
    2ae8:	lsls	r3, r3, #16
    2aea:	add.w	r0, r0, #51200	; 0xc800
    2aee:	lsrs	r3, r3, #16
    2af0:	strh	r3, [r2, #28]
		TCD->CSR |= DMA_TCD_CSR_ESG;
    2af2:	ldrh	r3, [r2, #28]
    2af4:	uxth	r3, r3
    2af6:	orr.w	r3, r3, #16
    2afa:	strh	r3, [r2, #28]
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 2;
		TCD->ATTR_SRC = 1;
    2afc:	strb.w	lr, [r1, #7]
		TCD->NBYTES = 2;
    2b00:	ldr.w	r3, [r4, #288]	; 0x120
		TCD->CITER = len;
	}
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
    2b04:	str	r0, [r1, #0]
		TCD->SOFF = 2;
    2b06:	strh	r5, [r1, #4]
		TCD->ATTR_SRC = 1;
		TCD->NBYTES = 2;
    2b08:	str	r5, [r3, #8]
		TCD->SLAST = -len;
    2b0a:	ldr.w	r3, [r4, #288]	; 0x120
    2b0e:	ldr	r1, [pc, #484]	; (2cf4 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x338>)
		TCD->BITER = len / 2;
    2b10:	strh.w	ip, [r3, #30]
		TCD->CITER = len / 2;
    2b14:	ldr.w	r2, [r4, #288]	; 0x120
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 2;
		TCD->ATTR_SRC = 1;
		TCD->NBYTES = 2;
		TCD->SLAST = -len;
    2b18:	str	r1, [r3, #12]
		TCD->BITER = len / 2;
		TCD->CITER = len / 2;
    2b1a:	strh.w	ip, [r2, #22]
                                 COUNT_WORDS_WRITE * 2);
    _dmasettings[1].destination(_pimxrt_spi->TDR);
    2b1e:	ldr	r3, [r4, #28]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    2b20:	ldr.w	r2, [r4, #288]	; 0x120
    2b24:	adds	r3, #100	; 0x64
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
    2b26:	strb	r5, [r2, #6]
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
    2b28:	cmp.w	r3, #1073741824	; 0x40000000
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
    2b2c:	strh	r7, [r2, #20]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    2b2e:	str	r3, [r2, #16]
    2b30:	ldr.w	r0, [r4, #288]	; 0x120
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
    2b34:	bcc.w	2cb0 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x2f4>
    2b38:	ldr	r3, [r0, #8]
    2b3a:	cmp	r3, #0
    2b3c:	beq.w	2cb0 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x2f4>
    _dmasettings[1].TCD->ATTR_DST = 1;
    2b40:	movs	r3, #1
		TCD->DLASTSGA = 0;
    2b42:	movs	r5, #0
    2b44:	strb	r3, [r0, #6]
	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
	}

	void replaceSettingsOnCompletion(const DMABaseClass &settings) {
		TCD->DLASTSGA = (int32_t)(settings.TCD);
    2b46:	ldr.w	r3, [r4, #288]	; 0x120
    2b4a:	ldr.w	r1, [r4, #352]	; 0x160
		TCD->CSR &= ~DMA_TCD_CSR_DONE;
    2b4e:	ldrh	r2, [r3, #28]
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
		TCD->DLASTSGA = 0;
    2b50:	str	r5, [r0, #24]
		TCD->CSR |= DMA_TCD_CSR_DREQ;
	}

	void replaceSettingsOnCompletion(const DMABaseClass &settings) {
		TCD->DLASTSGA = (int32_t)(settings.TCD);
		TCD->CSR &= ~DMA_TCD_CSR_DONE;
    2b52:	bic.w	r2, r2, #128	; 0x80
    _dmasettings[1].replaceSettingsOnCompletion(_dmasettings[2]);
    if (_frame_callback_on_HalfDone)
    2b56:	ldrb.w	r0, [r4, #204]	; 0xcc
	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
	}

	void replaceSettingsOnCompletion(const DMABaseClass &settings) {
		TCD->DLASTSGA = (int32_t)(settings.TCD);
    2b5a:	str	r1, [r3, #24]
		TCD->CSR &= ~DMA_TCD_CSR_DONE;
    2b5c:	lsls	r2, r2, #16
    2b5e:	lsrs	r2, r2, #16
    2b60:	strh	r2, [r3, #28]
		TCD->CSR |= DMA_TCD_CSR_ESG;
    2b62:	ldrh	r2, [r3, #28]
    2b64:	uxth	r2, r2
    2b66:	orr.w	r2, r2, #16
    2b6a:	strh	r2, [r3, #28]
	void interruptAtCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_INTMAJOR;
	}

	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
    2b6c:	ldrh	r2, [r3, #28]
    2b6e:	cmp	r0, #0
    2b70:	beq.w	2ce8 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x32c>
    2b74:	uxth	r2, r2
    2b76:	orr.w	r2, r2, #4
    2b7a:	strh	r2, [r3, #28]
      _dmasettings[1].interruptAtHalf();
    else
      _dmasettings[1].TCD->CSR &= ~DMA_TCD_CSR_INTHALF;

    _dmasettings[2].sourceBuffer(&_pfbtft[COUNT_WORDS_WRITE * 2],
    2b7c:	ldr.w	r3, [r4, #176]	; 0xb0
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 2;
		TCD->ATTR_SRC = 1;
    2b80:	movs	r5, #1
	}
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 2;
    2b82:	movs	r0, #2
		TCD->ATTR_SRC = 1;
		TCD->NBYTES = 2;
		TCD->SLAST = -len;
		TCD->BITER = len / 2;
    2b84:	mov.w	r2, #25600	; 0x6400
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 2;
		TCD->ATTR_SRC = 1;
    2b88:	strb	r5, [r1, #7]
    2b8a:	add.w	r3, r3, #102400	; 0x19000
		TCD->NBYTES = 2;
    2b8e:	ldr.w	r7, [r4, #352]	; 0x160
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
    2b92:	movs	r5, #0
		TCD->CITER = len;
	}
	void sourceBuffer(volatile const signed short p[], unsigned int len) {
		sourceBuffer((volatile const uint16_t *)p, len); }
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
    2b94:	str	r3, [r1, #0]
		TCD->SOFF = 2;
    2b96:	strh	r0, [r1, #4]
		TCD->ATTR_SRC = 1;
		TCD->NBYTES = 2;
    2b98:	str	r0, [r7, #8]
		TCD->SLAST = -len;
    2b9a:	ldr.w	r3, [r4, #352]	; 0x160
    2b9e:	ldr	r7, [pc, #340]	; (2cf4 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x338>)
		TCD->BITER = len / 2;
    2ba0:	strh	r2, [r3, #30]
		TCD->CITER = len / 2;
    2ba2:	ldr.w	r1, [r4, #352]	; 0x160
	void sourceBuffer(volatile const unsigned short p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 2;
		TCD->ATTR_SRC = 1;
		TCD->NBYTES = 2;
		TCD->SLAST = -len;
    2ba6:	str	r7, [r3, #12]
		TCD->BITER = len / 2;
		TCD->CITER = len / 2;
    2ba8:	strh	r2, [r1, #22]
                                 COUNT_WORDS_WRITE * 2);
    _dmasettings[2].destination(_pimxrt_spi->TDR);
    2baa:	ldr	r3, [r4, #28]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    2bac:	ldr.w	r2, [r4, #352]	; 0x160
    2bb0:	adds	r3, #100	; 0x64
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
    2bb2:	strb	r0, [r2, #6]
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
    2bb4:	cmp.w	r3, #1073741824	; 0x40000000
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    2bb8:	str	r3, [r2, #16]
		TCD->DOFF = 0;
    2bba:	strh	r5, [r2, #20]
    2bbc:	ldr.w	r3, [r4, #352]	; 0x160
		TCD->ATTR_DST = 2;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
    2bc0:	bcc.n	2ca6 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x2ea>
    2bc2:	ldr	r2, [r3, #8]
    2bc4:	cmp	r2, #0
    2bc6:	beq.n	2ca6 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x2ea>
    _dmasettings[2].TCD->ATTR_DST = 1;
    2bc8:	mov.w	r8, #1
		TCD->DLASTSGA = 0;
    2bcc:	mov.w	r9, #0
// Serial.println("DMA initDMASettings - before dmatx");
#ifdef DEBUG_ASYNC_LEDS
    digitalWriteFast(DEBUG_PIN_4, !digitalReadFast(DEBUG_PIN_4));
#endif
    _dmatx = _dmasettings[0];
    _dmatx.begin(true);
    2bd0:	add.w	r0, r4, #416	; 0x1a0
      _dmasettings[1].TCD->CSR &= ~DMA_TCD_CSR_INTHALF;

    _dmasettings[2].sourceBuffer(&_pfbtft[COUNT_WORDS_WRITE * 2],
                                 COUNT_WORDS_WRITE * 2);
    _dmasettings[2].destination(_pimxrt_spi->TDR);
    _dmasettings[2].TCD->ATTR_DST = 1;
    2bd4:	strb.w	r8, [r3, #6]
	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
	}

	void replaceSettingsOnCompletion(const DMABaseClass &settings) {
		TCD->DLASTSGA = (int32_t)(settings.TCD);
    2bd8:	ldr.w	r1, [r4, #352]	; 0x160
    2bdc:	ldr.w	r2, [r4, #224]	; 0xe0
		TCD->CSR &= ~DMA_TCD_CSR_DONE;
    2be0:	ldrh	r5, [r1, #28]
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
		TCD->DLASTSGA = 0;
    2be2:	str.w	r9, [r3, #24]
		TCD->CSR |= DMA_TCD_CSR_DREQ;
	}

	void replaceSettingsOnCompletion(const DMABaseClass &settings) {
		TCD->DLASTSGA = (int32_t)(settings.TCD);
		TCD->CSR &= ~DMA_TCD_CSR_DONE;
    2be6:	bic.w	r5, r5, #128	; 0x80
			channel = rhs.channel;
		}
		return *this;
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
    2bea:	ldr.w	r3, [r4, #416]	; 0x1a0
	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
	}

	void replaceSettingsOnCompletion(const DMABaseClass &settings) {
		TCD->DLASTSGA = (int32_t)(settings.TCD);
    2bee:	str	r2, [r1, #24]
		TCD->CSR &= ~DMA_TCD_CSR_DONE;
    2bf0:	lsls	r5, r5, #16
	static inline void copy_tcd(TCD_t *dst, const TCD_t *src) {
		dst->CSR &= ~DMA_TCD_CSR_DONE;
		const uint32_t *p = (const uint32_t *)src;
		uint32_t *q = (uint32_t *)dst;
		uint32_t t1, t2, t3, t4;
		t1 = *p++; t2 = *p++; t3 = *p++; t4 = *p++;
    2bf2:	ldr	r7, [r2, #8]
    2bf4:	ldr	r6, [r2, #12]
		TCD->CSR |= DMA_TCD_CSR_DREQ;
	}

	void replaceSettingsOnCompletion(const DMABaseClass &settings) {
		TCD->DLASTSGA = (int32_t)(settings.TCD);
		TCD->CSR &= ~DMA_TCD_CSR_DONE;
    2bf6:	lsrs	r5, r5, #16
	static inline void copy_tcd(TCD_t *dst, const TCD_t *src) {
		dst->CSR &= ~DMA_TCD_CSR_DONE;
		const uint32_t *p = (const uint32_t *)src;
		uint32_t *q = (uint32_t *)dst;
		uint32_t t1, t2, t3, t4;
		t1 = *p++; t2 = *p++; t3 = *p++; t4 = *p++;
    2bf8:	ldmia.w	r2, {sl, ip}
		TCD->CSR |= DMA_TCD_CSR_DREQ;
	}

	void replaceSettingsOnCompletion(const DMABaseClass &settings) {
		TCD->DLASTSGA = (int32_t)(settings.TCD);
		TCD->CSR &= ~DMA_TCD_CSR_DONE;
    2bfc:	strh	r5, [r1, #28]
		TCD->CSR |= DMA_TCD_CSR_ESG;
    2bfe:	ldrh	r5, [r1, #28]
    2c00:	uxth	r5, r5
    2c02:	orr.w	r5, r5, #16
    2c06:	strh	r5, [r1, #28]
	/*************************************************/
	/**    Special Options / Features               **/
	/*************************************************/

	void interruptAtCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_INTMAJOR;
    2c08:	ldrh	r5, [r1, #28]
    2c0a:	uxth	r5, r5
    2c0c:	orr.w	r5, r5, #2
    2c10:	strh	r5, [r1, #28]
// Serial.println("DMA initDMASettings - before dmatx");
#ifdef DEBUG_ASYNC_LEDS
    digitalWriteFast(DEBUG_PIN_4, !digitalReadFast(DEBUG_PIN_4));
#endif
    _dmatx = _dmasettings[0];
    _dmatx.begin(true);
    2c12:	mov	r1, r8
	// users should not be able to create instances of DMABaseClass, which
	// require the inheriting class to initialize the TCD pointer.
	DMABaseClass() {}

	static inline void copy_tcd(TCD_t *dst, const TCD_t *src) {
		dst->CSR &= ~DMA_TCD_CSR_DONE;
    2c14:	ldrh	r5, [r3, #28]
		const uint32_t *p = (const uint32_t *)src;
		uint32_t *q = (uint32_t *)dst;
		uint32_t t1, t2, t3, t4;
		t1 = *p++; t2 = *p++; t3 = *p++; t4 = *p++;
    2c16:	str	r6, [r3, #12]
	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    2c18:	and.w	r6, fp, #127	; 0x7f
	// users should not be able to create instances of DMABaseClass, which
	// require the inheriting class to initialize the TCD pointer.
	DMABaseClass() {}

	static inline void copy_tcd(TCD_t *dst, const TCD_t *src) {
		dst->CSR &= ~DMA_TCD_CSR_DONE;
    2c1c:	bic.w	r5, r5, #128	; 0x80
		const uint32_t *p = (const uint32_t *)src;
		uint32_t *q = (uint32_t *)dst;
		uint32_t t1, t2, t3, t4;
		t1 = *p++; t2 = *p++; t3 = *p++; t4 = *p++;
		*q++ = t1; *q++ = t2; *q++ = t3; *q++ = t4;
    2c20:	str.w	sl, [r3]
    2c24:	str.w	ip, [r3, #4]
	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    2c28:	orr.w	r6, r6, #2147483648	; 0x80000000
	// users should not be able to create instances of DMABaseClass, which
	// require the inheriting class to initialize the TCD pointer.
	DMABaseClass() {}

	static inline void copy_tcd(TCD_t *dst, const TCD_t *src) {
		dst->CSR &= ~DMA_TCD_CSR_DONE;
    2c2c:	lsls	r5, r5, #16
		const uint32_t *p = (const uint32_t *)src;
		uint32_t *q = (uint32_t *)dst;
		uint32_t t1, t2, t3, t4;
		t1 = *p++; t2 = *p++; t3 = *p++; t4 = *p++;
		*q++ = t1; *q++ = t2; *q++ = t3; *q++ = t4;
    2c2e:	str	r7, [r3, #8]
		t1 = *p++; t2 = *p++; t3 = *p++; t4 = *p++;
    2c30:	ldr.w	lr, [r2, #16]
	// users should not be able to create instances of DMABaseClass, which
	// require the inheriting class to initialize the TCD pointer.
	DMABaseClass() {}

	static inline void copy_tcd(TCD_t *dst, const TCD_t *src) {
		dst->CSR &= ~DMA_TCD_CSR_DONE;
    2c34:	lsrs	r5, r5, #16
		const uint32_t *p = (const uint32_t *)src;
		uint32_t *q = (uint32_t *)dst;
		uint32_t t1, t2, t3, t4;
		t1 = *p++; t2 = *p++; t3 = *p++; t4 = *p++;
		*q++ = t1; *q++ = t2; *q++ = t3; *q++ = t4;
		t1 = *p++; t2 = *p++; t3 = *p++; t4 = *p++;
    2c36:	ldr	r7, [r2, #20]
	// users should not be able to create instances of DMABaseClass, which
	// require the inheriting class to initialize the TCD pointer.
	DMABaseClass() {}

	static inline void copy_tcd(TCD_t *dst, const TCD_t *src) {
		dst->CSR &= ~DMA_TCD_CSR_DONE;
    2c38:	strh	r5, [r3, #28]
		const uint32_t *p = (const uint32_t *)src;
		uint32_t *q = (uint32_t *)dst;
		uint32_t t1, t2, t3, t4;
		t1 = *p++; t2 = *p++; t3 = *p++; t4 = *p++;
		*q++ = t1; *q++ = t2; *q++ = t3; *q++ = t4;
		t1 = *p++; t2 = *p++; t3 = *p++; t4 = *p++;
    2c3a:	ldr	r5, [r2, #24]
    2c3c:	ldr	r2, [r2, #28]
		*q++ = t1; *q++ = t2; *q++ = t3; *q++ = t4;
    2c3e:	str.w	lr, [r3, #16]
    2c42:	str	r2, [r3, #28]
    2c44:	str	r7, [r3, #20]
    2c46:	str	r5, [r3, #24]
    2c48:	bl	98f8 <DMAChannel::begin(bool)>
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    2c4c:	ldr	r3, [pc, #168]	; (2cf8 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x33c>)
    2c4e:	ldrb.w	r2, [r4, #420]	; 0x1a4
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
    2c52:	str.w	r9, [r3, r2, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    2c56:	str.w	r6, [r3, r2, lsl #2]
    _dmatx.triggerAtHardwareEvent(dmaTXevent);
#ifdef DEBUG_ASYNC_LEDS
    digitalWriteFast(DEBUG_PIN_4, !digitalReadFast(DEBUG_PIN_4));
#endif
    if (_spi_num == 0)
    2c5a:	ldrb	r3, [r4, #16]
    2c5c:	cbnz	r3, 2cba <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x2fe>
    2c5e:	ldrb.w	r3, [r4, #420]	; 0x1a4

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    2c62:	ldr	r0, [pc, #152]	; (2cfc <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x340>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    2c64:	and.w	r2, r3, #31

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    2c68:	add.w	r5, r3, #16
    2c6c:	ldr	r6, [pc, #144]	; (2d00 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x344>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    2c6e:	asrs	r3, r3, #5
    2c70:	lsl.w	r2, r8, r2
    2c74:	ldr	r1, [pc, #140]	; (2d04 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x348>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    2c76:	str.w	r6, [r0, r5, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    2c7a:	str.w	r2, [r1, r3, lsl #2]
// Serial.printf("Init DMA Settings: TX:%d size:%d\n", dmaTXevent,
// _dma_write_size_words);

#endif
  _dma_state =
      ILI9341_DMA_INIT | ILI9341_DMA_EVER_INIT; // Should be first thing set!
    2c7e:	movs	r3, #9
    2c80:	strb.w	r3, [r4, #212]	; 0xd4
    2c84:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	void interruptAtCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_INTMAJOR;
	}

	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
    2c88:	ldrh	r3, [r2, #28]
    2c8a:	uxth	r3, r3
    2c8c:	orr.w	r3, r3, #4
    2c90:	strh	r3, [r2, #28]
    2c92:	movs	r3, #9
    2c94:	strb.w	r3, [r4, #212]	; 0xd4
    2c98:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
    2c9c:	ldr	r3, [r0, #8]
    2c9e:	cmp	r3, #0
    2ca0:	bne.w	2ac2 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x106>
    2ca4:	b.n	2aba <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0xfe>
    2ca6:	movs	r2, #4
    2ca8:	str	r2, [r3, #8]
    2caa:	ldr.w	r3, [r4, #352]	; 0x160
    2cae:	b.n	2bc8 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x20c>
    2cb0:	movs	r3, #4
    2cb2:	str	r3, [r0, #8]
    2cb4:	ldr.w	r0, [r4, #288]	; 0x120
    2cb8:	b.n	2b40 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x184>
#ifdef DEBUG_ASYNC_LEDS
    digitalWriteFast(DEBUG_PIN_4, !digitalReadFast(DEBUG_PIN_4));
#endif
    if (_spi_num == 0)
      _dmatx.attachInterrupt(dmaInterrupt);
    else if (_spi_num == 1)
    2cba:	cmp	r3, #1
    2cbc:	ldrb.w	r2, [r4, #420]	; 0x1a4

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    2cc0:	ldr	r0, [pc, #56]	; (2cfc <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x340>)
    2cc2:	beq.n	2d0c <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x350>
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    2cc4:	and.w	r3, r2, #31

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    2cc8:	add.w	r5, r2, #16
    2ccc:	ldr	r6, [pc, #56]	; (2d08 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x34c>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    2cce:	asrs	r2, r2, #5
    2cd0:	lsl.w	r3, r8, r3
    2cd4:	ldr	r1, [pc, #44]	; (2d04 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x348>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    2cd6:	str.w	r6, [r0, r5, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    2cda:	str.w	r3, [r1, r2, lsl #2]
// Serial.printf("Init DMA Settings: TX:%d size:%d\n", dmaTXevent,
// _dma_write_size_words);

#endif
  _dma_state =
      ILI9341_DMA_INIT | ILI9341_DMA_EVER_INIT; // Should be first thing set!
    2cde:	movs	r3, #9
    2ce0:	strb.w	r3, [r4, #212]	; 0xd4
    2ce4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    _dmasettings[1].TCD->ATTR_DST = 1;
    _dmasettings[1].replaceSettingsOnCompletion(_dmasettings[2]);
    if (_frame_callback_on_HalfDone)
      _dmasettings[1].interruptAtHalf();
    else
      _dmasettings[1].TCD->CSR &= ~DMA_TCD_CSR_INTHALF;
    2ce8:	bic.w	r2, r2, #4
    2cec:	lsls	r2, r2, #16
    2cee:	lsrs	r2, r2, #16
    2cf0:	strh	r2, [r3, #28]
    2cf2:	b.n	2b7c <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x1c0>
    2cf4:	.word	0xffff3800
    2cf8:	.word	0x400ec000
    2cfc:	.word	0x20004400
    2d00:	.word	0x00003045
    2d04:	.word	0xe000e100
    2d08:	.word	0x00003065
    2d0c:	and.w	r1, r2, #31

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    2d10:	add.w	r5, r2, #16
    2d14:	ldr	r6, [pc, #16]	; (2d28 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x36c>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    2d16:	asrs	r2, r2, #5
    2d18:	lsls	r3, r1
    2d1a:	ldr	r1, [pc, #16]	; (2d2c <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0x370>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    2d1c:	str.w	r6, [r0, r5, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    2d20:	str.w	r3, [r1, r2, lsl #2]
    2d24:	b.n	2a60 <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]+0xa4>
    2d26:	nop
    2d28:	.word	0x00003055
    2d2c:	.word	0xe000e100

00002d30 <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    2d30:	push	{r4, r5}
    2d32:	sub	sp, #8
		if (interruptMasksUsed) {
    2d34:	ldrb	r3, [r0, #19]
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    2d36:	add	r4, sp, #8
    2d38:	stmdb	r4, {r1, r2}
    2d3c:	ldr	r1, [sp, #0]
		if (interruptMasksUsed) {
    2d3e:	cmp	r3, #0
    2d40:	beq.n	2d94 <SPIClass::beginTransaction(SPISettings)+0x64>
			__disable_irq();
    2d42:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    2d44:	ldrb	r3, [r0, #19]
    2d46:	lsls	r2, r3, #31
    2d48:	bpl.n	2d58 <SPIClass::beginTransaction(SPISettings)+0x28>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    2d4a:	ldr	r2, [pc, #208]	; (2e1c <SPIClass::beginTransaction(SPISettings)+0xec>)
    2d4c:	ldr	r3, [r0, #20]
    2d4e:	ldr	r4, [r2, #0]
    2d50:	ands	r3, r4
    2d52:	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    2d54:	str	r3, [r2, #0]
    2d56:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x02) {
    2d58:	lsls	r5, r3, #30
    2d5a:	bpl.n	2d6a <SPIClass::beginTransaction(SPISettings)+0x3a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    2d5c:	ldr	r2, [pc, #192]	; (2e20 <SPIClass::beginTransaction(SPISettings)+0xf0>)
    2d5e:	ldr	r3, [r0, #24]
    2d60:	ldr	r4, [r2, #0]
    2d62:	ands	r3, r4
    2d64:	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    2d66:	str	r3, [r2, #0]
    2d68:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x04) {
    2d6a:	lsls	r4, r3, #29
    2d6c:	bpl.n	2d7c <SPIClass::beginTransaction(SPISettings)+0x4c>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    2d6e:	ldr	r2, [pc, #180]	; (2e24 <SPIClass::beginTransaction(SPISettings)+0xf4>)
    2d70:	ldr	r3, [r0, #28]
    2d72:	ldr	r4, [r2, #0]
    2d74:	ands	r3, r4
    2d76:	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    2d78:	str	r3, [r2, #0]
    2d7a:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x08) {
    2d7c:	lsls	r2, r3, #28
    2d7e:	bpl.n	2d8e <SPIClass::beginTransaction(SPISettings)+0x5e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    2d80:	ldr	r2, [pc, #164]	; (2e28 <SPIClass::beginTransaction(SPISettings)+0xf8>)
    2d82:	ldr	r3, [r0, #32]
    2d84:	ldr	r4, [r2, #0]
    2d86:	ands	r3, r4
    2d88:	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    2d8a:	str	r3, [r2, #0]
    2d8c:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x10) {
    2d8e:	lsls	r3, r3, #27
    2d90:	bmi.n	2dee <SPIClass::beginTransaction(SPISettings)+0xbe>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    2d92:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    2d94:	ldr	r3, [r0, #8]
    2d96:	cmp	r3, r1
    2d98:	beq.n	2dfc <SPIClass::beginTransaction(SPISettings)+0xcc>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    2d9a:	ldr	r3, [pc, #144]	; (2e2c <SPIClass::beginTransaction(SPISettings)+0xfc>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    2d9c:	str	r1, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
    2d9e:	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    2da0:	ldr	r2, [pc, #140]	; (2e30 <SPIClass::beginTransaction(SPISettings)+0x100>)
    2da2:	ubfx	r4, r3, #4, #2
    2da6:	ubfx	r3, r3, #26, #3
    2daa:	ldr.w	r2, [r2, r4, lsl #2]
    2dae:	adds	r3, #1
    2db0:	udiv	r2, r2, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    2db4:	cbz	r1, 2dea <SPIClass::beginTransaction(SPISettings)+0xba>
    2db6:	udiv	r3, r2, r1

			if (d && clkhz/d > _clock) d++;
    2dba:	cbz	r3, 2dce <SPIClass::beginTransaction(SPISettings)+0x9e>
    2dbc:	udiv	r2, r2, r3
    2dc0:	cmp	r1, r2
    2dc2:	it	cc
    2dc4:	addcc	r3, #1
			if (d > 257) d= 257;  // max div
    2dc6:	cmp.w	r3, #258	; 0x102
    2dca:	bcc.n	2e00 <SPIClass::beginTransaction(SPISettings)+0xd0>
    2dcc:	ldr	r3, [pc, #100]	; (2e34 <SPIClass::beginTransaction(SPISettings)+0x104>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2dce:	str	r3, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2dd0:	ldr	r2, [r0, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    2dd2:	movs	r5, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    2dd4:	movs	r4, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
    2dd6:	ldr	r0, [sp, #4]
		port().CR = LPSPI_CR_MEN;
    2dd8:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    2dda:	str	r5, [r2, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    2ddc:	str	r4, [r2, #36]	; 0x24
		port().CCR = _ccr;
    2dde:	str	r3, [r2, #64]	; 0x40
		port().TCR = settings.tcr;
    2de0:	str	r0, [r2, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    2de2:	str	r1, [r2, #16]

	}
    2de4:	add	sp, #8
    2de6:	pop	{r4, r5}
    2de8:	bx	lr

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    2dea:	mov	r3, r2
    2dec:	b.n	2dba <SPIClass::beginTransaction(SPISettings)+0x8a>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    2dee:	ldr	r2, [pc, #72]	; (2e38 <SPIClass::beginTransaction(SPISettings)+0x108>)
    2df0:	ldr	r3, [r0, #36]	; 0x24
    2df2:	ldr	r4, [r2, #0]
    2df4:	ands	r3, r4
    2df6:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    2df8:	str	r3, [r2, #0]
    2dfa:	b.n	2d92 <SPIClass::beginTransaction(SPISettings)+0x62>
    2dfc:	ldr	r3, [r0, #12]
    2dfe:	b.n	2dd0 <SPIClass::beginTransaction(SPISettings)+0xa0>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    2e00:	cmp	r3, #2
    2e02:	it	ls
    2e04:	movls	r3, #0
    2e06:	bls.n	2dce <SPIClass::beginTransaction(SPISettings)+0x9e>
    2e08:	subs	r3, #2
    2e0a:	lsrs	r1, r3, #1
    2e0c:	lsls	r2, r1, #16
    2e0e:	orr.w	r3, r3, r1, lsl #8
    2e12:	and.w	r2, r2, #16711680	; 0xff0000
    2e16:	orrs	r3, r2
    2e18:	b.n	2dce <SPIClass::beginTransaction(SPISettings)+0x9e>
    2e1a:	nop
    2e1c:	.word	0xe000e180
    2e20:	.word	0xe000e184
    2e24:	.word	0xe000e188
    2e28:	.word	0xe000e18c
    2e2c:	.word	0x400fc000
    2e30:	.word	0x20000068
    2e34:	.word	0x007f7fff
    2e38:	.word	0xe000e190

00002e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>:
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
    2e3c:	ldr	r3, [pc, #120]	; (2eb8 <ILI9341_t3n::maybeUpdateTCR(unsigned long)+0x7c>)
    2e3e:	ldr.w	r2, [r0, #156]	; 0x9c
    2e42:	ands	r3, r2
    2e44:	cmp	r3, r1
    2e46:	beq.n	2e6c <ILI9341_t3n::maybeUpdateTCR(unsigned long)+0x30>
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    2e48:	ldr	r3, [pc, #112]	; (2ebc <ILI9341_t3n::maybeUpdateTCR(unsigned long)+0x80>)
    waitTransmitComplete(mcr);
  }
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
    2e4a:	push	{r4, r5}
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    2e4c:	ands	r3, r2
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    2e4e:	eor.w	r5, r2, r1
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    2e52:	orr.w	r4, r3, r1
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    2e56:	tst.w	r5, #50331648	; 0x3000000
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    2e5a:	str.w	r4, [r0, #156]	; 0x9c
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    2e5e:	bne.n	2e6e <ILI9341_t3n::maybeUpdateTCR(unsigned long)+0x32>
    2e60:	ldr	r2, [r0, #28]
        while ((_pimxrt_spi->FSR & 0x1f))
    2e62:	ldr	r3, [r2, #92]	; 0x5c
    2e64:	lsls	r1, r3, #27
    2e66:	bne.n	2e62 <ILI9341_t3n::maybeUpdateTCR(unsigned long)+0x26>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR
    2e68:	str	r4, [r2, #96]	; 0x60
        _pimxrt_spi->TCR = _spi_tcr_current &
                           ~(LPSPI_TCR_PCS(3) |
                             LPSPI_TCR_CONT); // go ahead and update TCR anyway?
      }
    }
  }
    2e6a:	pop	{r4, r5}
    2e6c:	bx	lr
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    2e6e:	ldr.w	r5, [r0, #160]	; 0xa0
    2e72:	cmp	r5, #0
    2e74:	beq.n	2e60 <ILI9341_t3n::maybeUpdateTCR(unsigned long)+0x24>
    2e76:	ldr	r4, [r0, #28]
    2e78:	ldrb.w	r2, [r0, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    2e7c:	cbz	r2, 2e92 <ILI9341_t3n::maybeUpdateTCR(unsigned long)+0x56>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    2e7e:	ldr	r3, [r4, #112]	; 0x70
    2e80:	lsls	r3, r3, #30
    2e82:	bmi.n	2e7c <ILI9341_t3n::maybeUpdateTCR(unsigned long)+0x40>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    2e84:	subs	r2, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    2e86:	ldr	r3, [r4, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
    2e88:	uxtb	r2, r2
    2e8a:	strb.w	r2, [r0, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    2e8e:	cmp	r2, #0
    2e90:	bne.n	2e7e <ILI9341_t3n::maybeUpdateTCR(unsigned long)+0x42>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    2e92:	movw	r3, #513	; 0x201
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
    2e96:	tst.w	r1, #50331648	; 0x3000000
    2e9a:	str	r3, [r4, #16]
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
    2e9c:	ldr.w	r3, [r0, #172]	; 0xac
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
    2ea0:	bne.n	2eb2 <ILI9341_t3n::maybeUpdateTCR(unsigned long)+0x76>
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
    2ea2:	str.w	r5, [r3, #136]	; 0x88
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
        else
          DIRECT_WRITE_LOW(_dcport, _dcpinmask);
        _pimxrt_spi->TCR = _spi_tcr_current &
    2ea6:	ldr.w	r3, [r0, #156]	; 0x9c
    2eaa:	bic.w	r3, r3, #52428800	; 0x3200000
                           ~(LPSPI_TCR_PCS(3) |
                             LPSPI_TCR_CONT); // go ahead and update TCR anyway?
    2eae:	str	r3, [r4, #96]	; 0x60
      }
    }
  }
    2eb0:	b.n	2e6a <ILI9341_t3n::maybeUpdateTCR(unsigned long)+0x2e>
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    2eb2:	str.w	r5, [r3, #132]	; 0x84
    2eb6:	b.n	2ea6 <ILI9341_t3n::maybeUpdateTCR(unsigned long)+0x6a>
    2eb8:	.word	0x0328001f
    2ebc:	.word	0xfcd7ffe0

00002ec0 <ILI9341_t3n::process_dma_interrupt()>:

#ifdef DEBUG_ASYNC_UPDATE
extern void dumpDMA_TCD(DMABaseClass *dmabc, const char *psx_title);
#endif

void ILI9341_t3n::process_dma_interrupt(void) {
    2ec0:	push	{r3, r4, r5, r6, r7, lr}
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    2ec2:	ldr	r3, [pc, #348]	; (3020 <ILI9341_t3n::process_dma_interrupt()+0x160>)
    2ec4:	mov	r4, r0
    2ec6:	ldrb.w	r2, [r0, #420]	; 0x1a4
    2eca:	strb	r2, [r3, #31]
                  (uint32_t)_dmatx.TCD->DLASTSGA,
                  (_dmatx.TCD->SADDR > _dmasettings[1].TCD->SADDR) ? '>' : '<');
  }
#endif
  _dmatx.clearInterrupt();
  if (_frame_callback_on_HalfDone &&
    2ecc:	ldrb.w	r3, [r0, #204]	; 0xcc
    2ed0:	cbz	r3, 2ef6 <ILI9341_t3n::process_dma_interrupt()+0x36>
      (_dmatx.TCD->SADDR > _dmasettings[1].TCD->SADDR)) {
    2ed2:	ldr.w	r2, [r0, #416]	; 0x1a0
    2ed6:	ldr.w	r3, [r0, #288]	; 0x120
    2eda:	ldr	r2, [r2, #0]
    2edc:	ldr	r3, [r3, #0]
                  (uint32_t)_dmatx.TCD->DLASTSGA,
                  (_dmatx.TCD->SADDR > _dmasettings[1].TCD->SADDR) ? '>' : '<');
  }
#endif
  _dmatx.clearInterrupt();
  if (_frame_callback_on_HalfDone &&
    2ede:	cmp	r2, r3
    2ee0:	bls.n	2ef6 <ILI9341_t3n::process_dma_interrupt()+0x36>
      (_dmatx.TCD->SADDR > _dmasettings[1].TCD->SADDR)) {
    _dma_sub_frame_count = 1; // set as partial frame.
    2ee2:	movs	r2, #1
    if (_frame_complete_callback)
    2ee4:	ldr.w	r3, [r0, #200]	; 0xc8
  }
#endif
  _dmatx.clearInterrupt();
  if (_frame_callback_on_HalfDone &&
      (_dmatx.TCD->SADDR > _dmasettings[1].TCD->SADDR)) {
    _dma_sub_frame_count = 1; // set as partial frame.
    2ee8:	strh.w	r2, [r0, #220]	; 0xdc
    if (_frame_complete_callback)
    2eec:	cbz	r3, 2ef0 <ILI9341_t3n::process_dma_interrupt()+0x30>
      _dmaActiveDisplay[_spi_num] =
          0; // We don't have a display active any more...
    } else {
      // Lets try to flush out memory
      if (_frame_complete_callback)
        (*_frame_complete_callback)();
    2eee:	blx	r3
    }
#ifdef DEBUG_ASYNC_LEDS
    digitalWriteFast(DEBUG_PIN_3, LOW);
#endif
  }
  asm("dsb");
    2ef0:	dsb	sy

#endif
#ifdef DEBUG_ASYNC_LEDS
  digitalWriteFast(DEBUG_PIN_2, LOW);
#endif
}
    2ef4:	pop	{r3, r4, r5, r6, r7, pc}
    if (_frame_complete_callback)
      (*_frame_complete_callback)();
    // Serial.print("-");
  } else {

    _dma_frame_count++;
    2ef6:	ldr.w	r3, [r4, #216]	; 0xd8
    _dma_sub_frame_count = 0;
    2efa:	movs	r2, #0
    if (_frame_complete_callback)
      (*_frame_complete_callback)();
    // Serial.print("-");
  } else {

    _dma_frame_count++;
    2efc:	adds	r3, #1
    2efe:	str.w	r3, [r4, #216]	; 0xd8
    _dma_sub_frame_count = 0;
    2f02:	strh.w	r2, [r4, #220]	; 0xdc
// if ((_dma_frame_count & 0x1f) == 0)Serial.println();
#ifdef DEBUG_ASYNC_LEDS
    digitalWriteFast(DEBUG_PIN_3, HIGH);
#endif
    // See if we are in continuous mode or not..
    if ((_dma_state & ILI9341_DMA_CONT) == 0) {
    2f06:	ldrb.w	r3, [r4, #212]	; 0xd4
    2f0a:	lsls	r3, r3, #30
    2f0c:	bmi.n	2fe0 <ILI9341_t3n::process_dma_interrupt()+0x120>
    2f0e:	ldr	r2, [r4, #28]
      // We are in single refresh mode or the user has called cancel so
      // Lets try to release the CS pin
      // Serial.printf("Before FSR wait: %x %x\n", _pimxrt_spi->FSR,
      // _pimxrt_spi->SR);
      while (_pimxrt_spi->FSR & 0x1f)
    2f10:	ldr	r3, [r2, #92]	; 0x5c
    2f12:	lsls	r1, r3, #27
    2f14:	bne.n	2f10 <ILI9341_t3n::process_dma_interrupt()+0x50>
        ; // wait until this one is complete

      // Serial.printf("Before SR busy wait: %x\n", _pimxrt_spi->SR);
      while (_pimxrt_spi->SR & LPSPI_SR_MBF)
    2f16:	ldr	r3, [r2, #20]
    2f18:	ands.w	r5, r3, #16777216	; 0x1000000
    2f1c:	bne.n	2f16 <ILI9341_t3n::process_dma_interrupt()+0x56>
    2f1e:	ldrb.w	r1, [r4, #420]	; 0x1a4
          15);              // _spi_fcr_save;	// restore the FSR status...
      _pimxrt_spi->DER = 0; // DMA no longer doing TX (or RX)

      _pimxrt_spi->CR =
          LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF; // actually clear both...
      _pimxrt_spi->SR = 0x3f00; // clear out all of the other status...
    2f22:	mov.w	r2, #16128	; 0x3f00
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    2f26:	ldr	r3, [pc, #248]	; (3020 <ILI9341_t3n::process_dma_interrupt()+0x160>)
        ; // wait until this one is complete

      _dmatx.clearComplete();
      // Serial.println("Restore FCR");
      _pimxrt_spi->FCR = LPSPI_FCR_TXWATER(
          15);              // _spi_fcr_save;	// restore the FSR status...
    2f28:	movs	r7, #15
      _pimxrt_spi->DER = 0; // DMA no longer doing TX (or RX)

      _pimxrt_spi->CR =
          LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF; // actually clear both...
    2f2a:	movw	r6, #769	; 0x301
      _pimxrt_spi->SR = 0x3f00; // clear out all of the other status...

      maybeUpdateTCR(_tcr_dc_assert |
                     LPSPI_TCR_FRAMESZ(7)); // output Command with 8 bits
    2f2e:	mov	r0, r4
    2f30:	strb	r1, [r3, #28]
      while (_pimxrt_spi->SR & LPSPI_SR_MBF)
        ; // wait until this one is complete

      _dmatx.clearComplete();
      // Serial.println("Restore FCR");
      _pimxrt_spi->FCR = LPSPI_FCR_TXWATER(
    2f32:	ldr	r3, [r4, #28]
      _pimxrt_spi->CR =
          LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF; // actually clear both...
      _pimxrt_spi->SR = 0x3f00; // clear out all of the other status...

      maybeUpdateTCR(_tcr_dc_assert |
                     LPSPI_TCR_FRAMESZ(7)); // output Command with 8 bits
    2f34:	ldr.w	r1, [r4, #164]	; 0xa4
        ; // wait until this one is complete

      _dmatx.clearComplete();
      // Serial.println("Restore FCR");
      _pimxrt_spi->FCR = LPSPI_FCR_TXWATER(
          15);              // _spi_fcr_save;	// restore the FSR status...
    2f38:	str	r7, [r3, #88]	; 0x58
      _pimxrt_spi->CR =
          LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF; // actually clear both...
      _pimxrt_spi->SR = 0x3f00; // clear out all of the other status...

      maybeUpdateTCR(_tcr_dc_assert |
                     LPSPI_TCR_FRAMESZ(7)); // output Command with 8 bits
    2f3a:	orr.w	r1, r1, #7

      _dmatx.clearComplete();
      // Serial.println("Restore FCR");
      _pimxrt_spi->FCR = LPSPI_FCR_TXWATER(
          15);              // _spi_fcr_save;	// restore the FSR status...
      _pimxrt_spi->DER = 0; // DMA no longer doing TX (or RX)
    2f3e:	str	r5, [r3, #28]

      _pimxrt_spi->CR =
          LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF; // actually clear both...
    2f40:	str	r6, [r3, #16]
      _pimxrt_spi->SR = 0x3f00; // clear out all of the other status...
    2f42:	str	r2, [r3, #20]

      maybeUpdateTCR(_tcr_dc_assert |
                     LPSPI_TCR_FRAMESZ(7)); // output Command with 8 bits
    2f44:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7));
    2f48:	ldr.w	r1, [r4, #164]	; 0xa4
    2f4c:	mov	r0, r4
    2f4e:	orr.w	r1, r1, #7
    2f52:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    2f56:	ldr	r1, [r4, #28]
    2f58:	str	r5, [r1, #100]	; 0x64
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    2f5a:	ldrb.w	r2, [r4, #146]	; 0x92
    2f5e:	adds	r3, r2, #1
    2f60:	strb.w	r3, [r4, #146]	; 0x92
    2f64:	b.n	2f6c <ILI9341_t3n::process_dma_interrupt()+0xac>
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    2f66:	ldr	r3, [r1, #112]	; 0x70
    2f68:	lsls	r3, r3, #30
    2f6a:	bpl.n	3014 <ILI9341_t3n::process_dma_interrupt()+0x154>
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    2f6c:	cmp	r2, #255	; 0xff
    2f6e:	bne.n	2f66 <ILI9341_t3n::process_dma_interrupt()+0xa6>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    2f70:	movw	r2, #513	; 0x201
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    2f74:	ldr.w	r3, [r4, #152]	; 0x98
    2f78:	str	r2, [r1, #16]
    2f7a:	cbz	r3, 2f84 <ILI9341_t3n::process_dma_interrupt()+0xc4>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
    2f7c:	ldr.w	r2, [r4, #148]	; 0x94
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    2f80:	str.w	r2, [r3, #132]	; 0x84
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
#endif
    }
    _pspi->endTransaction();
    2f84:	ldr	r2, [r4, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    2f86:	ldrb	r3, [r2, #19]
    2f88:	cbz	r3, 2fc4 <ILI9341_t3n::process_dma_interrupt()+0x104>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    2f8a:	lsls	r7, r3, #31
    2f8c:	bpl.n	2f96 <ILI9341_t3n::process_dma_interrupt()+0xd6>
    2f8e:	ldr	r3, [pc, #148]	; (3024 <ILI9341_t3n::process_dma_interrupt()+0x164>)
    2f90:	ldr	r1, [r2, #40]	; 0x28
    2f92:	str	r1, [r3, #0]
    2f94:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    2f96:	lsls	r6, r3, #30
    2f98:	bpl.n	2fa2 <ILI9341_t3n::process_dma_interrupt()+0xe2>
    2f9a:	ldr	r3, [pc, #140]	; (3028 <ILI9341_t3n::process_dma_interrupt()+0x168>)
    2f9c:	ldr	r1, [r2, #44]	; 0x2c
    2f9e:	str	r1, [r3, #0]
    2fa0:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    2fa2:	lsls	r5, r3, #29
    2fa4:	bpl.n	2fae <ILI9341_t3n::process_dma_interrupt()+0xee>
    2fa6:	ldr	r3, [pc, #132]	; (302c <ILI9341_t3n::process_dma_interrupt()+0x16c>)
    2fa8:	ldr	r1, [r2, #48]	; 0x30
    2faa:	str	r1, [r3, #0]
    2fac:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    2fae:	lsls	r0, r3, #28
    2fb0:	bpl.n	2fba <ILI9341_t3n::process_dma_interrupt()+0xfa>
    2fb2:	ldr	r3, [pc, #124]	; (3030 <ILI9341_t3n::process_dma_interrupt()+0x170>)
    2fb4:	ldr	r1, [r2, #52]	; 0x34
    2fb6:	str	r1, [r3, #0]
    2fb8:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    2fba:	lsls	r1, r3, #27
    2fbc:	bpl.n	2fc4 <ILI9341_t3n::process_dma_interrupt()+0x104>
    2fbe:	ldr	r2, [r2, #56]	; 0x38
    2fc0:	ldr	r3, [pc, #112]	; (3034 <ILI9341_t3n::process_dma_interrupt()+0x174>)
    2fc2:	str	r2, [r3, #0]
      // Serial.printf("Output NOP (SR %x CR %x FSR %x FCR %x %x TCR:%x)\n",
      // _pimxrt_spi->SR, _pimxrt_spi->CR, _pimxrt_spi->FSR,
      //	_pimxrt_spi->FCR, _spi_fcr_save, _pimxrt_spi->TCR);
      writecommand_last(ILI9341_NOP);
      endSPITransaction();
      _dma_state &= ~ILI9341_DMA_ACTIVE;
    2fc4:	ldrb.w	r3, [r4, #212]	; 0xd4
      _dmaActiveDisplay[_spi_num] =
          0; // We don't have a display active any more...
    2fc8:	movs	r0, #0
    2fca:	ldrb	r1, [r4, #16]
      // Serial.printf("Output NOP (SR %x CR %x FSR %x FCR %x %x TCR:%x)\n",
      // _pimxrt_spi->SR, _pimxrt_spi->CR, _pimxrt_spi->FSR,
      //	_pimxrt_spi->FCR, _spi_fcr_save, _pimxrt_spi->TCR);
      writecommand_last(ILI9341_NOP);
      endSPITransaction();
      _dma_state &= ~ILI9341_DMA_ACTIVE;
    2fcc:	and.w	r3, r3, #127	; 0x7f
      _dmaActiveDisplay[_spi_num] =
          0; // We don't have a display active any more...
    2fd0:	ldr	r2, [pc, #100]	; (3038 <ILI9341_t3n::process_dma_interrupt()+0x178>)
      // Serial.printf("Output NOP (SR %x CR %x FSR %x FCR %x %x TCR:%x)\n",
      // _pimxrt_spi->SR, _pimxrt_spi->CR, _pimxrt_spi->FSR,
      //	_pimxrt_spi->FCR, _spi_fcr_save, _pimxrt_spi->TCR);
      writecommand_last(ILI9341_NOP);
      endSPITransaction();
      _dma_state &= ~ILI9341_DMA_ACTIVE;
    2fd2:	strb.w	r3, [r4, #212]	; 0xd4
      _dmaActiveDisplay[_spi_num] =
          0; // We don't have a display active any more...
    2fd6:	str.w	r0, [r2, r1, lsl #2]
    }
#ifdef DEBUG_ASYNC_LEDS
    digitalWriteFast(DEBUG_PIN_3, LOW);
#endif
  }
  asm("dsb");
    2fda:	dsb	sy

#endif
#ifdef DEBUG_ASYNC_LEDS
  digitalWriteFast(DEBUG_PIN_2, LOW);
#endif
}
    2fde:	pop	{r3, r4, r5, r6, r7, pc}
      _dma_state &= ~ILI9341_DMA_ACTIVE;
      _dmaActiveDisplay[_spi_num] =
          0; // We don't have a display active any more...
    } else {
      // Lets try to flush out memory
      if (_frame_complete_callback)
    2fe0:	ldr.w	r3, [r4, #200]	; 0xc8
    2fe4:	cmp	r3, #0
    2fe6:	bne.n	2eee <ILI9341_t3n::process_dma_interrupt()+0x2e>
        (*_frame_complete_callback)();
      else if ((uint32_t)_pfbtft >= 0x20200000u)
    2fe8:	ldr.w	r2, [r4, #176]	; 0xb0
    2fec:	ldr	r3, [pc, #76]	; (303c <ILI9341_t3n::process_dma_interrupt()+0x17c>)
    2fee:	cmp	r2, r3
    2ff0:	bls.w	2ef0 <ILI9341_t3n::process_dma_interrupt()+0x30>
// typically used with special fields you will want to quickly access
// in the future.  For data transmission, use arm_dcache_flush_delete().
__attribute__((always_inline, unused))
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2ff4:	bic.w	r3, r2, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2ff8:	add.w	r2, r2, #153600	; 0x25800
	asm volatile("": : :"memory");
	asm("dsb");
    2ffc:	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
    3000:	ldr	r1, [pc, #60]	; (3040 <ILI9341_t3n::process_dma_interrupt()+0x180>)
    3002:	str	r3, [r1, #0]
		location += 32;
    3004:	adds	r3, #32
	} while (location < end_addr);
    3006:	cmp	r2, r3
    3008:	bhi.n	3002 <ILI9341_t3n::process_dma_interrupt()+0x142>
	asm("dsb");
    300a:	dsb	sy
	asm("isb");
    300e:	isb	sy
    3012:	b.n	2ef0 <ILI9341_t3n::process_dma_interrupt()+0x30>
    3014:	subs	r3, r2, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    3016:	ldr	r0, [r1, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
    3018:	strb.w	r2, [r4, #146]	; 0x92
    301c:	uxtb	r2, r3
    301e:	b.n	2f6c <ILI9341_t3n::process_dma_interrupt()+0xac>
    3020:	.word	0x400e8000
    3024:	.word	0xe000e100
    3028:	.word	0xe000e104
    302c:	.word	0xe000e108
    3030:	.word	0xe000e10c
    3034:	.word	0xe000e110
    3038:	.word	0x20002178
    303c:	.word	0x201fffff
    3040:	.word	0xe000ef68

00003044 <ILI9341_t3n::dmaInterrupt()>:
// volatile uint32_t	ILI9341_t3n::_dma_frame_count = 0;	// Can return a
// frame count...

#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::dmaInterrupt(void) {
  if (_dmaActiveDisplay[0]) {
    3044:	ldr	r3, [pc, #8]	; (3050 <ILI9341_t3n::dmaInterrupt()+0xc>)
    3046:	ldr	r0, [r3, #0]
    3048:	cbz	r0, 304e <ILI9341_t3n::dmaInterrupt()+0xa>
    _dmaActiveDisplay[0]->process_dma_interrupt();
    304a:	b.w	2ec0 <ILI9341_t3n::process_dma_interrupt()>
    304e:	bx	lr
    3050:	.word	0x20002178

00003054 <ILI9341_t3n::dmaInterrupt1()>:
  }
}
void ILI9341_t3n::dmaInterrupt1(void) {
  if (_dmaActiveDisplay[1]) {
    3054:	ldr	r3, [pc, #8]	; (3060 <ILI9341_t3n::dmaInterrupt1()+0xc>)
    3056:	ldr	r0, [r3, #4]
    3058:	cbz	r0, 305e <ILI9341_t3n::dmaInterrupt1()+0xa>
    _dmaActiveDisplay[1]->process_dma_interrupt();
    305a:	b.w	2ec0 <ILI9341_t3n::process_dma_interrupt()>
    305e:	bx	lr
    3060:	.word	0x20002178

00003064 <ILI9341_t3n::dmaInterrupt2()>:
  }
}
void ILI9341_t3n::dmaInterrupt2(void) {
  if (_dmaActiveDisplay[2]) {
    3064:	ldr	r3, [pc, #8]	; (3070 <ILI9341_t3n::dmaInterrupt2()+0xc>)
    3066:	ldr	r0, [r3, #8]
    3068:	cbz	r0, 306e <ILI9341_t3n::dmaInterrupt2()+0xa>
    _dmaActiveDisplay[2]->process_dma_interrupt();
    306a:	b.w	2ec0 <ILI9341_t3n::process_dma_interrupt()>
    306e:	bx	lr
    3070:	.word	0x20002178

00003074 <ILI9341_t3n::ILI9341_t3n(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
#define HEIGHT ILI9341_TFTHEIGHT

// Constructor when using hardware ILI9241_KINETISK__pspi->  Faster, but must
// use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
ILI9341_t3n::ILI9341_t3n(uint8_t cs, uint8_t dc, uint8_t rst, uint8_t mosi,
    3074:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3078:	mov	r4, r0
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    307a:	movs	r5, #0
                         uint8_t sclk, uint8_t miso) {
    307c:	movs	r6, #1
    307e:	mov.w	r8, #1065353216	; 0x3f800000
// applied to any DMA channel.

class DMASetting : public DMABaseClass {
public:
	DMASetting() {
		TCD = &tcddata;
    3082:	add.w	ip, r4, #256	; 0x100
    3086:	add.w	lr, r4, #320	; 0x140
    308a:	add.w	r7, r4, #384	; 0x180
    308e:	ldr.w	r9, [pc, #272]	; 31a0 <ILI9341_t3n::ILI9341_t3n(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    3092:	movs	r0, #8
#define HEIGHT ILI9341_TFTHEIGHT

// Constructor when using hardware ILI9241_KINETISK__pspi->  Faster, but must
// use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
ILI9341_t3n::ILI9341_t3n(uint8_t cs, uint8_t dc, uint8_t rst, uint8_t mosi,
    3094:	sub	sp, #12
                         uint8_t sclk, uint8_t miso) {
    3096:	strb.w	r5, [r4, #212]	; 0xd4
#define HEIGHT ILI9341_TFTHEIGHT

// Constructor when using hardware ILI9241_KINETISK__pspi->  Faster, but must
// use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
ILI9341_t3n::ILI9341_t3n(uint8_t cs, uint8_t dc, uint8_t rst, uint8_t mosi,
    309a:	mov	sl, r1
                         uint8_t sclk, uint8_t miso) {
    309c:	str.w	r9, [r4]
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
    30a0:	mov	r1, r5
    30a2:	strb.w	r0, [r4, #103]	; 0x67
    30a6:	add.w	r0, r4, #416	; 0x1a0
    30aa:	str.w	r8, [r4, #108]	; 0x6c
#define HEIGHT ILI9341_TFTHEIGHT

// Constructor when using hardware ILI9241_KINETISK__pspi->  Faster, but must
// use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
ILI9341_t3n::ILI9341_t3n(uint8_t cs, uint8_t dc, uint8_t rst, uint8_t mosi,
    30ae:	mov	fp, r2
// applied to any DMA channel.

class DMASetting : public DMABaseClass {
public:
	DMASetting() {
		TCD = &tcddata;
    30b0:	str.w	ip, [r4, #224]	; 0xe0
    30b4:	str.w	lr, [r4, #288]	; 0x120
    30b8:	str.w	r7, [r4, #352]	; 0x160
                         uint8_t sclk, uint8_t miso) {
    30bc:	str.w	r5, [r4, #216]	; 0xd8
    30c0:	strb	r5, [r4, #4]
    30c2:	str	r5, [r4, #8]
    30c4:	strb.w	r5, [r4, #40]	; 0x28
    30c8:	strb.w	r5, [r4, #41]	; 0x29
    30cc:	strb.w	r5, [r4, #62]	; 0x3e
    30d0:	strb.w	r5, [r4, #101]	; 0x65
    30d4:	str	r5, [r4, #116]	; 0x74
    30d6:	strb.w	r5, [r4, #120]	; 0x78
    30da:	strh.w	r5, [r4, #132]	; 0x84
    30de:	strb.w	r5, [r4, #146]	; 0x92
    30e2:	strb.w	r5, [r4, #196]	; 0xc4
    30e6:	str.w	r5, [r4, #200]	; 0xc8
    30ea:	strb.w	r5, [r4, #204]	; 0xcc
    30ee:	strh.w	r5, [r4, #220]	; 0xdc
    30f2:	strb.w	r6, [r4, #63]	; 0x3f
    30f6:	strb.w	r6, [r4, #100]	; 0x64
    30fa:	strb.w	r6, [r4, #102]	; 0x66
#define HEIGHT ILI9341_TFTHEIGHT

// Constructor when using hardware ILI9241_KINETISK__pspi->  Faster, but must
// use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
ILI9341_t3n::ILI9341_t3n(uint8_t cs, uint8_t dc, uint8_t rst, uint8_t mosi,
    30fe:	str	r3, [sp, #4]
    3100:	ldrb.w	r9, [sp, #48]	; 0x30
    3104:	ldrb.w	r8, [sp, #52]	; 0x34
    3108:	ldrb.w	r7, [sp, #56]	; 0x38
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
    310c:	bl	98f8 <DMAChannel::begin(bool)>
  _dc = dc;
  _rst = rst;
  _mosi = mosi;
  _sclk = sclk;
  _miso = miso;
  _width = WIDTH;
    3110:	movs	r2, #240	; 0xf0
  _height = HEIGHT;
    3112:	mov.w	r1, #320	; 0x140
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
ILI9341_t3n::ILI9341_t3n(uint8_t cs, uint8_t dc, uint8_t rst, uint8_t mosi,
                         uint8_t sclk, uint8_t miso) {
  _cs = cs;
  _dc = dc;
  _rst = rst;
    3116:	ldr	r3, [sp, #4]
  _height = HEIGHT;

  rotation = 0;
  cursor_y = cursor_x = 0;
  textsize_x = textsize_y = 1;
  textcolor = textbgcolor = 0xFFFF;
    3118:	movw	ip, #65535	; 0xffff
        uint8_t stopbits(void) { return 1; }
        uint8_t paritytype(void) { return 0; }
        uint8_t numbits(void) { return 8; }
        uint8_t dtr(void) { return 1; }
        uint8_t rts(void) { return 1; }
        operator bool() { return usb_configuration; }
    311c:	ldr.w	lr, [pc, #132]	; 31a4 <ILI9341_t3n::ILI9341_t3n(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x130>
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  _pfbtft = NULL;
  _use_fbtft = 0; // Are we in frame buffer mode?
  _we_allocated_buffer = NULL;
#endif
}
    3120:	mov	r0, r4

// Constructor when using hardware ILI9241_KINETISK__pspi->  Faster, but must
// use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
ILI9341_t3n::ILI9341_t3n(uint8_t cs, uint8_t dc, uint8_t rst, uint8_t mosi,
                         uint8_t sclk, uint8_t miso) {
    3122:	str.w	r5, [r4, #424]	; 0x1a8
  _cs = cs;
  _dc = dc;
  _rst = rst;
    3126:	strb.w	r3, [r4, #138]	; 0x8a
// Constructor when using hardware ILI9241_KINETISK__pspi->  Faster, but must
// use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
ILI9341_t3n::ILI9341_t3n(uint8_t cs, uint8_t dc, uint8_t rst, uint8_t mosi,
                         uint8_t sclk, uint8_t miso) {
  _cs = cs;
    312a:	strb.w	sl, [r4, #139]	; 0x8b
    312e:	ldrb.w	r3, [lr]
  _dc = dc;
    3132:	strb.w	fp, [r4, #140]	; 0x8c
  _rst = rst;
  _mosi = mosi;
    3136:	strb.w	r9, [r4, #144]	; 0x90
  _sclk = sclk;
    313a:	strb.w	r8, [r4, #145]	; 0x91
  _miso = miso;
    313e:	strb.w	r7, [r4, #143]	; 0x8f
  _width = WIDTH;
  _height = HEIGHT;

  rotation = 0;
    3142:	strb.w	r5, [r4, #90]	; 0x5a
  cursor_y = cursor_x = 0;
    3146:	strh	r5, [r4, #36]	; 0x24
    3148:	strh	r5, [r4, #38]	; 0x26
  textsize_x = textsize_y = 1;
    314a:	strb.w	r6, [r4, #89]	; 0x59
    314e:	strb.w	r6, [r4, #88]	; 0x58
  textcolor = textbgcolor = 0xFFFF;
  wrap = true;
    3152:	strb.w	r6, [r4, #92]	; 0x5c
  font = NULL;
    3156:	str	r5, [r4, #96]	; 0x60
  gfxFont = NULL;
    3158:	str	r5, [r4, #116]	; 0x74
    _clipy2 = y1 + h;
    // if (Serial) Serial.printf("Set clip Rect %d %d %d %d\n", x1, y1, w, h);
    updateDisplayClip();
  }
  void setClipRect() {
    _clipx1 = 0;
    315a:	strh	r5, [r4, #42]	; 0x2a
    _clipy1 = 0;
    315c:	strh	r5, [r4, #44]	; 0x2c
  // setOrigin sets an offset in display pixels where drawing to (0,0) will
  // appear
  // for example: setOrigin(10,10); drawPixel(5,5); will cause a pixel to be
  // drawn at hardware pixel (15,15)
  void setOrigin(int16_t x = 0, int16_t y = 0) {
    _originx = x;
    315e:	strh	r5, [r4, #50]	; 0x32
    _originy = y;
    3160:	strh	r5, [r4, #52]	; 0x34
  int16_t _displayclipx1, _displayclipy1, _displayclipx2, _displayclipy2;
  bool _invisible = false;
  bool _standard = true; // no bounding rectangle or origin set.

  inline void updateDisplayClip() {
    _displayclipx1 = max(0, min(_clipx1 + _originx, width()));
    3162:	strh	r5, [r4, #54]	; 0x36
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    3164:	strh	r5, [r4, #56]	; 0x38
    _displayclipy2 = max(0, min(_clipy2 + _originy, height()));
    _invisible =
        (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
    3166:	strb.w	r5, [r4, #62]	; 0x3e
    _standard = (_displayclipx1 == 0) && (_displayclipx2 == _width) &&
                (_displayclipy1 == 0) && (_displayclipy2 == _height);
    316a:	strb.w	r6, [r4, #63]	; 0x3f
  _dc = dc;
  _rst = rst;
  _mosi = mosi;
  _sclk = sclk;
  _miso = miso;
  _width = WIDTH;
    316e:	strh	r2, [r4, #32]
    updateDisplayClip();
  }
  void setClipRect() {
    _clipx1 = 0;
    _clipy1 = 0;
    _clipx2 = _width;
    3170:	strh	r2, [r4, #46]	; 0x2e
  bool _invisible = false;
  bool _standard = true; // no bounding rectangle or origin set.

  inline void updateDisplayClip() {
    _displayclipx1 = max(0, min(_clipx1 + _originx, width()));
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));
    3172:	strh	r2, [r4, #58]	; 0x3a
  _height = HEIGHT;
    3174:	strh	r1, [r4, #34]	; 0x22
  }
  void setClipRect() {
    _clipx1 = 0;
    _clipy1 = 0;
    _clipx2 = _width;
    _clipy2 = _height;
    3176:	strh	r1, [r4, #48]	; 0x30
  inline void updateDisplayClip() {
    _displayclipx1 = max(0, min(_clipx1 + _originx, width()));
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    _displayclipy2 = max(0, min(_clipy2 + _originy, height()));
    3178:	strh	r1, [r4, #60]	; 0x3c

  rotation = 0;
  cursor_y = cursor_x = 0;
  textsize_x = textsize_y = 1;
  textcolor = textbgcolor = 0xFFFF;
    317a:	strh.w	ip, [r4, #76]	; 0x4c
    317e:	strh.w	ip, [r4, #74]	; 0x4a
    3182:	ldrb.w	r3, [lr]
  gfxFont = NULL;
  setClipRect();
  setOrigin();

  // Added to see how much impact actually using non hardware CS pin might be
  _cspinmask = 0;
    3186:	str.w	r5, [r4, #148]	; 0x94
  _csport = NULL;
    318a:	str.w	r5, [r4, #152]	; 0x98

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  _pfbtft = NULL;
    318e:	str.w	r5, [r4, #176]	; 0xb0
  _use_fbtft = 0; // Are we in frame buffer mode?
    3192:	strb.w	r5, [r4, #180]	; 0xb4
  _we_allocated_buffer = NULL;
    3196:	str.w	r5, [r4, #184]	; 0xb8
#endif
}
    319a:	add	sp, #12
    319c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    31a0:	.word	0x20000350
    31a4:	.word	0x200021b8

000031a8 <ILI9341_t3n::setFrameBuffer(unsigned short*)>:
  wiht multiple buffers.
  if (_pfbtft != NULL) {
          memset(_pfbtft, 0, ILI9341_TFTHEIGHT*ILI9341_TFTWIDTH*2);
  }
  */
  _dma_state &= ~ILI9341_DMA_INIT; // clear that we init the dma chain as our
    31a8:	ldrb.w	r3, [r0, #212]	; 0xd4
//=======================================================================
// Add optinal support for using frame buffer to speed up complex outputs
//=======================================================================
void ILI9341_t3n::setFrameBuffer(uint16_t *frame_buffer) {
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  _pfbtft = frame_buffer;
    31ac:	str.w	r1, [r0, #176]	; 0xb0
  wiht multiple buffers.
  if (_pfbtft != NULL) {
          memset(_pfbtft, 0, ILI9341_TFTHEIGHT*ILI9341_TFTWIDTH*2);
  }
  */
  _dma_state &= ~ILI9341_DMA_INIT; // clear that we init the dma chain as our
    31b0:	and.w	r3, r3, #254	; 0xfe
    31b4:	strb.w	r3, [r0, #212]	; 0xd4
    31b8:	bx	lr
    31ba:	nop

000031bc <ILI9341_t3n::useFrameBuffer(bool)>:
uint8_t ILI9341_t3n::useFrameBuffer(
    boolean b) // use the frame buffer?  First call will allocate
{
#ifdef ENABLE_ILI9341_FRAMEBUFFER

  if (b) {
    31bc:	cbz	r1, 31e6 <ILI9341_t3n::useFrameBuffer(bool)+0x2a>
}
#endif

uint8_t ILI9341_t3n::useFrameBuffer(
    boolean b) // use the frame buffer?  First call will allocate
{
    31be:	push	{r3, r4, r5, lr}
#ifdef ENABLE_ILI9341_FRAMEBUFFER

  if (b) {
    // First see if we need to allocate buffer
    if (_pfbtft == NULL) {
    31c0:	ldr.w	r5, [r0, #176]	; 0xb0
    31c4:	mov	r4, r0
    31c6:	cbz	r5, 31ee <ILI9341_t3n::useFrameBuffer(bool)+0x32>
        return 0; // failed
      _pfbtft = (uint16_t *)(((uintptr_t)_we_allocated_buffer + 32) &
                             ~((uintptr_t)(31)));
      memset(_pfbtft, 0, CBALLOC);
    }
    _use_fbtft = 1;
    31c8:	movs	r1, #1
#endif

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  void clearChangedRange() {
    _changed_min_x = 0x7fff;
    _changed_max_x = -1;
    31ca:	movw	r3, #65535	; 0xffff

#endif

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  void clearChangedRange() {
    _changed_min_x = 0x7fff;
    31ce:	movw	r2, #32767	; 0x7fff
    31d2:	strb.w	r1, [r4, #180]	; 0xb4
    _changed_max_x = -1;
    _changed_min_x = 0x7fff;
    _changed_max_y = -1;
    31d6:	mov	r0, r1

#endif

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  void clearChangedRange() {
    _changed_min_x = 0x7fff;
    31d8:	strh.w	r2, [r4, #188]	; 0xbc
    _changed_max_x = -1;
    31dc:	strh.w	r3, [r4, #190]	; 0xbe
    _changed_min_x = 0x7fff;
    _changed_max_y = -1;
    31e0:	strh.w	r3, [r4, #194]	; 0xc2
    31e4:	pop	{r3, r4, r5, pc}
    clearChangedRange(); // make sure the dirty range is updated.
  } else
    _use_fbtft = 0;
    31e6:	strb.w	r1, [r0, #180]	; 0xb4
    31ea:	mov	r0, r1

  return _use_fbtft;
    31ec:	bx	lr

  if (b) {
    // First see if we need to allocate buffer
    if (_pfbtft == NULL) {
      // Hack to start frame buffer on 32 byte boundary
      _we_allocated_buffer = (uint16_t *)malloc(CBALLOC + 32);
    31ee:	ldr	r0, [pc, #36]	; (3214 <ILI9341_t3n::useFrameBuffer(bool)+0x58>)
    31f0:	bl	a8c4 <malloc>
    31f4:	str.w	r0, [r4, #184]	; 0xb8
      if (_we_allocated_buffer == NULL)
    31f8:	cbz	r0, 3212 <ILI9341_t3n::useFrameBuffer(bool)+0x56>
        return 0; // failed
      _pfbtft = (uint16_t *)(((uintptr_t)_we_allocated_buffer + 32) &
                             ~((uintptr_t)(31)));
    31fa:	add.w	r3, r0, #32
      memset(_pfbtft, 0, CBALLOC);
    31fe:	mov	r1, r5
    3200:	mov.w	r2, #153600	; 0x25800
      // Hack to start frame buffer on 32 byte boundary
      _we_allocated_buffer = (uint16_t *)malloc(CBALLOC + 32);
      if (_we_allocated_buffer == NULL)
        return 0; // failed
      _pfbtft = (uint16_t *)(((uintptr_t)_we_allocated_buffer + 32) &
                             ~((uintptr_t)(31)));
    3204:	bic.w	r0, r3, #31
    3208:	str.w	r0, [r4, #176]	; 0xb0
      memset(_pfbtft, 0, CBALLOC);
    320c:	bl	af48 <memset>
    3210:	b.n	31c8 <ILI9341_t3n::useFrameBuffer(bool)+0xc>

  return _use_fbtft;
#else
  return 0;
#endif
}
    3212:	pop	{r3, r4, r5, pc}
    3214:	.word	0x00025820

00003218 <ILI9341_t3n::freeFrameBuffer()>:

void ILI9341_t3n::freeFrameBuffer(void) // explicit call to release the buffer
{
    3218:	push	{r4, lr}
    321a:	mov	r4, r0
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_we_allocated_buffer) {
    321c:	ldr.w	r0, [r0, #184]	; 0xb8
    3220:	cbz	r0, 3234 <ILI9341_t3n::freeFrameBuffer()+0x1c>
    free(_we_allocated_buffer);
    3222:	bl	a8d4 <free>
    _pfbtft = NULL;
    3226:	movs	r3, #0
    3228:	str.w	r3, [r4, #176]	; 0xb0
    _use_fbtft = 0; // make sure the use is turned off
    322c:	strb.w	r3, [r4, #180]	; 0xb4
    _we_allocated_buffer = NULL;
    3230:	str.w	r3, [r4, #184]	; 0xb8
    3234:	pop	{r4, pc}
    3236:	nop

00003238 <ILI9341_t3n::updateScreenAsync(bool)>:
{
// Not sure if better here to check flag or check existence of buffer.
// Will go by buffer as maybe can do interesting things?
// BUGBUG:: only handles full screen so bail on the rest of it...
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (!_use_fbtft)
    3238:	ldrb.w	r3, [r0, #180]	; 0xb4
    323c:	cmp	r3, #0
    323e:	beq.w	351e <ILI9341_t3n::updateScreenAsync(bool)+0x2e6>
#endif
}

bool ILI9341_t3n::updateScreenAsync(
    bool update_cont) // call to say update the screen now.
{
    3242:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifdef ENABLE_ILI9341_FRAMEBUFFER
//==============================================
#ifdef ENABLE_ILI9341_FRAMEBUFFER
void ILI9341_t3n::initDMASettings(void) {
  // Serial.printf("initDMASettings called %d\n", _dma_state);
  if (_dma_state & ILI9341_DMA_INIT) { // should test for init, but...
    3246:	ldrb.w	r3, [r0, #212]	; 0xd4
#endif
}

bool ILI9341_t3n::updateScreenAsync(
    bool update_cont) // call to say update the screen now.
{
    324a:	sub	sp, #8
    324c:	mov	r4, r0
    324e:	mov	r5, r1
#ifdef ENABLE_ILI9341_FRAMEBUFFER
//==============================================
#ifdef ENABLE_ILI9341_FRAMEBUFFER
void ILI9341_t3n::initDMASettings(void) {
  // Serial.printf("initDMASettings called %d\n", _dma_state);
  if (_dma_state & ILI9341_DMA_INIT) { // should test for init, but...
    3250:	lsls	r6, r3, #31
    3252:	bpl.w	355c <ILI9341_t3n::updateScreenAsync(bool)+0x324>

#ifdef DEBUG_ASYNC_LEDS
  digitalWriteFast(DEBUG_PIN_4, !digitalReadFast(DEBUG_PIN_4));
#endif
  // Don't start one if already active.
  if (_dma_state & ILI9341_DMA_ACTIVE) {
    3256:	ldrb.w	r3, [r4, #212]	; 0xd4
    325a:	lsls	r1, r3, #24
    325c:	bmi.w	356a <ILI9341_t3n::updateScreenAsync(bool)+0x332>
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
  /////////////////////////////
  // BUGBUG try first not worry about continueous or not.
  // Start off remove disable on completion from both...
  // it will be the ISR that disables it...
  if ((uint32_t)_pfbtft >= 0x20200000u)
    3260:	ldr.w	r2, [r4, #176]	; 0xb0
    3264:	ldr	r3, [pc, #728]	; (3540 <ILI9341_t3n::updateScreenAsync(bool)+0x308>)
    3266:	cmp	r2, r3
    3268:	bls.n	3288 <ILI9341_t3n::updateScreenAsync(bool)+0x50>
// typically used with special fields you will want to quickly access
// in the future.  For data transmission, use arm_dcache_flush_delete().
__attribute__((always_inline, unused))
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    326a:	bic.w	r3, r2, #31
	uint32_t end_addr = (uint32_t)addr + size;
    326e:	add.w	r2, r2, #153600	; 0x25800
	asm volatile("": : :"memory");
	asm("dsb");
    3272:	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
    3276:	ldr	r1, [pc, #716]	; (3544 <ILI9341_t3n::updateScreenAsync(bool)+0x30c>)
    3278:	str	r3, [r1, #0]
		location += 32;
    327a:	adds	r3, #32
	} while (location < end_addr);
    327c:	cmp	r2, r3
    327e:	bhi.n	3278 <ILI9341_t3n::updateScreenAsync(bool)+0x40>
	asm("dsb");
    3280:	dsb	sy
	asm("isb");
    3284:	isb	sy
    arm_dcache_flush(_pfbtft, CBALLOC);

  _dmasettings[2].TCD->CSR &= ~(DMA_TCD_CSR_DREQ);
    3288:	ldr.w	r6, [r4, #352]	; 0x160
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    328c:	movs	r2, #7
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    328e:	ldr	r1, [r4, #20]
    3290:	ldrh	r3, [r6, #28]
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    3292:	ldr	r0, [r4, #8]
    3294:	bic.w	r3, r3, #8
    3298:	lsls	r3, r3, #16
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    329a:	stmia.w	sp, {r1, r2}
    329e:	lsrs	r3, r3, #16
    32a0:	add	r2, sp, #8
    32a2:	strh	r3, [r6, #28]
    32a4:	ldmdb	r2, {r1, r2}
    32a8:	bl	2d30 <SPIClass::beginTransaction(SPISettings)>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
    32ac:	ldr.w	r3, [r4, #172]	; 0xac
    32b0:	cmp	r3, #0
    32b2:	beq.w	3572 <ILI9341_t3n::updateScreenAsync(bool)+0x33a>
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    32b6:	ldr.w	r3, [r4, #152]	; 0x98
    32ba:	cbz	r3, 32c4 <ILI9341_t3n::updateScreenAsync(bool)+0x8c>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
    32bc:	ldr.w	r2, [r4, #148]	; 0x94
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
    32c0:	str.w	r2, [r3, #136]	; 0x88
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    32c4:	ldr.w	r1, [r4, #164]	; 0xa4
    32c8:	mov	r0, r4
// Doing full window.
#ifdef DEBUG_ASYNC_LEDS
  digitalWriteFast(DEBUG_PIN_4, !digitalReadFast(DEBUG_PIN_4));
#endif

  setAddr(0, 0, _width - 1, _height - 1);
    32ca:	ldrh	r7, [r4, #32]
    32cc:	orr.w	r1, r1, #7
    32d0:	ldrh	r6, [r4, #34]	; 0x22
    32d2:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    32d6:	movs	r2, #42	; 0x2a
    32d8:	ldr	r3, [r4, #28]
    32da:	subs	r7, #1
    32dc:	subs	r6, #1
    32de:	str	r2, [r3, #100]	; 0x64
    32e0:	uxth	r7, r7
    pending_rx_count++; //
    32e2:	ldrb.w	r2, [r4, #146]	; 0x92
    32e6:	uxth	r6, r6
    32e8:	adds	r2, #1
    32ea:	strb.w	r2, [r4, #146]	; 0x92

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    32ee:	ldr	r2, [r3, #112]	; 0x70
    32f0:	lsls	r2, r2, #30
    32f2:	bmi.n	3302 <ILI9341_t3n::updateScreenAsync(bool)+0xca>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    32f4:	ldrb.w	r2, [r4, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    32f8:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    32fa:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    32fc:	cbz	r2, 3302 <ILI9341_t3n::updateScreenAsync(bool)+0xca>
        pending_rx_count--; // decrement count of bytes still levt
    32fe:	strb.w	r1, [r4, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    3302:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    3304:	lsls	r0, r2, #31
    3306:	bpl.n	32ee <ILI9341_t3n::updateScreenAsync(bool)+0xb6>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    3308:	ldr.w	r3, [r4, #168]	; 0xa8
    330c:	mov	r0, r4
    330e:	ldr	r1, [pc, #568]	; (3548 <ILI9341_t3n::updateScreenAsync(bool)+0x310>)
    3310:	orrs	r1, r3
    3312:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    3316:	movs	r2, #0
    3318:	ldr	r3, [r4, #28]
    331a:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    331c:	ldrb.w	r2, [r4, #146]	; 0x92
    3320:	adds	r2, #1
    3322:	strb.w	r2, [r4, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    3326:	ldr	r2, [r3, #112]	; 0x70
    3328:	lsls	r1, r2, #30
    332a:	bmi.n	333a <ILI9341_t3n::updateScreenAsync(bool)+0x102>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    332c:	ldrb.w	r2, [r4, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    3330:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    3332:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    3334:	cbz	r2, 333a <ILI9341_t3n::updateScreenAsync(bool)+0x102>
        pending_rx_count--; // decrement count of bytes still levt
    3336:	strb.w	r1, [r4, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    333a:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    333c:	lsls	r2, r2, #31
    333e:	bpl.n	3326 <ILI9341_t3n::updateScreenAsync(bool)+0xee>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    3340:	ldr.w	r3, [r4, #168]	; 0xa8
    3344:	mov	r0, r4
    3346:	ldr	r1, [pc, #512]	; (3548 <ILI9341_t3n::updateScreenAsync(bool)+0x310>)
    3348:	orrs	r1, r3
    334a:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    334e:	ldr	r3, [r4, #28]
    3350:	str	r7, [r3, #100]	; 0x64
    pending_rx_count++; //
    3352:	ldrb.w	r2, [r4, #146]	; 0x92
    3356:	adds	r2, #1
    3358:	strb.w	r2, [r4, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    335c:	ldr	r2, [r3, #112]	; 0x70
    335e:	lsls	r7, r2, #30
    3360:	bmi.n	3370 <ILI9341_t3n::updateScreenAsync(bool)+0x138>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    3362:	ldrb.w	r2, [r4, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    3366:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    3368:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    336a:	cbz	r2, 3370 <ILI9341_t3n::updateScreenAsync(bool)+0x138>
        pending_rx_count--; // decrement count of bytes still levt
    336c:	strb.w	r1, [r4, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    3370:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    3372:	lsls	r0, r2, #31
    3374:	bpl.n	335c <ILI9341_t3n::updateScreenAsync(bool)+0x124>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    3376:	ldr.w	r1, [r4, #164]	; 0xa4
    337a:	mov	r0, r4
    337c:	orr.w	r1, r1, #7
    3380:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    3384:	movs	r2, #43	; 0x2b
    3386:	ldr	r3, [r4, #28]
    3388:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    338a:	ldrb.w	r2, [r4, #146]	; 0x92
    338e:	adds	r2, #1
    3390:	strb.w	r2, [r4, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    3394:	ldr	r2, [r3, #112]	; 0x70
    3396:	lsls	r1, r2, #30
    3398:	bmi.n	33a8 <ILI9341_t3n::updateScreenAsync(bool)+0x170>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    339a:	ldrb.w	r2, [r4, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    339e:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    33a0:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    33a2:	cbz	r2, 33a8 <ILI9341_t3n::updateScreenAsync(bool)+0x170>
        pending_rx_count--; // decrement count of bytes still levt
    33a4:	strb.w	r1, [r4, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    33a8:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    33aa:	lsls	r2, r2, #31
    33ac:	bpl.n	3394 <ILI9341_t3n::updateScreenAsync(bool)+0x15c>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    33ae:	ldr.w	r3, [r4, #168]	; 0xa8
    33b2:	mov	r0, r4
    33b4:	ldr	r1, [pc, #400]	; (3548 <ILI9341_t3n::updateScreenAsync(bool)+0x310>)
    33b6:	orrs	r1, r3
    33b8:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    33bc:	movs	r2, #0
    33be:	ldr	r3, [r4, #28]
    33c0:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    33c2:	ldrb.w	r2, [r4, #146]	; 0x92
    33c6:	adds	r2, #1
    33c8:	strb.w	r2, [r4, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    33cc:	ldr	r2, [r3, #112]	; 0x70
    33ce:	lsls	r7, r2, #30
    33d0:	bmi.n	33e0 <ILI9341_t3n::updateScreenAsync(bool)+0x1a8>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    33d2:	ldrb.w	r2, [r4, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    33d6:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    33d8:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    33da:	cbz	r2, 33e0 <ILI9341_t3n::updateScreenAsync(bool)+0x1a8>
        pending_rx_count--; // decrement count of bytes still levt
    33dc:	strb.w	r1, [r4, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    33e0:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    33e2:	lsls	r0, r2, #31
    33e4:	bpl.n	33cc <ILI9341_t3n::updateScreenAsync(bool)+0x194>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    33e6:	ldr.w	r3, [r4, #168]	; 0xa8
    33ea:	mov	r0, r4
    33ec:	ldr	r1, [pc, #344]	; (3548 <ILI9341_t3n::updateScreenAsync(bool)+0x310>)
    33ee:	orrs	r1, r3
    33f0:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    33f4:	ldr	r3, [r4, #28]
    33f6:	str	r6, [r3, #100]	; 0x64
    pending_rx_count++; //
    33f8:	ldrb.w	r2, [r4, #146]	; 0x92
    33fc:	adds	r2, #1
    33fe:	strb.w	r2, [r4, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    3402:	ldr	r2, [r3, #112]	; 0x70
    3404:	lsls	r1, r2, #30
    3406:	bmi.n	3416 <ILI9341_t3n::updateScreenAsync(bool)+0x1de>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    3408:	ldrb.w	r2, [r4, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    340c:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    340e:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    3410:	cbz	r2, 3416 <ILI9341_t3n::updateScreenAsync(bool)+0x1de>
        pending_rx_count--; // decrement count of bytes still levt
    3412:	strb.w	r1, [r4, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    3416:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    3418:	lsls	r2, r2, #31
    341a:	bpl.n	3402 <ILI9341_t3n::updateScreenAsync(bool)+0x1ca>
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7));
    341c:	ldr.w	r1, [r4, #164]	; 0xa4
    3420:	mov	r0, r4
    3422:	orr.w	r1, r1, #7
    3426:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    342a:	movs	r3, #44	; 0x2c
    342c:	ldr	r2, [r4, #28]
    342e:	str	r3, [r2, #100]	; 0x64
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    3430:	ldrb.w	r1, [r4, #146]	; 0x92
    3434:	adds	r3, r1, #1
    3436:	strb.w	r3, [r4, #146]	; 0x92
    343a:	b.n	3442 <ILI9341_t3n::updateScreenAsync(bool)+0x20a>
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    343c:	ldr	r3, [r2, #112]	; 0x70
    343e:	lsls	r3, r3, #30
    3440:	bpl.n	3512 <ILI9341_t3n::updateScreenAsync(bool)+0x2da>
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    3442:	cmp	r1, #255	; 0xff
    3444:	bne.n	343c <ILI9341_t3n::updateScreenAsync(bool)+0x204>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    3446:	movw	r3, #513	; 0x201

  // Update TCR to 16 bit mode. and output the first entry.
  _spi_fcr_save = _pimxrt_spi->FCR; // remember the FCR
  _pimxrt_spi->FCR = 0;             // clear water marks...
  maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) |
                 LPSPI_TCR_RXMSK /*| LPSPI_TCR_CONT*/);
    344a:	ldr.w	r6, [r4, #168]	; 0xa8
  setAddr(0, 0, _width - 1, _height - 1);
  writecommand_last(ILI9341_RAMWR);

  // Update TCR to 16 bit mode. and output the first entry.
  _spi_fcr_save = _pimxrt_spi->FCR; // remember the FCR
  _pimxrt_spi->FCR = 0;             // clear water marks...
    344e:	movs	r7, #0
  maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) |
                 LPSPI_TCR_RXMSK /*| LPSPI_TCR_CONT*/);
    3450:	ldr	r1, [pc, #248]	; (354c <ILI9341_t3n::updateScreenAsync(bool)+0x314>)
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    3452:	str	r3, [r2, #16]

  // Update TCR to 16 bit mode. and output the first entry.
  _spi_fcr_save = _pimxrt_spi->FCR; // remember the FCR
  _pimxrt_spi->FCR = 0;             // clear water marks...
  maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) |
                 LPSPI_TCR_RXMSK /*| LPSPI_TCR_CONT*/);
    3454:	mov	r0, r4

  setAddr(0, 0, _width - 1, _height - 1);
  writecommand_last(ILI9341_RAMWR);

  // Update TCR to 16 bit mode. and output the first entry.
  _spi_fcr_save = _pimxrt_spi->FCR; // remember the FCR
    3456:	ldr	r3, [r2, #88]	; 0x58
  _pimxrt_spi->FCR = 0;             // clear water marks...
  maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) |
                 LPSPI_TCR_RXMSK /*| LPSPI_TCR_CONT*/);
    3458:	orrs	r1, r6
  _pimxrt_spi->DER = LPSPI_DER_TDDE;
    345a:	movs	r6, #1

  setAddr(0, 0, _width - 1, _height - 1);
  writecommand_last(ILI9341_RAMWR);

  // Update TCR to 16 bit mode. and output the first entry.
  _spi_fcr_save = _pimxrt_spi->FCR; // remember the FCR
    345c:	str.w	r3, [r4, #432]	; 0x1b0
  _pimxrt_spi->FCR = 0;             // clear water marks...
    3460:	str	r7, [r2, #88]	; 0x58
  maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) |
                 LPSPI_TCR_RXMSK /*| LPSPI_TCR_CONT*/);
    3462:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
  _pimxrt_spi->DER = LPSPI_DER_TDDE;
  _pimxrt_spi->SR = 0x3f00; // clear out all of the other status...

  _dmatx.triggerAtHardwareEvent(_spi_hardware->tx_dma_channel);
    3466:	ldr	r2, [r4, #12]
  // Update TCR to 16 bit mode. and output the first entry.
  _spi_fcr_save = _pimxrt_spi->FCR; // remember the FCR
  _pimxrt_spi->FCR = 0;             // clear water marks...
  maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) |
                 LPSPI_TCR_RXMSK /*| LPSPI_TCR_CONT*/);
  _pimxrt_spi->DER = LPSPI_DER_TDDE;
    3468:	ldr	r3, [r4, #28]
  _pimxrt_spi->SR = 0x3f00; // clear out all of the other status...
    346a:	mov.w	r0, #16128	; 0x3f00
  _dmatx = _dmasettings[0];
#ifdef DEBUG_ASYNC_LEDS
  digitalWriteFast(DEBUG_PIN_4, !digitalReadFast(DEBUG_PIN_4));
#endif

  _dmatx.begin(false);
    346e:	mov	r1, r7
  // Update TCR to 16 bit mode. and output the first entry.
  _spi_fcr_save = _pimxrt_spi->FCR; // remember the FCR
  _pimxrt_spi->FCR = 0;             // clear water marks...
  maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) |
                 LPSPI_TCR_RXMSK /*| LPSPI_TCR_CONT*/);
  _pimxrt_spi->DER = LPSPI_DER_TDDE;
    3470:	str	r6, [r3, #28]
  _pimxrt_spi->SR = 0x3f00; // clear out all of the other status...
    3472:	str	r0, [r3, #20]

  _dmatx.triggerAtHardwareEvent(_spi_hardware->tx_dma_channel);
    3474:	ldrb	r0, [r2, #8]
			channel = rhs.channel;
		}
		return *this;
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
    3476:	ldr.w	r3, [r4, #416]	; 0x1a0
	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    347a:	and.w	r0, r0, #127	; 0x7f
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    347e:	ldrb.w	lr, [r4, #420]	; 0x1a4
    3482:	ldr	r6, [pc, #204]	; (3550 <ILI9341_t3n::updateScreenAsync(bool)+0x318>)
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    3484:	orr.w	r0, r0, #2147483648	; 0x80000000
			channel = rhs.channel;
		}
		return *this;
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
    3488:	ldr.w	r2, [r4, #224]	; 0xe0

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
    348c:	str.w	r7, [r6, lr, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    3490:	str.w	r0, [r6, lr, lsl #2]
	// users should not be able to create instances of DMABaseClass, which
	// require the inheriting class to initialize the TCD pointer.
	DMABaseClass() {}

	static inline void copy_tcd(TCD_t *dst, const TCD_t *src) {
		dst->CSR &= ~DMA_TCD_CSR_DONE;
    3494:	ldrh	r6, [r3, #28]
		const uint32_t *p = (const uint32_t *)src;
		uint32_t *q = (uint32_t *)dst;
		uint32_t t1, t2, t3, t4;
		t1 = *p++; t2 = *p++; t3 = *p++; t4 = *p++;
    3496:	ldr.w	ip, [r2, #8]
	// users should not be able to create instances of DMABaseClass, which
	// require the inheriting class to initialize the TCD pointer.
	DMABaseClass() {}

	static inline void copy_tcd(TCD_t *dst, const TCD_t *src) {
		dst->CSR &= ~DMA_TCD_CSR_DONE;
    349a:	bic.w	r6, r6, #128	; 0x80
		const uint32_t *p = (const uint32_t *)src;
		uint32_t *q = (uint32_t *)dst;
		uint32_t t1, t2, t3, t4;
		t1 = *p++; t2 = *p++; t3 = *p++; t4 = *p++;
    349e:	ldr.w	lr, [r2, #12]
		*q++ = t1; *q++ = t2; *q++ = t3; *q++ = t4;
    34a2:	ldr	r0, [r2, #0]
	// users should not be able to create instances of DMABaseClass, which
	// require the inheriting class to initialize the TCD pointer.
	DMABaseClass() {}

	static inline void copy_tcd(TCD_t *dst, const TCD_t *src) {
		dst->CSR &= ~DMA_TCD_CSR_DONE;
    34a4:	lsls	r6, r6, #16
		const uint32_t *p = (const uint32_t *)src;
		uint32_t *q = (uint32_t *)dst;
		uint32_t t1, t2, t3, t4;
		t1 = *p++; t2 = *p++; t3 = *p++; t4 = *p++;
    34a6:	ldr.w	r8, [r2, #4]
		*q++ = t1; *q++ = t2; *q++ = t3; *q++ = t4;
    34aa:	str	r0, [r3, #0]
  _dmatx = _dmasettings[0];
#ifdef DEBUG_ASYNC_LEDS
  digitalWriteFast(DEBUG_PIN_4, !digitalReadFast(DEBUG_PIN_4));
#endif

  _dmatx.begin(false);
    34ac:	add.w	r0, r4, #416	; 0x1a0
	// users should not be able to create instances of DMABaseClass, which
	// require the inheriting class to initialize the TCD pointer.
	DMABaseClass() {}

	static inline void copy_tcd(TCD_t *dst, const TCD_t *src) {
		dst->CSR &= ~DMA_TCD_CSR_DONE;
    34b0:	lsrs	r6, r6, #16
		const uint32_t *p = (const uint32_t *)src;
		uint32_t *q = (uint32_t *)dst;
		uint32_t t1, t2, t3, t4;
		t1 = *p++; t2 = *p++; t3 = *p++; t4 = *p++;
		*q++ = t1; *q++ = t2; *q++ = t3; *q++ = t4;
    34b2:	str.w	r8, [r3, #4]
    34b6:	str.w	ip, [r3, #8]
    34ba:	str.w	lr, [r3, #12]
		t1 = *p++; t2 = *p++; t3 = *p++; t4 = *p++;
    34be:	ldr.w	ip, [r2, #16]
    34c2:	ldr.w	lr, [r2, #20]
	// users should not be able to create instances of DMABaseClass, which
	// require the inheriting class to initialize the TCD pointer.
	DMABaseClass() {}

	static inline void copy_tcd(TCD_t *dst, const TCD_t *src) {
		dst->CSR &= ~DMA_TCD_CSR_DONE;
    34c6:	strh	r6, [r3, #28]
		const uint32_t *p = (const uint32_t *)src;
		uint32_t *q = (uint32_t *)dst;
		uint32_t t1, t2, t3, t4;
		t1 = *p++; t2 = *p++; t3 = *p++; t4 = *p++;
		*q++ = t1; *q++ = t2; *q++ = t3; *q++ = t4;
		t1 = *p++; t2 = *p++; t3 = *p++; t4 = *p++;
    34c8:	ldr	r6, [r2, #24]
    34ca:	ldr	r2, [r2, #28]
		*q++ = t1; *q++ = t2; *q++ = t3; *q++ = t4;
    34cc:	str.w	ip, [r3, #16]
    34d0:	str	r2, [r3, #28]
    34d2:	str.w	lr, [r3, #20]
    34d6:	str	r6, [r3, #24]
    34d8:	bl	98f8 <DMAChannel::begin(bool)>
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    34dc:	ldr	r2, [pc, #116]	; (3554 <ILI9341_t3n::updateScreenAsync(bool)+0x31c>)
    34de:	ldrb.w	r1, [r4, #420]	; 0x1a4
  _dmatx.enable();

  _dma_frame_count = 0; // Set frame count back to zero.
  _dmaActiveDisplay[_spi_num] = this;
    34e2:	ldr	r3, [pc, #116]	; (3558 <ILI9341_t3n::updateScreenAsync(bool)+0x320>)
    34e4:	strb	r1, [r2, #27]
    34e6:	ldrb	r2, [r4, #16]
#endif

  _dmatx.begin(false);
  _dmatx.enable();

  _dma_frame_count = 0; // Set frame count back to zero.
    34e8:	str.w	r7, [r4, #216]	; 0xd8
  _dmaActiveDisplay[_spi_num] = this;
    34ec:	str.w	r4, [r3, r2, lsl #2]
  if (update_cont) {
    34f0:	cbz	r5, 3522 <ILI9341_t3n::updateScreenAsync(bool)+0x2ea>
    _dma_state |= ILI9341_DMA_CONT;
    34f2:	ldrb.w	r3, [r4, #212]	; 0xd4
    34f6:	orr.w	r3, r3, #2
    34fa:	strb.w	r3, [r4, #212]	; 0xd4
  } else {
    _dmasettings[2].disableOnCompletion();
    _dma_state &= ~ILI9341_DMA_CONT;
  }

  _dma_state |= ILI9341_DMA_ACTIVE;
    34fe:	ldrb.w	r3, [r4, #212]	; 0xd4
  _dma_state |= ILI9341_DMA_ACTIVE;
#endif
#ifdef DEBUG_ASYNC_LEDS
  digitalWriteFast(DEBUG_PIN_1, LOW);
#endif
  return true;
    3502:	movs	r0, #1
  } else {
    _dmasettings[2].disableOnCompletion();
    _dma_state &= ~ILI9341_DMA_CONT;
  }

  _dma_state |= ILI9341_DMA_ACTIVE;
    3504:	orr.w	r3, r3, #128	; 0x80
    3508:	strb.w	r3, [r4, #212]	; 0xd4
#endif
  return true;
#else
  return false;                    // no frame buffer so will never start...
#endif
}
    350c:	add	sp, #8
    350e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3512:	subs	r3, r1, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    3514:	ldr	r0, [r2, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
    3516:	strb.w	r1, [r4, #146]	; 0x92
    351a:	uxtb	r1, r3
    351c:	b.n	3442 <ILI9341_t3n::updateScreenAsync(bool)+0x20a>
// Not sure if better here to check flag or check existence of buffer.
// Will go by buffer as maybe can do interesting things?
// BUGBUG:: only handles full screen so bail on the rest of it...
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (!_use_fbtft)
    return false;
    351e:	movs	r0, #0
#endif
  return true;
#else
  return false;                    // no frame buffer so will never start...
#endif
}
    3520:	bx	lr
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    3522:	ldr.w	r2, [r4, #352]	; 0x160
    3526:	ldrh	r3, [r2, #28]
    3528:	uxth	r3, r3
    352a:	orr.w	r3, r3, #8
    352e:	strh	r3, [r2, #28]
  _dmaActiveDisplay[_spi_num] = this;
  if (update_cont) {
    _dma_state |= ILI9341_DMA_CONT;
  } else {
    _dmasettings[2].disableOnCompletion();
    _dma_state &= ~ILI9341_DMA_CONT;
    3530:	ldrb.w	r3, [r4, #212]	; 0xd4
    3534:	and.w	r3, r3, #253	; 0xfd
    3538:	strb.w	r3, [r4, #212]	; 0xd4
    353c:	b.n	34fe <ILI9341_t3n::updateScreenAsync(bool)+0x2c6>
    353e:	nop
    3540:	.word	0x201fffff
    3544:	.word	0xe000ef68
    3548:	.word	0x0020000f
    354c:	.word	0x0008000f
    3550:	.word	0x400ec000
    3554:	.word	0x400e8000
    3558:	.word	0x20002178
    355c:	bl	29bc <ILI9341_t3n::initDMASettings() [clone .part.12] [clone .constprop.16]>

#ifdef DEBUG_ASYNC_LEDS
  digitalWriteFast(DEBUG_PIN_4, !digitalReadFast(DEBUG_PIN_4));
#endif
  // Don't start one if already active.
  if (_dma_state & ILI9341_DMA_ACTIVE) {
    3560:	ldrb.w	r3, [r4, #212]	; 0xd4
    3564:	lsls	r1, r3, #24
    3566:	bpl.w	3260 <ILI9341_t3n::updateScreenAsync(bool)+0x28>
// Not sure if better here to check flag or check existence of buffer.
// Will go by buffer as maybe can do interesting things?
// BUGBUG:: only handles full screen so bail on the rest of it...
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (!_use_fbtft)
    return false;
    356a:	movs	r0, #0
#endif
  return true;
#else
  return false;                    // no frame buffer so will never start...
#endif
}
    356c:	add	sp, #8
    356e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
    3572:	ldr	r3, [r4, #28]
    3574:	ldr	r3, [r3, #96]	; 0x60
    3576:	str.w	r3, [r4, #156]	; 0x9c
    357a:	b.n	32b6 <ILI9341_t3n::updateScreenAsync(bool)+0x7e>

0000357c <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)>:
  _pkinetisk_spi->SR = SPI_SR_EOQF; // make sure it is clear
  endSPITransaction();
}
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::readRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t *pcolors) {
    357c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // Use our Origin.
  x += _originx;
  y += _originy;
    3580:	ldrh.w	r8, [r0, #52]	; 0x34
  _pkinetisk_spi->SR = SPI_SR_EOQF; // make sure it is clear
  endSPITransaction();
}
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::readRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t *pcolors) {
    3584:	sub	sp, #8
  // Use our Origin.
  x += _originx;
    3586:	ldrh.w	r9, [r0, #50]	; 0x32
  y += _originy;
    358a:	add	r2, r8
  _pkinetisk_spi->SR = SPI_SR_EOQF; // make sure it is clear
  endSPITransaction();
}
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::readRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t *pcolors) {
    358c:	ldrsh.w	r7, [sp, #40]	; 0x28
  // Use our Origin.
  x += _originx;
    3590:	add	r9, r1
  y += _originy;
// BUGBUG:: Should add some validation of X and Y

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    3592:	ldrb.w	r1, [r0, #180]	; 0xb4
  _pkinetisk_spi->SR = SPI_SR_EOQF; // make sure it is clear
  endSPITransaction();
}
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::readRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t *pcolors) {
    3596:	ldr	r6, [sp, #44]	; 0x2c
  // Use our Origin.
  x += _originx;
  y += _originy;
    3598:	uxth.w	r8, r2
}
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::readRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t *pcolors) {
  // Use our Origin.
  x += _originx;
    359c:	uxth.w	r9, r9
  y += _originy;
// BUGBUG:: Should add some validation of X and Y

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    35a0:	cbz	r1, 35f4 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x78>
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::readRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t *pcolors) {
  // Use our Origin.
  x += _originx;
  y += _originy;
    35a2:	sxth.w	r8, r8
// BUGBUG:: Should add some validation of X and Y

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
    35a6:	ldrsh.w	r1, [r0, #32]
}
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::readRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t *pcolors) {
  // Use our Origin.
  x += _originx;
    35aa:	sxth.w	lr, r9
  y += _originy;
// BUGBUG:: Should add some validation of X and Y

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
    35ae:	ldr.w	r2, [r0, #176]	; 0xb0
    for (; h > 0; h--) {
    35b2:	cmp	r7, #0
  y += _originy;
// BUGBUG:: Should add some validation of X and Y

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
    35b4:	mla	lr, r8, r1, lr
    35b8:	add.w	lr, r2, lr, lsl #1
    for (; h > 0; h--) {
    35bc:	ble.n	35ee <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x72>
    35be:	mov.w	ip, r3, lsl #1
      uint16_t *pfbPixel = pfbPixel_row;
      for (int i = 0; i < w; i++) {
    35c2:	cmp	r3, #0
    35c4:	ble.n	35e0 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x64>
    35c6:	subs	r1, r6, #2
    35c8:	add.w	r5, lr, ip
    35cc:	mov	r2, lr
        *pcolors++ = *pfbPixel++;
    35ce:	ldrh.w	r4, [r2], #2
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
    for (; h > 0; h--) {
      uint16_t *pfbPixel = pfbPixel_row;
      for (int i = 0; i < w; i++) {
    35d2:	cmp	r5, r2
        *pcolors++ = *pfbPixel++;
    35d4:	strh.w	r4, [r1, #2]!
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
    for (; h > 0; h--) {
      uint16_t *pfbPixel = pfbPixel_row;
      for (int i = 0; i < w; i++) {
    35d8:	bne.n	35ce <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x52>
    35da:	add	r6, ip
    35dc:	ldrsh.w	r1, [r0, #32]
    35e0:	subs	r2, r7, #1
        *pcolors++ = *pfbPixel++;
      }
      pfbPixel_row += _width;
    35e2:	add.w	lr, lr, r1, lsl #1
    35e6:	uxth	r2, r2
    35e8:	sxth	r7, r2
// BUGBUG:: Should add some validation of X and Y

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
    for (; h > 0; h--) {
    35ea:	cmp	r2, #0
    35ec:	bne.n	35c2 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x46>
    }
  }

  // We should have received everything so should be done
  endSPITransaction();
}
    35ee:	add	sp, #8
    35f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    return;
  }
#endif

  if (_miso == 0xff)
    35f4:	ldrb.w	r2, [r0, #143]	; 0x8f
    35f8:	cmp	r2, #255	; 0xff
    35fa:	beq.n	35ee <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x72>
    35fc:	mov	r5, r3
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    35fe:	ldr	r3, [r0, #24]
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    3600:	movs	r2, #7
    3602:	mov	r4, r0
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    3604:	str	r3, [sp, #0]
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    3606:	add	r3, sp, #8
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    3608:	str	r2, [sp, #4]
    360a:	ldr	r0, [r0, #8]
    return; // bail if not valid miso

  uint8_t rgb[3]; // RGB bytes received from the display
  uint8_t rgbIdx = 0;
  uint32_t txCount =
      w * h * 3; // number of bytes we will transmit to the display
    360c:	mul.w	sl, r5, r7
    3610:	ldmdb	r3, {r1, r2}
    3614:	bl	2d30 <SPIClass::beginTransaction(SPISettings)>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
    3618:	ldr.w	r3, [r4, #172]	; 0xac
    361c:	add.w	sl, sl, sl, lsl #1
    3620:	cmp	r3, #0
    3622:	beq.w	38b6 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x33a>
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    3626:	ldr.w	r3, [r4, #152]	; 0x98
    362a:	cbz	r3, 3634 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0xb8>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
    362c:	ldr.w	r2, [r4, #148]	; 0x94
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
    3630:	str.w	r2, [r3, #136]	; 0x88
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    3634:	ldr.w	r1, [r4, #164]	; 0xa4
  uint32_t rxCount =
      txCount; // number of bytes we will receive back from the display

  beginSPITransaction(_SPI_CLOCK_READ);

  setAddr(x, y, x + w - 1, y + h - 1);
    3638:	subs	r3, r5, #1
    363a:	mov	r0, r4
    363c:	subs	r5, r7, #1
    363e:	orr.w	r1, r1, #7
    3642:	add.w	r7, r9, r3
    3646:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    364a:	movs	r2, #42	; 0x2a
    364c:	ldr	r3, [r4, #28]
    364e:	add	r5, r8
    3650:	uxth	r7, r7
    3652:	str	r2, [r3, #100]	; 0x64
    3654:	uxth	r5, r5
    pending_rx_count++; //
    3656:	ldrb.w	r2, [r4, #146]	; 0x92
    365a:	adds	r2, #1
    365c:	strb.w	r2, [r4, #146]	; 0x92

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    3660:	ldr	r2, [r3, #112]	; 0x70
    3662:	lsls	r2, r2, #30
    3664:	bmi.n	3674 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0xf8>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    3666:	ldrb.w	r2, [r4, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    366a:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    366c:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    366e:	cbz	r2, 3674 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0xf8>
        pending_rx_count--; // decrement count of bytes still levt
    3670:	strb.w	r1, [r4, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    3674:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    3676:	lsls	r0, r2, #31
    3678:	bpl.n	3660 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0xe4>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    367a:	ldr.w	r3, [r4, #168]	; 0xa8
    367e:	mov	r0, r4
    3680:	ldr	r1, [pc, #572]	; (38c0 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x344>)
    3682:	orrs	r1, r3
    3684:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    3688:	ldr	r3, [r4, #28]
    368a:	str.w	r9, [r3, #100]	; 0x64
    pending_rx_count++; //
    368e:	ldrb.w	r2, [r4, #146]	; 0x92
    3692:	adds	r2, #1
    3694:	strb.w	r2, [r4, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    3698:	ldr	r2, [r3, #112]	; 0x70
    369a:	lsls	r1, r2, #30
    369c:	bmi.n	36ac <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x130>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    369e:	ldrb.w	r2, [r4, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    36a2:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    36a4:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    36a6:	cbz	r2, 36ac <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x130>
        pending_rx_count--; // decrement count of bytes still levt
    36a8:	strb.w	r1, [r4, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    36ac:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    36ae:	lsls	r2, r2, #31
    36b0:	bpl.n	3698 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x11c>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    36b2:	ldr.w	r3, [r4, #168]	; 0xa8
    36b6:	mov	r0, r4
    36b8:	ldr	r1, [pc, #516]	; (38c0 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x344>)
    36ba:	orrs	r1, r3
    36bc:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    36c0:	ldr	r3, [r4, #28]
    36c2:	str	r7, [r3, #100]	; 0x64
    pending_rx_count++; //
    36c4:	ldrb.w	r2, [r4, #146]	; 0x92
    36c8:	adds	r2, #1
    36ca:	strb.w	r2, [r4, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    36ce:	ldr	r2, [r3, #112]	; 0x70
    36d0:	lsls	r7, r2, #30
    36d2:	bmi.n	36e2 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x166>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    36d4:	ldrb.w	r2, [r4, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    36d8:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    36da:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    36dc:	cbz	r2, 36e2 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x166>
        pending_rx_count--; // decrement count of bytes still levt
    36de:	strb.w	r1, [r4, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    36e2:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    36e4:	lsls	r0, r2, #31
    36e6:	bpl.n	36ce <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x152>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    36e8:	ldr.w	r1, [r4, #164]	; 0xa4
    36ec:	mov	r0, r4
    36ee:	orr.w	r1, r1, #7
    36f2:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    36f6:	movs	r2, #43	; 0x2b
    36f8:	ldr	r3, [r4, #28]
    36fa:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    36fc:	ldrb.w	r2, [r4, #146]	; 0x92
    3700:	adds	r2, #1
    3702:	strb.w	r2, [r4, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    3706:	ldr	r2, [r3, #112]	; 0x70
    3708:	lsls	r1, r2, #30
    370a:	bmi.n	371a <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x19e>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    370c:	ldrb.w	r2, [r4, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    3710:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    3712:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    3714:	cbz	r2, 371a <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x19e>
        pending_rx_count--; // decrement count of bytes still levt
    3716:	strb.w	r1, [r4, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    371a:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    371c:	lsls	r2, r2, #31
    371e:	bpl.n	3706 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x18a>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    3720:	ldr.w	r3, [r4, #168]	; 0xa8
    3724:	mov	r0, r4
    3726:	ldr	r1, [pc, #408]	; (38c0 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x344>)
    3728:	orrs	r1, r3
    372a:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    372e:	ldr	r3, [r4, #28]
    3730:	str.w	r8, [r3, #100]	; 0x64
    pending_rx_count++; //
    3734:	ldrb.w	r2, [r4, #146]	; 0x92
    3738:	adds	r2, #1
    373a:	strb.w	r2, [r4, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    373e:	ldr	r2, [r3, #112]	; 0x70
    3740:	lsls	r7, r2, #30
    3742:	bmi.n	3752 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x1d6>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    3744:	ldrb.w	r2, [r4, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    3748:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    374a:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    374c:	cbz	r2, 3752 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x1d6>
        pending_rx_count--; // decrement count of bytes still levt
    374e:	strb.w	r1, [r4, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    3752:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    3754:	lsls	r0, r2, #31
    3756:	bpl.n	373e <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x1c2>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    3758:	ldr.w	r3, [r4, #168]	; 0xa8
    375c:	mov	r0, r4
    375e:	ldr	r1, [pc, #352]	; (38c0 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x344>)
    3760:	orrs	r1, r3
    3762:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    3766:	ldr	r3, [r4, #28]
    3768:	str	r5, [r3, #100]	; 0x64
    pending_rx_count++; //
    376a:	ldrb.w	r2, [r4, #146]	; 0x92
    376e:	adds	r2, #1
    3770:	strb.w	r2, [r4, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    3774:	ldr	r2, [r3, #112]	; 0x70
    3776:	lsls	r1, r2, #30
    3778:	bmi.n	3788 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x20c>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    377a:	ldrb.w	r2, [r4, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    377e:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    3780:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    3782:	cbz	r2, 3788 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x20c>
        pending_rx_count--; // decrement count of bytes still levt
    3784:	strb.w	r1, [r4, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    3788:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    378a:	lsls	r2, r2, #31
    378c:	bpl.n	3774 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x1f8>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    378e:	ldr.w	r1, [r4, #164]	; 0xa4
    3792:	mov	r0, r4
    3794:	orr.w	r1, r1, #7
    3798:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    379c:	movs	r2, #46	; 0x2e
    379e:	ldr	r3, [r4, #28]
    37a0:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    37a2:	ldrb.w	r2, [r4, #146]	; 0x92
    37a6:	adds	r2, #1
    37a8:	strb.w	r2, [r4, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    37ac:	ldr	r2, [r3, #112]	; 0x70
    37ae:	lsls	r7, r2, #30
    37b0:	bmi.n	37c0 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x244>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    37b2:	ldrb.w	r2, [r4, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    37b6:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    37b8:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    37ba:	cbz	r2, 37c0 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x244>
        pending_rx_count--; // decrement count of bytes still levt
    37bc:	strb.w	r1, [r4, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    37c0:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    37c2:	lsls	r5, r2, #31
    37c4:	bpl.n	37ac <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x230>
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    waitTransmitComplete();
  }
  void writedata8_last(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(7));
    37c6:	ldr.w	r1, [r4, #168]	; 0xa8
    37ca:	mov	r0, r4
    37cc:	orr.w	r1, r1, #7
    37d0:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    37d4:	movs	r2, #0
    37d6:	ldr	r3, [r4, #28]
    37d8:	str	r2, [r3, #100]	; 0x64
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    37da:	ldrb.w	r1, [r4, #146]	; 0x92
    37de:	adds	r2, r1, #1
    37e0:	strb.w	r2, [r4, #146]	; 0x92
    37e4:	b.n	37ec <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x270>
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    37e6:	ldr	r2, [r3, #112]	; 0x70
    37e8:	lsls	r0, r2, #30
    37ea:	bpl.n	38aa <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x32e>
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    37ec:	cmp	r1, #255	; 0xff
    37ee:	bne.n	37e6 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x26a>

  if (_miso == 0xff)
    return; // bail if not valid miso

  uint8_t rgb[3]; // RGB bytes received from the display
  uint8_t rgbIdx = 0;
    37f0:	movs	r7, #0
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    37f2:	movw	r2, #513	; 0x201
  uint8_t rgb[3]; // RGB bytes received from the display
  uint8_t rgbIdx = 0;
  uint32_t txCount =
      w * h * 3; // number of bytes we will transmit to the display
  uint32_t rxCount =
      txCount; // number of bytes we will receive back from the display
    37f6:	mov	r5, sl
      } else {
        maybeUpdateTCR(_tcr_dc_not_assert |
                       LPSPI_TCR_FRAMESZ(7)); // remove the CONTINUE...
        while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0)
          ; // wait if queue was full
        _pimxrt_spi->TDR = 0;
    37f8:	mov	r8, r7
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    37fa:	str	r2, [r3, #16]

  // transmit a DUMMY byte before the color bytes
  writedata8_last(0); // BUGBUG:: maybe fix this as this will wait until the
                      // byte fully transfers through.

  while (txCount || rxCount) {
    37fc:	cmp.w	sl, #0
    3800:	bne.n	3804 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x288>
    3802:	cbz	r5, 3866 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x2ea>
    // transmit another byte if possible
    if (txCount && (_pimxrt_spi->SR & LPSPI_SR_TDF)) {
    3804:	cmp.w	sl, #0
    3808:	beq.n	381a <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x29e>
    380a:	ldr	r2, [r3, #20]
    380c:	lsls	r1, r2, #31
    380e:	bpl.n	381a <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x29e>
      txCount--;
      if (txCount) {
    3810:	subs.w	sl, sl, #1
    3814:	beq.n	3892 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x316>
      } else {
        maybeUpdateTCR(_tcr_dc_not_assert |
                       LPSPI_TCR_FRAMESZ(7)); // remove the CONTINUE...
        while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0)
          ; // wait if queue was full
        _pimxrt_spi->TDR = 0;
    3816:	str.w	r8, [r3, #100]	; 0x64
      }
    }

    // receive another byte if possible, and either skip it or store the color
    if (rxCount && !(_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY)) {
    381a:	cmp	r5, #0
    381c:	beq.n	37fc <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x280>
    381e:	ldr	r2, [r3, #112]	; 0x70
    3820:	ands.w	r2, r2, #2
    3824:	bne.n	37fc <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x280>
      rgb[rgbIdx] = _pimxrt_spi->RDR;

      rxCount--;
      rgbIdx++;
    3826:	add.w	lr, r7, #1
      }
    }

    // receive another byte if possible, and either skip it or store the color
    if (rxCount && !(_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY)) {
      rgb[rgbIdx] = _pimxrt_spi->RDR;
    382a:	add	r1, sp, #8
    382c:	ldr	r0, [r3, #116]	; 0x74

      rxCount--;
    382e:	subs	r5, #1
      }
    }

    // receive another byte if possible, and either skip it or store the color
    if (rxCount && !(_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY)) {
      rgb[rgbIdx] = _pimxrt_spi->RDR;
    3830:	add	r1, r7

      rxCount--;
      rgbIdx++;
    3832:	uxtb.w	r7, lr
      if (rgbIdx == 3) {
    3836:	cmp	r7, #3
      }
    }

    // receive another byte if possible, and either skip it or store the color
    if (rxCount && !(_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY)) {
      rgb[rgbIdx] = _pimxrt_spi->RDR;
    3838:	strb.w	r0, [r1, #-8]

      rxCount--;
      rgbIdx++;
      if (rgbIdx == 3) {
    383c:	bne.n	37fc <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x280>
        rgbIdx = 0;
        *pcolors++ = color565(rgb[0], rgb[1], rgb[2]);
    383e:	ldrb.w	r0, [sp]
      rgb[rgbIdx] = _pimxrt_spi->RDR;

      rxCount--;
      rgbIdx++;
      if (rgbIdx == 3) {
        rgbIdx = 0;
    3842:	mov	r7, r2
        *pcolors++ = color565(rgb[0], rgb[1], rgb[2]);
    3844:	ldrb.w	r1, [sp, #1]
    3848:	adds	r6, #2
    384a:	lsls	r0, r0, #8
    384c:	ldr	r2, [pc, #116]	; (38c4 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x348>)
    384e:	lsls	r1, r1, #3
    3850:	ands	r2, r0
    3852:	ldrb.w	r0, [sp, #2]
    3856:	and.w	r1, r1, #2016	; 0x7e0
    385a:	orrs	r2, r1
    385c:	orr.w	r2, r2, r0, lsr #3
    3860:	strh.w	r2, [r6, #-2]
    3864:	b.n	37fc <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x280>
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    3866:	ldr.w	r3, [r4, #152]	; 0x98
    386a:	cbz	r3, 3874 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x2f8>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
    386c:	ldr.w	r2, [r4, #148]	; 0x94
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    3870:	str.w	r2, [r3, #132]	; 0x84
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
#endif
    }
    _pspi->endTransaction();
    3874:	ldr	r0, [r4, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    3876:	ldrb	r3, [r0, #19]
    3878:	cmp	r3, #0
    387a:	beq.w	35ee <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x72>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    387e:	lsls	r3, r3, #31
    3880:	bpl.n	3888 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x30c>
    3882:	ldr	r2, [r0, #40]	; 0x28
    3884:	ldr	r3, [pc, #64]	; (38c8 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x34c>)
    3886:	str	r2, [r3, #0]
    }
  }

  // We should have received everything so should be done
  endSPITransaction();
}
    3888:	add	sp, #8
    388a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    388e:	b.w	2978 <SPIClass::endTransaction() [clone .part.9]>
      txCount--;
      if (txCount) {
        _pimxrt_spi->TDR = 0;
      } else {
        maybeUpdateTCR(_tcr_dc_not_assert |
                       LPSPI_TCR_FRAMESZ(7)); // remove the CONTINUE...
    3892:	ldr.w	r1, [r4, #168]	; 0xa8
    3896:	mov	r0, r4
    3898:	orr.w	r1, r1, #7
    389c:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    38a0:	ldr	r3, [r4, #28]
        while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0)
    38a2:	ldr	r2, [r3, #20]
    38a4:	lsls	r2, r2, #31
    38a6:	bpl.n	38a2 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x326>
    38a8:	b.n	3816 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x29a>
    38aa:	subs	r2, r1, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    38ac:	ldr	r0, [r3, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
    38ae:	strb.w	r1, [r4, #146]	; 0x92
    38b2:	uxtb	r1, r2
    38b4:	b.n	37ec <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x270>

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
    38b6:	ldr	r3, [r4, #28]
    38b8:	ldr	r3, [r3, #96]	; 0x60
    38ba:	str.w	r3, [r4, #156]	; 0x9c
    38be:	b.n	3626 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0xaa>
    38c0:	.word	0x0020000f
    38c4:	.word	0xfffff800
    38c8:	.word	0xe000e100

000038cc <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)>:
  //	//Serial.printf("Return  maxlen =  %d\n", maxlen);
  return (maxlen);
}

void ILI9341_t3n::charBounds(char c, int16_t *x, int16_t *y, int16_t *minx,
                             int16_t *miny, int16_t *maxx, int16_t *maxy) {
    38cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // BUGBUG:: Not handling offset/clip
  if (font) {
    38d0:	ldr	r4, [r0, #96]	; 0x60
  //	//Serial.printf("Return  maxlen =  %d\n", maxlen);
  return (maxlen);
}

void ILI9341_t3n::charBounds(char c, int16_t *x, int16_t *y, int16_t *minx,
                             int16_t *miny, int16_t *maxx, int16_t *maxy) {
    38d2:	sub	sp, #20

  // BUGBUG:: Not handling offset/clip
  if (font) {
    38d4:	cmp	r4, #0
    38d6:	beq.w	3a58 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x18c>
    if (c == '\n') { // Newline?
    38da:	cmp	r1, #10
    38dc:	beq.w	3a46 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x17a>
      *x = 0;        // Reset x to zero, advance y by one line
      *y += font->line_space;
    } else if (c != '\r') { // Not a carriage return; is normal char
    38e0:	cmp	r1, #13
    38e2:	beq.w	3a2c <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x160>
      uint32_t bitoffset;
      const uint8_t *data;
      if (c >= font->index1_first && c <= font->index1_last) {
    38e6:	ldrb	r6, [r4, #14]
    38e8:	cmp	r1, r6
    38ea:	bcs.w	3a32 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x166>
        bitoffset = c - font->index1_first;
        bitoffset *= font->bits_index;
      } else if (c >= font->index2_first && c <= font->index2_last) {
    38ee:	ldrb	r5, [r4, #16]
    38f0:	cmp	r1, r5
    38f2:	bcc.w	3a2c <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x160>
    38f6:	ldrb	r7, [r4, #17]
    38f8:	cmp	r7, r1
    38fa:	bcc.w	3a2c <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x160>
        bitoffset =
            c - font->index2_first + font->index1_last - font->index1_first + 1;
    38fe:	subs	r1, r1, r5
    3900:	ldrb	r5, [r4, #15]
        bitoffset *= font->bits_index;
    3902:	ldrb.w	lr, [r4, #18]
      if (c >= font->index1_first && c <= font->index1_last) {
        bitoffset = c - font->index1_first;
        bitoffset *= font->bits_index;
      } else if (c >= font->index2_first && c <= font->index2_last) {
        bitoffset =
            c - font->index2_first + font->index1_last - font->index1_first + 1;
    3906:	add	r5, r1
    3908:	subs	r1, r5, r6
        bitoffset *= font->bits_index;
    390a:	mla	r1, r1, lr, lr
    390e:	mov	r6, r2
    3910:	mov	r5, r0
        return;
      }
      // Serial.printf("  index =  %d\n", fetchbits_unsigned(font->index,
      // bitoffset, font->bits_index));
      data = font->data +
             fetchbits_unsigned(font->index, bitoffset, font->bits_index);
    3912:	mov	r2, lr
    3914:	ldr	r0, [r4, #0]
    3916:	mov	r7, r3
    3918:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
    391c:	ldr	r3, [r4, #8]

      uint32_t encoding = fetchbits_unsigned(data, 0, 3);
    391e:	movs	r2, #3
    3920:	movs	r1, #0
        return;
      }
      // Serial.printf("  index =  %d\n", fetchbits_unsigned(font->index,
      // bitoffset, font->bits_index));
      data = font->data +
             fetchbits_unsigned(font->index, bitoffset, font->bits_index);
    3922:	add.w	r8, r3, r0

      uint32_t encoding = fetchbits_unsigned(data, 0, 3);
    3926:	mov	r0, r8
    3928:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
      if (encoding != 0)
    392c:	cmp	r0, #0
    392e:	bne.n	3a2c <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x160>
        return;
      uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
    3930:	ldrb	r2, [r4, #19]
    3932:	movs	r1, #3
    3934:	mov	r0, r8
      bitoffset = font->bits_width + 3;
    3936:	add.w	r9, r2, r1
             fetchbits_unsigned(font->index, bitoffset, font->bits_index);

      uint32_t encoding = fetchbits_unsigned(data, 0, 3);
      if (encoding != 0)
        return;
      uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
    393a:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
      bitoffset = font->bits_width + 3;
      uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
    393e:	ldrb	r2, [r4, #20]
             fetchbits_unsigned(font->index, bitoffset, font->bits_index);

      uint32_t encoding = fetchbits_unsigned(data, 0, 3);
      if (encoding != 0)
        return;
      uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
    3940:	mov	fp, r0
      bitoffset = font->bits_width + 3;
      uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
    3942:	mov	r1, r9
    3944:	mov	r0, r8
      bitoffset += font->bits_height;
    3946:	add	r9, r2
      uint32_t encoding = fetchbits_unsigned(data, 0, 3);
      if (encoding != 0)
        return;
      uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
      bitoffset = font->bits_width + 3;
      uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
    3948:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
      bitoffset += font->bits_height;
      // Serial.printf("  size =   %d,%d\n", width, height);
      // Serial.printf("  line space = %d\n", font->line_space);

      int32_t xoffset = fetchbits_signed(data, bitoffset, font->bits_xoffset);
    394c:	ldrb.w	sl, [r4, #21]
      uint32_t encoding = fetchbits_unsigned(data, 0, 3);
      if (encoding != 0)
        return;
      uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
      bitoffset = font->bits_width + 3;
      uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
    3950:	str	r0, [sp, #4]
  return val;
}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
    3952:	mov	r1, r9
    3954:	mov	r2, sl
    3956:	mov	r0, r8
    3958:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
  if (val & (1 << (required - 1))) {
    395c:	add.w	r3, sl, #4294967295
    3960:	movs	r2, #1
    3962:	lsl.w	r3, r2, r3
    3966:	tst	r3, r0
    3968:	beq.w	3b1a <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x24e>
    return (int32_t)val - (1 << required);
    396c:	lsl.w	r2, r2, sl
    3970:	subs	r3, r0, r2
    3972:	str	r3, [sp, #8]
      // Serial.printf("  size =   %d,%d\n", width, height);
      // Serial.printf("  line space = %d\n", font->line_space);

      int32_t xoffset = fetchbits_signed(data, bitoffset, font->bits_xoffset);
      bitoffset += font->bits_xoffset;
      int32_t yoffset = fetchbits_signed(data, bitoffset, font->bits_yoffset);
    3974:	ldrb	r3, [r4, #22]
      bitoffset += font->bits_height;
      // Serial.printf("  size =   %d,%d\n", width, height);
      // Serial.printf("  line space = %d\n", font->line_space);

      int32_t xoffset = fetchbits_signed(data, bitoffset, font->bits_xoffset);
      bitoffset += font->bits_xoffset;
    3976:	add	r9, sl
  return val;
}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
    3978:	mov	r0, r8
    397a:	mov	r2, r3
    397c:	mov	r1, r9
    397e:	str	r3, [sp, #12]
    3980:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
  if (val & (1 << (required - 1))) {
    3984:	ldr	r3, [sp, #12]
    3986:	movs	r1, #1
    3988:	subs	r2, r3, #1
    398a:	lsl.w	r2, r1, r2
    398e:	tst	r2, r0
    3990:	beq.w	3b16 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x24a>
    return (int32_t)val - (1 << required);
    3994:	lsls	r1, r3
    3996:	rsb	sl, r1, r0
      int32_t xoffset = fetchbits_signed(data, bitoffset, font->bits_xoffset);
      bitoffset += font->bits_xoffset;
      int32_t yoffset = fetchbits_signed(data, bitoffset, font->bits_yoffset);
      bitoffset += font->bits_yoffset;

      uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
    399a:	add.w	r1, r9, r3
    399e:	mov	r0, r8
    39a0:	ldrb	r2, [r4, #23]
      bitoffset += font->bits_delta;

      int16_t x1 = *x + xoffset, y1 = *y + yoffset, x2 = x1 + width,
    39a2:	uxth.w	sl, sl
      int32_t xoffset = fetchbits_signed(data, bitoffset, font->bits_xoffset);
      bitoffset += font->bits_xoffset;
      int32_t yoffset = fetchbits_signed(data, bitoffset, font->bits_yoffset);
      bitoffset += font->bits_yoffset;

      uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
    39a6:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
      bitoffset += font->bits_delta;

      int16_t x1 = *x + xoffset, y1 = *y + yoffset, x2 = x1 + width,
    39aa:	ldrh.w	r1, [sp, #8]
    39ae:	ldrh	r2, [r6, #0]
    39b0:	uxth.w	fp, fp
    39b4:	ldrh	r3, [r7, #0]
    39b6:	add	r2, r1
              y2 = y1 + height;
    39b8:	ldrh.w	ip, [sp, #4]
      bitoffset += font->bits_yoffset;

      uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
      bitoffset += font->bits_delta;

      int16_t x1 = *x + xoffset, y1 = *y + yoffset, x2 = x1 + width,
    39bc:	add	r3, sl
              y2 = y1 + height;

      if (wrap && (x2 > _width)) {
    39be:	ldrb.w	r8, [r5, #92]	; 0x5c
      bitoffset += font->bits_yoffset;

      uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
      bitoffset += font->bits_delta;

      int16_t x1 = *x + xoffset, y1 = *y + yoffset, x2 = x1 + width,
    39c2:	uxth	r2, r2
    39c4:	uxth	r3, r3
    39c6:	add.w	lr, r2, fp
    39ca:	sxth	r2, r2
              y2 = y1 + height;
    39cc:	add.w	r9, r3, ip
      bitoffset += font->bits_yoffset;

      uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
      bitoffset += font->bits_delta;

      int16_t x1 = *x + xoffset, y1 = *y + yoffset, x2 = x1 + width,
    39d0:	sxth	r3, r3
    39d2:	sxth.w	lr, lr
              y2 = y1 + height;
    39d6:	sxth.w	r9, r9

      if (wrap && (x2 > _width)) {
    39da:	cmp.w	r8, #0
    39de:	beq.n	39ea <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x11e>
    39e0:	ldrsh.w	r5, [r5, #32]
    39e4:	cmp	r5, lr
    39e6:	blt.w	3b1e <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x252>
        *x = 0; // Reset x to zero, advance y by one line
        *y += font->line_space;
        x1 = *x + xoffset, y1 = *y + yoffset, x2 = x1 + width, y2 = y1 + height;
      }
      if (x1 < *minx)
    39ea:	ldr	r1, [sp, #56]	; 0x38
    39ec:	ldrsh.w	r1, [r1]
    39f0:	cmp	r1, r2
    39f2:	ble.n	39f8 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x12c>
        *minx = x1;
    39f4:	ldr	r1, [sp, #56]	; 0x38
    39f6:	strh	r2, [r1, #0]
      if (y1 < *miny)
    39f8:	ldr	r2, [sp, #60]	; 0x3c
    39fa:	ldrsh.w	r2, [r2]
    39fe:	cmp	r2, r3
    3a00:	ble.n	3a06 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x13a>
        *miny = y1;
    3a02:	ldr	r2, [sp, #60]	; 0x3c
    3a04:	strh	r3, [r2, #0]
      if (x2 > *maxx)
    3a06:	ldr	r3, [sp, #64]	; 0x40
    3a08:	ldrsh.w	r3, [r3]
    3a0c:	cmp	r3, lr
    3a0e:	bge.n	3a16 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x14a>
        *maxx = x2;
    3a10:	ldr	r3, [sp, #64]	; 0x40
    3a12:	strh.w	lr, [r3]
      if (y2 > *maxy)
    3a16:	ldr	r3, [sp, #68]	; 0x44
    3a18:	ldrsh.w	r3, [r3]
    3a1c:	cmp	r3, r9
    3a1e:	bge.n	3a26 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x15a>
        *maxy = y2;
    3a20:	ldr	r3, [sp, #68]	; 0x44
    3a22:	strh.w	r9, [r3]
      *x += delta; // ? guessing here...
    3a26:	ldrh	r3, [r6, #0]
    3a28:	add	r0, r3
    3a2a:	strh	r0, [r6, #0]
      if (*y < *miny)
        *miny = *y;
      *x += textsize_x * 6; // Advance x one char
    }
  }
}
    3a2c:	add	sp, #20
    3a2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      *x = 0;        // Reset x to zero, advance y by one line
      *y += font->line_space;
    } else if (c != '\r') { // Not a carriage return; is normal char
      uint32_t bitoffset;
      const uint8_t *data;
      if (c >= font->index1_first && c <= font->index1_last) {
    3a32:	ldrb	r5, [r4, #15]
    3a34:	cmp	r5, r1
    3a36:	bcc.w	38ee <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x22>
        bitoffset = c - font->index1_first;
    3a3a:	subs	r1, r1, r6
        bitoffset *= font->bits_index;
    3a3c:	ldrb.w	lr, [r4, #18]
    3a40:	mul.w	r1, lr, r1
    3a44:	b.n	390e <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x42>
                             int16_t *miny, int16_t *maxx, int16_t *maxy) {

  // BUGBUG:: Not handling offset/clip
  if (font) {
    if (c == '\n') { // Newline?
      *x = 0;        // Reset x to zero, advance y by one line
    3a46:	movs	r1, #0
    3a48:	strh	r1, [r2, #0]
      *y += font->line_space;
    3a4a:	ldrb	r1, [r4, #24]
    3a4c:	ldrh	r2, [r3, #0]
    3a4e:	add	r2, r1
    3a50:	strh	r2, [r3, #0]
      if (*y < *miny)
        *miny = *y;
      *x += textsize_x * 6; // Advance x one char
    }
  }
}
    3a52:	add	sp, #20
    3a54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *maxy = y2;
      *x += delta; // ? guessing here...
    }
  }

  else if (gfxFont) {
    3a58:	ldr	r5, [r0, #116]	; 0x74
    3a5a:	cmp	r5, #0
    3a5c:	beq.w	3b7a <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x2ae>

    if (c == '\n') { // Newline?
    3a60:	cmp	r1, #10
    3a62:	beq.n	3b4a <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x27e>
      *x = 0;        // Reset x to zero, advance y by one line
      *y += textsize_y * gfxFont->yAdvance;
    } else if (c != '\r') { // Not a carriage return; is normal char
    3a64:	cmp	r1, #13
    3a66:	beq.n	3a2c <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x160>
      uint8_t first = gfxFont->first, last = gfxFont->last;
      if ((c >= first) && (c <= last)) { // Char present in this font?
    3a68:	ldrb	r7, [r5, #9]

    if (c == '\n') { // Newline?
      *x = 0;        // Reset x to zero, advance y by one line
      *y += textsize_y * gfxFont->yAdvance;
    } else if (c != '\r') { // Not a carriage return; is normal char
      uint8_t first = gfxFont->first, last = gfxFont->last;
    3a6a:	ldrb	r6, [r5, #8]
      if ((c >= first) && (c <= last)) { // Char present in this font?
    3a6c:	cmp	r7, r1
    3a6e:	bcc.n	3a2c <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x160>
    3a70:	cmp	r1, r6
    3a72:	bcc.n	3a2c <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x160>
        GFXglyph *glyph = gfxFont->glyph + (c - first);
    3a74:	subs	r1, r1, r6
    3a76:	ldr	r7, [r5, #4]
        uint8_t gw = glyph->width, gh = glyph->height, xa = glyph->xAdvance;
        int8_t xo = glyph->xOffset, yo = glyph->yOffset + gfxFont->yAdvance / 2;
    3a78:	ldrb.w	ip, [r5, #10]
      *x = 0;        // Reset x to zero, advance y by one line
      *y += textsize_y * gfxFont->yAdvance;
    } else if (c != '\r') { // Not a carriage return; is normal char
      uint8_t first = gfxFont->first, last = gfxFont->last;
      if ((c >= first) && (c <= last)) { // Char present in this font?
        GFXglyph *glyph = gfxFont->glyph + (c - first);
    3a7c:	add.w	r1, r7, r1, lsl #3
        uint8_t gw = glyph->width, gh = glyph->height, xa = glyph->xAdvance;
        int8_t xo = glyph->xOffset, yo = glyph->yOffset + gfxFont->yAdvance / 2;
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
    3a80:	ldrb.w	lr, [r0, #92]	; 0x5c
    } else if (c != '\r') { // Not a carriage return; is normal char
      uint8_t first = gfxFont->first, last = gfxFont->last;
      if ((c >= first) && (c <= last)) { // Char present in this font?
        GFXglyph *glyph = gfxFont->glyph + (c - first);
        uint8_t gw = glyph->width, gh = glyph->height, xa = glyph->xAdvance;
        int8_t xo = glyph->xOffset, yo = glyph->yOffset + gfxFont->yAdvance / 2;
    3a84:	ldrb	r6, [r1, #6]
      *y += textsize_y * gfxFont->yAdvance;
    } else if (c != '\r') { // Not a carriage return; is normal char
      uint8_t first = gfxFont->first, last = gfxFont->last;
      if ((c >= first) && (c <= last)) { // Char present in this font?
        GFXglyph *glyph = gfxFont->glyph + (c - first);
        uint8_t gw = glyph->width, gh = glyph->height, xa = glyph->xAdvance;
    3a86:	ldrb.w	r8, [r1, #2]
        int8_t xo = glyph->xOffset, yo = glyph->yOffset + gfxFont->yAdvance / 2;
    3a8a:	add.w	r6, r6, ip, lsr #1
      *y += textsize_y * gfxFont->yAdvance;
    } else if (c != '\r') { // Not a carriage return; is normal char
      uint8_t first = gfxFont->first, last = gfxFont->last;
      if ((c >= first) && (c <= last)) { // Char present in this font?
        GFXglyph *glyph = gfxFont->glyph + (c - first);
        uint8_t gw = glyph->width, gh = glyph->height, xa = glyph->xAdvance;
    3a8e:	ldrb	r7, [r1, #4]
    3a90:	ldrb.w	ip, [r1, #3]
        int8_t xo = glyph->xOffset, yo = glyph->yOffset + gfxFont->yAdvance / 2;
    3a94:	sxtb	r6, r6
    3a96:	ldrsb.w	r9, [r1, #5]
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
    3a9a:	cmp.w	lr, #0
    3a9e:	bne.n	3b5c <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x290>
    3aa0:	ldrsh.w	r1, [r3]
    3aa4:	ldrb.w	lr, [r0, #88]	; 0x58
    3aa8:	ldrsh.w	sl, [r2]
          *x = 0; // Reset x to zero, advance y by one line
          *y += textsize_y * gfxFont->yAdvance;
        }
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
    3aac:	uxth.w	r5, lr
    3ab0:	ldrb.w	r3, [r0, #89]	; 0x59
                y2 = y1 + gh * tsy - 1;
        if (x1 < *minx)
    3ab4:	ldr	r0, [sp, #56]	; 0x38
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
          *x = 0; // Reset x to zero, advance y by one line
          *y += textsize_y * gfxFont->yAdvance;
        }
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
    3ab6:	mla	r1, r6, r3, r1
                y2 = y1 + gh * tsy - 1;
        if (x1 < *minx)
    3aba:	ldrsh.w	lr, [r0]
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
          *x = 0; // Reset x to zero, advance y by one line
          *y += textsize_y * gfxFont->yAdvance;
        }
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
    3abe:	mla	r0, r9, r5, sl
    3ac2:	uxth	r1, r1
    3ac4:	uxth	r0, r0
                y2 = y1 + gh * tsy - 1;
    3ac6:	mla	r3, ip, r3, r1
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
          *x = 0; // Reset x to zero, advance y by one line
          *y += textsize_y * gfxFont->yAdvance;
        }
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
    3aca:	sxth	r1, r1
    3acc:	mla	r4, r8, r5, r0
    3ad0:	sxth	r0, r0
                y2 = y1 + gh * tsy - 1;
    3ad2:	subs	r3, #1
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
          *x = 0; // Reset x to zero, advance y by one line
          *y += textsize_y * gfxFont->yAdvance;
        }
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
    3ad4:	subs	r4, #1
                y2 = y1 + gh * tsy - 1;
        if (x1 < *minx)
    3ad6:	cmp	lr, r0
          *x = 0; // Reset x to zero, advance y by one line
          *y += textsize_y * gfxFont->yAdvance;
        }
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
                y2 = y1 + gh * tsy - 1;
    3ad8:	sxth	r3, r3
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
          *x = 0; // Reset x to zero, advance y by one line
          *y += textsize_y * gfxFont->yAdvance;
        }
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
    3ada:	sxth	r4, r4
                y2 = y1 + gh * tsy - 1;
        if (x1 < *minx)
    3adc:	ble.n	3ae2 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x216>
          *minx = x1;
    3ade:	ldr	r6, [sp, #56]	; 0x38
    3ae0:	strh	r0, [r6, #0]
        if (y1 < *miny)
    3ae2:	ldr	r0, [sp, #60]	; 0x3c
    3ae4:	ldrsh.w	r0, [r0]
    3ae8:	cmp	r0, r1
    3aea:	ble.n	3af0 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x224>
          *miny = y1;
    3aec:	ldr	r0, [sp, #60]	; 0x3c
    3aee:	strh	r1, [r0, #0]
        if (x2 > *maxx)
    3af0:	ldr	r1, [sp, #64]	; 0x40
    3af2:	ldrsh.w	r1, [r1]
    3af6:	cmp	r1, r4
    3af8:	bge.n	3afe <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x232>
          *maxx = x2;
    3afa:	ldr	r1, [sp, #64]	; 0x40
    3afc:	strh	r4, [r1, #0]
        if (y2 > *maxy)
    3afe:	ldr	r1, [sp, #68]	; 0x44
    3b00:	ldrsh.w	r1, [r1]
    3b04:	cmp	r1, r3
    3b06:	bge.n	3b0c <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x240>
          *maxy = y2;
    3b08:	ldr	r1, [sp, #68]	; 0x44
    3b0a:	strh	r3, [r1, #0]
        *x += xa * tsx;
    3b0c:	ldrh	r3, [r2, #0]
    3b0e:	mla	r7, r7, r5, r3
    3b12:	strh	r7, [r2, #0]
    3b14:	b.n	3a2c <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x160>
  return val;
}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
    3b16:	mov	sl, r0
    3b18:	b.n	399a <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0xce>
    3b1a:	str	r0, [sp, #8]
    3b1c:	b.n	3974 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0xa8>

      int16_t x1 = *x + xoffset, y1 = *y + yoffset, x2 = x1 + width,
              y2 = y1 + height;

      if (wrap && (x2 > _width)) {
        *x = 0; // Reset x to zero, advance y by one line
    3b1e:	movs	r3, #0
    3b20:	strh	r3, [r6, #0]
        *y += font->line_space;
    3b22:	ldrb	r2, [r4, #24]
    3b24:	ldrh	r3, [r7, #0]
    3b26:	add	r3, r2
    3b28:	uxth	r3, r3
    3b2a:	strh	r3, [r7, #0]
        x1 = *x + xoffset, y1 = *y + yoffset, x2 = x1 + width, y2 = y1 + height;
    3b2c:	add	r3, sl
    3b2e:	ldrh	r2, [r6, #0]
    3b30:	uxth	r3, r3
    3b32:	add	r2, r1
    3b34:	add.w	r9, ip, r3
    3b38:	sxth	r3, r3
    3b3a:	uxth	r2, r2
    3b3c:	sxth.w	r9, r9
    3b40:	add	fp, r2
    3b42:	sxth	r2, r2
    3b44:	sxth.w	lr, fp
    3b48:	b.n	39ea <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x11e>
  }

  else if (gfxFont) {

    if (c == '\n') { // Newline?
      *x = 0;        // Reset x to zero, advance y by one line
    3b4a:	strh	r4, [r2, #0]
      *y += textsize_y * gfxFont->yAdvance;
    3b4c:	ldrb.w	r0, [r0, #89]	; 0x59
    3b50:	ldrb	r1, [r5, #10]
    3b52:	ldrh	r2, [r3, #0]
    3b54:	mla	r2, r0, r1, r2
    3b58:	strh	r2, [r3, #0]
    3b5a:	b.n	3a2c <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x160>
      uint8_t first = gfxFont->first, last = gfxFont->last;
      if ((c >= first) && (c <= last)) { // Char present in this font?
        GFXglyph *glyph = gfxFont->glyph + (c - first);
        uint8_t gw = glyph->width, gh = glyph->height, xa = glyph->xAdvance;
        int8_t xo = glyph->xOffset, yo = glyph->yOffset + gfxFont->yAdvance / 2;
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
    3b5c:	ldrsh.w	sl, [r2]
    3b60:	add.w	r1, r9, r8
    3b64:	ldrb.w	lr, [r0, #88]	; 0x58
    3b68:	ldrsh.w	fp, [r0, #32]
    3b6c:	mla	r1, lr, r1, sl
    3b70:	cmp	r1, fp
    3b72:	bgt.n	3bfe <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x332>
    3b74:	ldrsh.w	r1, [r3]
    3b78:	b.n	3aac <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1e0>
      }
    }

  } else { // Default font

    if (c == '\n') {        // Newline?
    3b7a:	cmp	r1, #10
    3b7c:	beq.n	3c36 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x36a>
      *x = 0;               // Reset x to zero,
      *y += textsize_y * 8; // advance y one line
      // min/max x/y unchaged -- that waits for next 'normal' character
    } else if (c != '\r') { // Normal char; ignore carriage returns
    3b7e:	cmp	r1, #13
    3b80:	beq.w	3a2c <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x160>
      if (wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
    3b84:	ldrb.w	r1, [r0, #92]	; 0x5c
    3b88:	cmp	r1, #0
    3b8a:	bne.n	3c1a <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x34e>
    3b8c:	ldrsh.w	r1, [r2]
    3b90:	movs	r4, #6
    3b92:	ldrb.w	r6, [r0, #88]	; 0x58
    3b96:	ldrsh.w	r5, [r3]
    3b9a:	smlabb	r1, r4, r6, r1
        *x = 0;                                       // Reset x to zero,
        *y += textsize_y * 8;                         // advance y one line
      }
      int x2 = *x + textsize_x * 6 - 1, // Lower-right pixel of char
          y2 = *y + textsize_y * 8 - 1;
      if (x2 > *maxx)
    3b9e:	ldr	r6, [sp, #64]	; 0x40
    } else if (c != '\r') { // Normal char; ignore carriage returns
      if (wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
        *x = 0;                                       // Reset x to zero,
        *y += textsize_y * 8;                         // advance y one line
      }
      int x2 = *x + textsize_x * 6 - 1, // Lower-right pixel of char
    3ba0:	subs	r1, #1
          y2 = *y + textsize_y * 8 - 1;
    3ba2:	ldrb.w	r4, [r0, #89]	; 0x59
      if (x2 > *maxx)
    3ba6:	ldrsh.w	r6, [r6]
      if (wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
        *x = 0;                                       // Reset x to zero,
        *y += textsize_y * 8;                         // advance y one line
      }
      int x2 = *x + textsize_x * 6 - 1, // Lower-right pixel of char
          y2 = *y + textsize_y * 8 - 1;
    3baa:	add.w	r4, r5, r4, lsl #3
      if (x2 > *maxx)
    3bae:	cmp	r1, r6
      if (wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
        *x = 0;                                       // Reset x to zero,
        *y += textsize_y * 8;                         // advance y one line
      }
      int x2 = *x + textsize_x * 6 - 1, // Lower-right pixel of char
          y2 = *y + textsize_y * 8 - 1;
    3bb0:	add.w	r4, r4, #4294967295
      if (x2 > *maxx)
    3bb4:	ble.n	3bba <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x2ee>
        *maxx = x2; // Track max x, y
    3bb6:	ldr	r5, [sp, #64]	; 0x40
    3bb8:	strh	r1, [r5, #0]
      if (y2 > *maxy)
    3bba:	ldr	r1, [sp, #68]	; 0x44
    3bbc:	ldrsh.w	r1, [r1]
    3bc0:	cmp	r4, r1
    3bc2:	ble.n	3bc8 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x2fc>
        *maxy = y2;
    3bc4:	ldr	r1, [sp, #68]	; 0x44
    3bc6:	strh	r4, [r1, #0]
      if (*x < *minx)
    3bc8:	ldr	r4, [sp, #56]	; 0x38
    3bca:	ldrsh.w	r1, [r2]
    3bce:	ldrsh.w	r4, [r4]
    3bd2:	cmp	r4, r1
    3bd4:	ble.n	3bda <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x30e>
        *minx = *x; // Track min x, y
    3bd6:	ldr	r4, [sp, #56]	; 0x38
    3bd8:	strh	r1, [r4, #0]
      if (*y < *miny)
    3bda:	ldr	r1, [sp, #60]	; 0x3c
    3bdc:	ldrsh.w	r3, [r3]
    3be0:	ldrsh.w	r1, [r1]
    3be4:	cmp	r1, r3
    3be6:	ble.n	3bec <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x320>
        *miny = *y;
    3be8:	ldr	r1, [sp, #60]	; 0x3c
    3bea:	strh	r3, [r1, #0]
      *x += textsize_x * 6; // Advance x one char
    3bec:	ldrb.w	r3, [r0, #88]	; 0x58
    3bf0:	ldrh	r1, [r2, #0]
    3bf2:	add.w	r3, r3, r3, lsl #1
    3bf6:	add.w	r3, r1, r3, lsl #1
    3bfa:	strh	r3, [r2, #0]
    3bfc:	b.n	3a2c <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x160>
      if ((c >= first) && (c <= last)) { // Char present in this font?
        GFXglyph *glyph = gfxFont->glyph + (c - first);
        uint8_t gw = glyph->width, gh = glyph->height, xa = glyph->xAdvance;
        int8_t xo = glyph->xOffset, yo = glyph->yOffset + gfxFont->yAdvance / 2;
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
          *x = 0; // Reset x to zero, advance y by one line
    3bfe:	strh	r4, [r2, #0]
          *y += textsize_y * gfxFont->yAdvance;
    3c00:	ldrb	r4, [r5, #10]
    3c02:	ldrh	r1, [r3, #0]
    3c04:	ldrb.w	r5, [r0, #89]	; 0x59
    3c08:	mla	r1, r5, r4, r1
    3c0c:	sxth	r1, r1
    3c0e:	strh	r1, [r3, #0]
    3c10:	ldrb.w	lr, [r0, #88]	; 0x58
    3c14:	ldrsh.w	sl, [r2]
    3c18:	b.n	3aac <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1e0>
    if (c == '\n') {        // Newline?
      *x = 0;               // Reset x to zero,
      *y += textsize_y * 8; // advance y one line
      // min/max x/y unchaged -- that waits for next 'normal' character
    } else if (c != '\r') { // Normal char; ignore carriage returns
      if (wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
    3c1a:	ldrsh.w	r7, [r2]
    3c1e:	movs	r4, #6
    3c20:	ldrb.w	r1, [r0, #88]	; 0x58
    3c24:	ldrsh.w	r6, [r0, #32]
    3c28:	smlabb	r1, r4, r1, r7
    3c2c:	cmp	r1, r6
    3c2e:	bgt.n	3c46 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x37a>
    3c30:	ldrsh.w	r5, [r3]
    3c34:	b.n	3b9e <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x2d2>
    }

  } else { // Default font

    if (c == '\n') {        // Newline?
      *x = 0;               // Reset x to zero,
    3c36:	strh	r5, [r2, #0]
      *y += textsize_y * 8; // advance y one line
    3c38:	ldrb.w	r1, [r0, #89]	; 0x59
    3c3c:	ldrh	r2, [r3, #0]
    3c3e:	add.w	r2, r2, r1, lsl #3
    3c42:	strh	r2, [r3, #0]
    3c44:	b.n	3a2c <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x160>
      // min/max x/y unchaged -- that waits for next 'normal' character
    } else if (c != '\r') { // Normal char; ignore carriage returns
      if (wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
        *x = 0;                                       // Reset x to zero,
    3c46:	strh	r5, [r2, #0]
        *y += textsize_y * 8;                         // advance y one line
    3c48:	ldrh	r1, [r3, #0]
    3c4a:	ldrb.w	r5, [r0, #89]	; 0x59
    3c4e:	add.w	r5, r1, r5, lsl #3
    3c52:	sxth	r5, r5
    3c54:	strh	r5, [r3, #0]
    3c56:	ldrsh.w	r6, [r2]
    3c5a:	ldrb.w	r1, [r0, #88]	; 0x58
    3c5e:	smlabb	r1, r4, r1, r6
    3c62:	b.n	3b9e <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x2d2>

00003c64 <ILI9341_t3n::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)>:
}

// Add in Adafruit versions of text bounds calculations.
void ILI9341_t3n::getTextBounds(const uint8_t *buffer, uint16_t len, int16_t x,
                                int16_t y, int16_t *x1, int16_t *y1,
                                uint16_t *w, uint16_t *h) {
    3c64:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c68:	sub	sp, #36	; 0x24
  *x1 = x;
  *y1 = y;
  *w = *h = 0;
    3c6a:	movs	r6, #0

  int16_t minx = _width, miny = _height, maxx = -1, maxy = -1;
    3c6c:	movw	r4, #65535	; 0xffff

// Add in Adafruit versions of text bounds calculations.
void ILI9341_t3n::getTextBounds(const uint8_t *buffer, uint16_t len, int16_t x,
                                int16_t y, int16_t *x1, int16_t *y1,
                                uint16_t *w, uint16_t *h) {
  *x1 = x;
    3c70:	ldr	r7, [sp, #76]	; 0x4c
  *y1 = y;
    3c72:	ldrh.w	lr, [sp, #72]	; 0x48

// Add in Adafruit versions of text bounds calculations.
void ILI9341_t3n::getTextBounds(const uint8_t *buffer, uint16_t len, int16_t x,
                                int16_t y, int16_t *x1, int16_t *y1,
                                uint16_t *w, uint16_t *h) {
  *x1 = x;
    3c76:	strh	r3, [r7, #0]
}

// Add in Adafruit versions of text bounds calculations.
void ILI9341_t3n::getTextBounds(const uint8_t *buffer, uint16_t len, int16_t x,
                                int16_t y, int16_t *x1, int16_t *y1,
                                uint16_t *w, uint16_t *h) {
    3c78:	ldr.w	fp, [sp, #80]	; 0x50
  *x1 = x;
  *y1 = y;
  *w = *h = 0;
    3c7c:	ldr	r7, [sp, #88]	; 0x58
// Add in Adafruit versions of text bounds calculations.
void ILI9341_t3n::getTextBounds(const uint8_t *buffer, uint16_t len, int16_t x,
                                int16_t y, int16_t *x1, int16_t *y1,
                                uint16_t *w, uint16_t *h) {
  *x1 = x;
  *y1 = y;
    3c7e:	strh.w	lr, [fp]
  *w = *h = 0;
    3c82:	strh	r6, [r7, #0]
    3c84:	ldr	r7, [sp, #84]	; 0x54
}

// Add in Adafruit versions of text bounds calculations.
void ILI9341_t3n::getTextBounds(const uint8_t *buffer, uint16_t len, int16_t x,
                                int16_t y, int16_t *x1, int16_t *y1,
                                uint16_t *w, uint16_t *h) {
    3c86:	strh.w	r3, [sp, #22]
  *x1 = x;
  *y1 = y;
  *w = *h = 0;
    3c8a:	strh	r6, [r7, #0]

  int16_t minx = _width, miny = _height, maxx = -1, maxy = -1;
    3c8c:	ldrsh.w	lr, [r0, #32]
    3c90:	ldrsh.w	r7, [r0, #34]	; 0x22
    3c94:	strh.w	lr, [sp, #24]
    3c98:	strh.w	r7, [sp, #26]
    3c9c:	strh.w	r4, [sp, #28]
    3ca0:	strh.w	r4, [sp, #30]

  while (len--)
    3ca4:	cmp	r2, #0
    3ca6:	beq.n	3d1e <ILI9341_t3n::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)+0xba>
    3ca8:	subs	r5, r2, #1
    3caa:	mov	r6, r0
    3cac:	subs	r4, r1, #1
    3cae:	add.w	sl, sp, #30
    3cb2:	uxth	r5, r5
    3cb4:	add.w	r9, sp, #28
    3cb8:	add.w	r8, sp, #26
    3cbc:	add	r7, sp, #24
    3cbe:	add	r5, r1
    charBounds(*buffer++, &x, &y, &minx, &miny, &maxx, &maxy);
    3cc0:	ldrb.w	r1, [r4, #1]!
    3cc4:	add	r3, sp, #72	; 0x48
    3cc6:	str.w	sl, [sp, #12]
    3cca:	add.w	r2, sp, #22
    3cce:	str.w	r9, [sp, #8]
    3cd2:	mov	r0, r6
    3cd4:	str.w	r8, [sp, #4]
    3cd8:	str	r7, [sp, #0]
    3cda:	bl	38cc <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)>
  *y1 = y;
  *w = *h = 0;

  int16_t minx = _width, miny = _height, maxx = -1, maxy = -1;

  while (len--)
    3cde:	cmp	r4, r5
    3ce0:	bne.n	3cc0 <ILI9341_t3n::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)+0x5c>
    3ce2:	ldrsh.w	r2, [sp, #28]
    3ce6:	ldrsh.w	lr, [sp, #24]
    3cea:	ldrsh.w	r3, [sp, #30]
    3cee:	ldrsh.w	r7, [sp, #26]
    charBounds(*buffer++, &x, &y, &minx, &miny, &maxx, &maxy);

  if (maxx >= minx) {
    3cf2:	cmp	r2, lr
    3cf4:	blt.n	3d08 <ILI9341_t3n::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)+0xa4>
    *x1 = minx;
    *w = maxx - minx + 1;
    3cf6:	adds	r2, #1

  while (len--)
    charBounds(*buffer++, &x, &y, &minx, &miny, &maxx, &maxy);

  if (maxx >= minx) {
    *x1 = minx;
    3cf8:	ldr	r1, [sp, #76]	; 0x4c
    3cfa:	strh.w	lr, [r1]
    *w = maxx - minx + 1;
    3cfe:	rsb	lr, lr, r2
    3d02:	ldr	r2, [sp, #84]	; 0x54
    3d04:	strh.w	lr, [r2]
  }
  if (maxy >= miny) {
    3d08:	cmp	r7, r3
    3d0a:	bgt.n	3d18 <ILI9341_t3n::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)+0xb4>
    *y1 = miny;
    *h = maxy - miny + 1;
    3d0c:	adds	r3, #1
  if (maxx >= minx) {
    *x1 = minx;
    *w = maxx - minx + 1;
  }
  if (maxy >= miny) {
    *y1 = miny;
    3d0e:	strh.w	r7, [fp]
    *h = maxy - miny + 1;
    3d12:	subs	r7, r3, r7
    3d14:	ldr	r3, [sp, #88]	; 0x58
    3d16:	strh	r7, [r3, #0]
  }
}
    3d18:	add	sp, #36	; 0x24
    3d1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  *y1 = y;
  *w = *h = 0;

  int16_t minx = _width, miny = _height, maxx = -1, maxy = -1;

  while (len--)
    3d1e:	mov.w	r3, #4294967295
    3d22:	mov	r2, r3
    3d24:	b.n	3cf2 <ILI9341_t3n::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)+0x8e>
    3d26:	nop

00003d28 <ILI9341_t3n::gfxFontLastCharPosFG(short, short)>:

  uint8_t w = glyph->width, h = glyph->height;

  int16_t xo = glyph->xOffset; // sic
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;
  if (x >= _gfx_last_char_x_write)
    3d28:	ldrsh.w	r3, [r0, #132]	; 0x84
    3d2c:	cmp	r3, r1
    3d2e:	ble.n	3dc2 <ILI9341_t3n::gfxFontLastCharPosFG(short, short)+0x9a>
// Opaque font chracter overlap?
//	unsigned int _gfx_c_last;
//	int16_t   _gfx_last_cursor_x, _gfx_last_cursor_y;
//	int16_t	 _gfx_last_x_overlap = 0;

bool ILI9341_t3n::gfxFontLastCharPosFG(int16_t x, int16_t y) {
    3d30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GFXglyph *glyph = gfxFont->glyph + (_gfx_c_last - gfxFont->first);
    3d34:	ldr	r6, [r0, #116]	; 0x74
    3d36:	ldr	r5, [r0, #124]	; 0x7c
    3d38:	ldrb	r3, [r6, #8]
    3d3a:	ldr.w	ip, [r6, #4]
    3d3e:	subs	r5, r5, r3

  uint8_t w = glyph->width, h = glyph->height;

  int16_t xo = glyph->xOffset; // sic
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;
    3d40:	ldrb	r3, [r6, #10]
  if (x >= _gfx_last_char_x_write)
    return false; // we did not update here...
  if (y < (_gfx_last_cursor_y + (yo * textsize_y)))
    3d42:	ldrsh.w	r8, [r0, #130]	; 0x82
//	unsigned int _gfx_c_last;
//	int16_t   _gfx_last_cursor_x, _gfx_last_cursor_y;
//	int16_t	 _gfx_last_x_overlap = 0;

bool ILI9341_t3n::gfxFontLastCharPosFG(int16_t x, int16_t y) {
  GFXglyph *glyph = gfxFont->glyph + (_gfx_c_last - gfxFont->first);
    3d46:	add.w	r7, ip, r5, lsl #3

  int16_t xo = glyph->xOffset; // sic
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;
  if (x >= _gfx_last_char_x_write)
    return false; // we did not update here...
  if (y < (_gfx_last_cursor_y + (yo * textsize_y)))
    3d4a:	ldrb.w	lr, [r0, #89]	; 0x59
  GFXglyph *glyph = gfxFont->glyph + (_gfx_c_last - gfxFont->first);

  uint8_t w = glyph->width, h = glyph->height;

  int16_t xo = glyph->xOffset; // sic
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;
    3d4e:	ldrsb.w	r4, [r7, #6]
    3d52:	add.w	r3, r4, r3, lsr #1
  if (x >= _gfx_last_char_x_write)
    return false; // we did not update here...
  if (y < (_gfx_last_cursor_y + (yo * textsize_y)))
    3d56:	smlabb	r4, r3, lr, r8
    3d5a:	cmp	r2, r4
    3d5c:	blt.n	3dbc <ILI9341_t3n::gfxFontLastCharPosFG(short, short)+0x94>
    return false; // above
  if (y >= (_gfx_last_cursor_y + (yo + h) * textsize_y))
    3d5e:	ldrb.w	r9, [r7, #3]
    3d62:	add	r3, r9
    3d64:	mla	r3, lr, r3, r8
    3d68:	cmp	r2, r3
    3d6a:	bge.n	3dbc <ILI9341_t3n::gfxFontLastCharPosFG(short, short)+0x94>
bool ILI9341_t3n::gfxFontLastCharPosFG(int16_t x, int16_t y) {
  GFXglyph *glyph = gfxFont->glyph + (_gfx_c_last - gfxFont->first);

  uint8_t w = glyph->width, h = glyph->height;

  int16_t xo = glyph->xOffset; // sic
    3d6c:	ldrsb.w	r8, [r7, #5]
      (y - ((_gfx_last_cursor_y + (yo * textsize_y))) + textsize_y - 1) /
      textsize_y;
  int16_t x_bitmap =
      (x - ((_gfx_last_cursor_x + (xo * textsize_x))) + textsize_x - 1) /
      textsize_x;
  uint16_t pixel_bit_offset = y_bitmap * w + x_bitmap;
    3d70:	subs	r4, r2, r4
  // Lets compute which Row this y is in the bitmap
  int16_t y_bitmap =
      (y - ((_gfx_last_cursor_y + (yo * textsize_y))) + textsize_y - 1) /
      textsize_y;
  int16_t x_bitmap =
      (x - ((_gfx_last_cursor_x + (xo * textsize_x))) + textsize_x - 1) /
    3d72:	ldrsh.w	r9, [r0, #128]	; 0x80
    3d76:	ldrb.w	r2, [r0, #88]	; 0x58
      textsize_x;
  uint16_t pixel_bit_offset = y_bitmap * w + x_bitmap;
    3d7a:	add	r4, lr
    3d7c:	ldrb	r3, [r7, #2]
    3d7e:	smlabb	r0, r8, r2, r9
    3d82:	subs	r4, #1

  return ((gfxFont->bitmap[glyph->bitmapOffset + (pixel_bit_offset >> 3)]) &
    3d84:	ldr	r7, [r6, #0]
          (0x80 >> (pixel_bit_offset & 0x7)));
    3d86:	movs	r6, #128	; 0x80
      (y - ((_gfx_last_cursor_y + (yo * textsize_y))) + textsize_y - 1) /
      textsize_y;
  int16_t x_bitmap =
      (x - ((_gfx_last_cursor_x + (xo * textsize_x))) + textsize_x - 1) /
      textsize_x;
  uint16_t pixel_bit_offset = y_bitmap * w + x_bitmap;
    3d88:	subs	r1, r1, r0

  return ((gfxFont->bitmap[glyph->bitmapOffset + (pixel_bit_offset >> 3)]) &
    3d8a:	ldrh.w	r5, [ip, r5, lsl #3]
      (y - ((_gfx_last_cursor_y + (yo * textsize_y))) + textsize_y - 1) /
      textsize_y;
  int16_t x_bitmap =
      (x - ((_gfx_last_cursor_x + (xo * textsize_x))) + textsize_x - 1) /
      textsize_x;
  uint16_t pixel_bit_offset = y_bitmap * w + x_bitmap;
    3d8e:	add	r1, r2
    3d90:	sdiv	r0, r4, lr
    3d94:	smulbb	r0, r3, r0
    3d98:	subs	r1, #1
    3d9a:	sdiv	r2, r1, r2
    3d9e:	adds	r3, r0, r2
    3da0:	uxth	r3, r3

  return ((gfxFont->bitmap[glyph->bitmapOffset + (pixel_bit_offset >> 3)]) &
    3da2:	add.w	r7, r7, r3, lsr #3
          (0x80 >> (pixel_bit_offset & 0x7)));
    3da6:	and.w	r3, r3, #7
    3daa:	ldrb	r2, [r7, r5]
    3dac:	asr.w	r3, r6, r3
    3db0:	tst	r2, r3
    3db2:	ite	ne
    3db4:	movne	r0, #1
    3db6:	moveq	r0, #0
    3db8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  uint8_t w = glyph->width, h = glyph->height;

  int16_t xo = glyph->xOffset; // sic
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;
  if (x >= _gfx_last_char_x_write)
    return false; // we did not update here...
    3dbc:	movs	r0, #0
      textsize_x;
  uint16_t pixel_bit_offset = y_bitmap * w + x_bitmap;

  return ((gfxFont->bitmap[glyph->bitmapOffset + (pixel_bit_offset >> 3)]) &
          (0x80 >> (pixel_bit_offset & 0x7)));
}
    3dbe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  uint8_t w = glyph->width, h = glyph->height;

  int16_t xo = glyph->xOffset; // sic
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;
  if (x >= _gfx_last_char_x_write)
    return false; // we did not update here...
    3dc2:	movs	r0, #0
      textsize_x;
  uint16_t pixel_bit_offset = y_bitmap * w + x_bitmap;

  return ((gfxFont->bitmap[glyph->bitmapOffset + (pixel_bit_offset >> 3)]) &
          (0x80 >> (pixel_bit_offset & 0x7)));
}
    3dc4:	bx	lr
    3dc6:	nop

00003dc8 <ILI9341_t3n::waitFifoNotFull()>:
    tmp = _pkinetisk_spi->POPR;
  }
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
    3dc8:	ldr	r3, [r0, #28]
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    3dca:	ldr	r2, [r3, #112]	; 0x70
    3dcc:	lsls	r1, r2, #30
    3dce:	bmi.n	3dde <ILI9341_t3n::waitFifoNotFull()+0x16>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    3dd0:	ldrb.w	r2, [r0, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    3dd4:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    3dd6:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    3dd8:	cbz	r2, 3dde <ILI9341_t3n::waitFifoNotFull()+0x16>
        pending_rx_count--; // decrement count of bytes still levt
    3dda:	strb.w	r1, [r0, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    3dde:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    3de0:	lsls	r2, r2, #31
    3de2:	bpl.n	3dca <ILI9341_t3n::waitFifoNotFull()+0x2>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
}
    3de4:	bx	lr
    3de6:	nop

00003de8 <ILI9341_t3n::waitTransmitComplete()>:
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TCF) == 0);
}
void ILI9341_t3n::waitTransmitComplete(void) {
    3de8:	ldrb.w	r2, [r0, #146]	; 0x92
    3dec:	ldr	r1, [r0, #28]
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    3dee:	cbz	r2, 3e04 <ILI9341_t3n::waitTransmitComplete()+0x1c>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    3df0:	ldr	r3, [r1, #112]	; 0x70
    3df2:	lsls	r3, r3, #30
    3df4:	bmi.n	3dee <ILI9341_t3n::waitTransmitComplete()+0x6>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    3df6:	subs	r2, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    3df8:	ldr	r3, [r1, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
    3dfa:	uxtb	r2, r2
    3dfc:	strb.w	r2, [r0, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    3e00:	cmp	r2, #0
    3e02:	bne.n	3df0 <ILI9341_t3n::waitTransmitComplete()+0x8>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    3e04:	movw	r3, #513	; 0x201
    3e08:	str	r3, [r1, #16]
    3e0a:	bx	lr

00003e0c <ILI9341_t3n::updateScreen()>:
    _we_allocated_buffer = NULL;
  }
#endif
}
void ILI9341_t3n::updateScreen(void) // call to say update the screen now.
{
    3e0c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// Not sure if better here to check flag or check existence of buffer.
// Will go by buffer as maybe can do interesting things?
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    3e10:	ldrb.w	r3, [r0, #180]	; 0xb4
    _we_allocated_buffer = NULL;
  }
#endif
}
void ILI9341_t3n::updateScreen(void) // call to say update the screen now.
{
    3e14:	sub	sp, #20
    3e16:	mov	r4, r0
// Not sure if better here to check flag or check existence of buffer.
// Will go by buffer as maybe can do interesting things?
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    3e18:	cbnz	r3, 3e34 <ILI9341_t3n::updateScreen()+0x28>
#endif

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  void clearChangedRange() {
    _changed_min_x = 0x7fff;
    _changed_max_x = -1;
    3e1a:	movw	r3, #65535	; 0xffff

#endif

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  void clearChangedRange() {
    _changed_min_x = 0x7fff;
    3e1e:	movw	r2, #32767	; 0x7fff
    _changed_max_x = -1;
    3e22:	strh.w	r3, [r4, #190]	; 0xbe

#endif

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  void clearChangedRange() {
    _changed_min_x = 0x7fff;
    3e26:	strh.w	r2, [r4, #188]	; 0xbc
    _changed_max_x = -1;
    _changed_min_x = 0x7fff;
    _changed_max_y = -1;
    3e2a:	strh.w	r3, [r4, #194]	; 0xc2
    }
    endSPITransaction();
  }
  clearChangedRange(); // make sure the dirty range is updated.
#endif
}
    3e2e:	add	sp, #20
    3e30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    3e34:	movs	r3, #7
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    3e36:	ldr	r2, [r0, #20]
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    3e38:	ldr	r0, [r0, #8]
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    3e3a:	str	r3, [sp, #12]
    3e3c:	add	r3, sp, #16
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    3e3e:	str	r2, [sp, #8]
    3e40:	ldmdb	r3, {r1, r2}
    3e44:	bl	2d30 <SPIClass::beginTransaction(SPISettings)>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
    3e48:	ldr.w	r3, [r4, #172]	; 0xac
    3e4c:	cmp	r3, #0
    3e4e:	beq.w	4382 <ILI9341_t3n::updateScreen()+0x576>
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    3e52:	ldr.w	r3, [r4, #152]	; 0x98
    3e56:	cbz	r3, 3e60 <ILI9341_t3n::updateScreen()+0x54>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
    3e58:	ldr.w	r2, [r4, #148]	; 0x94
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
    3e5c:	str.w	r2, [r3, #136]	; 0x88
// Not sure if better here to check flag or check existence of buffer.
// Will go by buffer as maybe can do interesting things?
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    beginSPITransaction(_SPI_CLOCK);
    if (_standard && !_updateChangedAreasOnly) {
    3e60:	ldrb.w	r2, [r4, #63]	; 0x3f
    3e64:	cmp	r2, #0
    3e66:	beq.n	3f0a <ILI9341_t3n::updateScreen()+0xfe>
    3e68:	ldrb.w	r7, [r4, #196]	; 0xc4
    3e6c:	cmp	r7, #0
    3e6e:	beq.w	40f4 <ILI9341_t3n::updateScreen()+0x2e8>
    } else {
      // setup just to output the clip rectangle area anded with updated area if
      // enabled
      int16_t start_x = _displayclipx1;
      int16_t start_y = _displayclipy1;
      int16_t end_x = _displayclipx2 - 1;
    3e72:	ldrh	r6, [r4, #58]	; 0x3a
      int16_t end_y = _displayclipy2 - 1;
    3e74:	ldrh.w	r8, [r4, #60]	; 0x3c
    } else {
      // setup just to output the clip rectangle area anded with updated area if
      // enabled
      int16_t start_x = _displayclipx1;
      int16_t start_y = _displayclipy1;
      int16_t end_x = _displayclipx2 - 1;
    3e78:	subs	r6, #1
      }
      writedata16_last(*pftbft);
    } else {
      // setup just to output the clip rectangle area anded with updated area if
      // enabled
      int16_t start_x = _displayclipx1;
    3e7a:	ldrsh.w	r5, [r4, #54]	; 0x36
      int16_t start_y = _displayclipy1;
      int16_t end_x = _displayclipx2 - 1;
      int16_t end_y = _displayclipy2 - 1;
    3e7e:	add.w	r8, r8, #4294967295
      writedata16_last(*pftbft);
    } else {
      // setup just to output the clip rectangle area anded with updated area if
      // enabled
      int16_t start_x = _displayclipx1;
      int16_t start_y = _displayclipy1;
    3e82:	ldrsh.w	r9, [r4, #56]	; 0x38
      int16_t end_x = _displayclipx2 - 1;
    3e86:	sxth	r6, r6
      int16_t end_y = _displayclipy2 - 1;
    3e88:	sxth.w	r8, r8

      if (_updateChangedAreasOnly) {
        // maybe update range of values to update...
        if (_changed_min_x > start_x)
    3e8c:	ldrsh.w	r1, [r4, #188]	; 0xbc
          start_x = _changed_min_x;
        if (_changed_min_y > start_y)
    3e90:	ldrsh.w	r2, [r4, #192]	; 0xc0
    3e94:	cmp	r5, r1
    3e96:	it	lt
    3e98:	movlt	r5, r1
    3e9a:	cmp	r9, r2
          start_y = _changed_min_y;
        if (_changed_max_x < end_x)
    3e9c:	ldrsh.w	r1, [r4, #190]	; 0xbe
    3ea0:	it	lt
    3ea2:	movlt	r9, r2
          end_x = _changed_max_x;
        if (_changed_max_y < end_y)
    3ea4:	ldrsh.w	r2, [r4, #194]	; 0xc2
    3ea8:	cmp	r6, r1
    3eaa:	it	ge
    3eac:	movge	r6, r1
    3eae:	cmp	r8, r2
    3eb0:	it	ge
    3eb2:	movge	r8, r2
          end_y = _changed_max_y;
      }

      // Only do if actual area to update
      if ((start_x <= end_x) && (start_y <= end_y)) {
    3eb4:	cmp	r5, r6
    3eb6:	bgt.n	3ebc <ILI9341_t3n::updateScreen()+0xb0>
    3eb8:	cmp	r9, r8
    3eba:	ble.n	3f2e <ILI9341_t3n::updateScreen()+0x122>
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    3ebc:	cbz	r3, 3ec6 <ILI9341_t3n::updateScreen()+0xba>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
    3ebe:	ldr.w	r2, [r4, #148]	; 0x94
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    3ec2:	str.w	r2, [r3, #132]	; 0x84
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
#endif
    }
    _pspi->endTransaction();
    3ec6:	ldr	r2, [r4, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    3ec8:	ldrb	r3, [r2, #19]
    3eca:	cmp	r3, #0
    3ecc:	beq.n	3e1a <ILI9341_t3n::updateScreen()+0xe>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    3ece:	lsls	r6, r3, #31
    3ed0:	bpl.n	3eda <ILI9341_t3n::updateScreen()+0xce>
    3ed2:	ldr	r3, [pc, #512]	; (40d4 <ILI9341_t3n::updateScreen()+0x2c8>)
    3ed4:	ldr	r1, [r2, #40]	; 0x28
    3ed6:	str	r1, [r3, #0]
    3ed8:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    3eda:	lsls	r5, r3, #30
    3edc:	bpl.n	3ee6 <ILI9341_t3n::updateScreen()+0xda>
    3ede:	ldr	r3, [pc, #504]	; (40d8 <ILI9341_t3n::updateScreen()+0x2cc>)
    3ee0:	ldr	r1, [r2, #44]	; 0x2c
    3ee2:	str	r1, [r3, #0]
    3ee4:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    3ee6:	lsls	r0, r3, #29
    3ee8:	bpl.n	3ef2 <ILI9341_t3n::updateScreen()+0xe6>
    3eea:	ldr	r3, [pc, #496]	; (40dc <ILI9341_t3n::updateScreen()+0x2d0>)
    3eec:	ldr	r1, [r2, #48]	; 0x30
    3eee:	str	r1, [r3, #0]
    3ef0:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    3ef2:	lsls	r1, r3, #28
    3ef4:	bpl.n	3efe <ILI9341_t3n::updateScreen()+0xf2>
    3ef6:	ldr	r3, [pc, #488]	; (40e0 <ILI9341_t3n::updateScreen()+0x2d4>)
    3ef8:	ldr	r1, [r2, #52]	; 0x34
    3efa:	str	r1, [r3, #0]
    3efc:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    3efe:	lsls	r3, r3, #27
    3f00:	bpl.n	3e1a <ILI9341_t3n::updateScreen()+0xe>
    3f02:	ldr	r2, [r2, #56]	; 0x38
    3f04:	ldr	r3, [pc, #476]	; (40e4 <ILI9341_t3n::updateScreen()+0x2d8>)
    3f06:	str	r2, [r3, #0]
    3f08:	b.n	3e1a <ILI9341_t3n::updateScreen()+0xe>
    } else {
      // setup just to output the clip rectangle area anded with updated area if
      // enabled
      int16_t start_x = _displayclipx1;
      int16_t start_y = _displayclipy1;
      int16_t end_x = _displayclipx2 - 1;
    3f0a:	ldrh	r6, [r4, #58]	; 0x3a
      int16_t end_y = _displayclipy2 - 1;
    3f0c:	ldrh.w	r8, [r4, #60]	; 0x3c
    } else {
      // setup just to output the clip rectangle area anded with updated area if
      // enabled
      int16_t start_x = _displayclipx1;
      int16_t start_y = _displayclipy1;
      int16_t end_x = _displayclipx2 - 1;
    3f10:	subs	r6, #1
      int16_t end_y = _displayclipy2 - 1;

      if (_updateChangedAreasOnly) {
    3f12:	ldrb.w	r2, [r4, #196]	; 0xc4
      // setup just to output the clip rectangle area anded with updated area if
      // enabled
      int16_t start_x = _displayclipx1;
      int16_t start_y = _displayclipy1;
      int16_t end_x = _displayclipx2 - 1;
      int16_t end_y = _displayclipy2 - 1;
    3f16:	add.w	r8, r8, #4294967295
      }
      writedata16_last(*pftbft);
    } else {
      // setup just to output the clip rectangle area anded with updated area if
      // enabled
      int16_t start_x = _displayclipx1;
    3f1a:	ldrsh.w	r5, [r4, #54]	; 0x36
      int16_t start_y = _displayclipy1;
      int16_t end_x = _displayclipx2 - 1;
    3f1e:	sxth	r6, r6
      writedata16_last(*pftbft);
    } else {
      // setup just to output the clip rectangle area anded with updated area if
      // enabled
      int16_t start_x = _displayclipx1;
      int16_t start_y = _displayclipy1;
    3f20:	ldrsh.w	r9, [r4, #56]	; 0x38
      int16_t end_x = _displayclipx2 - 1;
      int16_t end_y = _displayclipy2 - 1;
    3f24:	sxth.w	r8, r8

      if (_updateChangedAreasOnly) {
    3f28:	cmp	r2, #0
    3f2a:	beq.n	3eb4 <ILI9341_t3n::updateScreen()+0xa8>
    3f2c:	b.n	3e8c <ILI9341_t3n::updateScreen()+0x80>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    3f2e:	ldr.w	r1, [r4, #164]	; 0xa4
          end_y = _changed_max_y;
      }

      // Only do if actual area to update
      if ((start_x <= end_x) && (start_y <= end_y)) {
        setAddr(start_x, start_y, end_x, end_y);
    3f32:	uxth.w	r3, r9
    3f36:	mov	r0, r4
    3f38:	uxth.w	sl, r5
    3f3c:	orr.w	r1, r1, #7
    3f40:	mov	r7, r3
    3f42:	str	r3, [sp, #4]
    3f44:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    3f48:	movs	r2, #42	; 0x2a
    3f4a:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    3f4c:	mov	r0, r4
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    3f4e:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    3f50:	ldrb.w	r3, [r4, #146]	; 0x92
    3f54:	adds	r3, #1
    3f56:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    3f5a:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    3f5e:	ldr.w	r3, [r4, #168]	; 0xa8
    3f62:	ldr	r1, [pc, #388]	; (40e8 <ILI9341_t3n::updateScreen()+0x2dc>)
    3f64:	mov	r0, r4
    3f66:	orrs	r1, r3
    3f68:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    3f6c:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    3f6e:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    3f70:	str.w	sl, [r3, #100]	; 0x64
    pending_rx_count++; //
    3f74:	ldrb.w	r3, [r4, #146]	; 0x92
    3f78:	adds	r3, #1
    3f7a:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    3f7e:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    3f82:	ldr.w	r3, [r4, #168]	; 0xa8
    3f86:	ldr	r1, [pc, #352]	; (40e8 <ILI9341_t3n::updateScreen()+0x2dc>)
    3f88:	mov	r0, r4
    3f8a:	orrs	r1, r3
    3f8c:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    3f90:	ldr	r3, [r4, #28]
    3f92:	uxth	r2, r6
    pending_rx_count++; //
    waitFifoNotFull();
    3f94:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    3f96:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    3f98:	ldrb.w	r3, [r4, #146]	; 0x92
    3f9c:	adds	r3, #1
    3f9e:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    3fa2:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    3fa6:	ldr.w	r1, [r4, #164]	; 0xa4
    3faa:	mov	r0, r4
    3fac:	orr.w	r1, r1, #7
    3fb0:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    3fb4:	movs	r2, #43	; 0x2b
    3fb6:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    3fb8:	mov	r0, r4
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    3fba:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    3fbc:	ldrb.w	r3, [r4, #146]	; 0x92
    3fc0:	adds	r3, #1
    3fc2:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    3fc6:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    3fca:	ldr.w	r3, [r4, #168]	; 0xa8
    3fce:	ldr	r1, [pc, #280]	; (40e8 <ILI9341_t3n::updateScreen()+0x2dc>)
    3fd0:	mov	r0, r4
    3fd2:	orrs	r1, r3
    3fd4:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    3fd8:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    3fda:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    3fdc:	str	r7, [r3, #100]	; 0x64
    pending_rx_count++; //
    3fde:	ldrb.w	r3, [r4, #146]	; 0x92
    3fe2:	adds	r3, #1
    3fe4:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    3fe8:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    3fec:	ldr.w	r3, [r4, #168]	; 0xa8
    3ff0:	ldr	r1, [pc, #244]	; (40e8 <ILI9341_t3n::updateScreen()+0x2dc>)
    3ff2:	mov	r0, r4
    3ff4:	orrs	r1, r3
    3ff6:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    3ffa:	ldr	r3, [r4, #28]
    3ffc:	uxth.w	r2, r8
    pending_rx_count++; //
    waitFifoNotFull();
    4000:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    4002:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    4004:	ldrb.w	r3, [r4, #146]	; 0x92
    4008:	adds	r3, #1
    400a:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    400e:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    4012:	ldr.w	r1, [r4, #164]	; 0xa4
    4016:	mov	r0, r4
    4018:	orr.w	r1, r1, #7
    401c:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    4020:	ldr	r3, [r4, #28]
    4022:	movs	r2, #44	; 0x2c
    pending_rx_count++; //
    waitFifoNotFull();
    4024:	mov	r0, r4
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    4026:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    4028:	ldrb.w	r3, [r4, #146]	; 0x92
    402c:	adds	r3, #1
    402e:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    4032:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
        writecommand_cont(ILI9341_RAMWR);

        // BUGBUG doing as one shot.  Not sure if should or not or do like
        // main code and break up into transactions...
        uint16_t *pfbPixel_row = &_pfbtft[start_y * _width + start_x];
    4036:	ldrsh.w	r2, [r4, #32]
    403a:	ldr.w	r3, [r4, #176]	; 0xb0
        for (uint16_t y = start_y; y <= end_y; y++) {
    403e:	cmp	r8, r7
        setAddr(start_x, start_y, end_x, end_y);
        writecommand_cont(ILI9341_RAMWR);

        // BUGBUG doing as one shot.  Not sure if should or not or do like
        // main code and break up into transactions...
        uint16_t *pfbPixel_row = &_pfbtft[start_y * _width + start_x];
    4040:	mla	r9, r9, r2, r5
    4044:	add.w	r9, r3, r9, lsl #1
        for (uint16_t y = start_y; y <= end_y; y++) {
    4048:	blt.w	42ec <ILI9341_t3n::updateScreen()+0x4e0>
          uint16_t *pfbPixel = pfbPixel_row;
          for (uint16_t x = start_x; x < end_x; x++) {
    404c:	cmp	sl, r6
    404e:	bge.w	437e <ILI9341_t3n::updateScreen()+0x572>
    4052:	mov	r5, sl
    4054:	mov	fp, r9
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    4056:	ldr.w	lr, [r4, #168]	; 0xa8
    405a:	ldr	r3, [pc, #140]	; (40e8 <ILI9341_t3n::updateScreen()+0x2dc>)
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
    405c:	ldr.w	r7, [r4, #156]	; 0x9c
    4060:	ldr	r2, [pc, #136]	; (40ec <ILI9341_t3n::updateScreen()+0x2e0>)
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    4062:	orr.w	r3, lr, r3
            writedata16_cont(*pfbPixel++);
    4066:	ldrh.w	r1, [fp], #2
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
    406a:	ands	r2, r7
    406c:	cmp	r3, r2
    406e:	beq.w	4342 <ILI9341_t3n::updateScreen()+0x536>
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    4072:	ldr	r0, [pc, #124]	; (40f0 <ILI9341_t3n::updateScreen()+0x2e4>)
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    4074:	eor.w	r2, r3, r7
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    4078:	ands	r0, r7
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    407a:	tst.w	r2, #50331648	; 0x3000000
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    407e:	orr.w	r0, r0, r3
    4082:	str.w	r0, [r4, #156]	; 0x9c
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    4086:	beq.w	4284 <ILI9341_t3n::updateScreen()+0x478>
    408a:	ldr.w	r7, [r4, #160]	; 0xa0
    408e:	cmp	r7, #0
    4090:	beq.w	4284 <ILI9341_t3n::updateScreen()+0x478>
    4094:	ldrb.w	r0, [r4, #146]	; 0x92
    4098:	ldr	r3, [r4, #28]
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    409a:	cbz	r0, 40b0 <ILI9341_t3n::updateScreen()+0x2a4>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    409c:	ldr	r2, [r3, #112]	; 0x70
    409e:	lsls	r2, r2, #30
    40a0:	bmi.n	409a <ILI9341_t3n::updateScreen()+0x28e>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    40a2:	subs	r0, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    40a4:	ldr	r2, [r3, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
    40a6:	uxtb	r0, r0
    40a8:	strb.w	r0, [r4, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    40ac:	cmp	r0, #0
    40ae:	bne.n	409c <ILI9341_t3n::updateScreen()+0x290>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    40b0:	movw	r2, #513	; 0x201
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
    40b4:	tst.w	lr, #50331648	; 0x3000000
    40b8:	str	r2, [r3, #16]
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
    40ba:	ldr.w	r2, [r4, #172]	; 0xac
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
    40be:	beq.w	434a <ILI9341_t3n::updateScreen()+0x53e>
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    40c2:	str.w	r7, [r2, #132]	; 0x84
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
        else
          DIRECT_WRITE_LOW(_dcport, _dcpinmask);
        _pimxrt_spi->TCR = _spi_tcr_current &
    40c6:	ldr.w	r2, [r4, #156]	; 0x9c
    40ca:	bic.w	r2, r2, #52428800	; 0x3200000
                           ~(LPSPI_TCR_PCS(3) |
                             LPSPI_TCR_CONT); // go ahead and update TCR anyway?
    40ce:	str	r2, [r3, #96]	; 0x60
    40d0:	b.n	428e <ILI9341_t3n::updateScreen()+0x482>
    40d2:	nop
    40d4:	.word	0xe000e100
    40d8:	.word	0xe000e104
    40dc:	.word	0xe000e108
    40e0:	.word	0xe000e10c
    40e4:	.word	0xe000e110
    40e8:	.word	0x0020000f
    40ec:	.word	0x0328001f
    40f0:	.word	0xfcd7ffe0
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    40f4:	ldr.w	r1, [r4, #164]	; 0xa4
    40f8:	mov	r0, r4
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    beginSPITransaction(_SPI_CLOCK);
    if (_standard && !_updateChangedAreasOnly) {
      // Doing full window.
      setAddr(0, 0, _width - 1, _height - 1);
    40fa:	ldrh.w	r9, [r4, #32]
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    40fe:	movw	r6, #513	; 0x201
    4102:	orr.w	r1, r1, #7
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    beginSPITransaction(_SPI_CLOCK);
    if (_standard && !_updateChangedAreasOnly) {
      // Doing full window.
      setAddr(0, 0, _width - 1, _height - 1);
    4106:	ldrh.w	r8, [r4, #34]	; 0x22
    410a:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    410e:	movs	r2, #42	; 0x2a
    4110:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    4112:	mov	r0, r4
    4114:	add.w	r9, r9, #4294967295
    4118:	add.w	r8, r8, #4294967295
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    411c:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    411e:	ldrb.w	r3, [r4, #146]	; 0x92
    4122:	uxth.w	r9, r9
    4126:	uxth.w	r8, r8
      writecommand_cont(ILI9341_RAMWR);

      // BUGBUG doing as one shot.  Not sure if should or not or do like
      // main code and break up into transactions...
      uint16_t *pfbtft_end =
          &_pfbtft[(ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT) - 1]; // setup
    412a:	ldr	r5, [pc, #608]	; (438c <ILI9341_t3n::updateScreen()+0x580>)
    412c:	adds	r3, #1
    412e:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    4132:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    4136:	ldr.w	r3, [r4, #168]	; 0xa8
    413a:	ldr	r1, [pc, #596]	; (4390 <ILI9341_t3n::updateScreen()+0x584>)
    413c:	mov	r0, r4
    413e:	orrs	r1, r3
    4140:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    4144:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    4146:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    4148:	str	r7, [r3, #100]	; 0x64
    pending_rx_count++; //
    414a:	ldrb.w	r3, [r4, #146]	; 0x92
    414e:	adds	r3, #1
    4150:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    4154:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    4158:	ldr.w	r3, [r4, #168]	; 0xa8
    415c:	ldr	r1, [pc, #560]	; (4390 <ILI9341_t3n::updateScreen()+0x584>)
    415e:	mov	r0, r4
    4160:	orrs	r1, r3
    4162:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    4166:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    4168:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    416a:	str.w	r9, [r3, #100]	; 0x64
    pending_rx_count++; //
    416e:	ldrb.w	r3, [r4, #146]	; 0x92
    4172:	adds	r3, #1
    4174:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    4178:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    417c:	ldr.w	r1, [r4, #164]	; 0xa4
    4180:	mov	r0, r4
    4182:	orr.w	r1, r1, #7
    4186:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    418a:	movs	r2, #43	; 0x2b
    418c:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    418e:	mov	r0, r4
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    4190:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    4192:	ldrb.w	r3, [r4, #146]	; 0x92
    4196:	adds	r3, #1
    4198:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    419c:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    41a0:	ldr.w	r3, [r4, #168]	; 0xa8
    41a4:	ldr	r1, [pc, #488]	; (4390 <ILI9341_t3n::updateScreen()+0x584>)
    41a6:	mov	r0, r4
    41a8:	orrs	r1, r3
    41aa:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    41ae:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    41b0:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    41b2:	str	r7, [r3, #100]	; 0x64
    pending_rx_count++; //
    41b4:	ldrb.w	r3, [r4, #146]	; 0x92
    41b8:	adds	r3, #1
    41ba:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    41be:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    41c2:	ldr.w	r3, [r4, #168]	; 0xa8
    41c6:	ldr	r1, [pc, #456]	; (4390 <ILI9341_t3n::updateScreen()+0x584>)
    41c8:	mov	r0, r4
    41ca:	orrs	r1, r3
    41cc:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    41d0:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    41d2:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    41d4:	str.w	r8, [r3, #100]	; 0x64
    pending_rx_count++; //
    41d8:	ldrb.w	r3, [r4, #146]	; 0x92
    41dc:	adds	r3, #1
    41de:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    41e2:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    41e6:	ldr.w	r1, [r4, #164]	; 0xa4
    41ea:	mov	r0, r4
    41ec:	orr.w	r1, r1, #7
    41f0:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    41f4:	ldr	r3, [r4, #28]
    41f6:	movs	r2, #44	; 0x2c
    pending_rx_count++; //
    waitFifoNotFull();
    41f8:	mov	r0, r4
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    41fa:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    41fc:	ldrb.w	r3, [r4, #146]	; 0x92
    4200:	adds	r3, #1
    4202:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    4206:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    420a:	ldr.w	r9, [r4, #176]	; 0xb0
    420e:	add	r5, r9
    4210:	mov	r8, r9
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    4212:	ldr.w	lr, [r4, #168]	; 0xa8
    4216:	ldr	r3, [pc, #376]	; (4390 <ILI9341_t3n::updateScreen()+0x584>)
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
    4218:	ldr.w	r7, [r4, #156]	; 0x9c
    421c:	ldr	r2, [pc, #372]	; (4394 <ILI9341_t3n::updateScreen()+0x588>)
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    421e:	orr.w	r3, lr, r3
      uint16_t *pftbft = _pfbtft;

      // Quick write out the data;
      while (pftbft < pfbtft_end) {
        writedata16_cont(*pftbft++);
    4222:	ldrh.w	r0, [r8], #2
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
    4226:	ands	r2, r7
    4228:	cmp	r3, r2
    422a:	beq.w	4346 <ILI9341_t3n::updateScreen()+0x53a>
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    422e:	ldr	r1, [pc, #360]	; (4398 <ILI9341_t3n::updateScreen()+0x58c>)
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    4230:	eor.w	r2, r3, r7
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    4234:	ands	r1, r7
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    4236:	tst.w	r2, #50331648	; 0x3000000
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    423a:	orr.w	r1, r1, r3
    423e:	str.w	r1, [r4, #156]	; 0x9c
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    4242:	beq.n	42f2 <ILI9341_t3n::updateScreen()+0x4e6>
    4244:	ldr.w	r7, [r4, #160]	; 0xa0
    4248:	cmp	r7, #0
    424a:	beq.n	42f2 <ILI9341_t3n::updateScreen()+0x4e6>
    424c:	ldrb.w	r1, [r4, #146]	; 0x92
    4250:	ldr	r3, [r4, #28]
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    4252:	cbz	r1, 4268 <ILI9341_t3n::updateScreen()+0x45c>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    4254:	ldr	r2, [r3, #112]	; 0x70
    4256:	lsls	r2, r2, #30
    4258:	bmi.n	4252 <ILI9341_t3n::updateScreen()+0x446>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    425a:	subs	r1, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    425c:	ldr	r2, [r3, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
    425e:	uxtb	r1, r1
    4260:	strb.w	r1, [r4, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    4264:	cmp	r1, #0
    4266:	bne.n	4254 <ILI9341_t3n::updateScreen()+0x448>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
    4268:	tst.w	lr, #50331648	; 0x3000000
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    426c:	str	r6, [r3, #16]
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
    426e:	ldr.w	r2, [r4, #172]	; 0xac
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
    4272:	beq.n	4350 <ILI9341_t3n::updateScreen()+0x544>
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    4274:	str.w	r7, [r2, #132]	; 0x84
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
        else
          DIRECT_WRITE_LOW(_dcport, _dcpinmask);
        _pimxrt_spi->TCR = _spi_tcr_current &
    4278:	ldr.w	r2, [r4, #156]	; 0x9c
    427c:	bic.w	r2, r2, #52428800	; 0x3200000
                           ~(LPSPI_TCR_PCS(3) |
                             LPSPI_TCR_CONT); // go ahead and update TCR anyway?
    4280:	str	r2, [r3, #96]	; 0x60
    4282:	b.n	42fc <ILI9341_t3n::updateScreen()+0x4f0>
    4284:	ldr	r3, [r4, #28]
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
        while ((_pimxrt_spi->FSR & 0x1f))
    4286:	ldr	r2, [r3, #92]	; 0x5c
    4288:	lsls	r7, r2, #27
    428a:	bne.n	4286 <ILI9341_t3n::updateScreen()+0x47a>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR
    428c:	str	r0, [r3, #96]	; 0x60
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    428e:	str	r1, [r3, #100]	; 0x64
        // BUGBUG doing as one shot.  Not sure if should or not or do like
        // main code and break up into transactions...
        uint16_t *pfbPixel_row = &_pfbtft[start_y * _width + start_x];
        for (uint16_t y = start_y; y <= end_y; y++) {
          uint16_t *pfbPixel = pfbPixel_row;
          for (uint16_t x = start_x; x < end_x; x++) {
    4290:	adds	r5, #1
    pending_rx_count++; //
    4292:	ldrb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    4296:	mov	r0, r4
    4298:	uxth	r5, r5
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    pending_rx_count++; //
    429a:	adds	r3, #1
    429c:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    42a0:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    42a4:	cmp	r5, r6
    42a6:	blt.w	4056 <ILI9341_t3n::updateScreen()+0x24a>
            writedata16_cont(*pfbPixel++);
          }
          if (y < (end_y))
    42aa:	ldr	r3, [sp, #4]
    42ac:	cmp	r8, r3
    42ae:	ble.n	4356 <ILI9341_t3n::updateScreen()+0x54a>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    42b0:	ldr.w	r3, [r4, #168]	; 0xa8
    42b4:	mov	r0, r4
    42b6:	ldr	r1, [pc, #216]	; (4390 <ILI9341_t3n::updateScreen()+0x584>)
            writedata16_cont(*pfbPixel);
    42b8:	ldrh.w	r5, [fp]
    42bc:	orrs	r1, r3
    42be:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    42c2:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    42c4:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    42c6:	str	r5, [r3, #100]	; 0x64
    pending_rx_count++; //
    42c8:	ldrb.w	r3, [r4, #146]	; 0x92
    42cc:	adds	r3, #1
    42ce:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    42d2:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
        writecommand_cont(ILI9341_RAMWR);

        // BUGBUG doing as one shot.  Not sure if should or not or do like
        // main code and break up into transactions...
        uint16_t *pfbPixel_row = &_pfbtft[start_y * _width + start_x];
        for (uint16_t y = start_y; y <= end_y; y++) {
    42d6:	ldr	r7, [sp, #4]
          }
          if (y < (end_y))
            writedata16_cont(*pfbPixel);
          else
            writedata16_last(*pfbPixel);
          pfbPixel_row += _width; // setup for the next row.
    42d8:	ldrsh.w	r3, [r4, #32]
        writecommand_cont(ILI9341_RAMWR);

        // BUGBUG doing as one shot.  Not sure if should or not or do like
        // main code and break up into transactions...
        uint16_t *pfbPixel_row = &_pfbtft[start_y * _width + start_x];
        for (uint16_t y = start_y; y <= end_y; y++) {
    42dc:	adds	r7, #1
          }
          if (y < (end_y))
            writedata16_cont(*pfbPixel);
          else
            writedata16_last(*pfbPixel);
          pfbPixel_row += _width; // setup for the next row.
    42de:	add.w	r9, r9, r3, lsl #1
        writecommand_cont(ILI9341_RAMWR);

        // BUGBUG doing as one shot.  Not sure if should or not or do like
        // main code and break up into transactions...
        uint16_t *pfbPixel_row = &_pfbtft[start_y * _width + start_x];
        for (uint16_t y = start_y; y <= end_y; y++) {
    42e2:	uxth	r2, r7
    42e4:	cmp	r8, r2
    42e6:	str	r2, [sp, #4]
    42e8:	bge.w	404c <ILI9341_t3n::updateScreen()+0x240>
    42ec:	ldr.w	r3, [r4, #152]	; 0x98
    42f0:	b.n	3ebc <ILI9341_t3n::updateScreen()+0xb0>
    42f2:	ldr	r3, [r4, #28]
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
        while ((_pimxrt_spi->FSR & 0x1f))
    42f4:	ldr	r2, [r3, #92]	; 0x5c
    42f6:	lsls	r7, r2, #27
    42f8:	bne.n	42f4 <ILI9341_t3n::updateScreen()+0x4e8>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR
    42fa:	str	r1, [r3, #96]	; 0x60
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    42fc:	str	r0, [r3, #100]	; 0x64
    pending_rx_count++; //
    waitFifoNotFull();
    42fe:	mov	r0, r4
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    pending_rx_count++; //
    4300:	ldrb.w	r3, [r4, #146]	; 0x92
    4304:	adds	r3, #1
    4306:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    430a:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
      uint16_t *pfbtft_end =
          &_pfbtft[(ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT) - 1]; // setup
      uint16_t *pftbft = _pfbtft;

      // Quick write out the data;
      while (pftbft < pfbtft_end) {
    430e:	cmp	r5, r8
    4310:	bne.w	4212 <ILI9341_t3n::updateScreen()+0x406>
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    waitTransmitComplete();
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15));
    4314:	ldr.w	r1, [r4, #168]	; 0xa8
    4318:	mov	r0, r4
        writedata16_cont(*pftbft++);
      }
      writedata16_last(*pftbft);
    431a:	ldr	r3, [pc, #112]	; (438c <ILI9341_t3n::updateScreen()+0x580>)
    431c:	orr.w	r1, r1, #15
    4320:	ldrh.w	r5, [r9, r3]
    4324:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    4328:	ldr	r3, [r4, #28]
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    waitTransmitComplete();
    432a:	mov	r0, r4
    pending_rx_count++; //
    waitTransmitComplete();
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15));
    _pimxrt_spi->TDR = d;
    432c:	str	r5, [r3, #100]	; 0x64
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    432e:	ldrb.w	r3, [r4, #146]	; 0x92
    4332:	adds	r3, #1
    4334:	strb.w	r3, [r4, #146]	; 0x92
    waitTransmitComplete();
    4338:	bl	3de8 <ILI9341_t3n::waitTransmitComplete()>
    433c:	ldr.w	r3, [r4, #152]	; 0x98
    4340:	b.n	3ebc <ILI9341_t3n::updateScreen()+0xb0>
    4342:	ldr	r3, [r4, #28]
    4344:	b.n	428e <ILI9341_t3n::updateScreen()+0x482>
    4346:	ldr	r3, [r4, #28]
    4348:	b.n	42fc <ILI9341_t3n::updateScreen()+0x4f0>
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
    434a:	str.w	r7, [r2, #136]	; 0x88
    434e:	b.n	40c6 <ILI9341_t3n::updateScreen()+0x2ba>
    4350:	str.w	r7, [r2, #136]	; 0x88
    4354:	b.n	4278 <ILI9341_t3n::updateScreen()+0x46c>
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    waitTransmitComplete();
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15));
    4356:	ldr.w	r1, [r4, #168]	; 0xa8
    435a:	mov	r0, r4
            writedata16_cont(*pfbPixel++);
          }
          if (y < (end_y))
            writedata16_cont(*pfbPixel);
          else
            writedata16_last(*pfbPixel);
    435c:	ldrh.w	r5, [fp]
    4360:	orr.w	r1, r1, #15
    4364:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    4368:	ldr	r3, [r4, #28]
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    waitTransmitComplete();
    436a:	mov	r0, r4
    pending_rx_count++; //
    waitTransmitComplete();
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15));
    _pimxrt_spi->TDR = d;
    436c:	str	r5, [r3, #100]	; 0x64
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    436e:	ldrb.w	r3, [r4, #146]	; 0x92
    4372:	adds	r3, #1
    4374:	strb.w	r3, [r4, #146]	; 0x92
    waitTransmitComplete();
    4378:	bl	3de8 <ILI9341_t3n::waitTransmitComplete()>
    437c:	b.n	42d6 <ILI9341_t3n::updateScreen()+0x4ca>
        // BUGBUG doing as one shot.  Not sure if should or not or do like
        // main code and break up into transactions...
        uint16_t *pfbPixel_row = &_pfbtft[start_y * _width + start_x];
        for (uint16_t y = start_y; y <= end_y; y++) {
          uint16_t *pfbPixel = pfbPixel_row;
          for (uint16_t x = start_x; x < end_x; x++) {
    437e:	mov	fp, r9
    4380:	b.n	42aa <ILI9341_t3n::updateScreen()+0x49e>

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
    4382:	ldr	r3, [r4, #28]
    4384:	ldr	r3, [r3, #96]	; 0x60
    4386:	str.w	r3, [r4, #156]	; 0x9c
    438a:	b.n	3e52 <ILI9341_t3n::updateScreen()+0x46>
    438c:	.word	0x000257fe
    4390:	.word	0x0020000f
    4394:	.word	0x0328001f
    4398:	.word	0xfcd7ffe0

0000439c <ILI9341_t3n::drawPixel(short, short, unsigned short)>:
  beginSPITransaction(_SPI_CLOCK);
  writedata16_last(color);
  endSPITransaction();
}

void ILI9341_t3n::drawPixel(int16_t x, int16_t y, uint16_t color) {
    439c:	push	{r4, r5, r6, r7, lr}
  x += _originx;
    439e:	ldrh	r4, [r0, #50]	; 0x32
  beginSPITransaction(_SPI_CLOCK);
  writedata16_last(color);
  endSPITransaction();
}

void ILI9341_t3n::drawPixel(int16_t x, int16_t y, uint16_t color) {
    43a0:	sub	sp, #12
  x += _originx;
  y += _originy;
  if ((x < _displayclipx1) || (x >= _displayclipx2) || (y < _displayclipy1) ||
    43a2:	ldrsh.w	r6, [r0, #54]	; 0x36
  writedata16_last(color);
  endSPITransaction();
}

void ILI9341_t3n::drawPixel(int16_t x, int16_t y, uint16_t color) {
  x += _originx;
    43a6:	add	r1, r4
    43a8:	uxth	r4, r1
    43aa:	sxth	r1, r4
  y += _originy;
  if ((x < _displayclipx1) || (x >= _displayclipx2) || (y < _displayclipy1) ||
    43ac:	cmp	r6, r1
    43ae:	bgt.n	4416 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x7a>
    43b0:	ldrsh.w	r5, [r0, #58]	; 0x3a
    43b4:	cmp	r5, r1
    43b6:	ble.n	4416 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x7a>
  endSPITransaction();
}

void ILI9341_t3n::drawPixel(int16_t x, int16_t y, uint16_t color) {
  x += _originx;
  y += _originy;
    43b8:	ldrh	r5, [r0, #52]	; 0x34
  if ((x < _displayclipx1) || (x >= _displayclipx2) || (y < _displayclipy1) ||
    43ba:	ldrsh.w	r6, [r0, #56]	; 0x38
  endSPITransaction();
}

void ILI9341_t3n::drawPixel(int16_t x, int16_t y, uint16_t color) {
  x += _originx;
  y += _originy;
    43be:	add	r5, r2
    43c0:	uxth	r5, r5
    43c2:	sxth	r2, r5
  if ((x < _displayclipx1) || (x >= _displayclipx2) || (y < _displayclipy1) ||
    43c4:	cmp	r6, r2
    43c6:	bgt.n	4416 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x7a>
    43c8:	ldrsh.w	r6, [r0, #60]	; 0x3c
    43cc:	cmp	r6, r2
    43ce:	ble.n	4416 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x7a>
      (y >= _displayclipy2))
    return;

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    43d0:	ldrb.w	r6, [r0, #180]	; 0xb4
    43d4:	cbz	r6, 441a <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x7e>
      _changed_max_y = y;
  }

  // could combine with above, but avoids the +-...
  void updateChangedRange(int16_t x, int16_t y) __attribute__((always_inline)) {
    if (x < _changed_min_x)
    43d6:	ldrsh.w	r4, [r0, #188]	; 0xbc
    43da:	cmp	r4, r1
      _changed_min_x = x;
    if (y < _changed_min_y)
    43dc:	ldrsh.w	r4, [r0, #192]	; 0xc0
  }

  // could combine with above, but avoids the +-...
  void updateChangedRange(int16_t x, int16_t y) __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    43e0:	it	gt
    43e2:	strhgt.w	r1, [r0, #188]	; 0xbc
    if (y < _changed_min_y)
    43e6:	cmp	r4, r2
      _changed_min_y = y;
    if (x > _changed_max_x)
    43e8:	ldrsh.w	r4, [r0, #190]	; 0xbe
  // could combine with above, but avoids the +-...
  void updateChangedRange(int16_t x, int16_t y) __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    43ec:	it	gt
    43ee:	strhgt.w	r2, [r0, #192]	; 0xc0
    if (x > _changed_max_x)
    43f2:	cmp	r4, r1
      _changed_max_x = x;
    if (y > _changed_max_y)
    43f4:	ldrsh.w	r4, [r0, #194]	; 0xc2
    if (x < _changed_min_x)
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    if (x > _changed_max_x)
      _changed_max_x = x;
    43f8:	it	lt
    43fa:	strhlt.w	r1, [r0, #190]	; 0xbe
    if (y > _changed_max_y)
    43fe:	cmp	r4, r2
    updateChangedRange(
        x, y); // update the range of the screen that has been changed;
    _pfbtft[y * _width + x] = color;
    4400:	ldrsh.w	r4, [r0, #32]
      _changed_max_y = y;
    4404:	it	lt
    4406:	strhlt.w	r2, [r0, #194]	; 0xc2
    440a:	mla	r1, r2, r4, r1
    440e:	ldr.w	r0, [r0, #176]	; 0xb0
    4412:	strh.w	r3, [r0, r1, lsl #1]
    setAddr(x, y, x, y);
    writecommand_cont(ILI9341_RAMWR);
    writedata16_last(color);
    endSPITransaction();
  }
}
    4416:	add	sp, #12
    4418:	pop	{r4, r5, r6, r7, pc}
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    441a:	ldr	r2, [r0, #20]
    441c:	mov	r7, r3
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    441e:	movs	r3, #7
    4420:	mov	r6, r0
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    4422:	ldr	r0, [r0, #8]
    4424:	stmia.w	sp, {r2, r3}
    4428:	add	r3, sp, #8
    442a:	ldmdb	r3, {r1, r2}
    442e:	bl	2d30 <SPIClass::beginTransaction(SPISettings)>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
    4432:	ldr.w	r3, [r6, #172]	; 0xac
    4436:	cmp	r3, #0
    4438:	beq.w	458c <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x1f0>
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    443c:	ldr.w	r3, [r6, #152]	; 0x98
    4440:	cbz	r3, 444a <ILI9341_t3n::drawPixel(short, short, unsigned short)+0xae>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
    4442:	ldr.w	r2, [r6, #148]	; 0x94
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
    4446:	str.w	r2, [r3, #136]	; 0x88
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    444a:	ldr.w	r1, [r6, #164]	; 0xa4
    444e:	mov	r0, r6
    4450:	orr.w	r1, r1, #7
    4454:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    4458:	movs	r2, #42	; 0x2a
    445a:	ldr	r3, [r6, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    445c:	mov	r0, r6
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    445e:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    4460:	ldrb.w	r3, [r6, #146]	; 0x92
    4464:	adds	r3, #1
    4466:	strb.w	r3, [r6, #146]	; 0x92
    waitFifoNotFull();
    446a:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    446e:	ldr.w	r3, [r6, #168]	; 0xa8
    4472:	ldr	r1, [pc, #292]	; (4598 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x1fc>)
    4474:	mov	r0, r6
    4476:	orrs	r1, r3
    4478:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    447c:	ldr	r3, [r6, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    447e:	mov	r0, r6
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    4480:	str	r4, [r3, #100]	; 0x64
    pending_rx_count++; //
    4482:	ldrb.w	r3, [r6, #146]	; 0x92
    4486:	adds	r3, #1
    4488:	strb.w	r3, [r6, #146]	; 0x92
    waitFifoNotFull();
    448c:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    4490:	ldr.w	r3, [r6, #168]	; 0xa8
    4494:	ldr	r1, [pc, #256]	; (4598 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x1fc>)
    4496:	mov	r0, r6
    4498:	orrs	r1, r3
    449a:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    449e:	ldr	r3, [r6, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    44a0:	mov	r0, r6
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    44a2:	str	r4, [r3, #100]	; 0x64
    pending_rx_count++; //
    44a4:	ldrb.w	r3, [r6, #146]	; 0x92
    44a8:	adds	r3, #1
    44aa:	strb.w	r3, [r6, #146]	; 0x92
    waitFifoNotFull();
    44ae:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    44b2:	ldr.w	r1, [r6, #164]	; 0xa4
    44b6:	mov	r0, r6
    44b8:	orr.w	r1, r1, #7
    44bc:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    44c0:	movs	r2, #43	; 0x2b
    44c2:	ldr	r3, [r6, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    44c4:	mov	r0, r6
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    44c6:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    44c8:	ldrb.w	r3, [r6, #146]	; 0x92
    44cc:	adds	r3, #1
    44ce:	strb.w	r3, [r6, #146]	; 0x92
    waitFifoNotFull();
    44d2:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    44d6:	ldr.w	r3, [r6, #168]	; 0xa8
    44da:	ldr	r1, [pc, #188]	; (4598 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x1fc>)
    44dc:	mov	r0, r6
    44de:	orrs	r1, r3
    44e0:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    44e4:	ldr	r3, [r6, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    44e6:	mov	r0, r6
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    44e8:	str	r5, [r3, #100]	; 0x64
    pending_rx_count++; //
    44ea:	ldrb.w	r3, [r6, #146]	; 0x92
    44ee:	adds	r3, #1
    44f0:	strb.w	r3, [r6, #146]	; 0x92
    waitFifoNotFull();
    44f4:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    44f8:	ldr.w	r3, [r6, #168]	; 0xa8
    44fc:	ldr	r1, [pc, #152]	; (4598 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x1fc>)
    44fe:	mov	r0, r6
    4500:	orrs	r1, r3
    4502:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    4506:	ldr	r3, [r6, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    4508:	mov	r0, r6
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    450a:	str	r5, [r3, #100]	; 0x64
    pending_rx_count++; //
    450c:	ldrb.w	r3, [r6, #146]	; 0x92
    4510:	adds	r3, #1
    4512:	strb.w	r3, [r6, #146]	; 0x92
    waitFifoNotFull();
    4516:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    451a:	ldr.w	r1, [r6, #164]	; 0xa4
    451e:	mov	r0, r6
    4520:	orr.w	r1, r1, #7
    4524:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    4528:	movs	r2, #44	; 0x2c
    452a:	ldr	r3, [r6, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    452c:	mov	r0, r6
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    452e:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    4530:	ldrb.w	r3, [r6, #146]	; 0x92
    4534:	adds	r3, #1
    4536:	strb.w	r3, [r6, #146]	; 0x92
    waitFifoNotFull();
    453a:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    waitTransmitComplete();
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15));
    453e:	ldr.w	r1, [r6, #168]	; 0xa8
    4542:	mov	r0, r6
    4544:	orr.w	r1, r1, #15
    4548:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    454c:	ldr	r3, [r6, #28]
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    waitTransmitComplete();
    454e:	mov	r0, r6
    pending_rx_count++; //
    waitTransmitComplete();
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15));
    _pimxrt_spi->TDR = d;
    4550:	str	r7, [r3, #100]	; 0x64
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    4552:	ldrb.w	r3, [r6, #146]	; 0x92
    4556:	adds	r3, #1
    4558:	strb.w	r3, [r6, #146]	; 0x92
    waitTransmitComplete();
    455c:	bl	3de8 <ILI9341_t3n::waitTransmitComplete()>
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    4560:	ldr.w	r3, [r6, #152]	; 0x98
    4564:	cbz	r3, 456e <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x1d2>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
    4566:	ldr.w	r2, [r6, #148]	; 0x94
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    456a:	str.w	r2, [r3, #132]	; 0x84
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
#endif
    }
    _pspi->endTransaction();
    456e:	ldr	r0, [r6, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    4570:	ldrb	r3, [r0, #19]
    4572:	cmp	r3, #0
    4574:	beq.w	4416 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x7a>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    4578:	lsls	r3, r3, #31
    457a:	bpl.n	4582 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x1e6>
    457c:	ldr	r2, [r0, #40]	; 0x28
    457e:	ldr	r3, [pc, #28]	; (459c <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x200>)
    4580:	str	r2, [r3, #0]
    4582:	add	sp, #12
    4584:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4588:	b.w	2978 <SPIClass::endTransaction() [clone .part.9]>

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
    458c:	ldr	r3, [r6, #28]
    458e:	ldr	r3, [r3, #96]	; 0x60
    4590:	str.w	r3, [r6, #156]	; 0x9c
    4594:	b.n	443c <ILI9341_t3n::drawPixel(short, short, unsigned short)+0xa0>
    4596:	nop
    4598:	.word	0x0020000f
    459c:	.word	0xe000e100

000045a0 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)>:
    endSPITransaction();
  }
}

void ILI9341_t3n::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                uint16_t color) {
    45a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  x += _originx;
  y += _originy;
    45a4:	ldrh	r5, [r0, #52]	; 0x34
    endSPITransaction();
  }
}

void ILI9341_t3n::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                uint16_t color) {
    45a6:	mov	r4, r0
  x += _originx;
  y += _originy;

  // Rectangular clipping
  if ((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2))
    45a8:	ldrsh.w	r7, [r0, #56]	; 0x38
    endSPITransaction();
  }
}

void ILI9341_t3n::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                uint16_t color) {
    45ac:	sub	sp, #20
  x += _originx;
  y += _originy;
    45ae:	add	r2, r5
    endSPITransaction();
  }
}

void ILI9341_t3n::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                uint16_t color) {
    45b0:	ldrh.w	r6, [sp, #48]	; 0x30
  x += _originx;
  y += _originy;
    45b4:	uxth	r5, r2
    45b6:	sxth	r0, r5

  // Rectangular clipping
  if ((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2))
    45b8:	cmp	r7, r0
    45ba:	bgt.n	465e <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0xbe>
  }
}

void ILI9341_t3n::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                uint16_t color) {
  x += _originx;
    45bc:	ldrh	r2, [r4, #50]	; 0x32
  y += _originy;

  // Rectangular clipping
  if ((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2))
    45be:	ldrsh.w	lr, [r4, #58]	; 0x3a
  }
}

void ILI9341_t3n::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                uint16_t color) {
  x += _originx;
    45c2:	add	r1, r2
    45c4:	uxth	r1, r1
    45c6:	sxth	r7, r1
  y += _originy;

  // Rectangular clipping
  if ((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2))
    45c8:	cmp	r7, lr
    45ca:	bge.n	465e <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0xbe>
    45cc:	ldrsh.w	r2, [r4, #60]	; 0x3c
    45d0:	cmp	r2, r0
    45d2:	ble.n	465e <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0xbe>
    return;
  if (x < _displayclipx1) {
    45d4:	ldrsh.w	r2, [r4, #54]	; 0x36
    45d8:	cmp	r7, r2
    45da:	bge.n	45e4 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x44>
    w = w - (_displayclipx1 - x);
    45dc:	subs	r3, r3, r2
    45de:	mov	r7, r2
    45e0:	add	r3, r1
    45e2:	sxth	r3, r3
    x = _displayclipx1;
  }
  if ((x + w - 1) >= _displayclipx2)
    45e4:	adds	r2, r7, r3
    45e6:	cmp	r2, lr
    45e8:	ble.n	45f0 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x50>
    w = _displayclipx2 - x;
    45ea:	rsb	r3, r7, lr
    45ee:	sxth	r3, r3
  if (w < 1)
    45f0:	cmp	r3, #0
    45f2:	ble.n	465e <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0xbe>
    return;

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    45f4:	ldrb.w	r2, [r4, #180]	; 0xb4
    45f8:	cmp	r2, #0
    45fa:	beq.n	4688 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0xe8>
    _changed_max_y = -1;
  }

  void updateChangedRange(int16_t x, int16_t y, int16_t w, int16_t h)
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
    45fc:	ldrsh.w	r2, [r4, #188]	; 0xbc
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    x += w - 1;
    4600:	uxth	r5, r7
    y += h - 1;
    if (x > _changed_max_x)
    4602:	ldrsh.w	lr, [r4, #190]	; 0xbe
    _changed_max_y = -1;
  }

  void updateChangedRange(int16_t x, int16_t y, int16_t w, int16_t h)
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
    4606:	cmp	r2, r7
      _changed_min_x = x;
    if (y < _changed_min_y)
    4608:	ldrsh.w	r2, [r4, #192]	; 0xc0
      _changed_min_y = y;
    x += w - 1;
    460c:	add.w	r1, r5, #4294967295
  }

  void updateChangedRange(int16_t x, int16_t y, int16_t w, int16_t h)
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    4610:	it	gt
    4612:	strhgt.w	r7, [r4, #188]	; 0xbc
    if (y < _changed_min_y)
    4616:	cmp	r2, r0
      _changed_min_y = y;
    x += w - 1;
    4618:	uxth	r2, r3
  void updateChangedRange(int16_t x, int16_t y, int16_t w, int16_t h)
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    461a:	it	gt
    461c:	strhgt.w	r0, [r4, #192]	; 0xc0
    x += w - 1;
    4620:	add	r1, r2
    updateChangedRange(
        x, y, w, 1); // update the range of the screen that has been changed;
    if ((x & 1) || (w & 1)) {
    4622:	orrs	r5, r2
    4624:	sxth	r1, r1
    y += h - 1;
    if (x > _changed_max_x)
    4626:	cmp	lr, r1
      _changed_max_x = x;
    4628:	it	lt
    462a:	strhlt.w	r1, [r4, #190]	; 0xbe
    if (y > _changed_max_y)
    462e:	ldrsh.w	r1, [r4, #194]	; 0xc2
    4632:	cmp	r1, r0
      _changed_max_y = y;
    4634:	it	lt
    4636:	strhlt.w	r0, [r4, #194]	; 0xc2
    463a:	lsls	r5, r5, #31
    463c:	bmi.n	4664 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0xc4>
        *pfbPixel++ = color;
      }
    } else {
      // X is even and so is w, try 32 bit writes..
      uint32_t color32 = (color << 16) | color;
      uint32_t *pfbPixel = (uint32_t *)((uint16_t *)&_pfbtft[y * _width + x]);
    463e:	ldrsh.w	r1, [r4, #32]
      while (w--) {
        *pfbPixel++ = color;
      }
    } else {
      // X is even and so is w, try 32 bit writes..
      uint32_t color32 = (color << 16) | color;
    4642:	orr.w	r6, r6, r6, lsl #16
      uint32_t *pfbPixel = (uint32_t *)((uint16_t *)&_pfbtft[y * _width + x]);
    4646:	ldr.w	r2, [r4, #176]	; 0xb0
    464a:	mla	r0, r0, r1, r7
    464e:	add.w	r2, r2, r0, lsl #1
    4652:	subs	r3, #2
      while (w) {
        *pfbPixel++ = color32;
    4654:	str.w	r6, [r2], #4
    4658:	sxth	r3, r3
      }
    } else {
      // X is even and so is w, try 32 bit writes..
      uint32_t color32 = (color << 16) | color;
      uint32_t *pfbPixel = (uint32_t *)((uint16_t *)&_pfbtft[y * _width + x]);
      while (w) {
    465a:	cmp	r3, #0
    465c:	bne.n	4652 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0xb2>
      writedata16_cont(color);
    }
    writedata16_last(color);
    endSPITransaction();
  }
}
    465e:	add	sp, #20
    4660:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    updateChangedRange(
        x, y, w, 1); // update the range of the screen that has been changed;
    if ((x & 1) || (w & 1)) {
      uint16_t *pfbPixel = &_pfbtft[y * _width + x];
    4664:	ldrsh.w	r3, [r4, #32]
    4668:	subs	r1, r2, #1
    466a:	ldr.w	r2, [r4, #176]	; 0xb0
    466e:	mla	r3, r0, r3, r7
    4672:	uxth	r1, r1
    4674:	add.w	r3, r2, r3, lsl #1
    4678:	add.w	r2, r3, r1, lsl #1
    467c:	subs	r3, #2
      while (w--) {
        *pfbPixel++ = color;
    467e:	strh.w	r6, [r3, #2]!
  if (_use_fbtft) {
    updateChangedRange(
        x, y, w, 1); // update the range of the screen that has been changed;
    if ((x & 1) || (w & 1)) {
      uint16_t *pfbPixel = &_pfbtft[y * _width + x];
      while (w--) {
    4682:	cmp	r2, r3
    4684:	bne.n	467e <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0xde>
    4686:	b.n	465e <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0xbe>
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    4688:	ldr	r1, [r4, #20]
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    468a:	movs	r2, #7
    468c:	str	r3, [sp, #4]
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    468e:	add	r3, sp, #16
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    4690:	str	r1, [sp, #8]
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    4692:	str	r2, [sp, #12]
    4694:	ldr	r0, [r4, #8]
    4696:	ldmdb	r3, {r1, r2}
    469a:	bl	2d30 <SPIClass::beginTransaction(SPISettings)>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
    469e:	ldr.w	r2, [r4, #172]	; 0xac
    46a2:	ldr	r3, [sp, #4]
    46a4:	cmp	r2, #0
    46a6:	beq.w	48a8 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x308>
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    46aa:	ldr.w	r2, [r4, #152]	; 0x98
    46ae:	cbz	r2, 46b8 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x118>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
    46b0:	ldr.w	r1, [r4, #148]	; 0x94
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
    46b4:	str.w	r1, [r2, #136]	; 0x88
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    46b8:	ldr.w	r1, [r4, #164]	; 0xa4
    46bc:	mov	r0, r4
    }
  } else
#endif
  {
    beginSPITransaction(_SPI_CLOCK);
    setAddr(x, y, x + w - 1, y);
    46be:	uxth.w	r8, r3
    46c2:	str	r3, [sp, #4]
    46c4:	orr.w	r1, r1, #7
    46c8:	uxth.w	r9, r7
    46cc:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    46d0:	ldr	r2, [r4, #28]
    46d2:	movs	r1, #42	; 0x2a
    pending_rx_count++; //
    waitFifoNotFull();
    46d4:	mov	r0, r4
    46d6:	add.w	r7, r9, #4294967295
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    46da:	str	r1, [r2, #100]	; 0x64
    pending_rx_count++; //
    46dc:	ldrb.w	r2, [r4, #146]	; 0x92
    46e0:	add	r7, r8
    46e2:	adds	r2, #1
    46e4:	uxth	r7, r7
    46e6:	strb.w	r2, [r4, #146]	; 0x92
    waitFifoNotFull();
    46ea:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    46ee:	ldr.w	r2, [r4, #168]	; 0xa8
    46f2:	ldr	r1, [pc, #456]	; (48bc <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x31c>)
    46f4:	mov	r0, r4
    46f6:	orrs	r1, r2
    46f8:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    46fc:	ldr	r2, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    46fe:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    4700:	str.w	r9, [r2, #100]	; 0x64
    pending_rx_count++; //
    4704:	ldrb.w	r2, [r4, #146]	; 0x92
    4708:	adds	r2, #1
    470a:	strb.w	r2, [r4, #146]	; 0x92
    waitFifoNotFull();
    470e:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    4712:	ldr.w	r2, [r4, #168]	; 0xa8
    4716:	ldr	r1, [pc, #420]	; (48bc <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x31c>)
    4718:	mov	r0, r4
    471a:	orrs	r1, r2
    471c:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    4720:	ldr	r2, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    4722:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    4724:	str	r7, [r2, #100]	; 0x64
    pending_rx_count++; //
    4726:	ldrb.w	r2, [r4, #146]	; 0x92
    472a:	adds	r2, #1
    472c:	strb.w	r2, [r4, #146]	; 0x92
    waitFifoNotFull();
    4730:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    4734:	ldr.w	r1, [r4, #164]	; 0xa4
    4738:	mov	r0, r4
    473a:	orr.w	r1, r1, #7
    473e:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    4742:	ldr	r2, [r4, #28]
    4744:	movs	r1, #43	; 0x2b
    pending_rx_count++; //
    waitFifoNotFull();
    4746:	mov	r0, r4
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    4748:	str	r1, [r2, #100]	; 0x64
    pending_rx_count++; //
    474a:	ldrb.w	r2, [r4, #146]	; 0x92
    474e:	adds	r2, #1
    4750:	strb.w	r2, [r4, #146]	; 0x92
    waitFifoNotFull();
    4754:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    4758:	ldr.w	r2, [r4, #168]	; 0xa8
    475c:	ldr	r1, [pc, #348]	; (48bc <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x31c>)
    475e:	mov	r0, r4
    4760:	orrs	r1, r2
    4762:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    4766:	ldr	r2, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    4768:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    476a:	str	r5, [r2, #100]	; 0x64
    pending_rx_count++; //
    476c:	ldrb.w	r2, [r4, #146]	; 0x92
    4770:	adds	r2, #1
    4772:	strb.w	r2, [r4, #146]	; 0x92
    waitFifoNotFull();
    4776:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    477a:	ldr.w	r2, [r4, #168]	; 0xa8
    477e:	ldr	r1, [pc, #316]	; (48bc <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x31c>)
    4780:	mov	r0, r4
    4782:	orrs	r1, r2
    4784:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    4788:	ldr	r2, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    478a:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    478c:	str	r5, [r2, #100]	; 0x64
    pending_rx_count++; //
    478e:	ldrb.w	r2, [r4, #146]	; 0x92
    4792:	adds	r2, #1
    4794:	strb.w	r2, [r4, #146]	; 0x92
    waitFifoNotFull();
    4798:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    479c:	ldr.w	r1, [r4, #164]	; 0xa4
    47a0:	mov	r0, r4
    47a2:	orr.w	r1, r1, #7
    47a6:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    47aa:	ldr	r2, [r4, #28]
    47ac:	movs	r1, #44	; 0x2c
    pending_rx_count++; //
    waitFifoNotFull();
    47ae:	mov	r0, r4
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    47b0:	str	r1, [r2, #100]	; 0x64
    pending_rx_count++; //
    47b2:	ldrb.w	r2, [r4, #146]	; 0x92
    47b6:	adds	r2, #1
    47b8:	strb.w	r2, [r4, #146]	; 0x92
    waitFifoNotFull();
    47bc:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    writecommand_cont(ILI9341_RAMWR);
    while (w-- > 1) {
    47c0:	ldr	r3, [sp, #4]
    47c2:	cmp	r3, #1
    47c4:	beq.n	485a <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x2ba>
    47c6:	mov	r7, r8
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    47c8:	movw	r5, #513	; 0x201
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    47cc:	ldr.w	lr, [r4, #168]	; 0xa8
    47d0:	ldr	r3, [pc, #232]	; (48bc <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x31c>)
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
    47d2:	ldr.w	r0, [r4, #156]	; 0x9c
    47d6:	ldr	r2, [pc, #232]	; (48c0 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x320>)
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    47d8:	orr.w	r3, lr, r3
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
    47dc:	ands	r2, r0
    47de:	cmp	r3, r2
    47e0:	beq.n	48b2 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x312>
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    47e2:	ldr	r1, [pc, #224]	; (48c4 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x324>)
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    47e4:	eor.w	r2, r3, r0
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    47e8:	ands	r1, r0
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    47ea:	tst.w	r2, #50331648	; 0x3000000
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    47ee:	orr.w	r1, r1, r3
    47f2:	str.w	r1, [r4, #156]	; 0x9c
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    47f6:	beq.n	4836 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x296>
    47f8:	ldr.w	r0, [r4, #160]	; 0xa0
    47fc:	cbz	r0, 4836 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x296>
    47fe:	ldrb.w	r1, [r4, #146]	; 0x92
    4802:	ldr	r3, [r4, #28]
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    4804:	cbz	r1, 481a <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x27a>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    4806:	ldr	r2, [r3, #112]	; 0x70
    4808:	lsls	r2, r2, #30
    480a:	bmi.n	4804 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x264>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    480c:	subs	r1, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    480e:	ldr	r2, [r3, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
    4810:	uxtb	r1, r1
    4812:	strb.w	r1, [r4, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    4816:	cmp	r1, #0
    4818:	bne.n	4806 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x266>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
    481a:	tst.w	lr, #50331648	; 0x3000000
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    481e:	str	r5, [r3, #16]
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
    4820:	ldr.w	r2, [r4, #172]	; 0xac
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
    4824:	beq.n	48b6 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x316>
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    4826:	str.w	r0, [r2, #132]	; 0x84
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
        else
          DIRECT_WRITE_LOW(_dcport, _dcpinmask);
        _pimxrt_spi->TCR = _spi_tcr_current &
    482a:	ldr.w	r2, [r4, #156]	; 0x9c
    482e:	bic.w	r2, r2, #52428800	; 0x3200000
                           ~(LPSPI_TCR_PCS(3) |
                             LPSPI_TCR_CONT); // go ahead and update TCR anyway?
    4832:	str	r2, [r3, #96]	; 0x60
    4834:	b.n	4840 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x2a0>
    4836:	ldr	r3, [r4, #28]
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
        while ((_pimxrt_spi->FSR & 0x1f))
    4838:	ldr	r2, [r3, #92]	; 0x5c
    483a:	lsls	r0, r2, #27
    483c:	bne.n	4838 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x298>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR
    483e:	str	r1, [r3, #96]	; 0x60
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    4840:	str	r6, [r3, #100]	; 0x64
    4842:	subs	r7, #1
    pending_rx_count++; //
    4844:	ldrb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    4848:	mov	r0, r4
    484a:	uxth	r7, r7
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    pending_rx_count++; //
    484c:	adds	r3, #1
    484e:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    4852:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
#endif
  {
    beginSPITransaction(_SPI_CLOCK);
    setAddr(x, y, x + w - 1, y);
    writecommand_cont(ILI9341_RAMWR);
    while (w-- > 1) {
    4856:	cmp	r7, #1
    4858:	bhi.n	47cc <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x22c>
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    waitTransmitComplete();
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15));
    485a:	ldr.w	r1, [r4, #168]	; 0xa8
    485e:	mov	r0, r4
    4860:	orr.w	r1, r1, #15
    4864:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    4868:	ldr	r3, [r4, #28]
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    waitTransmitComplete();
    486a:	mov	r0, r4
    pending_rx_count++; //
    waitTransmitComplete();
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15));
    _pimxrt_spi->TDR = d;
    486c:	str	r6, [r3, #100]	; 0x64
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    486e:	ldrb.w	r3, [r4, #146]	; 0x92
    4872:	adds	r3, #1
    4874:	strb.w	r3, [r4, #146]	; 0x92
    waitTransmitComplete();
    4878:	bl	3de8 <ILI9341_t3n::waitTransmitComplete()>
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    487c:	ldr.w	r3, [r4, #152]	; 0x98
    4880:	cbz	r3, 488a <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x2ea>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
    4882:	ldr.w	r2, [r4, #148]	; 0x94
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    4886:	str.w	r2, [r3, #132]	; 0x84
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
#endif
    }
    _pspi->endTransaction();
    488a:	ldr	r0, [r4, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    488c:	ldrb	r3, [r0, #19]
    488e:	cmp	r3, #0
    4890:	beq.w	465e <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0xbe>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    4894:	lsls	r3, r3, #31
    4896:	bpl.n	489e <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x2fe>
    4898:	ldr	r2, [r0, #40]	; 0x28
    489a:	ldr	r3, [pc, #44]	; (48c8 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x328>)
    489c:	str	r2, [r3, #0]
      writedata16_cont(color);
    }
    writedata16_last(color);
    endSPITransaction();
  }
}
    489e:	add	sp, #20
    48a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    48a4:	b.w	2978 <SPIClass::endTransaction() [clone .part.9]>

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
    48a8:	ldr	r2, [r4, #28]
    48aa:	ldr	r2, [r2, #96]	; 0x60
    48ac:	str.w	r2, [r4, #156]	; 0x9c
    48b0:	b.n	46aa <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x10a>
    48b2:	ldr	r3, [r4, #28]
    48b4:	b.n	4840 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x2a0>
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
    48b6:	str.w	r0, [r2, #136]	; 0x88
    48ba:	b.n	482a <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x28a>
    48bc:	.word	0x0020000f
    48c0:	.word	0x0328001f
    48c4:	.word	0xfcd7ffe0
    48c8:	.word	0xe000e100

000048cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>:
  }
}

// fill a rectangle
void ILI9341_t3n::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t color) {
    48cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  x += _originx;
    48d0:	ldrh.w	r8, [r0, #50]	; 0x32
  }
}

// fill a rectangle
void ILI9341_t3n::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t color) {
    48d4:	mov	r4, r0
    48d6:	mov	r7, r3
  x += _originx;
  y += _originy;

  // Rectangular clipping (drawChar w/big text requires this)
  if ((x >= _displayclipx2) || (y >= _displayclipy2))
    48d8:	ldrsh.w	r0, [r0, #58]	; 0x3a
}

// fill a rectangle
void ILI9341_t3n::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t color) {
  x += _originx;
    48dc:	add	r1, r8
  }
}

// fill a rectangle
void ILI9341_t3n::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t color) {
    48de:	sub	sp, #20
  x += _originx;
    48e0:	uxth.w	r8, r1
  }
}

// fill a rectangle
void ILI9341_t3n::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t color) {
    48e4:	ldrsh.w	r6, [sp, #56]	; 0x38
    48e8:	ldrh.w	r5, [sp, #60]	; 0x3c
  x += _originx;
    48ec:	sxth.w	r3, r8
  y += _originy;

  // Rectangular clipping (drawChar w/big text requires this)
  if ((x >= _displayclipx2) || (y >= _displayclipy2))
    48f0:	cmp	r3, r0
    48f2:	bge.w	4a18 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x14c>

// fill a rectangle
void ILI9341_t3n::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t color) {
  x += _originx;
  y += _originy;
    48f6:	ldrh.w	lr, [r4, #52]	; 0x34

  // Rectangular clipping (drawChar w/big text requires this)
  if ((x >= _displayclipx2) || (y >= _displayclipy2))
    48fa:	ldrsh.w	r1, [r4, #60]	; 0x3c

// fill a rectangle
void ILI9341_t3n::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t color) {
  x += _originx;
  y += _originy;
    48fe:	add.w	r9, r2, lr
    4902:	uxth.w	r9, r9
    4906:	sxth.w	r2, r9

  // Rectangular clipping (drawChar w/big text requires this)
  if ((x >= _displayclipx2) || (y >= _displayclipy2))
    490a:	cmp	r2, r1
    490c:	bge.w	4a18 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x14c>
    return;
  if (((x + w) <= _displayclipx1) || ((y + h) <= _displayclipy1))
    4910:	add.w	ip, r7, r3
    4914:	ldrsh.w	lr, [r4, #54]	; 0x36
    4918:	str	r3, [sp, #0]
    491a:	cmp	ip, lr
    491c:	ble.n	4a18 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x14c>
    491e:	add.w	fp, r6, r2
    4922:	ldrsh.w	sl, [r4, #56]	; 0x38
    4926:	str	r2, [sp, #4]
    4928:	cmp	fp, sl
    492a:	ble.n	4a18 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x14c>
    return;
  if (x < _displayclipx1) {
    492c:	cmp	r3, lr
    492e:	bge.n	4948 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x7c>
    w -= (_displayclipx1 - x);
    4930:	uxth.w	ip, lr
    4934:	mov	r3, lr
    4936:	str.w	lr, [sp]
    493a:	rsb	r7, ip, r7
    493e:	add	r7, r8
    4940:	mov	r8, ip
    4942:	sxth	r7, r7
    4944:	add.w	ip, r7, lr
    x = _displayclipx1;
  }
  if (y < _displayclipy1) {
    4948:	cmp	r2, sl
    494a:	bge.n	4964 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x98>
    h -= (_displayclipy1 - y);
    494c:	uxth.w	lr, sl
    4950:	mov	r2, sl
    4952:	str.w	sl, [sp, #4]
    4956:	rsb	r6, lr, r6
    495a:	add	r6, r9
    495c:	mov	r9, lr
    495e:	sxth	r6, r6
    4960:	add.w	fp, r6, sl
    y = _displayclipy1;
  }
  if ((x + w - 1) >= _displayclipx2)
    4964:	cmp	r0, ip
    4966:	bge.n	496e <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0xa2>
    w = _displayclipx2 - x;
    4968:	rsb	r0, r8, r0
    496c:	sxth	r7, r0
  if ((y + h - 1) >= _displayclipy2)
    496e:	cmp	r1, fp
    4970:	bge.n	4978 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0xac>
    h = _displayclipy2 - y;
    4972:	rsb	r1, r9, r1
    4976:	sxth	r6, r1

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    4978:	ldrb.w	r1, [r4, #180]	; 0xb4
    497c:	cmp	r1, #0
    497e:	beq.n	4a58 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x18c>
    _changed_max_y = -1;
  }

  void updateChangedRange(int16_t x, int16_t y, int16_t w, int16_t h)
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
    4980:	ldrsh.w	r1, [r4, #188]	; 0xbc
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    x += w - 1;
    y += h - 1;
    if (x > _changed_max_x)
    4984:	ldrsh.w	r0, [r4, #190]	; 0xbe
    _changed_max_y = -1;
  }

  void updateChangedRange(int16_t x, int16_t y, int16_t w, int16_t h)
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
    4988:	cmp	r1, r3
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    x += w - 1;
    498a:	uxth	r1, r7
  }

  void updateChangedRange(int16_t x, int16_t y, int16_t w, int16_t h)
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    498c:	it	gt
    498e:	strhgt.w	r3, [r4, #188]	; 0xbc
    if (y < _changed_min_y)
    4992:	ldrsh.w	r3, [r4, #192]	; 0xc0
    4996:	cmp	r3, r2
      _changed_min_y = y;
    x += w - 1;
    4998:	add.w	r3, r8, #4294967295
    499c:	add	r3, r1
  void updateChangedRange(int16_t x, int16_t y, int16_t w, int16_t h)
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    499e:	it	gt
    49a0:	strhgt.w	r2, [r4, #192]	; 0xc0
    x += w - 1;
    y += h - 1;
    49a4:	add.w	r2, r9, #4294967295
    updateChangedRange(
        x, y, w, h); // update the range of the screen that has been changed;
    if ((x & 1) || (w & 1)) {
    49a8:	orr.w	r1, r1, r8
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    x += w - 1;
    49ac:	sxth	r3, r3
    y += h - 1;
    49ae:	add	r2, r6
    if (x > _changed_max_x)
    49b0:	cmp	r0, r3
    if (x < _changed_min_x)
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    x += w - 1;
    y += h - 1;
    49b2:	sxth	r2, r2
    if (x > _changed_max_x)
      _changed_max_x = x;
    49b4:	it	lt
    49b6:	strhlt.w	r3, [r4, #190]	; 0xbe
    if (y > _changed_max_y)
    49ba:	ldrsh.w	r3, [r4, #194]	; 0xc2
    49be:	cmp	r3, r2
      _changed_max_y = y;
    49c0:	it	lt
    49c2:	strhlt.w	r2, [r4, #194]	; 0xc2
    49c6:	lsls	r3, r1, #31
      uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
    49c8:	ldrsh.w	r2, [r4, #32]

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    updateChangedRange(
        x, y, w, h); // update the range of the screen that has been changed;
    if ((x & 1) || (w & 1)) {
    49cc:	bmi.n	4a1e <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x152>
      }
    } else {
      // Horizontal is even number so try 32 bit writes instead
      uint32_t color32 = (color << 16) | color;
      uint32_t *pfbPixel_row =
          (uint32_t *)((uint16_t *)&_pfbtft[y * _width + x]);
    49ce:	ldr.w	r3, [r4, #176]	; 0xb0
        }
        pfbPixel_row += _width;
      }
    } else {
      // Horizontal is even number so try 32 bit writes instead
      uint32_t color32 = (color << 16) | color;
    49d2:	orr.w	r5, r5, r5, lsl #16
      uint32_t *pfbPixel_row =
          (uint32_t *)((uint16_t *)&_pfbtft[y * _width + x]);
    49d6:	ldmia.w	sp, {r0, r1}
    49da:	mla	r0, r1, r2, r0
      w = w / 2; // only iterate half the times
    49de:	subs	r1, r7, #0
    49e0:	it	lt
    49e2:	addlt	r1, #1
      for (; h > 0; h--) {
    49e4:	cmp	r6, #0
      }
    } else {
      // Horizontal is even number so try 32 bit writes instead
      uint32_t color32 = (color << 16) | color;
      uint32_t *pfbPixel_row =
          (uint32_t *)((uint16_t *)&_pfbtft[y * _width + x]);
    49e6:	add.w	r0, r3, r0, lsl #1
      w = w / 2; // only iterate half the times
    49ea:	sbfx	r1, r1, #1, #16
      for (; h > 0; h--) {
    49ee:	ble.n	4a18 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x14c>
    49f0:	subs	r3, r2, #0
    49f2:	it	lt
    49f4:	addlt	r3, #1
    49f6:	asrs	r3, r3, #1
    49f8:	lsls	r4, r3, #2
        uint32_t *pfbPixel = pfbPixel_row;
        for (int i = 0; i < w; i++) {
    49fa:	cmp	r1, #0
    49fc:	ble.n	4a0c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x140>
    49fe:	mov	r2, r0
    4a00:	movs	r3, #0
    4a02:	adds	r3, #1
          *pfbPixel++ = color32;
    4a04:	str.w	r5, [r2], #4
      uint32_t *pfbPixel_row =
          (uint32_t *)((uint16_t *)&_pfbtft[y * _width + x]);
      w = w / 2; // only iterate half the times
      for (; h > 0; h--) {
        uint32_t *pfbPixel = pfbPixel_row;
        for (int i = 0; i < w; i++) {
    4a08:	cmp	r3, r1
    4a0a:	bne.n	4a02 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x136>
    4a0c:	subs	r6, #1
          *pfbPixel++ = color32;
        }
        pfbPixel_row += (_width / 2);
    4a0e:	add	r0, r4
    4a10:	uxth	r3, r6
    4a12:	sxth	r6, r3
      // Horizontal is even number so try 32 bit writes instead
      uint32_t color32 = (color << 16) | color;
      uint32_t *pfbPixel_row =
          (uint32_t *)((uint16_t *)&_pfbtft[y * _width + x]);
      w = w / 2; // only iterate half the times
      for (; h > 0; h--) {
    4a14:	cmp	r3, #0
    4a16:	bne.n	49fa <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x12e>
			}
#endif
    }
    endSPITransaction();
  }
}
    4a18:	add	sp, #20
    4a1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    updateChangedRange(
        x, y, w, h); // update the range of the screen that has been changed;
    if ((x & 1) || (w & 1)) {
      uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
    4a1e:	ldmia.w	sp, {r0, r1}
    4a22:	ldr.w	r3, [r4, #176]	; 0xb0
      for (; h > 0; h--) {
    4a26:	cmp	r6, #0
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    updateChangedRange(
        x, y, w, h); // update the range of the screen that has been changed;
    if ((x & 1) || (w & 1)) {
      uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
    4a28:	mla	r1, r1, r2, r0
    4a2c:	add.w	r1, r3, r1, lsl #1
      for (; h > 0; h--) {
    4a30:	ble.n	4a18 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x14c>
    4a32:	lsls	r0, r7, #1
        uint16_t *pfbPixel = pfbPixel_row;
        for (int i = 0; i < w; i++) {
    4a34:	cmp	r7, #0
    4a36:	ble.n	4a48 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x17c>
    4a38:	adds	r2, r1, r0
    4a3a:	mov	r3, r1
          *pfbPixel++ = color;
    4a3c:	strh.w	r5, [r3], #2
        x, y, w, h); // update the range of the screen that has been changed;
    if ((x & 1) || (w & 1)) {
      uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
      for (; h > 0; h--) {
        uint16_t *pfbPixel = pfbPixel_row;
        for (int i = 0; i < w; i++) {
    4a40:	cmp	r3, r2
    4a42:	bne.n	4a3c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x170>
    4a44:	ldrsh.w	r2, [r4, #32]
    4a48:	subs	r6, #1
          *pfbPixel++ = color;
        }
        pfbPixel_row += _width;
    4a4a:	add.w	r1, r1, r2, lsl #1
    4a4e:	uxth	r3, r6
    4a50:	sxth	r6, r3
  if (_use_fbtft) {
    updateChangedRange(
        x, y, w, h); // update the range of the screen that has been changed;
    if ((x & 1) || (w & 1)) {
      uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
      for (; h > 0; h--) {
    4a52:	cmp	r3, #0
    4a54:	bne.n	4a34 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x168>
    4a56:	b.n	4a18 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x14c>
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    4a58:	movs	r3, #7
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    4a5a:	ldr	r2, [r4, #20]
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    4a5c:	ldr	r0, [r4, #8]
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    4a5e:	str	r3, [sp, #12]
    4a60:	add	r3, sp, #16
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    4a62:	str	r2, [sp, #8]
    4a64:	ldmdb	r3, {r1, r2}
    4a68:	bl	2d30 <SPIClass::beginTransaction(SPISettings)>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
    4a6c:	ldr.w	r3, [r4, #172]	; 0xac
    4a70:	cmp	r3, #0
    4a72:	beq.w	4c9c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x3d0>
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    4a76:	ldr.w	r3, [r4, #152]	; 0x98
    4a7a:	cbz	r3, 4a84 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x1b8>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
    4a7c:	ldr.w	r2, [r4, #148]	; 0x94
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
    4a80:	str.w	r2, [r3, #136]	; 0x88
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    4a84:	ldr.w	r1, [r4, #164]	; 0xa4
    4a88:	mov	r0, r4

    // TODO: this can result in a very long transaction time
    // should break this into multiple transactions, even though
    // it'll cost more overhead, so we don't stall other SPI libs
    beginSPITransaction(_SPI_CLOCK);
    setAddr(x, y, x + w - 1, y + h - 1);
    4a8a:	add.w	fp, r8, #4294967295
    4a8e:	add.w	sl, r9, #4294967295
    4a92:	orr.w	r1, r1, #7
    4a96:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    4a9a:	movs	r2, #42	; 0x2a
    4a9c:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    4a9e:	mov	r0, r4
    4aa0:	add	fp, r7
    4aa2:	add	sl, r6
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    4aa4:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    4aa6:	ldrb.w	r3, [r4, #146]	; 0x92
    4aaa:	uxth.w	fp, fp
    4aae:	uxth.w	sl, sl
    4ab2:	adds	r3, #1
    4ab4:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    4ab8:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    4abc:	ldr.w	r3, [r4, #168]	; 0xa8
    4ac0:	ldr	r1, [pc, #484]	; (4ca8 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x3dc>)
    4ac2:	mov	r0, r4
    4ac4:	orrs	r1, r3
    4ac6:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    4aca:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    4acc:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    4ace:	str.w	r8, [r3, #100]	; 0x64
    pending_rx_count++; //
    4ad2:	ldrb.w	r3, [r4, #146]	; 0x92
    4ad6:	adds	r3, #1
    4ad8:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    4adc:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    4ae0:	ldr.w	r3, [r4, #168]	; 0xa8
    4ae4:	ldr	r1, [pc, #448]	; (4ca8 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x3dc>)
    4ae6:	mov	r0, r4
    4ae8:	orrs	r1, r3
    4aea:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    4aee:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    4af0:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    4af2:	str.w	fp, [r3, #100]	; 0x64
    pending_rx_count++; //
    4af6:	ldrb.w	r3, [r4, #146]	; 0x92
    4afa:	adds	r3, #1
    4afc:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    4b00:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    4b04:	ldr.w	r1, [r4, #164]	; 0xa4
    4b08:	mov	r0, r4
    4b0a:	orr.w	r1, r1, #7
    4b0e:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    4b12:	movs	r2, #43	; 0x2b
    4b14:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    4b16:	mov	r0, r4
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    4b18:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    4b1a:	ldrb.w	r3, [r4, #146]	; 0x92
    4b1e:	adds	r3, #1
    4b20:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    4b24:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    4b28:	ldr.w	r3, [r4, #168]	; 0xa8
    4b2c:	ldr	r1, [pc, #376]	; (4ca8 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x3dc>)
    4b2e:	mov	r0, r4
    4b30:	orrs	r1, r3
    4b32:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    4b36:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    4b38:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    4b3a:	str.w	r9, [r3, #100]	; 0x64
    pending_rx_count++; //
    4b3e:	ldrb.w	r3, [r4, #146]	; 0x92
    4b42:	adds	r3, #1
    4b44:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    4b48:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    4b4c:	ldr.w	r3, [r4, #168]	; 0xa8
    4b50:	ldr	r1, [pc, #340]	; (4ca8 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x3dc>)
    4b52:	mov	r0, r4
    4b54:	orrs	r1, r3
    4b56:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    4b5a:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    4b5c:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    4b5e:	str.w	sl, [r3, #100]	; 0x64
    pending_rx_count++; //
    4b62:	ldrb.w	r3, [r4, #146]	; 0x92
    4b66:	adds	r3, #1
    4b68:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    4b6c:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    4b70:	ldr.w	r1, [r4, #164]	; 0xa4
    4b74:	mov	r0, r4
    4b76:	orr.w	r1, r1, #7
    4b7a:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    4b7e:	ldr	r3, [r4, #28]
    4b80:	movs	r2, #44	; 0x2c
    pending_rx_count++; //
    waitFifoNotFull();
    4b82:	mov	r0, r4
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    4b84:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    4b86:	ldrb.w	r3, [r4, #146]	; 0x92
    4b8a:	adds	r3, #1
    4b8c:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    4b90:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    writecommand_cont(ILI9341_RAMWR);
    for (y = h; y > 0; y--) {
    4b94:	cmp	r6, #0
    4b96:	ble.n	4c66 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x39a>
    4b98:	mov	sl, r6
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    4b9a:	movw	r8, #513	; 0x201
    4b9e:	mov	r9, r7
    // it'll cost more overhead, so we don't stall other SPI libs
    beginSPITransaction(_SPI_CLOCK);
    setAddr(x, y, x + w - 1, y + h - 1);
    writecommand_cont(ILI9341_RAMWR);
    for (y = h; y > 0; y--) {
      for (x = w; x > 1; x--) {
    4ba0:	cmp.w	r9, #1
    4ba4:	ble.n	4c36 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x36a>
    4ba6:	mov	r6, r9
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    4ba8:	ldr.w	r0, [r4, #168]	; 0xa8
    4bac:	ldr	r3, [pc, #248]	; (4ca8 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x3dc>)
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
    4bae:	ldr.w	r1, [r4, #156]	; 0x9c
    4bb2:	ldr	r2, [pc, #248]	; (4cac <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x3e0>)
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    4bb4:	orrs	r3, r0
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
    4bb6:	ands	r2, r1
    4bb8:	cmp	r3, r2
    4bba:	beq.n	4c92 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x3c6>
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    4bbc:	ldr	r2, [pc, #240]	; (4cb0 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x3e4>)
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    4bbe:	eor.w	lr, r3, r1
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    4bc2:	ands	r2, r1
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    4bc4:	tst.w	lr, #50331648	; 0x3000000
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    4bc8:	orr.w	r1, r2, r3
    4bcc:	str.w	r1, [r4, #156]	; 0x9c
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    4bd0:	beq.n	4c12 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x346>
    4bd2:	ldr.w	r7, [r4, #160]	; 0xa0
    4bd6:	cbz	r7, 4c12 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x346>
    4bd8:	ldrb.w	r1, [r4, #146]	; 0x92
    4bdc:	ldr	r3, [r4, #28]
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    4bde:	cbz	r1, 4bf4 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x328>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    4be0:	ldr	r2, [r3, #112]	; 0x70
    4be2:	lsls	r2, r2, #30
    4be4:	bmi.n	4bde <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x312>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    4be6:	subs	r1, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    4be8:	ldr	r2, [r3, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
    4bea:	uxtb	r1, r1
    4bec:	strb.w	r1, [r4, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    4bf0:	cmp	r1, #0
    4bf2:	bne.n	4be0 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x314>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
    4bf4:	tst.w	r0, #50331648	; 0x3000000
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    4bf8:	str.w	r8, [r3, #16]
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
    4bfc:	ldr.w	r2, [r4, #172]	; 0xac
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
    4c00:	beq.n	4c96 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x3ca>
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    4c02:	str.w	r7, [r2, #132]	; 0x84
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
        else
          DIRECT_WRITE_LOW(_dcport, _dcpinmask);
        _pimxrt_spi->TCR = _spi_tcr_current &
    4c06:	ldr.w	r2, [r4, #156]	; 0x9c
    4c0a:	bic.w	r2, r2, #52428800	; 0x3200000
                           ~(LPSPI_TCR_PCS(3) |
                             LPSPI_TCR_CONT); // go ahead and update TCR anyway?
    4c0e:	str	r2, [r3, #96]	; 0x60
    4c10:	b.n	4c1c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x350>
    4c12:	ldr	r3, [r4, #28]
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
        while ((_pimxrt_spi->FSR & 0x1f))
    4c14:	ldr	r2, [r3, #92]	; 0x5c
    4c16:	lsls	r0, r2, #27
    4c18:	bne.n	4c14 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x348>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR
    4c1a:	str	r1, [r3, #96]	; 0x60
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    4c1c:	str	r5, [r3, #100]	; 0x64
    4c1e:	subs	r6, #1
    pending_rx_count++; //
    4c20:	ldrb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    4c24:	mov	r0, r4
    4c26:	sxth	r6, r6
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    pending_rx_count++; //
    4c28:	adds	r3, #1
    4c2a:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    4c2e:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    // it'll cost more overhead, so we don't stall other SPI libs
    beginSPITransaction(_SPI_CLOCK);
    setAddr(x, y, x + w - 1, y + h - 1);
    writecommand_cont(ILI9341_RAMWR);
    for (y = h; y > 0; y--) {
      for (x = w; x > 1; x--) {
    4c32:	cmp	r6, #1
    4c34:	bne.n	4ba8 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x2dc>
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    waitTransmitComplete();
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15));
    4c36:	ldr.w	r1, [r4, #168]	; 0xa8
    4c3a:	mov	r0, r4
    4c3c:	orr.w	r1, r1, #15
    4c40:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    4c44:	ldr	r3, [r4, #28]
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    waitTransmitComplete();
    4c46:	mov	r0, r4
    pending_rx_count++; //
    waitTransmitComplete();
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15));
    _pimxrt_spi->TDR = d;
    4c48:	str	r5, [r3, #100]	; 0x64
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    4c4a:	ldrb.w	r3, [r4, #146]	; 0x92
    4c4e:	adds	r3, #1
    4c50:	strb.w	r3, [r4, #146]	; 0x92
    waitTransmitComplete();
    4c54:	bl	3de8 <ILI9341_t3n::waitTransmitComplete()>
    4c58:	add.w	r3, sl, #4294967295
    4c5c:	uxth	r3, r3
    4c5e:	sxth.w	sl, r3
    // should break this into multiple transactions, even though
    // it'll cost more overhead, so we don't stall other SPI libs
    beginSPITransaction(_SPI_CLOCK);
    setAddr(x, y, x + w - 1, y + h - 1);
    writecommand_cont(ILI9341_RAMWR);
    for (y = h; y > 0; y--) {
    4c62:	cmp	r3, #0
    4c64:	bne.n	4ba0 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x2d4>
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    4c66:	ldr.w	r3, [r4, #152]	; 0x98
    4c6a:	cbz	r3, 4c74 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x3a8>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
    4c6c:	ldr.w	r2, [r4, #148]	; 0x94
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    4c70:	str.w	r2, [r3, #132]	; 0x84
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
#endif
    }
    _pspi->endTransaction();
    4c74:	ldr	r0, [r4, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    4c76:	ldrb	r3, [r0, #19]
    4c78:	cmp	r3, #0
    4c7a:	beq.w	4a18 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x14c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    4c7e:	lsls	r3, r3, #31
    4c80:	bpl.n	4c88 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x3bc>
    4c82:	ldr	r2, [r0, #40]	; 0x28
    4c84:	ldr	r3, [pc, #44]	; (4cb4 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x3e8>)
    4c86:	str	r2, [r3, #0]
			}
#endif
    }
    endSPITransaction();
  }
}
    4c88:	add	sp, #20
    4c8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c8e:	b.w	2978 <SPIClass::endTransaction() [clone .part.9]>
    4c92:	ldr	r3, [r4, #28]
    4c94:	b.n	4c1c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x350>
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
    4c96:	str.w	r7, [r2, #136]	; 0x88
    4c9a:	b.n	4c06 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x33a>

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
    4c9c:	ldr	r3, [r4, #28]
    4c9e:	ldr	r3, [r3, #96]	; 0x60
    4ca0:	str.w	r3, [r4, #156]	; 0x9c
    4ca4:	b.n	4a76 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x1aa>
    4ca6:	nop
    4ca8:	.word	0x0020000f
    4cac:	.word	0x0328001f
    4cb0:	.word	0xfcd7ffe0
    4cb4:	.word	0xe000e100

00004cb8 <ILI9341_t3n::fillScreen(unsigned short)>:
    writedata16_last(color);
    endSPITransaction();
  }
}

void ILI9341_t3n::fillScreen(uint16_t color) {
    4cb8:	push	{r4, lr}
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft && _standard) {
    4cba:	ldrb.w	r3, [r0, #180]	; 0xb4
    writedata16_last(color);
    endSPITransaction();
  }
}

void ILI9341_t3n::fillScreen(uint16_t color) {
    4cbe:	sub	sp, #8
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft && _standard) {
    4cc0:	cmp	r3, #0
    4cc2:	beq.n	4daa <ILI9341_t3n::fillScreen(unsigned short)+0xf2>
    4cc4:	ldrb.w	r3, [r0, #63]	; 0x3f
    4cc8:	cmp	r3, #0
    4cca:	beq.n	4daa <ILI9341_t3n::fillScreen(unsigned short)+0xf2>
    _changed_max_y = -1;
  }

  void updateChangedRange(int16_t x, int16_t y, int16_t w, int16_t h)
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
    4ccc:	ldrsh.w	r4, [r0, #188]	; 0xbc
    // Speed up lifted from Franks DMA code... _standard is if no offsets and
    // rects..
    updateChangedRange(
    4cd0:	ldrsh.w	r2, [r0, #32]
    4cd4:	cmp	r4, #0
    4cd6:	ldrsh.w	r3, [r0, #34]	; 0x22
    4cda:	ble.n	4ce2 <ILI9341_t3n::fillScreen(unsigned short)+0x2a>
      _changed_min_x = x;
    4cdc:	movs	r4, #0
    4cde:	strh.w	r4, [r0, #188]	; 0xbc
    if (y < _changed_min_y)
    4ce2:	ldrsh.w	r4, [r0, #192]	; 0xc0
    4ce6:	cmp	r4, #0
    4ce8:	ble.n	4cf0 <ILI9341_t3n::fillScreen(unsigned short)+0x38>
      _changed_min_y = y;
    4cea:	movs	r4, #0
    4cec:	strh.w	r4, [r0, #192]	; 0xc0
    x += w - 1;
    4cf0:	subs	r2, #1
    y += h - 1;
    if (x > _changed_max_x)
    4cf2:	ldrsh.w	r4, [r0, #190]	; 0xbe
    if (x < _changed_min_x)
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    x += w - 1;
    y += h - 1;
    4cf6:	subs	r3, #1
        0, 0, _width,
        _height); // update the range of the screen that has been changed;
    uint32_t color32 = (color << 16) | color;
    4cf8:	orr.w	r1, r1, r1, lsl #16
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    x += w - 1;
    4cfc:	sxth	r2, r2
    y += h - 1;
    4cfe:	sxth	r3, r3
    if (x > _changed_max_x)
    4d00:	cmp	r4, r2
      _changed_max_x = x;
    4d02:	it	lt
    4d04:	strhlt.w	r2, [r0, #190]	; 0xbe
    if (y > _changed_max_y)
    4d08:	ldrsh.w	r2, [r0, #194]	; 0xc2
    4d0c:	cmp	r2, r3
    4d0e:	ldr	r2, [pc, #180]	; (4dc4 <ILI9341_t3n::fillScreen(unsigned short)+0x10c>)
      _changed_max_y = y;
    4d10:	it	lt
    4d12:	strhlt.w	r3, [r0, #194]	; 0xc2

    uint32_t *pfbPixel = (uint32_t *)_pfbtft;
    4d16:	ldr.w	r0, [r0, #176]	; 0xb0
    4d1a:	add.w	r3, r0, #128	; 0x80
    4d1e:	add	r2, r0
    uint32_t *pfbtft_end = (uint32_t *)((
        uint16_t *)&_pfbtft[(ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT)]); // setup
    while (pfbPixel < pfbtft_end) {
      *pfbPixel++ = color32;
      *pfbPixel++ = color32;
    4d20:	str.w	r1, [r3, #-124]
      *pfbPixel++ = color32;
    4d24:	str.w	r1, [r3, #-120]
      *pfbPixel++ = color32;
    4d28:	str.w	r1, [r3, #-116]
      *pfbPixel++ = color32;
    4d2c:	str.w	r1, [r3, #-112]
      *pfbPixel++ = color32;
    4d30:	str.w	r1, [r3, #-108]
      *pfbPixel++ = color32;
    4d34:	str.w	r1, [r3, #-104]
      *pfbPixel++ = color32;
    4d38:	str.w	r1, [r3, #-100]
      *pfbPixel++ = color32;
    4d3c:	str.w	r1, [r3, #-96]
      *pfbPixel++ = color32;
    4d40:	str.w	r1, [r3, #-92]
      *pfbPixel++ = color32;
    4d44:	str.w	r1, [r3, #-88]
      *pfbPixel++ = color32;
    4d48:	str.w	r1, [r3, #-84]
      *pfbPixel++ = color32;
    4d4c:	str.w	r1, [r3, #-80]
      *pfbPixel++ = color32;
    4d50:	str.w	r1, [r3, #-76]
      *pfbPixel++ = color32;
    4d54:	str.w	r1, [r3, #-72]
      *pfbPixel++ = color32;
    4d58:	str.w	r1, [r3, #-68]
      *pfbPixel++ = color32;
    4d5c:	str.w	r1, [r3, #-64]
      *pfbPixel++ = color32;
    4d60:	str.w	r1, [r3, #-60]
      *pfbPixel++ = color32;
    4d64:	str.w	r1, [r3, #-56]
      *pfbPixel++ = color32;
    4d68:	str.w	r1, [r3, #-52]
      *pfbPixel++ = color32;
    4d6c:	str.w	r1, [r3, #-48]
      *pfbPixel++ = color32;
    4d70:	str.w	r1, [r3, #-44]
      *pfbPixel++ = color32;
    4d74:	str.w	r1, [r3, #-40]
      *pfbPixel++ = color32;
    4d78:	str.w	r1, [r3, #-36]
      *pfbPixel++ = color32;
    4d7c:	str.w	r1, [r3, #-32]
      *pfbPixel++ = color32;
    4d80:	str.w	r1, [r3, #-28]
      *pfbPixel++ = color32;
    4d84:	str.w	r1, [r3, #-24]
      *pfbPixel++ = color32;
    4d88:	str.w	r1, [r3, #-20]
      *pfbPixel++ = color32;
    4d8c:	str.w	r1, [r3, #-16]
      *pfbPixel++ = color32;
    4d90:	str.w	r1, [r3, #-12]
      *pfbPixel++ = color32;
    4d94:	str.w	r1, [r3, #-8]
      *pfbPixel++ = color32;
    4d98:	str.w	r1, [r3, #-4]

    uint32_t *pfbPixel = (uint32_t *)_pfbtft;
    uint32_t *pfbtft_end = (uint32_t *)((
        uint16_t *)&_pfbtft[(ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT)]); // setup
    while (pfbPixel < pfbtft_end) {
      *pfbPixel++ = color32;
    4d9c:	str.w	r1, [r3, #-128]
    4da0:	adds	r3, #128	; 0x80
    uint32_t color32 = (color << 16) | color;

    uint32_t *pfbPixel = (uint32_t *)_pfbtft;
    uint32_t *pfbtft_end = (uint32_t *)((
        uint16_t *)&_pfbtft[(ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT)]); // setup
    while (pfbPixel < pfbtft_end) {
    4da2:	cmp	r3, r2
    4da4:	bne.n	4d20 <ILI9341_t3n::fillScreen(unsigned short)+0x68>
  } else
#endif
  {
    fillRect(0, 0, _width, _height, color);
  }
}
    4da6:	add	sp, #8
    4da8:	pop	{r4, pc}
    }

  } else
#endif
  {
    fillRect(0, 0, _width, _height, color);
    4daa:	movs	r2, #0
    4dac:	ldrsh.w	r4, [r0, #34]	; 0x22
    4db0:	ldrsh.w	r3, [r0, #32]
    4db4:	str	r1, [sp, #4]
    4db6:	mov	r1, r2
    4db8:	str	r4, [sp, #0]
    4dba:	bl	48cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
  }
}
    4dbe:	add	sp, #8
    4dc0:	pop	{r4, pc}
    4dc2:	nop
    4dc4:	.word	0x00025880

00004dc8 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)>:
      0b00000111111000001111100000011111;
  Pixel(x, y, (uint16_t)((result >> 16) | result));
}

void ILI9341_t3n::drawFontBits(bool opaque, uint32_t bits, uint32_t numbits,
                               int32_t x, int32_t y, uint32_t repeat) {
    4dc8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4dcc:	sub	sp, #28
    4dce:	mov	r7, r0
    4dd0:	ldr	r5, [sp, #68]	; 0x44
    4dd2:	ldr	r4, [sp, #64]	; 0x40
    4dd4:	str	r5, [sp, #16]
    4dd6:	ldr	r5, [sp, #72]	; 0x48
    4dd8:	str	r5, [sp, #20]
  if (bits == 0) {
    4dda:	cbnz	r2, 4de6 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x1e>
    if (opaque) {
    4ddc:	cmp	r1, #0
    4dde:	bne.n	4eb0 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0xe8>
      if (opaque) {
        fillRect(x1 - bgw, y, bgw, repeat, textbgcolor);
      }
    }
  }
}
    4de0:	add	sp, #28
    4de2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4de6:	mov	r8, r2
    4de8:	movs	r6, #0
          bgw = 0;
        }
        w++;
      } else {
        if (w > 0) {
          fillRect(x1 - w, y, w, repeat, textcolor);
    4dea:	ldrsh.w	r2, [sp, #20]
    4dee:	add.w	r9, r3, r4
    4df2:	str	r1, [sp, #12]
    w = 0;
    bgw = 0;

    do {
      n--;
      if (bits & (1 << n)) {
    4df4:	mov.w	sl, #1
          bgw = 0;
        }
        w++;
      } else {
        if (w > 0) {
          fillRect(x1 - w, y, w, repeat, textcolor);
    4df8:	ldrsh.w	fp, [sp, #16]
    4dfc:	mov	r4, r6
    4dfe:	str	r2, [sp, #8]
    4e00:	b.n	4e2e <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x66>

    do {
      n--;
      if (bits & (1 << n)) {
        if (bgw > 0) {
          if (opaque) {
    4e02:	cbz	r6, 4e26 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x5e>
            fillRect(x1 - bgw, y, bgw, repeat, textbgcolor);
    4e04:	rsb	r1, r3, r9
    4e08:	sxth	r3, r6
    4e0a:	mov	r2, fp
    4e0c:	mov	r0, r7
    4e0e:	subs	r1, r1, r6

    do {
      n--;
      if (bits & (1 << n)) {
        if (bgw > 0) {
          if (opaque) {
    4e10:	ldr	r6, [sp, #12]
    4e12:	cbz	r6, 4e26 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x5e>
            fillRect(x1 - bgw, y, bgw, repeat, textbgcolor);
    4e14:	ldrh.w	lr, [r7, #76]	; 0x4c
    4e18:	sxth	r1, r1
    4e1a:	ldr	r6, [sp, #8]
    4e1c:	str.w	lr, [sp, #4]
    4e20:	str	r6, [sp, #0]
    4e22:	bl	48cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
          }
          bgw = 0;
        }
        w++;
    4e26:	adds	r4, #1
    4e28:	movs	r6, #0
    4e2a:	mov	r3, r5
          w = 0;
        }
        bgw++;
      }
      x1++;
    } while (n > 0);
    4e2c:	cbz	r5, 4e62 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x9a>
    w = 0;
    bgw = 0;

    do {
      n--;
      if (bits & (1 << n)) {
    4e2e:	subs	r5, r3, #1
    4e30:	lsl.w	r2, sl, r5
    4e34:	tst.w	r2, r8
    4e38:	bne.n	4e02 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x3a>
          bgw = 0;
        }
        w++;
      } else {
        if (w > 0) {
          fillRect(x1 - w, y, w, repeat, textcolor);
    4e3a:	rsb	r1, r3, r9
          w = 0;
        }
        bgw++;
    4e3e:	adds	r6, #1
          bgw = 0;
        }
        w++;
      } else {
        if (w > 0) {
          fillRect(x1 - w, y, w, repeat, textcolor);
    4e40:	sxth	r3, r4
    4e42:	mov	r2, fp
    4e44:	subs	r1, r1, r4
    4e46:	mov	r0, r7
          }
          bgw = 0;
        }
        w++;
      } else {
        if (w > 0) {
    4e48:	cbz	r4, 4e5a <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x92>
          fillRect(x1 - w, y, w, repeat, textcolor);
    4e4a:	ldrh.w	lr, [r7, #74]	; 0x4a
    4e4e:	sxth	r1, r1
    4e50:	ldr	r4, [sp, #8]
    4e52:	stmia.w	sp, {r4, lr}
    4e56:	bl	48cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
          w = 0;
        }
        bgw++;
    4e5a:	movs	r4, #0
    4e5c:	mov	r3, r5
      }
      x1++;
    } while (n > 0);
    4e5e:	cmp	r5, #0
    4e60:	bne.n	4e2e <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x66>

    if (w > 0) {
    4e62:	cbz	r4, 4e82 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0xba>
      fillRect(x1 - w, y, w, repeat, textcolor);
    4e64:	ldrh.w	r3, [r7, #74]	; 0x4a
    4e68:	rsb	r1, r4, r9
    4e6c:	ldrsh.w	r2, [sp, #20]
    4e70:	mov	r0, r7
    4e72:	str	r3, [sp, #4]
    4e74:	sxth	r1, r1
    4e76:	str	r2, [sp, #0]
    4e78:	sxth	r3, r4
    4e7a:	ldrsh.w	r2, [sp, #16]
    4e7e:	bl	48cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    }

    if (bgw > 0) {
      if (opaque) {
    4e82:	cmp	r6, #0
    4e84:	beq.n	4de0 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x18>
    4e86:	ldr	r3, [sp, #12]
    4e88:	cmp	r3, #0
    4e8a:	beq.n	4de0 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x18>
        fillRect(x1 - bgw, y, bgw, repeat, textbgcolor);
    4e8c:	ldrh.w	r0, [r7, #76]	; 0x4c
    4e90:	rsb	r1, r6, r9
    4e94:	ldrsh.w	r2, [sp, #20]
    4e98:	sxth	r3, r6
    4e9a:	str	r0, [sp, #68]	; 0x44
    4e9c:	sxth	r1, r1
    4e9e:	str	r2, [sp, #64]	; 0x40
    4ea0:	mov	r0, r7
    4ea2:	ldrsh.w	r2, [sp, #16]
      }
    }
  }
}
    4ea6:	add	sp, #28
    4ea8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      fillRect(x1 - w, y, w, repeat, textcolor);
    }

    if (bgw > 0) {
      if (opaque) {
        fillRect(x1 - bgw, y, bgw, repeat, textbgcolor);
    4eac:	b.w	48cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>

void ILI9341_t3n::drawFontBits(bool opaque, uint32_t bits, uint32_t numbits,
                               int32_t x, int32_t y, uint32_t repeat) {
  if (bits == 0) {
    if (opaque) {
      fillRect(x, y, numbits, repeat, textbgcolor);
    4eb0:	ldrh.w	r2, [r0, #76]	; 0x4c
    4eb4:	sxth	r3, r3
    4eb6:	ldrsh.w	r1, [sp, #20]
    4eba:	str	r2, [sp, #68]	; 0x44
    4ebc:	str	r1, [sp, #64]	; 0x40
    4ebe:	sxth	r1, r4
    4ec0:	ldrsh.w	r2, [sp, #16]
      if (opaque) {
        fillRect(x1 - bgw, y, bgw, repeat, textbgcolor);
      }
    }
  }
}
    4ec4:	add	sp, #28
    4ec6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      fillRect(x1 - w, y, w, repeat, textcolor);
    }

    if (bgw > 0) {
      if (opaque) {
        fillRect(x1 - bgw, y, bgw, repeat, textbgcolor);
    4eca:	b.w	48cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    4ece:	nop

00004ed0 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)>:
}
#endif

// Now lets see if we can writemultiple pixels
void ILI9341_t3n::writeRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            const uint16_t *pcolors) {
    4ed0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if (x == CENTER)
    4ed4:	movw	r7, #9998	; 0x270e
}
#endif

// Now lets see if we can writemultiple pixels
void ILI9341_t3n::writeRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            const uint16_t *pcolors) {
    4ed8:	sub	sp, #20
    4eda:	mov	r5, r0
    4edc:	mov	r8, r3

  if (x == CENTER)
    4ede:	cmp	r1, r7
}
#endif

// Now lets see if we can writemultiple pixels
void ILI9341_t3n::writeRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            const uint16_t *pcolors) {
    4ee0:	ldrsh.w	r6, [sp, #56]	; 0x38
    4ee4:	ldr	r4, [sp, #60]	; 0x3c

  if (x == CENTER)
    4ee6:	beq.w	502e <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x15e>
    x = (_width - w) / 2;
  if (y == CENTER)
    4eea:	movw	r3, #9998	; 0x270e
    4eee:	cmp	r2, r3
    4ef0:	beq.w	501e <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x14e>
    y = (_height - h) / 2;
  x += _originx;
    4ef4:	ldrh	r7, [r5, #50]	; 0x32
  uint16_t x_clip_right =
      0; // how many color entries to skip at end of row for clipping
  // Rectangular clipping

  // See if the whole thing out of bounds...
  if ((x >= _displayclipx2) || (y >= _displayclipy2))
    4ef6:	ldrsh.w	r0, [r5, #58]	; 0x3a

  if (x == CENTER)
    x = (_width - w) / 2;
  if (y == CENTER)
    y = (_height - h) / 2;
  x += _originx;
    4efa:	add	r1, r7
    4efc:	uxth	r7, r1
    4efe:	sxth	r1, r7
  uint16_t x_clip_right =
      0; // how many color entries to skip at end of row for clipping
  // Rectangular clipping

  // See if the whole thing out of bounds...
  if ((x >= _displayclipx2) || (y >= _displayclipy2))
    4f00:	cmp	r1, r0
    4f02:	bge.w	5018 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x148>
  if (x == CENTER)
    x = (_width - w) / 2;
  if (y == CENTER)
    y = (_height - h) / 2;
  x += _originx;
  y += _originy;
    4f06:	ldrh	r3, [r5, #52]	; 0x34
  uint16_t x_clip_right =
      0; // how many color entries to skip at end of row for clipping
  // Rectangular clipping

  // See if the whole thing out of bounds...
  if ((x >= _displayclipx2) || (y >= _displayclipy2))
    4f08:	ldrsh.w	lr, [r5, #60]	; 0x3c
  if (x == CENTER)
    x = (_width - w) / 2;
  if (y == CENTER)
    y = (_height - h) / 2;
  x += _originx;
  y += _originy;
    4f0c:	add	r3, r2
    4f0e:	sxth	r3, r3
  uint16_t x_clip_right =
      0; // how many color entries to skip at end of row for clipping
  // Rectangular clipping

  // See if the whole thing out of bounds...
  if ((x >= _displayclipx2) || (y >= _displayclipy2))
    4f10:	cmp	r3, lr
    4f12:	bge.w	5018 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x148>
    return;
  if (((x + w) <= _displayclipx1) || ((y + h) <= _displayclipy1))
    4f16:	add.w	r9, r1, r8
    4f1a:	ldrsh.w	r2, [r5, #54]	; 0x36
    4f1e:	mov	ip, r1
    4f20:	cmp	r9, r2
    4f22:	ble.n	5018 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x148>
    4f24:	add.w	fp, r6, r3
    4f28:	ldrsh.w	sl, [r5, #56]	; 0x38
    4f2c:	str	r3, [sp, #0]
    4f2e:	cmp	fp, sl
    4f30:	ble.n	5018 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x148>
  // In these cases you can not do simple clipping, as we need to synchronize
  // the colors array with the
  // We can clip the height as when we get to the last visible we don't have to
  // go any farther.
  // also maybe starting y as we will advance the color array.
  if (y < _displayclipy1) {
    4f32:	cmp	r3, sl
    4f34:	bge.n	4f52 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x82>
    int dy = (_displayclipy1 - y);
    4f36:	rsb	fp, r3, sl
    4f3a:	mov	r3, sl
    4f3c:	str.w	sl, [sp]
    h -= dy;
    4f40:	rsb	r6, fp, r6
    pcolors += (dy * w); // Advance color array to
    4f44:	mul.w	fp, fp, r8
  // We can clip the height as when we get to the last visible we don't have to
  // go any farther.
  // also maybe starting y as we will advance the color array.
  if (y < _displayclipy1) {
    int dy = (_displayclipy1 - y);
    h -= dy;
    4f48:	sxth	r6, r6
    pcolors += (dy * w); // Advance color array to
    4f4a:	add.w	r4, r4, fp, lsl #1
    4f4e:	add.w	fp, r6, sl
    y = _displayclipy1;
  }

  if ((y + h - 1) >= _displayclipy2)
    4f52:	cmp	lr, fp
    h = _displayclipy2 - y;
    4f54:	uxth.w	fp, r3
    h -= dy;
    pcolors += (dy * w); // Advance color array to
    y = _displayclipy1;
  }

  if ((y + h - 1) >= _displayclipy2)
    4f58:	bge.n	4f60 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x90>
    h = _displayclipy2 - y;
    4f5a:	rsb	r6, fp, lr
    4f5e:	sxth	r6, r6

  // For X see how many items in color array to skip at start of row and
  // likewise end of row
  if (x < _displayclipx1) {
    4f60:	cmp	r1, r2
    4f62:	blt.n	504a <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x17a>
  if (y == CENTER)
    y = (_height - h) / 2;
  x += _originx;
  y += _originy;
  uint16_t x_clip_left =
      0; // How many entries at start of colors to skip at start of row
    4f64:	mov.w	sl, #0
  if (x < _displayclipx1) {
    x_clip_left = _displayclipx1 - x;
    w -= x_clip_left;
    x = _displayclipx1;
  }
  if ((x + w - 1) >= _displayclipx2) {
    4f68:	cmp	r0, r9
    4f6a:	bge.n	5044 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x174>
    x_clip_right = w;
    w = _displayclipx2 - x;
    4f6c:	subs	r2, r0, r7
    x_clip_left = _displayclipx1 - x;
    w -= x_clip_left;
    x = _displayclipx1;
  }
  if ((x + w - 1) >= _displayclipx2) {
    x_clip_right = w;
    4f6e:	uxth.w	r9, r8
    w = _displayclipx2 - x;
    4f72:	uxth	r2, r2
    x_clip_right -= w;
    4f74:	rsb	r9, r2, r9
    w -= x_clip_left;
    x = _displayclipx1;
  }
  if ((x + w - 1) >= _displayclipx2) {
    x_clip_right = w;
    w = _displayclipx2 - x;
    4f78:	sxth.w	r8, r2
    x_clip_right -= w;
    4f7c:	uxth.w	r9, r9
  }

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    4f80:	ldrb.w	r2, [r5, #180]	; 0xb4
    4f84:	cmp	r2, #0
    4f86:	beq.n	506a <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x19a>
    _changed_max_y = -1;
  }

  void updateChangedRange(int16_t x, int16_t y, int16_t w, int16_t h)
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
    4f88:	ldrsh.w	r2, [r5, #188]	; 0xbc
    4f8c:	cmp	r2, r1
      _changed_min_x = x;
    if (y < _changed_min_y)
    4f8e:	ldrsh.w	r2, [r5, #192]	; 0xc0
  }

  void updateChangedRange(int16_t x, int16_t y, int16_t w, int16_t h)
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    4f92:	it	gt
    4f94:	strhgt.w	r1, [r5, #188]	; 0xbc
    if (y < _changed_min_y)
    4f98:	cmp	r2, r3
      _changed_min_y = y;
    x += w - 1;
    4f9a:	add.w	r2, r7, #4294967295
    y += h - 1;
    if (x > _changed_max_x)
    4f9e:	ldrsh.w	r1, [r5, #190]	; 0xbe
  void updateChangedRange(int16_t x, int16_t y, int16_t w, int16_t h)
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    4fa2:	it	gt
    4fa4:	strhgt.w	r3, [r5, #192]	; 0xc0
    x += w - 1;
    y += h - 1;
    4fa8:	add.w	r3, fp, #4294967295
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    x += w - 1;
    4fac:	add	r2, r8
    y += h - 1;
    4fae:	add	r3, r6
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    x += w - 1;
    4fb0:	sxth	r2, r2
    y += h - 1;
    4fb2:	sxth	r3, r3
    if (x > _changed_max_x)
    4fb4:	cmp	r1, r2
    updateChangedRange(
        x, y, w, h); // update the range of the screen that has been changed;
    uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
    4fb6:	ldr	r1, [sp, #0]
      _changed_max_x = x;
    4fb8:	it	lt
    4fba:	strhlt.w	r2, [r5, #190]	; 0xbe
    if (y > _changed_max_y)
    4fbe:	ldrsh.w	r2, [r5, #194]	; 0xc2
    4fc2:	cmp	r2, r3
    4fc4:	ldrsh.w	r2, [r5, #32]
      _changed_max_y = y;
    4fc8:	it	lt
    4fca:	strhlt.w	r3, [r5, #194]	; 0xc2
    for (; h > 0; h--) {
    4fce:	cmp	r6, #0

#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    updateChangedRange(
        x, y, w, h); // update the range of the screen that has been changed;
    uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
    4fd0:	ldr.w	r3, [r5, #176]	; 0xb0
    4fd4:	mla	r0, r1, r2, ip
    4fd8:	add.w	r0, r3, r0, lsl #1
    for (; h > 0; h--) {
    4fdc:	ble.n	5018 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x148>
    4fde:	mov.w	sl, sl, lsl #1
    4fe2:	mov.w	r9, r9, lsl #1
    4fe6:	mov.w	r7, r8, lsl #1
      uint16_t *pfbPixel = pfbPixel_row;
      pcolors += x_clip_left;
      for (int i = 0; i < w; i++) {
    4fea:	cmp.w	r8, #0
    updateChangedRange(
        x, y, w, h); // update the range of the screen that has been changed;
    uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
    for (; h > 0; h--) {
      uint16_t *pfbPixel = pfbPixel_row;
      pcolors += x_clip_left;
    4fee:	add.w	r3, r4, sl
      for (int i = 0; i < w; i++) {
    4ff2:	ble.n	5040 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x170>
    4ff4:	subs	r2, r0, #2
    4ff6:	adds	r4, r3, r7
        *pfbPixel++ = *pcolors++;
    4ff8:	ldrh.w	r1, [r3], #2
        x, y, w, h); // update the range of the screen that has been changed;
    uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
    for (; h > 0; h--) {
      uint16_t *pfbPixel = pfbPixel_row;
      pcolors += x_clip_left;
      for (int i = 0; i < w; i++) {
    4ffc:	cmp	r3, r4
        *pfbPixel++ = *pcolors++;
    4ffe:	strh.w	r1, [r2, #2]!
        x, y, w, h); // update the range of the screen that has been changed;
    uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
    for (; h > 0; h--) {
      uint16_t *pfbPixel = pfbPixel_row;
      pcolors += x_clip_left;
      for (int i = 0; i < w; i++) {
    5002:	bne.n	4ff8 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x128>
    5004:	ldrsh.w	r2, [r5, #32]
    5008:	subs	r6, #1
        *pfbPixel++ = *pcolors++;
      }
      pfbPixel_row += _width;
    500a:	add.w	r0, r0, r2, lsl #1
      pcolors += x_clip_right;
    500e:	add	r4, r9
    5010:	uxth	r3, r6
    5012:	sxth	r6, r3
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  if (_use_fbtft) {
    updateChangedRange(
        x, y, w, h); // update the range of the screen that has been changed;
    uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
    for (; h > 0; h--) {
    5014:	cmp	r3, #0
    5016:	bne.n	4fea <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x11a>
    }
    writedata16_last(*pcolors++);
    pcolors += x_clip_right;
  }
  endSPITransaction();
}
    5018:	add	sp, #20
    501a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            const uint16_t *pcolors) {

  if (x == CENTER)
    x = (_width - w) / 2;
  if (y == CENTER)
    y = (_height - h) / 2;
    501e:	ldrsh.w	r3, [r5, #34]	; 0x22
    5022:	subs	r3, r3, r6
    5024:	it	mi
    5026:	addmi	r3, #1
    5028:	sbfx	r2, r3, #1, #16
    502c:	b.n	4ef4 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x24>
// Now lets see if we can writemultiple pixels
void ILI9341_t3n::writeRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            const uint16_t *pcolors) {

  if (x == CENTER)
    x = (_width - w) / 2;
    502e:	ldrsh.w	r3, [r0, #32]
    5032:	subs.w	r3, r3, r8
    5036:	it	mi
    5038:	addmi	r3, #1
    503a:	sbfx	r1, r3, #1, #16
    503e:	b.n	4eea <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x1a>
    updateChangedRange(
        x, y, w, h); // update the range of the screen that has been changed;
    uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
    for (; h > 0; h--) {
      uint16_t *pfbPixel = pfbPixel_row;
      pcolors += x_clip_left;
    5040:	mov	r4, r3
    5042:	b.n	5008 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x138>
  x += _originx;
  y += _originy;
  uint16_t x_clip_left =
      0; // How many entries at start of colors to skip at start of row
  uint16_t x_clip_right =
      0; // how many color entries to skip at end of row for clipping
    5044:	mov.w	r9, #0
    5048:	b.n	4f80 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0xb0>
    h = _displayclipy2 - y;

  // For X see how many items in color array to skip at start of row and
  // likewise end of row
  if (x < _displayclipx1) {
    x_clip_left = _displayclipx1 - x;
    504a:	uxth.w	lr, r2
    504e:	mov	ip, r2
    5050:	mov	r1, r2
    5052:	rsb	sl, r7, lr
    5056:	mov	r7, lr
    5058:	uxth.w	sl, sl
    w -= x_clip_left;
    505c:	rsb	r8, sl, r8
    5060:	sxth.w	r8, r8
    5064:	add.w	r9, r8, r2
    5068:	b.n	4f68 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x98>
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    506a:	movs	r3, #7
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    506c:	ldr	r2, [r5, #20]
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    506e:	ldr	r0, [r5, #8]
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    5070:	str	r3, [sp, #12]
    5072:	add	r3, sp, #16
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    5074:	str	r2, [sp, #8]
    5076:	ldmdb	r3, {r1, r2}
    507a:	bl	2d30 <SPIClass::beginTransaction(SPISettings)>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
    507e:	ldr.w	r3, [r5, #172]	; 0xac
    5082:	cmp	r3, #0
    5084:	beq.w	52c6 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x3f6>
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    5088:	ldr.w	r3, [r5, #152]	; 0x98
    508c:	cbz	r3, 5096 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x1c6>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
    508e:	ldr.w	r2, [r5, #148]	; 0x94
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
    5092:	str.w	r2, [r3, #136]	; 0x88
    return;
  }
#endif

  beginSPITransaction(_SPI_CLOCK);
  setAddr(x, y, x + w - 1, y + h - 1);
    5096:	subs	r2, r7, #1
    5098:	add.w	r3, fp, #4294967295
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    509c:	ldr.w	r1, [r5, #164]	; 0xa4
    50a0:	mov	r0, r5
    50a2:	add	r2, r8
    50a4:	add	r3, r6
    50a6:	orr.w	r1, r1, #7
    50aa:	uxth	r2, r2
    50ac:	uxth	r3, r3
    50ae:	str	r2, [sp, #4]
    50b0:	str	r3, [sp, #0]
    50b2:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    50b6:	ldr	r3, [r5, #28]
    50b8:	movs	r1, #42	; 0x2a
    pending_rx_count++; //
    waitFifoNotFull();
    50ba:	mov	r0, r5
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    50bc:	str	r1, [r3, #100]	; 0x64
    pending_rx_count++; //
    50be:	ldrb.w	r3, [r5, #146]	; 0x92
    50c2:	adds	r3, #1
    50c4:	strb.w	r3, [r5, #146]	; 0x92
    waitFifoNotFull();
    50c8:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    50cc:	ldr.w	r3, [r5, #168]	; 0xa8
    50d0:	ldr	r1, [pc, #508]	; (52d0 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x400>)
    50d2:	mov	r0, r5
    50d4:	orrs	r1, r3
    50d6:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    50da:	ldr	r3, [r5, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    50dc:	mov	r0, r5
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    50de:	str	r7, [r3, #100]	; 0x64
    pending_rx_count++; //
    50e0:	ldrb.w	r3, [r5, #146]	; 0x92
    50e4:	adds	r3, #1
    50e6:	strb.w	r3, [r5, #146]	; 0x92
    waitFifoNotFull();
    50ea:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    50ee:	ldr.w	r3, [r5, #168]	; 0xa8
    50f2:	ldr	r1, [pc, #476]	; (52d0 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x400>)
    50f4:	mov	r0, r5
    50f6:	orrs	r1, r3
    50f8:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    50fc:	ldr	r2, [sp, #4]
    50fe:	ldr	r3, [r5, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    5100:	mov	r0, r5
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    5102:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    5104:	ldrb.w	r3, [r5, #146]	; 0x92
    5108:	adds	r3, #1
    510a:	strb.w	r3, [r5, #146]	; 0x92
    waitFifoNotFull();
    510e:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    5112:	ldr.w	r1, [r5, #164]	; 0xa4
    5116:	mov	r0, r5
    5118:	orr.w	r1, r1, #7
    511c:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    5120:	movs	r2, #43	; 0x2b
    5122:	ldr	r3, [r5, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    5124:	mov	r0, r5
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    5126:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    5128:	ldrb.w	r3, [r5, #146]	; 0x92
    512c:	adds	r3, #1
    512e:	strb.w	r3, [r5, #146]	; 0x92
    waitFifoNotFull();
    5132:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    5136:	ldr.w	r3, [r5, #168]	; 0xa8
    513a:	ldr	r1, [pc, #404]	; (52d0 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x400>)
    513c:	mov	r0, r5
    513e:	orrs	r1, r3
    5140:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    5144:	ldr	r3, [r5, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    5146:	mov	r0, r5
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    5148:	str.w	fp, [r3, #100]	; 0x64
    pending_rx_count++; //
    514c:	ldrb.w	r3, [r5, #146]	; 0x92
    5150:	adds	r3, #1
    5152:	strb.w	r3, [r5, #146]	; 0x92
    waitFifoNotFull();
    5156:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    515a:	ldr.w	r3, [r5, #168]	; 0xa8
    515e:	ldr	r1, [pc, #368]	; (52d0 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x400>)
    5160:	mov	r0, r5
    5162:	orrs	r1, r3
    5164:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    5168:	ldr	r2, [sp, #0]
    516a:	ldr	r3, [r5, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    516c:	mov	r0, r5
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    516e:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    5170:	ldrb.w	r3, [r5, #146]	; 0x92
    5174:	adds	r3, #1
    5176:	strb.w	r3, [r5, #146]	; 0x92
    waitFifoNotFull();
    517a:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    517e:	ldr.w	r1, [r5, #164]	; 0xa4
    5182:	mov	r0, r5
    5184:	orr.w	r1, r1, #7
    5188:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    518c:	ldr	r3, [r5, #28]
    518e:	movs	r2, #44	; 0x2c
    pending_rx_count++; //
    waitFifoNotFull();
    5190:	mov	r0, r5
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    5192:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    5194:	ldrb.w	r3, [r5, #146]	; 0x92
    5198:	adds	r3, #1
    519a:	strb.w	r3, [r5, #146]	; 0x92
    waitFifoNotFull();
    519e:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
  writecommand_cont(ILI9341_RAMWR);
  for (y = h; y > 0; y--) {
    51a2:	cmp	r6, #0
    51a4:	ble.n	5290 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x3c0>
    51a6:	mov.w	r9, r9, lsl #1
    51aa:	str	r6, [sp, #0]
    51ac:	mov.w	sl, sl, lsl #1
    51b0:	add.w	r9, r9, #2
    pcolors += x_clip_left;
    for (x = w; x > 1; x--) {
    51b4:	cmp.w	r8, #1

  beginSPITransaction(_SPI_CLOCK);
  setAddr(x, y, x + w - 1, y + h - 1);
  writecommand_cont(ILI9341_RAMWR);
  for (y = h; y > 0; y--) {
    pcolors += x_clip_left;
    51b8:	add.w	r7, r4, sl
    for (x = w; x > 1; x--) {
    51bc:	ble.n	5256 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x386>
    51be:	mov	r4, r8
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    51c0:	ldr.w	ip, [r5, #168]	; 0xa8
    51c4:	ldr	r3, [pc, #264]	; (52d0 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x400>)
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
    51c6:	ldr.w	r0, [r5, #156]	; 0x9c
    51ca:	ldr	r2, [pc, #264]	; (52d4 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x404>)
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    51cc:	orr.w	r3, ip, r3
      writedata16_cont(*pcolors++);
    51d0:	ldrh.w	r1, [r7], #2
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
    51d4:	ands	r2, r0
    51d6:	cmp	r3, r2
    51d8:	beq.n	52bc <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x3ec>
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    51da:	ldr	r2, [pc, #252]	; (52d8 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x408>)
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    51dc:	eor.w	lr, r3, r0
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    51e0:	ands	r2, r0
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    51e2:	tst.w	lr, #50331648	; 0x3000000
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    51e6:	orr.w	r0, r2, r3
    51ea:	str.w	r0, [r5, #156]	; 0x9c
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    51ee:	beq.n	5232 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x362>
    51f0:	ldr.w	r6, [r5, #160]	; 0xa0
    51f4:	cbz	r6, 5232 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x362>
    51f6:	ldrb.w	r0, [r5, #146]	; 0x92
    51fa:	ldr	r3, [r5, #28]
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    51fc:	cbz	r0, 5212 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x342>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    51fe:	ldr	r2, [r3, #112]	; 0x70
    5200:	lsls	r2, r2, #30
    5202:	bmi.n	51fc <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x32c>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    5204:	subs	r0, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    5206:	ldr	r2, [r3, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
    5208:	uxtb	r0, r0
    520a:	strb.w	r0, [r5, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    520e:	cmp	r0, #0
    5210:	bne.n	51fe <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x32e>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    5212:	movw	r2, #513	; 0x201
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
    5216:	tst.w	ip, #50331648	; 0x3000000
    521a:	str	r2, [r3, #16]
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
    521c:	ldr.w	r2, [r5, #172]	; 0xac
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
    5220:	beq.n	52c0 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x3f0>
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    5222:	str.w	r6, [r2, #132]	; 0x84
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
        else
          DIRECT_WRITE_LOW(_dcport, _dcpinmask);
        _pimxrt_spi->TCR = _spi_tcr_current &
    5226:	ldr.w	r2, [r5, #156]	; 0x9c
    522a:	bic.w	r2, r2, #52428800	; 0x3200000
                           ~(LPSPI_TCR_PCS(3) |
                             LPSPI_TCR_CONT); // go ahead and update TCR anyway?
    522e:	str	r2, [r3, #96]	; 0x60
    5230:	b.n	523c <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x36c>
    5232:	ldr	r3, [r5, #28]
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
        while ((_pimxrt_spi->FSR & 0x1f))
    5234:	ldr	r2, [r3, #92]	; 0x5c
    5236:	lsls	r6, r2, #27
    5238:	bne.n	5234 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x364>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR
    523a:	str	r0, [r3, #96]	; 0x60
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    523c:	str	r1, [r3, #100]	; 0x64
    523e:	subs	r4, #1
    pending_rx_count++; //
    5240:	ldrb.w	r3, [r5, #146]	; 0x92
    waitFifoNotFull();
    5244:	mov	r0, r5
    5246:	sxth	r4, r4
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    pending_rx_count++; //
    5248:	adds	r3, #1
    524a:	strb.w	r3, [r5, #146]	; 0x92
    waitFifoNotFull();
    524e:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
  beginSPITransaction(_SPI_CLOCK);
  setAddr(x, y, x + w - 1, y + h - 1);
  writecommand_cont(ILI9341_RAMWR);
  for (y = h; y > 0; y--) {
    pcolors += x_clip_left;
    for (x = w; x > 1; x--) {
    5252:	cmp	r4, #1
    5254:	bne.n	51c0 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x2f0>
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    waitTransmitComplete();
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15));
    5256:	ldr.w	r1, [r5, #168]	; 0xa8
    525a:	mov	r0, r5
      writedata16_cont(*pcolors++);
    }
    writedata16_last(*pcolors++);
    525c:	ldrh.w	fp, [r7]
    pcolors += x_clip_right;
    5260:	add.w	r4, r7, r9
    5264:	orr.w	r1, r1, #15
    5268:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    526c:	ldr	r3, [r5, #28]
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    waitTransmitComplete();
    526e:	mov	r0, r5
    pending_rx_count++; //
    waitTransmitComplete();
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15));
    _pimxrt_spi->TDR = d;
    5270:	str.w	fp, [r3, #100]	; 0x64
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    5274:	ldrb.w	r3, [r5, #146]	; 0x92
    5278:	adds	r3, #1
    527a:	strb.w	r3, [r5, #146]	; 0x92
    waitTransmitComplete();
    527e:	bl	3de8 <ILI9341_t3n::waitTransmitComplete()>
    5282:	ldr	r3, [sp, #0]
    5284:	subs	r3, #1
    5286:	uxth	r3, r3
    5288:	sxth	r2, r3
    528a:	str	r2, [sp, #0]
#endif

  beginSPITransaction(_SPI_CLOCK);
  setAddr(x, y, x + w - 1, y + h - 1);
  writecommand_cont(ILI9341_RAMWR);
  for (y = h; y > 0; y--) {
    528c:	cmp	r3, #0
    528e:	bne.n	51b4 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x2e4>
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    5290:	ldr.w	r3, [r5, #152]	; 0x98
    5294:	cbz	r3, 529e <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x3ce>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
    5296:	ldr.w	r2, [r5, #148]	; 0x94
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    529a:	str.w	r2, [r3, #132]	; 0x84
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
#endif
    }
    _pspi->endTransaction();
    529e:	ldr	r0, [r5, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    52a0:	ldrb	r3, [r0, #19]
    52a2:	cmp	r3, #0
    52a4:	beq.w	5018 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x148>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    52a8:	lsls	r3, r3, #31
    52aa:	bpl.n	52b2 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x3e2>
    52ac:	ldr	r2, [r0, #40]	; 0x28
    52ae:	ldr	r3, [pc, #44]	; (52dc <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x40c>)
    52b0:	str	r2, [r3, #0]
    }
    writedata16_last(*pcolors++);
    pcolors += x_clip_right;
  }
  endSPITransaction();
}
    52b2:	add	sp, #20
    52b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52b8:	b.w	2978 <SPIClass::endTransaction() [clone .part.9]>
    52bc:	ldr	r3, [r5, #28]
    52be:	b.n	523c <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x36c>
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
    52c0:	str.w	r6, [r2, #136]	; 0x88
    52c4:	b.n	5226 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x356>

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
    52c6:	ldr	r3, [r5, #28]
    52c8:	ldr	r3, [r3, #96]	; 0x60
    52ca:	str.w	r3, [r5, #156]	; 0x9c
    52ce:	b.n	5088 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x1b8>
    52d0:	.word	0x0020000f
    52d4:	.word	0x0328001f
    52d8:	.word	0xfcd7ffe0
    52dc:	.word	0xe000e100

000052e0 <ILI9341_t3n::scrollTextArea(unsigned char)>:
    }
  }
  return sumX;
}

void ILI9341_t3n::scrollTextArea(uint8_t scrollSize) {
    52e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    52e4:	sub	sp, #8
    52e6:	mov	r4, r0
    52e8:	mov	sl, r1
  uint16_t awColors[scroll_width];
    52ea:	ldrsh.w	r3, [r0, #68]	; 0x44
  for (int y = scroll_y + scrollSize; y < (scroll_y + scroll_height); y++) {
    52ee:	ldrsh.w	r1, [r0, #66]	; 0x42
    }
  }
  return sumX;
}

void ILI9341_t3n::scrollTextArea(uint8_t scrollSize) {
    52f2:	add	r7, sp, #8
  uint16_t awColors[scroll_width];
    52f4:	lsls	r0, r3, #1
  for (int y = scroll_y + scrollSize; y < (scroll_y + scroll_height); y++) {
    52f6:	ldrsh.w	r2, [r4, #70]	; 0x46
    52fa:	add.w	r5, sl, r1
    52fe:	add	r2, r1
  }
  return sumX;
}

void ILI9341_t3n::scrollTextArea(uint8_t scrollSize) {
  uint16_t awColors[scroll_width];
    5300:	adds	r0, #8
  for (int y = scroll_y + scrollSize; y < (scroll_y + scroll_height); y++) {
    5302:	cmp	r5, r2
  }
  return sumX;
}

void ILI9341_t3n::scrollTextArea(uint8_t scrollSize) {
  uint16_t awColors[scroll_width];
    5304:	bic.w	r1, r0, #7
    5308:	sub.w	sp, sp, r1
  for (int y = scroll_y + scrollSize; y < (scroll_y + scroll_height); y++) {
    530c:	bge.n	5378 <ILI9341_t3n::scrollTextArea(unsigned char)+0x98>
    530e:	add	r6, sp, #8
    5310:	uxth.w	r9, sl
    readRect(scroll_x, y, scroll_width, 1, awColors);
    5314:	mov.w	r8, #1
    5318:	ldrsh.w	r1, [r4, #64]	; 0x40
    531c:	sxth	r2, r5
    531e:	mov	r0, r4
    5320:	str	r6, [sp, #4]
    5322:	str.w	r8, [sp]
    5326:	bl	357c <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)>
    writeRect(scroll_x, y - scrollSize, scroll_width, 1, awColors);
    532a:	rsb	r2, r9, r5
    532e:	ldrsh.w	r3, [r4, #68]	; 0x44
    5332:	mov	r0, r4
    5334:	ldrsh.w	r1, [r4, #64]	; 0x40
    5338:	sxth	r2, r2
    533a:	str	r6, [sp, #4]
  return sumX;
}

void ILI9341_t3n::scrollTextArea(uint8_t scrollSize) {
  uint16_t awColors[scroll_width];
  for (int y = scroll_y + scrollSize; y < (scroll_y + scroll_height); y++) {
    533c:	adds	r5, #1
    readRect(scroll_x, y, scroll_width, 1, awColors);
    writeRect(scroll_x, y - scrollSize, scroll_width, 1, awColors);
    533e:	str.w	r8, [sp]
    5342:	bl	4ed0 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)>
  return sumX;
}

void ILI9341_t3n::scrollTextArea(uint8_t scrollSize) {
  uint16_t awColors[scroll_width];
  for (int y = scroll_y + scrollSize; y < (scroll_y + scroll_height); y++) {
    5346:	ldrsh.w	r1, [r4, #66]	; 0x42
    534a:	ldrsh.w	r2, [r4, #70]	; 0x46
    534e:	ldrsh.w	r3, [r4, #68]	; 0x44
    5352:	add	r2, r1
    5354:	cmp	r2, r5
    5356:	bgt.n	5318 <ILI9341_t3n::scrollTextArea(unsigned char)+0x38>
    readRect(scroll_x, y, scroll_width, 1, awColors);
    writeRect(scroll_x, y - scrollSize, scroll_width, 1, awColors);
  }
  fillRect(scroll_x, (scroll_y + scroll_height) - scrollSize, scroll_width,
           scrollSize, scrollbgcolor);
    5358:	ldrh.w	r0, [r4, #78]	; 0x4e
    535c:	rsb	r2, r9, r2
    5360:	ldrsh.w	r1, [r4, #64]	; 0x40
    5364:	sxth	r2, r2
    5366:	str	r0, [sp, #4]
    5368:	mov	r0, r4
    536a:	str.w	sl, [sp]
    536e:	bl	48cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
}
    5372:	mov	sp, r7
    5374:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5378:	uxth.w	r9, sl
    537c:	b.n	5358 <ILI9341_t3n::scrollTextArea(unsigned char)+0x78>
    537e:	nop

00005380 <ILI9341_t3n::drawFontChar(unsigned int)>:
  uint8_t s = ((fontppb - (x % fontppb) - 1) * fontbpp);
  // Mask and return
  return (b >> s) & fontbppmask;
}

void ILI9341_t3n::drawFontChar(unsigned int c) {
    5380:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t bitoffset;
  const uint8_t *data;

  // Serial.printf("drawFontChar(%c) %d\n", c, c);

  if (c >= font->index1_first && c <= font->index1_last) {
    5384:	ldr	r5, [r0, #96]	; 0x60
  uint8_t s = ((fontppb - (x % fontppb) - 1) * fontbpp);
  // Mask and return
  return (b >> s) & fontbppmask;
}

void ILI9341_t3n::drawFontChar(unsigned int c) {
    5386:	sub	sp, #92	; 0x5c
  uint32_t bitoffset;
  const uint8_t *data;

  // Serial.printf("drawFontChar(%c) %d\n", c, c);

  if (c >= font->index1_first && c <= font->index1_last) {
    5388:	ldrb	r4, [r5, #14]
    538a:	cmp	r4, r1
    538c:	bhi.n	539e <ILI9341_t3n::drawFontChar(unsigned int)+0x1e>
    538e:	ldrb	r3, [r5, #15]
    5390:	cmp	r1, r3
    5392:	bhi.n	539e <ILI9341_t3n::drawFontChar(unsigned int)+0x1e>
    bitoffset = c - font->index1_first;
    5394:	subs	r1, r1, r4
    bitoffset *= font->bits_index;
    5396:	ldrb	r2, [r5, #18]
    5398:	mul.w	r1, r2, r1
    539c:	b.n	53be <ILI9341_t3n::drawFontChar(unsigned int)+0x3e>
  } else if (c >= font->index2_first && c <= font->index2_last) {
    539e:	ldrb	r6, [r5, #16]
    53a0:	cmp	r1, r6
    53a2:	bcc.w	57dc <ILI9341_t3n::drawFontChar(unsigned int)+0x45c>
    53a6:	ldrb	r3, [r5, #17]
    53a8:	cmp	r1, r3
    53aa:	bhi.w	57dc <ILI9341_t3n::drawFontChar(unsigned int)+0x45c>
    bitoffset =
        c - font->index2_first + font->index1_last - font->index1_first + 1;
    53ae:	ldrb	r3, [r5, #15]
    bitoffset *= font->bits_index;
    53b0:	ldrb	r2, [r5, #18]
  if (c >= font->index1_first && c <= font->index1_last) {
    bitoffset = c - font->index1_first;
    bitoffset *= font->bits_index;
  } else if (c >= font->index2_first && c <= font->index2_last) {
    bitoffset =
        c - font->index2_first + font->index1_last - font->index1_first + 1;
    53b2:	adds	r3, #1
    53b4:	add	r3, r1
    53b6:	subs	r3, r3, r6
    53b8:	subs	r1, r3, r4
    bitoffset *= font->bits_index;
    53ba:	mul.w	r1, r2, r1
    53be:	mov	r9, r0
    return;
  }
  // Serial.printf("  index =  %d\n", fetchbits_unsigned(font->index, bitoffset,
  // font->bits_index));
  data =
      font->data + fetchbits_unsigned(font->index, bitoffset, font->bits_index);
    53c0:	ldr	r0, [r5, #0]
    53c2:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
    53c6:	ldr	r3, [r5, #8]

  uint32_t encoding = fetchbits_unsigned(data, 0, 3);
    53c8:	movs	r2, #3
    53ca:	movs	r1, #0
    return;
  }
  // Serial.printf("  index =  %d\n", fetchbits_unsigned(font->index, bitoffset,
  // font->bits_index));
  data =
      font->data + fetchbits_unsigned(font->index, bitoffset, font->bits_index);
    53cc:	add	r3, r0

  uint32_t encoding = fetchbits_unsigned(data, 0, 3);
    53ce:	mov	r0, r3
    return;
  }
  // Serial.printf("  index =  %d\n", fetchbits_unsigned(font->index, bitoffset,
  // font->bits_index));
  data =
      font->data + fetchbits_unsigned(font->index, bitoffset, font->bits_index);
    53d0:	str	r3, [sp, #16]

  uint32_t encoding = fetchbits_unsigned(data, 0, 3);
    53d2:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
  if (encoding != 0)
    53d6:	cmp	r0, #0
    53d8:	bne.w	57dc <ILI9341_t3n::drawFontChar(unsigned int)+0x45c>
    return;
  uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
    53dc:	ldrb	r2, [r5, #19]
    53de:	movs	r1, #3
    53e0:	ldr	r7, [sp, #16]
  bitoffset = font->bits_width + 3;
    53e2:	adds	r4, r2, r1
      font->data + fetchbits_unsigned(font->index, bitoffset, font->bits_index);

  uint32_t encoding = fetchbits_unsigned(data, 0, 3);
  if (encoding != 0)
    return;
  uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
    53e4:	mov	r0, r7
    53e6:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
  bitoffset = font->bits_width + 3;
  uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
    53ea:	ldrb	r2, [r5, #20]
    53ec:	mov	r1, r4
      font->data + fetchbits_unsigned(font->index, bitoffset, font->bits_index);

  uint32_t encoding = fetchbits_unsigned(data, 0, 3);
  if (encoding != 0)
    return;
  uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
    53ee:	mov	r8, r0
  bitoffset = font->bits_width + 3;
  uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
    53f0:	mov	r0, r7
  bitoffset += font->bits_height;
    53f2:	adds	r6, r4, r2
  uint32_t encoding = fetchbits_unsigned(data, 0, 3);
  if (encoding != 0)
    return;
  uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
  bitoffset = font->bits_width + 3;
  uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
    53f4:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
  bitoffset += font->bits_height;
  // Serial.printf("  size =   %d,%d\n", width, height);
  // Serial.printf("  line space = %d\n", font->line_space);

  int32_t xoffset = fetchbits_signed(data, bitoffset, font->bits_xoffset);
    53f8:	ldrb	r4, [r5, #21]
  uint32_t encoding = fetchbits_unsigned(data, 0, 3);
  if (encoding != 0)
    return;
  uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
  bitoffset = font->bits_width + 3;
  uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
    53fa:	str	r0, [sp, #24]
  return val;
}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
    53fc:	mov	r1, r6
    53fe:	mov	r2, r4
    5400:	mov	r0, r7
    5402:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
  if (val & (1 << (required - 1))) {
    5406:	subs	r3, r4, #1
    5408:	movs	r2, #1
    540a:	lsl.w	r3, r2, r3
    540e:	tst	r3, r0
    5410:	bne.w	57e2 <ILI9341_t3n::drawFontChar(unsigned int)+0x462>
  return val;
}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
    5414:	mov	fp, r0
  bitoffset += font->bits_height;
  // Serial.printf("  size =   %d,%d\n", width, height);
  // Serial.printf("  line space = %d\n", font->line_space);

  int32_t xoffset = fetchbits_signed(data, bitoffset, font->bits_xoffset);
  bitoffset += font->bits_xoffset;
    5416:	add.w	sl, r6, r4
  int32_t yoffset = fetchbits_signed(data, bitoffset, font->bits_yoffset);
    541a:	ldrb	r6, [r5, #22]
  return val;
}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
    541c:	ldr	r0, [sp, #16]
    541e:	mov	r2, r6
    5420:	mov	r1, sl
    5422:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
  if (val & (1 << (required - 1))) {
    5426:	subs	r3, r6, #1
    5428:	movs	r2, #1
    542a:	lsl.w	r3, r2, r3
    542e:	tst	r3, r0
    5430:	beq.w	57f6 <ILI9341_t3n::drawFontChar(unsigned int)+0x476>
    return (int32_t)val - (1 << required);
    5434:	lsls	r2, r6
    5436:	subs	r7, r0, r2
  // Serial.printf("  line space = %d\n", font->line_space);

  int32_t xoffset = fetchbits_signed(data, bitoffset, font->bits_xoffset);
  bitoffset += font->bits_xoffset;
  int32_t yoffset = fetchbits_signed(data, bitoffset, font->bits_yoffset);
  bitoffset += font->bits_yoffset;
    5438:	add	r6, sl
  // Serial.printf("  offset = %d,%d\n", xoffset, yoffset);

  uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
    543a:	ldrb	r4, [r5, #23]
    543c:	ldr	r0, [sp, #16]
    543e:	mov	r1, r6
    5440:	mov	r2, r4
    5442:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
  // Serial.printf("  delta =  %d\n", delta);

  // Serial.printf("  cursor = %d,%d\n", cursor_x, cursor_y);

  // horizontally, we draw every pixel, or none at all
  if (cursor_x < 0)
    5446:	ldrsh.w	r3, [r9, #36]	; 0x24
  bitoffset += font->bits_xoffset;
  int32_t yoffset = fetchbits_signed(data, bitoffset, font->bits_yoffset);
  bitoffset += font->bits_yoffset;
  // Serial.printf("  offset = %d,%d\n", xoffset, yoffset);

  uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
    544a:	str	r0, [sp, #40]	; 0x28
  // Serial.printf("  delta =  %d\n", delta);

  // Serial.printf("  cursor = %d,%d\n", cursor_x, cursor_y);

  // horizontally, we draw every pixel, or none at all
  if (cursor_x < 0)
    544c:	cmp	r3, #0
    544e:	blt.w	5812 <ILI9341_t3n::drawFontChar(unsigned int)+0x492>
    5452:	mov	r2, r3
    cursor_x = 0;
  int32_t origin_x = cursor_x + xoffset;
  if (origin_x < 0) {
    5454:	adds.w	r2, fp, r2
    5458:	str	r2, [sp, #20]
    545a:	bmi.w	581c <ILI9341_t3n::drawFontChar(unsigned int)+0x49c>
    cursor_x -= xoffset;
    origin_x = 0;
  }
  if (origin_x + (int)width > _width) {
    545e:	ldr	r3, [sp, #20]
    5460:	ldrsh.w	r2, [r9, #32]
    5464:	add	r3, r8
    5466:	cmp	r3, r2
    if (!wrap)
    5468:	ldrb.w	r3, [r9, #92]	; 0x5c
  int32_t origin_x = cursor_x + xoffset;
  if (origin_x < 0) {
    cursor_x -= xoffset;
    origin_x = 0;
  }
  if (origin_x + (int)width > _width) {
    546c:	ble.w	57fa <ILI9341_t3n::drawFontChar(unsigned int)+0x47a>
    if (!wrap)
    5470:	cmp	r3, #0
    5472:	beq.w	57dc <ILI9341_t3n::drawFontChar(unsigned int)+0x45c>
      return;
    origin_x = 0;
    if (xoffset >= 0) {
    5476:	cmp.w	fp, #0
      cursor_x = 0;
    547a:	ite	ge
    547c:	movge	r3, #0
    } else {
      cursor_x = -xoffset;
    547e:	rsblt	r3, fp, #0
    5482:	strh.w	r3, [r9, #36]	; 0x24
    origin_x = 0;
  }
  if (origin_x + (int)width > _width) {
    if (!wrap)
      return;
    origin_x = 0;
    5486:	movs	r3, #0
    if (xoffset >= 0) {
      cursor_x = 0;
    } else {
      cursor_x = -xoffset;
    }
    cursor_y += font->line_space;
    5488:	ldrb	r2, [r5, #24]
    origin_x = 0;
  }
  if (origin_x + (int)width > _width) {
    if (!wrap)
      return;
    origin_x = 0;
    548a:	str	r3, [sp, #20]
    if (xoffset >= 0) {
      cursor_x = 0;
    } else {
      cursor_x = -xoffset;
    }
    cursor_y += font->line_space;
    548c:	ldrh.w	r3, [r9, #38]	; 0x26
    5490:	add	r3, r2
    5492:	sxth	r3, r3
    5494:	strh.w	r3, [r9, #38]	; 0x26
  }
  if (wrap && scrollEnable && isWritingScrollArea &&
    5498:	ldrb.w	r2, [r9, #72]	; 0x48
    549c:	cbz	r2, 5506 <ILI9341_t3n::drawFontChar(unsigned int)+0x186>
    549e:	ldrb.w	r2, [r9, #73]	; 0x49
    54a2:	cbz	r2, 5506 <ILI9341_t3n::drawFontChar(unsigned int)+0x186>
    54a4:	ldr	r2, [sp, #20]
      ((origin_x + (int)width) > (scroll_x + scroll_width))) {
    54a6:	ldrsh.w	r0, [r9, #64]	; 0x40
    } else {
      cursor_x = -xoffset;
    }
    cursor_y += font->line_space;
  }
  if (wrap && scrollEnable && isWritingScrollArea &&
    54aa:	add.w	r1, r8, r2
    54ae:	ldrsh.w	r2, [r9, #68]	; 0x44
    54b2:	add	r2, r0
    54b4:	cmp	r1, r2
    54b6:	ble.n	54d2 <ILI9341_t3n::drawFontChar(unsigned int)+0x152>
      ((origin_x + (int)width) > (scroll_x + scroll_width))) {
    origin_x = 0;
    if (xoffset >= 0) {
    54b8:	cmp.w	fp, #0
    54bc:	blt.w	606c <ILI9341_t3n::drawFontChar(unsigned int)+0xcec>
      cursor_x = scroll_x;
    54c0:	strh.w	r0, [r9, #36]	; 0x24
    } else {
      cursor_x = -xoffset;
    }
    cursor_y += font->line_space;
    54c4:	ldrb	r2, [r5, #24]
    }
    cursor_y += font->line_space;
  }
  if (wrap && scrollEnable && isWritingScrollArea &&
      ((origin_x + (int)width) > (scroll_x + scroll_width))) {
    origin_x = 0;
    54c6:	movs	r1, #0
    if (xoffset >= 0) {
      cursor_x = scroll_x;
    } else {
      cursor_x = -xoffset;
    }
    cursor_y += font->line_space;
    54c8:	add	r3, r2
    }
    cursor_y += font->line_space;
  }
  if (wrap && scrollEnable && isWritingScrollArea &&
      ((origin_x + (int)width) > (scroll_x + scroll_width))) {
    origin_x = 0;
    54ca:	str	r1, [sp, #20]
    if (xoffset >= 0) {
      cursor_x = scroll_x;
    } else {
      cursor_x = -xoffset;
    }
    cursor_y += font->line_space;
    54cc:	sxth	r3, r3
    54ce:	strh.w	r3, [r9, #38]	; 0x26
  }

  if (scrollEnable && isWritingScrollArea &&
    54d2:	ldrsh.w	r2, [r9, #66]	; 0x42
    54d6:	ldrsh.w	r1, [r9, #70]	; 0x46
    54da:	ldrb	r0, [r5, #25]
    54dc:	add	r2, r1
    54de:	subs	r2, r2, r0
    54e0:	cmp	r3, r2
    54e2:	ble.n	5506 <ILI9341_t3n::drawFontChar(unsigned int)+0x186>
      (cursor_y > (scroll_y + scroll_height - font->cap_height))) {
    scrollTextArea(font->line_space);
    54e4:	ldrb	r1, [r5, #24]
    54e6:	mov	r0, r9
    54e8:	bl	52e0 <ILI9341_t3n::scrollTextArea(unsigned char)>
    cursor_y -= font->line_space;
    54ec:	ldr.w	r5, [r9, #96]	; 0x60
    54f0:	ldrh.w	r3, [r9, #38]	; 0x26
    54f4:	ldrb	r1, [r5, #24]
    cursor_x = scroll_x;
    54f6:	ldrh.w	r2, [r9, #64]	; 0x40
  }

  if (scrollEnable && isWritingScrollArea &&
      (cursor_y > (scroll_y + scroll_height - font->cap_height))) {
    scrollTextArea(font->line_space);
    cursor_y -= font->line_space;
    54fa:	subs	r3, r3, r1
    cursor_x = scroll_x;
    54fc:	strh.w	r2, [r9, #36]	; 0x24
  }

  if (scrollEnable && isWritingScrollArea &&
      (cursor_y > (scroll_y + scroll_height - font->cap_height))) {
    scrollTextArea(font->line_space);
    cursor_y -= font->line_space;
    5500:	sxth	r3, r3
    5502:	strh.w	r3, [r9, #38]	; 0x26
    cursor_x = scroll_x;
  }
  if (cursor_y >= _height)
    5506:	ldrsh.w	r2, [r9, #34]	; 0x22
    550a:	cmp	r2, r3
    550c:	ble.w	57dc <ILI9341_t3n::drawFontChar(unsigned int)+0x45c>
    return;

  // vertically, the top and/or bottom can be clipped
  int32_t origin_y = cursor_y + font->cap_height - height - yoffset;
    5510:	ldrb	r2, [r5, #25]
  int32_t yoffset = fetchbits_signed(data, bitoffset, font->bits_yoffset);
  bitoffset += font->bits_yoffset;
  // Serial.printf("  offset = %d,%d\n", xoffset, yoffset);

  uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
  bitoffset += font->bits_delta;
    5512:	add.w	sl, r6, r4
  // vertically, the top and/or bottom can be clipped
  int32_t origin_y = cursor_y + font->cap_height - height - yoffset;
  // Serial.printf("  origin = %d,%d\n", origin_x, origin_y);

  // TODO: compute top skip and number of lines
  int32_t linecount = height;
    5516:	ldr	r0, [sp, #24]
  }
  if (cursor_y >= _height)
    return;

  // vertically, the top and/or bottom can be clipped
  int32_t origin_y = cursor_y + font->cap_height - height - yoffset;
    5518:	adds	r4, r2, r3
  int32_t y = origin_y;
  bool opaque = (textbgcolor != textcolor);

  // Going to try a fast Opaque method which works similar to drawChar, which is
  // near the speed of writerect
  if (!opaque) {
    551a:	ldrh.w	r1, [r9, #76]	; 0x4c
    551e:	ldrh.w	r2, [r9, #74]	; 0x4a
  }
  if (cursor_y >= _height)
    return;

  // vertically, the top and/or bottom can be clipped
  int32_t origin_y = cursor_y + font->cap_height - height - yoffset;
    5522:	subs	r4, r4, r0
  // Serial.printf("  origin = %d,%d\n", origin_x, origin_y);

  // TODO: compute top skip and number of lines
  int32_t linecount = height;
    5524:	str	r0, [sp, #28]
  int32_t y = origin_y;
  bool opaque = (textbgcolor != textcolor);

  // Going to try a fast Opaque method which works similar to drawChar, which is
  // near the speed of writerect
  if (!opaque) {
    5526:	cmp	r1, r2
  }
  if (cursor_y >= _height)
    return;

  // vertically, the top and/or bottom can be clipped
  int32_t origin_y = cursor_y + font->cap_height - height - yoffset;
    5528:	sub.w	r4, r4, r7
  int32_t y = origin_y;
  bool opaque = (textbgcolor != textcolor);

  // Going to try a fast Opaque method which works similar to drawChar, which is
  // near the speed of writerect
  if (!opaque) {
    552c:	beq.w	56b2 <ILI9341_t3n::drawFontChar(unsigned int)+0x332>
    // character
    // figure out bounding rectangle...
    // In this mode we need to update to use the offset and bounding rectangles
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    5530:	ldrsh.w	r1, [r9, #50]	; 0x32
    int cursor_y_origin = cursor_y + _originy;
    origin_x += _originx;
    5534:	ldr	r0, [sp, #20]
    // character
    // figure out bounding rectangle...
    // In this mode we need to update to use the offset and bounding rectangles
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    5536:	ldrsh.w	r6, [r9, #36]	; 0x24
    int cursor_y_origin = cursor_y + _originy;
    origin_x += _originx;
    553a:	add	r0, r1
    if (start_y < 0)
      start_y = 0;
    int end_x = cursor_x_origin + delta;
    if ((origin_x + (int)width) > end_x)
      end_x = origin_x + (int)width;
    if (end_x >= _displayclipx2)
    553c:	ldrsh.w	r2, [r9, #58]	; 0x3a
    // character
    // figure out bounding rectangle...
    // In this mode we need to update to use the offset and bounding rectangles
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    5540:	add	r1, r6
    5542:	str	r6, [sp, #32]
      start_x = 0;

    int start_y = (origin_y < cursor_y_origin) ? origin_y : cursor_y_origin;
    if (start_y < 0)
      start_y = 0;
    int end_x = cursor_x_origin + delta;
    5544:	ldr	r6, [sp, #40]	; 0x28
    if ((origin_x + (int)width) > end_x)
    5546:	str	r0, [sp, #36]	; 0x24
      start_x = 0;

    int start_y = (origin_y < cursor_y_origin) ? origin_y : cursor_y_origin;
    if (start_y < 0)
      start_y = 0;
    int end_x = cursor_x_origin + delta;
    5548:	add.w	lr, r1, r6
    if ((origin_x + (int)width) > end_x)
    554c:	add.w	r6, r8, r0
    5550:	ldr	r0, [sp, #36]	; 0x24
    // figure out bounding rectangle...
    // In this mode we need to update to use the offset and bounding rectangles
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    int cursor_y_origin = cursor_y + _originy;
    5552:	ldrsh.w	r7, [r9, #52]	; 0x34
    5556:	cmp	r1, r0

    int start_y = (origin_y < cursor_y_origin) ? origin_y : cursor_y_origin;
    if (start_y < 0)
      start_y = 0;
    int end_x = cursor_x_origin + delta;
    if ((origin_x + (int)width) > end_x)
    5558:	str	r6, [sp, #20]
    // figure out bounding rectangle...
    // In this mode we need to update to use the offset and bounding rectangles
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    int cursor_y_origin = cursor_y + _originy;
    555a:	add	r3, r7
    555c:	it	ge
    555e:	movge	r1, r0
    5560:	cmp	r6, lr
    int end_x = cursor_x_origin + delta;
    if ((origin_x + (int)width) > end_x)
      end_x = origin_x + (int)width;
    if (end_x >= _displayclipx2)
      end_x = _displayclipx2;
    int end_y = cursor_y_origin + font->line_space;
    5562:	ldrb	r0, [r5, #24]
    5564:	mov	r5, r6
    5566:	it	lt
    5568:	movlt	r5, lr
    556a:	bic.w	r1, r1, r1, asr #31
    556e:	add	r0, r3
    5570:	cmp	r5, r2
    5572:	mov	r6, r1
    5574:	str	r1, [sp, #52]	; 0x34
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    int cursor_y_origin = cursor_y + _originy;
    origin_x += _originx;
    origin_y += _originy;
    5576:	add.w	r1, r4, r7
    557a:	it	ge
    557c:	movge	r5, r2
    if ((origin_x + (int)width) > end_x)
      end_x = origin_x + (int)width;
    if (end_x >= _displayclipx2)
      end_x = _displayclipx2;
    int end_y = cursor_y_origin + font->line_space;
    if ((origin_y + (int)height) > end_y)
    557e:	ldr	r4, [sp, #24]
    int start_x_min = (start_x >= _displayclipx1) ? start_x : _displayclipx1;
    int start_y_min = (start_y >= _displayclipy1) ? start_y : _displayclipy1;

    // See if anything is in the display area.
    if ((end_x < _displayclipx1) || (start_x >= _displayclipx2) ||
        (end_y < _displayclipy1) || (start_y >= _displayclipy2)) {
    5580:	cmp	r6, r2
      end_y = origin_y + (int)height;
    if (end_y >= _displayclipy2)
      end_y = _displayclipy2;
    end_x--; // setup to last one we draw
    end_y--;
    int start_x_min = (start_x >= _displayclipx1) ? start_x : _displayclipx1;
    5582:	ldrsh.w	r7, [r9, #54]	; 0x36
    int end_y = cursor_y_origin + font->line_space;
    if ((origin_y + (int)height) > end_y)
      end_y = origin_y + (int)height;
    if (end_y >= _displayclipy2)
      end_y = _displayclipy2;
    end_x--; // setup to last one we draw
    5586:	add.w	fp, r5, #4294967295
    558a:	str	r5, [sp, #56]	; 0x38
    if ((origin_x + (int)width) > end_x)
      end_x = origin_x + (int)width;
    if (end_x >= _displayclipx2)
      end_x = _displayclipx2;
    int end_y = cursor_y_origin + font->line_space;
    if ((origin_y + (int)height) > end_y)
    558c:	mov	r5, r4
    int start_x_min = (start_x >= _displayclipx1) ? start_x : _displayclipx1;
    int start_y_min = (start_y >= _displayclipy1) ? start_y : _displayclipy1;

    // See if anything is in the display area.
    if ((end_x < _displayclipx1) || (start_x >= _displayclipx2) ||
        (end_y < _displayclipy1) || (start_y >= _displayclipy2)) {
    558e:	ite	lt
    5590:	movlt	r2, #0
    5592:	movge	r2, #1
    5594:	cmp	r3, r1
    if ((origin_x + (int)width) > end_x)
      end_x = origin_x + (int)width;
    if (end_x >= _displayclipx2)
      end_x = _displayclipx2;
    int end_y = cursor_y_origin + font->line_space;
    if ((origin_y + (int)height) > end_y)
    5596:	add.w	ip, r5, r1
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    int cursor_y_origin = cursor_y + _originy;
    origin_x += _originx;
    origin_y += _originy;
    559a:	str	r1, [sp, #44]	; 0x2c
    559c:	it	ge
    559e:	movge	r3, r1
    int start_x_min = (start_x >= _displayclipx1) ? start_x : _displayclipx1;
    int start_y_min = (start_y >= _displayclipy1) ? start_y : _displayclipy1;

    // See if anything is in the display area.
    if ((end_x < _displayclipx1) || (start_x >= _displayclipx2) ||
        (end_y < _displayclipy1) || (start_y >= _displayclipy2)) {
    55a0:	cmp	fp, r7
    55a2:	it	lt
    55a4:	orrlt.w	r2, r2, #1
    55a8:	cmp	r0, ip
    if (end_x >= _displayclipx2)
      end_x = _displayclipx2;
    int end_y = cursor_y_origin + font->line_space;
    if ((origin_y + (int)height) > end_y)
      end_y = origin_y + (int)height;
    if (end_y >= _displayclipy2)
    55aa:	ldrsh.w	r1, [r9, #60]	; 0x3c
    55ae:	bic.w	r4, r3, r3, asr #31
      end_y = _displayclipy2;
    end_x--; // setup to last one we draw
    end_y--;
    int start_x_min = (start_x >= _displayclipx1) ? start_x : _displayclipx1;
    int start_y_min = (start_y >= _displayclipy1) ? start_y : _displayclipy1;
    55b2:	ldrsh.w	r5, [r9, #56]	; 0x38
    55b6:	it	lt
    55b8:	movlt	r0, ip
    55ba:	mov	r3, r1

    // See if anything is in the display area.
    if ((end_x < _displayclipx1) || (start_x >= _displayclipx2) ||
        (end_y < _displayclipy1) || (start_y >= _displayclipy2)) {
    55bc:	cmp	r1, r4
    55be:	it	le
    55c0:	orrle.w	r2, r2, #1
    55c4:	cmp	r1, r0
    55c6:	it	ge
    55c8:	movge	r3, r0
    55ca:	str	r3, [sp, #68]	; 0x44
    if ((origin_y + (int)height) > end_y)
      end_y = origin_y + (int)height;
    if (end_y >= _displayclipy2)
      end_y = _displayclipy2;
    end_x--; // setup to last one we draw
    end_y--;
    55cc:	subs	r3, #1
    55ce:	str	r3, [sp, #64]	; 0x40
    int start_x_min = (start_x >= _displayclipx1) ? start_x : _displayclipx1;
    int start_y_min = (start_y >= _displayclipy1) ? start_y : _displayclipy1;

    // See if anything is in the display area.
    if ((end_x < _displayclipx1) || (start_x >= _displayclipx2) ||
        (end_y < _displayclipy1) || (start_y >= _displayclipy2)) {
    55d0:	cmp	r2, #0
    55d2:	bne.w	57ea <ILI9341_t3n::drawFontChar(unsigned int)+0x46a>
    55d6:	cmp	r3, r5
    55d8:	blt.w	57ea <ILI9341_t3n::drawFontChar(unsigned int)+0x46a>
                Serial.printf("  Bounding: (%d, %d)-(%d, %d)\n", start_x,
   start_y, end_x, end_y);
                Serial.printf("  mins (%d %d),\n", start_x_min, start_y_min);
*/
#ifdef ENABLE_ILI9341_FRAMEBUFFER
    if (_use_fbtft) {
    55dc:	ldrb.w	r3, [r9, #180]	; 0xb4
    55e0:	cmp	r3, #0
    55e2:	beq.w	5c0c <ILI9341_t3n::drawFontChar(unsigned int)+0x88c>
      updateChangedRange(
    55e6:	ldrsh.w	r2, [sp, #52]	; 0x34
    55ea:	sxth	r3, r4
      _changed_max_y = y;
  }

  // could combine with above, but avoids the +-...
  void updateChangedRange(int16_t x, int16_t y) __attribute__((always_inline)) {
    if (x < _changed_min_x)
    55ec:	ldrsh.w	r0, [r9, #188]	; 0xbc
    55f0:	cmp	r2, r0
    55f2:	bge.n	55fa <ILI9341_t3n::drawFontChar(unsigned int)+0x27a>
      _changed_min_x = x;
    55f4:	mov	r0, r2
    55f6:	strh.w	r2, [r9, #188]	; 0xbc
    if (y < _changed_min_y)
    55fa:	ldrsh.w	r6, [r9, #192]	; 0xc0
    55fe:	cmp	r3, r6
    5600:	bge.n	5608 <ILI9341_t3n::drawFontChar(unsigned int)+0x288>
      _changed_min_y = y;
    5602:	mov	r6, r3
    5604:	strh.w	r3, [r9, #192]	; 0xc0
    if (x > _changed_max_x)
    5608:	ldrsh.w	r7, [r9, #190]	; 0xbe
    560c:	cmp	r2, r7
    560e:	ble.n	5616 <ILI9341_t3n::drawFontChar(unsigned int)+0x296>
      _changed_max_x = x;
    5610:	mov	r7, r2
    5612:	strh.w	r2, [r9, #190]	; 0xbe
    if (y > _changed_max_y)
    5616:	ldrsh.w	r1, [r9, #194]	; 0xc2
    561a:	cmp	r3, r1
    561c:	ble.n	5624 <ILI9341_t3n::drawFontChar(unsigned int)+0x2a4>
      _changed_max_y = y;
    561e:	mov	r1, r3
    5620:	strh.w	r3, [r9, #194]	; 0xc2
          start_x,
          start_y); // update the range of the screen that has been changed;
      updateChangedRange(
    5624:	sxth.w	r2, fp
    5628:	ldrsh.w	r3, [sp, #64]	; 0x40
      _changed_max_y = y;
  }

  // could combine with above, but avoids the +-...
  void updateChangedRange(int16_t x, int16_t y) __attribute__((always_inline)) {
    if (x < _changed_min_x)
    562c:	cmp	r2, r0
          end_x,
          end_y); // update the range of the screen that has been changed;
      uint16_t *pfbPixel_row = &_pfbtft[start_y * _width + start_x];
    562e:	ldr	r0, [sp, #52]	; 0x34
      _changed_min_x = x;
    5630:	it	lt
    5632:	strhlt.w	r2, [r9, #188]	; 0xbc
    if (y < _changed_min_y)
    5636:	cmp	r3, r6
      _changed_min_y = y;
    5638:	it	lt
    563a:	strhlt.w	r3, [r9, #192]	; 0xc0
    if (x > _changed_max_x)
    563e:	cmp	r2, r7
      uint16_t *pfbPixel;
      int screen_y = start_y;
      int screen_x;

      // Clear above character
      while (screen_y < origin_y) {
    5640:	ldr	r7, [sp, #44]	; 0x2c
      _changed_max_x = x;
    5642:	it	gt
    5644:	strhgt.w	r2, [r9, #190]	; 0xbe
    if (y > _changed_max_y)
    5648:	cmp	r3, r1
          start_x,
          start_y); // update the range of the screen that has been changed;
      updateChangedRange(
          end_x,
          end_y); // update the range of the screen that has been changed;
      uint16_t *pfbPixel_row = &_pfbtft[start_y * _width + start_x];
    564a:	ldrsh.w	r2, [r9, #32]
      _changed_max_y = y;
    564e:	it	gt
    5650:	strhgt.w	r3, [r9, #194]	; 0xc2
      uint16_t *pfbPixel;
      int screen_y = start_y;
      int screen_x;

      // Clear above character
      while (screen_y < origin_y) {
    5654:	cmp	r7, r4
          start_x,
          start_y); // update the range of the screen that has been changed;
      updateChangedRange(
          end_x,
          end_y); // update the range of the screen that has been changed;
      uint16_t *pfbPixel_row = &_pfbtft[start_y * _width + start_x];
    5656:	ldr.w	r3, [r9, #176]	; 0xb0
    565a:	mla	r1, r4, r2, r0
    565e:	add.w	r3, r3, r1, lsl #1
    5662:	str	r3, [sp, #32]
      uint16_t *pfbPixel;
      int screen_y = start_y;
      int screen_x;

      // Clear above character
      while (screen_y < origin_y) {
    5664:	ble.w	5aa6 <ILI9341_t3n::drawFontChar(unsigned int)+0x726>
    5668:	mov	lr, r0
    566a:	mov	r6, r3
    566c:	ldr	r0, [sp, #56]	; 0x38
        pfbPixel = pfbPixel_row;
        // only output if this line is within the clipping region.
        if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
    566e:	cmp	r5, r4
    5670:	bgt.n	56a0 <ILI9341_t3n::drawFontChar(unsigned int)+0x320>
    5672:	ldrsh.w	r3, [r9, #60]	; 0x3c
    5676:	cmp	r3, r4
    5678:	ble.n	56a0 <ILI9341_t3n::drawFontChar(unsigned int)+0x320>
          for (screen_x = start_x; screen_x <= end_x; screen_x++) {
    567a:	cmp	lr, fp
    567c:	bgt.n	56a0 <ILI9341_t3n::drawFontChar(unsigned int)+0x320>
    567e:	mov	r3, lr
    5680:	mov	r2, r6
            if (screen_x >= _displayclipx1) {
    5682:	ldrsh.w	r1, [r9, #54]	; 0x36
    5686:	cmp	r1, r3
      // Clear above character
      while (screen_y < origin_y) {
        pfbPixel = pfbPixel_row;
        // only output if this line is within the clipping region.
        if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
          for (screen_x = start_x; screen_x <= end_x; screen_x++) {
    5688:	add.w	r3, r3, #1
            if (screen_x >= _displayclipx1) {
    568c:	bgt.n	5694 <ILI9341_t3n::drawFontChar(unsigned int)+0x314>
              *pfbPixel = textbgcolor;
    568e:	ldrh.w	r1, [r9, #76]	; 0x4c
    5692:	strh	r1, [r2, #0]
      // Clear above character
      while (screen_y < origin_y) {
        pfbPixel = pfbPixel_row;
        // only output if this line is within the clipping region.
        if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
          for (screen_x = start_x; screen_x <= end_x; screen_x++) {
    5694:	cmp	r3, r0
            if (screen_x >= _displayclipx1) {
              *pfbPixel = textbgcolor;
            }
            pfbPixel++;
    5696:	add.w	r2, r2, #2
      // Clear above character
      while (screen_y < origin_y) {
        pfbPixel = pfbPixel_row;
        // only output if this line is within the clipping region.
        if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
          for (screen_x = start_x; screen_x <= end_x; screen_x++) {
    569a:	bne.n	5682 <ILI9341_t3n::drawFontChar(unsigned int)+0x302>
    569c:	ldrsh.w	r2, [r9, #32]
              *pfbPixel = textbgcolor;
            }
            pfbPixel++;
          }
        }
        screen_y++;
    56a0:	adds	r4, #1
        pfbPixel_row += _width;
    56a2:	add.w	r6, r6, r2, lsl #1
      uint16_t *pfbPixel;
      int screen_y = start_y;
      int screen_x;

      // Clear above character
      while (screen_y < origin_y) {
    56a6:	cmp	r7, r4
    56a8:	beq.w	5aa4 <ILI9341_t3n::drawFontChar(unsigned int)+0x724>
    56ac:	ldrsh.w	r5, [r9, #56]	; 0x38
    56b0:	b.n	566e <ILI9341_t3n::drawFontChar(unsigned int)+0x2ee>
  // Going to try a fast Opaque method which works similar to drawChar, which is
  // near the speed of writerect
  if (!opaque) {

    // Anti-alias support
    if (fontbpp > 1) {
    56b2:	ldrb.w	r0, [r9, #100]	; 0x64
    56b6:	cmp	r0, #1
    56b8:	bls.w	5a20 <ILI9341_t3n::drawFontChar(unsigned int)+0x6a0>
      // case will all be solid because pixels are rendered on same colour as
      // themselves!
      // This won't look very good.
      bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
      uint32_t xp = 0;
      uint8_t halfalpha = 1 << (fontbpp - 1);
    56bc:	movs	r3, #1
    56be:	subs	r2, r0, #1
      // be different. Even though an anti-alised font is being used, pixels in
      // this
      // case will all be solid because pixels are rendered on same colour as
      // themselves!
      // This won't look very good.
      bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
    56c0:	add.w	fp, sl, #7
      uint32_t xp = 0;
      uint8_t halfalpha = 1 << (fontbpp - 1);
    56c4:	lsl.w	r2, r3, r2
      while (linecount) {
    56c8:	ldr	r3, [sp, #28]
      // be different. Even though an anti-alised font is being used, pixels in
      // this
      // case will all be solid because pixels are rendered on same colour as
      // themselves!
      // This won't look very good.
      bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
    56ca:	bic.w	fp, fp, #7
      uint32_t xp = 0;
      uint8_t halfalpha = 1 << (fontbpp - 1);
      while (linecount) {
    56ce:	cmp	r3, #0
    56d0:	beq.n	57d0 <ILI9341_t3n::drawFontChar(unsigned int)+0x450>
    56d2:	uxtb	r2, r2
    return (uint16_t)((result >> 16) | result); // contract result
  }
  void Pixel(int16_t x, int16_t y, uint16_t color)
      __attribute__((always_inline)) {
    x += _originx;
    y += _originy;
    56d4:	add	r3, r4
    56d6:	str.w	r8, [sp, #24]
    56da:	movs	r7, #0
    56dc:	mov	r8, r2
    56de:	ldr	r2, [sp, #16]
    56e0:	str	r3, [sp, #32]
        uint32_t x = 0;
        while (x < width) {
    56e2:	ldr	r3, [sp, #24]
    56e4:	cmp	r3, #0
    56e6:	beq.n	57c8 <ILI9341_t3n::drawFontChar(unsigned int)+0x448>
    56e8:	adds	r5, r7, r3
    56ea:	ldr	r1, [sp, #28]
    56ec:	ldr	r3, [sp, #32]
    56ee:	mov	r4, r7
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    56f0:	mov	r6, r5
    56f2:	mov	r5, r2
    return (uint16_t)((result >> 16) | result); // contract result
  }
  void Pixel(int16_t x, int16_t y, uint16_t color)
      __attribute__((always_inline)) {
    x += _originx;
    y += _originy;
    56f4:	subs	r3, r3, r1
    56f6:	str	r3, [sp, #16]

uint32_t ILI9341_t3n::fetchpixel(const uint8_t *p, uint32_t index, uint32_t x) {
  // The byte
  uint8_t b = p[index >> 3];
  // Shift to LSB position and mask to get value
  uint8_t s = ((fontppb - (x % fontppb) - 1) * fontbpp);
    56f8:	ldrb.w	r3, [r9, #103]	; 0x67
  return (int32_t)val;
}

uint32_t ILI9341_t3n::fetchpixel(const uint8_t *p, uint32_t index, uint32_t x) {
  // The byte
  uint8_t b = p[index >> 3];
    56fc:	mov.w	r1, fp, lsr #3
      uint8_t halfalpha = 1 << (fontbpp - 1);
      while (linecount) {
        uint32_t x = 0;
        while (x < width) {
          // One pixel at a time, either on (if alpha > 0.5) or off
          if (fetchpixel(data, bitoffset, xp) >= halfalpha) {
    5700:	udiv	r2, r4, r3
    5704:	mls	r2, r3, r2, r4
    5708:	subs	r3, #1
    570a:	ldrb	r1, [r5, r1]
    570c:	subs	r3, r3, r2
    570e:	ldrb.w	r2, [r9, #102]	; 0x66
    5712:	smulbb	r3, r3, r0
    5716:	uxtb	r3, r3
    5718:	asr.w	r3, r1, r3
    571c:	ands	r2, r3
    571e:	cmp	r2, r8
    5720:	bcc.n	57bc <ILI9341_t3n::drawFontChar(unsigned int)+0x43c>
        ((((fg - bg) * alpha) >> 5) + bg) & 0b00000111111000001111100000011111;
    return (uint16_t)((result >> 16) | result); // contract result
  }
  void Pixel(int16_t x, int16_t y, uint16_t color)
      __attribute__((always_inline)) {
    x += _originx;
    5722:	ldr	r1, [sp, #20]
    5724:	rsb	sl, r7, r4
    5728:	ldrh.w	r2, [r9, #50]	; 0x32
    y += _originy;

    if ((x < _displayclipx1) || (x >= _displayclipx2) || (y < _displayclipy1) ||
    572c:	ldrsh.w	r3, [r9, #54]	; 0x36
        ((((fg - bg) * alpha) >> 5) + bg) & 0b00000111111000001111100000011111;
    return (uint16_t)((result >> 16) | result); // contract result
  }
  void Pixel(int16_t x, int16_t y, uint16_t color)
      __attribute__((always_inline)) {
    x += _originx;
    5730:	add	r2, r1
    5732:	add	sl, r2
    5734:	uxth.w	sl, sl
    5738:	sxth.w	r1, sl
    y += _originy;

    if ((x < _displayclipx1) || (x >= _displayclipx2) || (y < _displayclipy1) ||
    573c:	cmp	r3, r1
    573e:	bgt.n	57bc <ILI9341_t3n::drawFontChar(unsigned int)+0x43c>
    5740:	ldrsh.w	r3, [r9, #58]	; 0x3a
    5744:	cmp	r3, r1
    5746:	ble.n	57bc <ILI9341_t3n::drawFontChar(unsigned int)+0x43c>
    return (uint16_t)((result >> 16) | result); // contract result
  }
  void Pixel(int16_t x, int16_t y, uint16_t color)
      __attribute__((always_inline)) {
    x += _originx;
    y += _originy;
    5748:	ldrh.w	r2, [r9, #52]	; 0x34
    574c:	ldr	r3, [sp, #16]

    if ((x < _displayclipx1) || (x >= _displayclipx2) || (y < _displayclipy1) ||
    574e:	ldrsh.w	ip, [r9, #56]	; 0x38
    return (uint16_t)((result >> 16) | result); // contract result
  }
  void Pixel(int16_t x, int16_t y, uint16_t color)
      __attribute__((always_inline)) {
    x += _originx;
    y += _originy;
    5752:	add	r2, r3
    5754:	uxth	r2, r2
    5756:	sxth.w	lr, r2

    if ((x < _displayclipx1) || (x >= _displayclipx2) || (y < _displayclipy1) ||
    575a:	cmp	ip, lr
    575c:	bgt.n	57bc <ILI9341_t3n::drawFontChar(unsigned int)+0x43c>
    575e:	ldrsh.w	r3, [r9, #60]	; 0x3c
    5762:	cmp	r3, lr
    5764:	ble.n	57bc <ILI9341_t3n::drawFontChar(unsigned int)+0x43c>
            Pixel(origin_x + x, y, textcolor);
    5766:	ldrh.w	r0, [r9, #74]	; 0x4a
        (y >= _displayclipy2))
      return;

#ifdef ENABLE_ILI9341_FRAMEBUFFER
    if (_use_fbtft) {
    576a:	ldrb.w	r3, [r9, #180]	; 0xb4
    576e:	str	r0, [sp, #36]	; 0x24
    5770:	cmp	r3, #0
    5772:	beq.n	5836 <ILI9341_t3n::drawFontChar(unsigned int)+0x4b6>
      _changed_max_y = y;
  }

  // could combine with above, but avoids the +-...
  void updateChangedRange(int16_t x, int16_t y) __attribute__((always_inline)) {
    if (x < _changed_min_x)
    5774:	ldrsh.w	r3, [r9, #188]	; 0xbc

#ifdef ENABLE_ILI9341_FRAMEBUFFER
    if (_use_fbtft) {
      updateChangedRange(
          x, y); // update the range of the screen that has been changed;
      _pfbtft[y * _width + x] = color;
    5778:	ldrsh.w	r2, [r9, #32]
      _changed_max_y = y;
  }

  // could combine with above, but avoids the +-...
  void updateChangedRange(int16_t x, int16_t y) __attribute__((always_inline)) {
    if (x < _changed_min_x)
    577c:	cmp	r3, r1
      _changed_min_x = x;
    if (y < _changed_min_y)
    577e:	ldrsh.w	r3, [r9, #192]	; 0xc0
  }

  // could combine with above, but avoids the +-...
  void updateChangedRange(int16_t x, int16_t y) __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    5782:	it	gt
    5784:	strhgt.w	r1, [r9, #188]	; 0xbc
    if (y < _changed_min_y)
    5788:	cmp	r3, lr
      _changed_min_y = y;
    if (x > _changed_max_x)
    578a:	ldrsh.w	r3, [r9, #190]	; 0xbe
  // could combine with above, but avoids the +-...
  void updateChangedRange(int16_t x, int16_t y) __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    578e:	it	gt
    5790:	strhgt.w	lr, [r9, #192]	; 0xc0
    if (x > _changed_max_x)
    5794:	cmp	r3, r1
      _changed_max_x = x;
    if (y > _changed_max_y)
    5796:	ldrsh.w	r3, [r9, #194]	; 0xc2
    if (x < _changed_min_x)
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    if (x > _changed_max_x)
      _changed_max_x = x;
    579a:	it	lt
    579c:	strhlt.w	r1, [r9, #190]	; 0xbe
    if (y > _changed_max_y)
    57a0:	cmp	r3, lr

#ifdef ENABLE_ILI9341_FRAMEBUFFER
    if (_use_fbtft) {
      updateChangedRange(
          x, y); // update the range of the screen that has been changed;
      _pfbtft[y * _width + x] = color;
    57a2:	mla	r1, lr, r2, r1
    57a6:	ldr.w	r3, [r9, #176]	; 0xb0
    57aa:	ldrh.w	r2, [sp, #36]	; 0x24
    if (y < _changed_min_y)
      _changed_min_y = y;
    if (x > _changed_max_x)
      _changed_max_x = x;
    if (y > _changed_max_y)
      _changed_max_y = y;
    57ae:	it	lt
    57b0:	strhlt.w	lr, [r9, #194]	; 0xc2

#ifdef ENABLE_ILI9341_FRAMEBUFFER
    if (_use_fbtft) {
      updateChangedRange(
          x, y); // update the range of the screen that has been changed;
      _pfbtft[y * _width + x] = color;
    57b4:	strh.w	r2, [r3, r1, lsl #1]
    57b8:	ldrb.w	r0, [r9, #100]	; 0x64
          }
          bitoffset += fontbpp;
          x++;
          xp++;
    57bc:	adds	r4, #1
        while (x < width) {
          // One pixel at a time, either on (if alpha > 0.5) or off
          if (fetchpixel(data, bitoffset, xp) >= halfalpha) {
            Pixel(origin_x + x, y, textcolor);
          }
          bitoffset += fontbpp;
    57be:	add	fp, r0
      bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
      uint32_t xp = 0;
      uint8_t halfalpha = 1 << (fontbpp - 1);
      while (linecount) {
        uint32_t x = 0;
        while (x < width) {
    57c0:	cmp	r4, r6
    57c2:	bne.n	56f8 <ILI9341_t3n::drawFontChar(unsigned int)+0x378>
    57c4:	mov	r2, r5
    57c6:	mov	r7, r4
      // themselves!
      // This won't look very good.
      bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
      uint32_t xp = 0;
      uint8_t halfalpha = 1 << (fontbpp - 1);
      while (linecount) {
    57c8:	ldr	r3, [sp, #28]
    57ca:	subs	r3, #1
    57cc:	str	r3, [sp, #28]
    57ce:	bne.n	56e2 <ILI9341_t3n::drawFontChar(unsigned int)+0x362>
      writedata16_last(textbgcolor);
      endSPITransaction();
    }
  }
  // Increment to setup for the next character.
  cursor_x += delta;
    57d0:	ldrh.w	r3, [r9, #36]	; 0x24
    57d4:	ldr	r2, [sp, #40]	; 0x28
    57d6:	add	r2, r3
    57d8:	strh.w	r2, [r9, #36]	; 0x24
}
    57dc:	add	sp, #92	; 0x5c
    57de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
  if (val & (1 << (required - 1))) {
    return (int32_t)val - (1 << required);
    57e2:	lsls	r2, r4
    57e4:	rsb	fp, r2, r0
    57e8:	b.n	5416 <ILI9341_t3n::drawFontChar(unsigned int)+0x96>
    int start_y_min = (start_y >= _displayclipy1) ? start_y : _displayclipy1;

    // See if anything is in the display area.
    if ((end_x < _displayclipx1) || (start_x >= _displayclipx2) ||
        (end_y < _displayclipy1) || (start_y >= _displayclipy2)) {
      cursor_x += delta; // could use goto or another indent level...
    57ea:	ldr	r3, [sp, #40]	; 0x28
    57ec:	ldr	r2, [sp, #32]
    57ee:	add	r2, r3
    57f0:	strh.w	r2, [r9, #36]	; 0x24
      return;
    57f4:	b.n	57dc <ILI9341_t3n::drawFontChar(unsigned int)+0x45c>
  return val;
}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
    57f6:	mov	r7, r0
    57f8:	b.n	5438 <ILI9341_t3n::drawFontChar(unsigned int)+0xb8>
    } else {
      cursor_x = -xoffset;
    }
    cursor_y += font->line_space;
  }
  if (wrap && scrollEnable && isWritingScrollArea &&
    57fa:	cbnz	r3, 5830 <ILI9341_t3n::drawFontChar(unsigned int)+0x4b0>
      cursor_x = -xoffset;
    }
    cursor_y += font->line_space;
  }

  if (scrollEnable && isWritingScrollArea &&
    57fc:	ldrb.w	r3, [r9, #72]	; 0x48
    5800:	cbz	r3, 582a <ILI9341_t3n::drawFontChar(unsigned int)+0x4aa>
    5802:	ldrb.w	r2, [r9, #73]	; 0x49
    5806:	ldrsh.w	r3, [r9, #38]	; 0x26
    580a:	cmp	r2, #0
    580c:	bne.w	54d2 <ILI9341_t3n::drawFontChar(unsigned int)+0x152>
    5810:	b.n	5506 <ILI9341_t3n::drawFontChar(unsigned int)+0x186>

  // Serial.printf("  cursor = %d,%d\n", cursor_x, cursor_y);

  // horizontally, we draw every pixel, or none at all
  if (cursor_x < 0)
    cursor_x = 0;
    5812:	movs	r3, #0
    5814:	mov	r2, r3
    5816:	strh.w	r3, [r9, #36]	; 0x24
    581a:	b.n	5454 <ILI9341_t3n::drawFontChar(unsigned int)+0xd4>
  int32_t origin_x = cursor_x + xoffset;
  if (origin_x < 0) {
    cursor_x -= xoffset;
    581c:	rsb	r3, fp, r3
    origin_x = 0;
    5820:	movs	r2, #0
  // horizontally, we draw every pixel, or none at all
  if (cursor_x < 0)
    cursor_x = 0;
  int32_t origin_x = cursor_x + xoffset;
  if (origin_x < 0) {
    cursor_x -= xoffset;
    5822:	strh.w	r3, [r9, #36]	; 0x24
    origin_x = 0;
    5826:	str	r2, [sp, #20]
    5828:	b.n	545e <ILI9341_t3n::drawFontChar(unsigned int)+0xde>
    582a:	ldrsh.w	r3, [r9, #38]	; 0x26
    582e:	b.n	5506 <ILI9341_t3n::drawFontChar(unsigned int)+0x186>
    5830:	ldrsh.w	r3, [r9, #38]	; 0x26
    5834:	b.n	5498 <ILI9341_t3n::drawFontChar(unsigned int)+0x118>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    5836:	ldr.w	r1, [r9, #164]	; 0xa4
    583a:	mov	r0, r9
    583c:	str	r2, [sp, #44]	; 0x2c
    583e:	orr.w	r1, r1, #7
    5842:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    5846:	movs	r2, #42	; 0x2a
    5848:	ldr.w	r3, [r9, #28]
    584c:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    584e:	ldrb.w	r1, [r9, #146]	; 0x92
    5852:	ldr	r2, [sp, #44]	; 0x2c
    5854:	adds	r1, #1
    5856:	strb.w	r1, [r9, #146]	; 0x92

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    585a:	ldr	r1, [r3, #112]	; 0x70
    585c:	lsls	r0, r1, #30
    585e:	bmi.n	586e <ILI9341_t3n::drawFontChar(unsigned int)+0x4ee>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5860:	ldrb.w	r1, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    5864:	ldr	r0, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    5866:	subs	r0, r1, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5868:	cbz	r1, 586e <ILI9341_t3n::drawFontChar(unsigned int)+0x4ee>
        pending_rx_count--; // decrement count of bytes still levt
    586a:	strb.w	r0, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    586e:	ldr	r1, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    5870:	lsls	r1, r1, #31
    5872:	bpl.n	585a <ILI9341_t3n::drawFontChar(unsigned int)+0x4da>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    5874:	ldr.w	r3, [r9, #168]	; 0xa8
    5878:	mov	r0, r9
    587a:	ldr	r1, [pc, #548]	; (5aa0 <ILI9341_t3n::drawFontChar(unsigned int)+0x720>)
    587c:	str	r2, [sp, #44]	; 0x2c
    587e:	orrs	r1, r3
    5880:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    5884:	ldr.w	r3, [r9, #28]
    pending_rx_count++; //
    5888:	ldr	r2, [sp, #44]	; 0x2c
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    588a:	str.w	sl, [r3, #100]	; 0x64
    pending_rx_count++; //
    588e:	ldrb.w	r1, [r9, #146]	; 0x92
    5892:	adds	r1, #1
    5894:	strb.w	r1, [r9, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    5898:	ldr	r1, [r3, #112]	; 0x70
    589a:	lsls	r0, r1, #30
    589c:	bmi.n	58ac <ILI9341_t3n::drawFontChar(unsigned int)+0x52c>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    589e:	ldrb.w	r1, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    58a2:	ldr	r0, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    58a4:	subs	r0, r1, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    58a6:	cbz	r1, 58ac <ILI9341_t3n::drawFontChar(unsigned int)+0x52c>
        pending_rx_count--; // decrement count of bytes still levt
    58a8:	strb.w	r0, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    58ac:	ldr	r1, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    58ae:	lsls	r1, r1, #31
    58b0:	bpl.n	5898 <ILI9341_t3n::drawFontChar(unsigned int)+0x518>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    58b2:	ldr.w	r3, [r9, #168]	; 0xa8
    58b6:	mov	r0, r9
    58b8:	ldr	r1, [pc, #484]	; (5aa0 <ILI9341_t3n::drawFontChar(unsigned int)+0x720>)
    58ba:	str	r2, [sp, #44]	; 0x2c
    58bc:	orrs	r1, r3
    58be:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    58c2:	ldr.w	r3, [r9, #28]
    pending_rx_count++; //
    58c6:	ldr	r2, [sp, #44]	; 0x2c
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    58c8:	str.w	sl, [r3, #100]	; 0x64
    pending_rx_count++; //
    58cc:	ldrb.w	r1, [r9, #146]	; 0x92
    58d0:	adds	r1, #1
    58d2:	strb.w	r1, [r9, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    58d6:	ldr	r1, [r3, #112]	; 0x70
    58d8:	lsls	r0, r1, #30
    58da:	bmi.n	58ea <ILI9341_t3n::drawFontChar(unsigned int)+0x56a>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    58dc:	ldrb.w	r1, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    58e0:	ldr	r0, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    58e2:	subs	r0, r1, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    58e4:	cbz	r1, 58ea <ILI9341_t3n::drawFontChar(unsigned int)+0x56a>
        pending_rx_count--; // decrement count of bytes still levt
    58e6:	strb.w	r0, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    58ea:	ldr	r1, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    58ec:	lsls	r1, r1, #31
    58ee:	bpl.n	58d6 <ILI9341_t3n::drawFontChar(unsigned int)+0x556>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    58f0:	ldr.w	r1, [r9, #164]	; 0xa4
    58f4:	mov	r0, r9
    58f6:	str	r2, [sp, #44]	; 0x2c
    58f8:	orr.w	r1, r1, #7
    58fc:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    5900:	movs	r1, #43	; 0x2b
    5902:	ldr.w	r3, [r9, #28]
    pending_rx_count++; //
    5906:	ldr	r2, [sp, #44]	; 0x2c
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    5908:	str	r1, [r3, #100]	; 0x64
    pending_rx_count++; //
    590a:	ldrb.w	r1, [r9, #146]	; 0x92
    590e:	adds	r1, #1
    5910:	strb.w	r1, [r9, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    5914:	ldr	r1, [r3, #112]	; 0x70
    5916:	lsls	r0, r1, #30
    5918:	bmi.n	5928 <ILI9341_t3n::drawFontChar(unsigned int)+0x5a8>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    591a:	ldrb.w	r1, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    591e:	ldr	r0, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    5920:	subs	r0, r1, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5922:	cbz	r1, 5928 <ILI9341_t3n::drawFontChar(unsigned int)+0x5a8>
        pending_rx_count--; // decrement count of bytes still levt
    5924:	strb.w	r0, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    5928:	ldr	r1, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    592a:	lsls	r1, r1, #31
    592c:	bpl.n	5914 <ILI9341_t3n::drawFontChar(unsigned int)+0x594>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    592e:	ldr.w	r3, [r9, #168]	; 0xa8
    5932:	mov	r0, r9
    5934:	ldr	r1, [pc, #360]	; (5aa0 <ILI9341_t3n::drawFontChar(unsigned int)+0x720>)
    5936:	str	r2, [sp, #44]	; 0x2c
    5938:	orrs	r1, r3
    593a:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    593e:	ldr.w	r3, [r9, #28]
    5942:	ldr	r2, [sp, #44]	; 0x2c
    5944:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    5946:	ldrb.w	r1, [r9, #146]	; 0x92
    594a:	adds	r1, #1
    594c:	strb.w	r1, [r9, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    5950:	ldr	r1, [r3, #112]	; 0x70
    5952:	lsls	r0, r1, #30
    5954:	bmi.n	5964 <ILI9341_t3n::drawFontChar(unsigned int)+0x5e4>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5956:	ldrb.w	r1, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    595a:	ldr	r0, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    595c:	subs	r0, r1, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    595e:	cbz	r1, 5964 <ILI9341_t3n::drawFontChar(unsigned int)+0x5e4>
        pending_rx_count--; // decrement count of bytes still levt
    5960:	strb.w	r0, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    5964:	ldr	r1, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    5966:	lsls	r1, r1, #31
    5968:	bpl.n	5950 <ILI9341_t3n::drawFontChar(unsigned int)+0x5d0>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    596a:	ldr.w	r3, [r9, #168]	; 0xa8
    596e:	mov	r0, r9
    5970:	ldr	r1, [pc, #300]	; (5aa0 <ILI9341_t3n::drawFontChar(unsigned int)+0x720>)
    5972:	str	r2, [sp, #44]	; 0x2c
    5974:	orrs	r1, r3
    5976:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    597a:	ldr	r2, [sp, #44]	; 0x2c
    597c:	ldr.w	r3, [r9, #28]
    5980:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    5982:	ldrb.w	r2, [r9, #146]	; 0x92
    5986:	adds	r2, #1
    5988:	strb.w	r2, [r9, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    598c:	ldr	r2, [r3, #112]	; 0x70
    598e:	lsls	r0, r2, #30
    5990:	bmi.n	59a0 <ILI9341_t3n::drawFontChar(unsigned int)+0x620>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5992:	ldrb.w	r2, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    5996:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    5998:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    599a:	cbz	r2, 59a0 <ILI9341_t3n::drawFontChar(unsigned int)+0x620>
        pending_rx_count--; // decrement count of bytes still levt
    599c:	strb.w	r1, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    59a0:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    59a2:	lsls	r1, r2, #31
    59a4:	bpl.n	598c <ILI9341_t3n::drawFontChar(unsigned int)+0x60c>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    59a6:	ldr.w	r1, [r9, #164]	; 0xa4
    59aa:	mov	r0, r9
    59ac:	orr.w	r1, r1, #7
    59b0:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    59b4:	movs	r2, #44	; 0x2c
    59b6:	ldr.w	r3, [r9, #28]
    59ba:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    59bc:	ldrb.w	r2, [r9, #146]	; 0x92
    59c0:	adds	r2, #1
    59c2:	strb.w	r2, [r9, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    59c6:	ldr	r2, [r3, #112]	; 0x70
    59c8:	lsls	r2, r2, #30
    59ca:	bmi.n	59da <ILI9341_t3n::drawFontChar(unsigned int)+0x65a>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    59cc:	ldrb.w	r2, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    59d0:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    59d2:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    59d4:	cbz	r2, 59da <ILI9341_t3n::drawFontChar(unsigned int)+0x65a>
        pending_rx_count--; // decrement count of bytes still levt
    59d6:	strb.w	r1, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    59da:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    59dc:	lsls	r0, r2, #31
    59de:	bpl.n	59c6 <ILI9341_t3n::drawFontChar(unsigned int)+0x646>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    59e0:	ldr.w	r3, [r9, #168]	; 0xa8
    59e4:	mov	r0, r9
    59e6:	ldr	r1, [pc, #184]	; (5aa0 <ILI9341_t3n::drawFontChar(unsigned int)+0x720>)
    59e8:	orrs	r1, r3
    59ea:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    59ee:	ldr	r2, [sp, #36]	; 0x24
    59f0:	ldr.w	r3, [r9, #28]
    59f4:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    59f6:	ldrb.w	r2, [r9, #146]	; 0x92
    59fa:	adds	r2, #1
    59fc:	strb.w	r2, [r9, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    5a00:	ldr	r2, [r3, #112]	; 0x70
    5a02:	lsls	r1, r2, #30
    5a04:	bmi.n	5a14 <ILI9341_t3n::drawFontChar(unsigned int)+0x694>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5a06:	ldrb.w	r2, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    5a0a:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    5a0c:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5a0e:	cbz	r2, 5a14 <ILI9341_t3n::drawFontChar(unsigned int)+0x694>
        pending_rx_count--; // decrement count of bytes still levt
    5a10:	strb.w	r1, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    5a14:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    5a16:	lsls	r2, r2, #31
    5a18:	bpl.n	5a00 <ILI9341_t3n::drawFontChar(unsigned int)+0x680>
    5a1a:	ldrb.w	r0, [r9, #100]	; 0x64
    5a1e:	b.n	57bc <ILI9341_t3n::drawFontChar(unsigned int)+0x43c>

    }
    // Soild pixels
    else {

      while (linecount > 0) {
    5a20:	ldr	r3, [sp, #28]
    5a22:	cmp	r3, #0
    5a24:	ble.w	57d0 <ILI9341_t3n::drawFontChar(unsigned int)+0x450>
    5a28:	ldr	r7, [sp, #16]
  }
  gfxFont = f;
}

static uint32_t fetchbit(const uint8_t *p, uint32_t index) {
  if (p[index >> 3] & (1 << (7 - (index & 7))))
    5a2a:	mov.w	r2, sl, lsr #3
    5a2e:	mvn.w	r3, sl
    else {

      while (linecount > 0) {
        // Serial.printf("    linecount = %d\n", linecount);
        uint32_t n = 1;
        if (fetchbit(data, bitoffset++) != 0) {
    5a32:	add.w	r1, sl, #1
  }
  gfxFont = f;
}

static uint32_t fetchbit(const uint8_t *p, uint32_t index) {
  if (p[index >> 3] & (1 << (7 - (index & 7))))
    5a36:	ldrb	r2, [r7, r2]
    5a38:	and.w	r3, r3, #7
    5a3c:	asr.w	r3, r2, r3
    5a40:	lsls	r5, r3, #31
    5a42:	bmi.n	5a90 <ILI9341_t3n::drawFontChar(unsigned int)+0x710>
    // Soild pixels
    else {

      while (linecount > 0) {
        // Serial.printf("    linecount = %d\n", linecount);
        uint32_t n = 1;
    5a44:	movs	r6, #1
    5a46:	mov	sl, r1
        if (fetchbit(data, bitoffset++) != 0) {
          n = fetchbits_unsigned(data, bitoffset, 3) + 2;
          bitoffset += 3;
        }
        uint32_t x = 0;
    5a48:	movs	r5, #0
        do {
          int32_t xsize = width - x;
    5a4a:	rsb	r3, r5, r8
          if (xsize > 32)
            xsize = 32;
          uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
    5a4e:	mov	r1, sl
    5a50:	mov	r0, r7
    5a52:	cmp	r3, #32
    5a54:	it	ge
    5a56:	movge	r3, #32
    5a58:	mov	r2, r3
    5a5a:	mov	fp, r3
          // Serial.printf("    multi line %d %d %x\n", n, x, bits);
          drawFontBits(opaque, bits, xsize, origin_x + x, y, n);
          bitoffset += xsize;
    5a5c:	add	sl, r3
        uint32_t x = 0;
        do {
          int32_t xsize = width - x;
          if (xsize > 32)
            xsize = 32;
          uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
    5a5e:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
          // Serial.printf("    multi line %d %d %x\n", n, x, bits);
          drawFontBits(opaque, bits, xsize, origin_x + x, y, n);
    5a62:	ldr	r3, [sp, #20]
    5a64:	mov	r2, r0
    5a66:	str	r6, [sp, #8]
    5a68:	movs	r1, #0
    5a6a:	add.w	lr, r5, r3
          bitoffset += xsize;
          x += xsize;
    5a6e:	add	r5, fp
          int32_t xsize = width - x;
          if (xsize > 32)
            xsize = 32;
          uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
          // Serial.printf("    multi line %d %d %x\n", n, x, bits);
          drawFontBits(opaque, bits, xsize, origin_x + x, y, n);
    5a70:	mov	r3, fp
    5a72:	str	r4, [sp, #4]
    5a74:	str.w	lr, [sp]
    5a78:	mov	r0, r9
    5a7a:	bl	4dc8 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)>
          bitoffset += xsize;
          x += xsize;
        } while (x < width);
    5a7e:	cmp	r8, r5
    5a80:	bhi.n	5a4a <ILI9341_t3n::drawFontChar(unsigned int)+0x6ca>

        y += n;
        linecount -= n;
    5a82:	ldr	r3, [sp, #28]
          drawFontBits(opaque, bits, xsize, origin_x + x, y, n);
          bitoffset += xsize;
          x += xsize;
        } while (x < width);

        y += n;
    5a84:	add	r4, r6
        linecount -= n;
    5a86:	subs	r3, r3, r6

    }
    // Soild pixels
    else {

      while (linecount > 0) {
    5a88:	cmp	r3, #0
          bitoffset += xsize;
          x += xsize;
        } while (x < width);

        y += n;
        linecount -= n;
    5a8a:	str	r3, [sp, #28]

    }
    // Soild pixels
    else {

      while (linecount > 0) {
    5a8c:	bgt.n	5a2a <ILI9341_t3n::drawFontChar(unsigned int)+0x6aa>
    5a8e:	b.n	57d0 <ILI9341_t3n::drawFontChar(unsigned int)+0x450>
        // Serial.printf("    linecount = %d\n", linecount);
        uint32_t n = 1;
        if (fetchbit(data, bitoffset++) != 0) {
          n = fetchbits_unsigned(data, bitoffset, 3) + 2;
    5a90:	movs	r2, #3
    5a92:	mov	r0, r7
    5a94:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
          bitoffset += 3;
    5a98:	add.w	r1, sl, #4

      while (linecount > 0) {
        // Serial.printf("    linecount = %d\n", linecount);
        uint32_t n = 1;
        if (fetchbit(data, bitoffset++) != 0) {
          n = fetchbits_unsigned(data, bitoffset, 3) + 2;
    5a9c:	adds	r6, r0, #2
    5a9e:	b.n	5a46 <ILI9341_t3n::drawFontChar(unsigned int)+0x6c6>
    5aa0:	.word	0x0020000f
    5aa4:	str	r6, [sp, #32]
        screen_y++;
        pfbPixel_row += _width;
      }

      // Anti-aliased font
      if (fontbpp > 1) {
    5aa6:	ldrb.w	r3, [r9, #100]	; 0x64
    5aaa:	cmp	r3, #1
    5aac:	bls.w	6078 <ILI9341_t3n::drawFontChar(unsigned int)+0xcf8>
        screen_y = origin_y;
        bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
    5ab0:	add.w	r3, sl, #7
    5ab4:	bic.w	sl, r3, #7
        uint32_t xp = 0;
        int glyphend_x = origin_x + width;
        while (linecount) {
    5ab8:	ldr	r3, [sp, #24]
    5aba:	cmp	r3, #0
    5abc:	beq.n	5ba8 <ILI9341_t3n::drawFontChar(unsigned int)+0x828>
    5abe:	mov.w	r8, #0
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    int cursor_y_origin = cursor_y + _originy;
    origin_x += _originx;
    origin_y += _originy;
    5ac2:	ldr	r6, [sp, #44]	; 0x2c
      if (fontbpp > 1) {
        screen_y = origin_y;
        bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
        uint32_t xp = 0;
        int glyphend_x = origin_x + width;
        while (linecount) {
    5ac4:	ldr	r7, [sp, #52]	; 0x34
    5ac6:	mov	lr, r8
    5ac8:	ldr	r1, [sp, #56]	; 0x38
    5aca:	ldr.w	r8, [sp, #32]
    5ace:	str.w	fp, [sp, #28]
          pfbPixel = pfbPixel_row;
          screen_x = start_x;
          while (screen_x <= end_x) {
    5ad2:	ldr	r3, [sp, #28]
    5ad4:	cmp	r7, r3
    5ad6:	bgt.n	5b8e <ILI9341_t3n::drawFontChar(unsigned int)+0x80e>
    5ad8:	mov	r3, r7
    5ada:	mov	r2, r8
            // XXX: I'm sure clipping could be done way more efficiently than
            // just chekcing every single pixel, but let's just get this going
            if ((screen_x >= _displayclipx1) && (screen_x < _displayclipx2) &&
    5adc:	ldrsh.w	r0, [r9, #54]	; 0x36
    5ae0:	cmp	r0, r3
    5ae2:	bgt.n	5b82 <ILI9341_t3n::drawFontChar(unsigned int)+0x802>
    5ae4:	ldrsh.w	r0, [r9, #58]	; 0x3a
    5ae8:	cmp	r0, r3
    5aea:	ble.n	5b82 <ILI9341_t3n::drawFontChar(unsigned int)+0x802>
    5aec:	ldrsh.w	r0, [r9, #56]	; 0x38
    5af0:	cmp	r0, r6
    5af2:	bgt.n	5b82 <ILI9341_t3n::drawFontChar(unsigned int)+0x802>
                (screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
    5af4:	ldrsh.w	r0, [r9, #60]	; 0x3c
    5af8:	cmp	r0, r6
    5afa:	ble.n	5b82 <ILI9341_t3n::drawFontChar(unsigned int)+0x802>
              // Clear before or after pixel
              if ((screen_x < origin_x) || (screen_x >= glyphend_x)) {
    5afc:	ldr	r5, [sp, #36]	; 0x24
  return (int32_t)val;
}

uint32_t ILI9341_t3n::fetchpixel(const uint8_t *p, uint32_t index, uint32_t x) {
  // The byte
  uint8_t b = p[index >> 3];
    5afe:	mov.w	r4, sl, lsr #3
   */
  uint16_t alphaBlendRGB565Premultiplied(uint32_t fg, uint32_t bg,
                                         uint8_t alpha)
      __attribute__((always_inline)) {
    uint32_t result =
        ((((fg - bg) * alpha) >> 5) + bg) & 0b00000111111000001111100000011111;
    5b02:	ldr	r0, [pc, #260]	; (5c08 <ILI9341_t3n::drawFontChar(unsigned int)+0x888>)
            // XXX: I'm sure clipping could be done way more efficiently than
            // just chekcing every single pixel, but let's just get this going
            if ((screen_x >= _displayclipx1) && (screen_x < _displayclipx2) &&
                (screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
              // Clear before or after pixel
              if ((screen_x < origin_x) || (screen_x >= glyphend_x)) {
    5b04:	cmp	r5, r3
    5b06:	str	r0, [sp, #32]
    5b08:	bgt.n	5c00 <ILI9341_t3n::drawFontChar(unsigned int)+0x880>
    5b0a:	ldr	r5, [sp, #20]
    5b0c:	cmp	r5, r3
    5b0e:	ble.n	5c00 <ILI9341_t3n::drawFontChar(unsigned int)+0x880>
    5b10:	ldr	r0, [sp, #16]

uint32_t ILI9341_t3n::fetchpixel(const uint8_t *p, uint32_t index, uint32_t x) {
  // The byte
  uint8_t b = p[index >> 3];
  // Shift to LSB position and mask to get value
  uint8_t s = ((fontppb - (x % fontppb) - 1) * fontbpp);
    5b12:	ldrb.w	r5, [r9, #103]	; 0x67
    5b16:	ldrb	r4, [r0, r4]
    5b18:	add.w	fp, r5, #4294967295
    5b1c:	vldr	s14, [r9, #108]	; 0x6c
    5b20:	mov	r0, r4
    5b22:	udiv	r4, lr, r5
    5b26:	mls	r5, r5, r4, lr
    5b2a:	ldrb.w	r4, [r9, #100]	; 0x64
    5b2e:	add.w	lr, lr, #1
    5b32:	rsb	r5, r5, fp
    5b36:	ldrb.w	fp, [r9, #102]	; 0x66
    5b3a:	smulbb	r4, r5, r4
    5b3e:	ldr.w	r5, [r9, #80]	; 0x50
    5b42:	uxtb	r4, r4
    5b44:	asr.w	r4, r0, r4
    5b48:	ldr.w	r0, [r9, #84]	; 0x54
    5b4c:	and.w	r4, r4, fp
    5b50:	subs	r5, r5, r0
    5b52:	vmov	s15, r4
    5b56:	vcvt.f32.s32	s15, s15
    5b5a:	vmul.f32	s15, s15, s14
    5b5e:	vcvt.u32.f32	s15, s15
    5b62:	vstr	s15, [sp, #32]
    5b66:	ldrb.w	r4, [sp, #32]
    5b6a:	mul.w	r5, r5, r4
    5b6e:	add.w	r4, r0, r5, lsr #5
    5b72:	ldr	r0, [pc, #148]	; (5c08 <ILI9341_t3n::drawFontChar(unsigned int)+0x888>)
    5b74:	ands	r0, r4
              // Draw alpha-blended character
              else {
                uint8_t alpha = fetchpixel(data, bitoffset, xp);
                *pfbPixel = alphaBlendRGB565Premultiplied(
                    textcolorPrexpanded, textbgcolorPrexpanded,
                    (uint8_t)(alpha * fontalphamx));
    5b76:	orr.w	r0, r0, r0, lsr #16
    5b7a:	strh	r0, [r2, #0]
                bitoffset += fontbpp;
    5b7c:	ldrb.w	r0, [r9, #100]	; 0x64
    5b80:	add	sl, r0
                xp++;
              }
            } // clip
            screen_x++;
    5b82:	adds	r3, #1
            pfbPixel++;
    5b84:	adds	r2, #2
        uint32_t xp = 0;
        int glyphend_x = origin_x + width;
        while (linecount) {
          pfbPixel = pfbPixel_row;
          screen_x = start_x;
          while (screen_x <= end_x) {
    5b86:	cmp	r3, r1
    5b88:	bne.n	5adc <ILI9341_t3n::drawFontChar(unsigned int)+0x75c>
    5b8a:	ldrsh.w	r2, [r9, #32]
            } // clip
            screen_x++;
            pfbPixel++;
          }
          pfbPixel_row += _width;
          screen_y++;
    5b8e:	adds	r6, #1
              }
            } // clip
            screen_x++;
            pfbPixel++;
          }
          pfbPixel_row += _width;
    5b90:	add.w	r8, r8, r2, lsl #1
      if (fontbpp > 1) {
        screen_y = origin_y;
        bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
        uint32_t xp = 0;
        int glyphend_x = origin_x + width;
        while (linecount) {
    5b94:	cmp	r6, ip
    5b96:	bne.n	5ad2 <ILI9341_t3n::drawFontChar(unsigned int)+0x752>
    5b98:	ldr	r1, [sp, #44]	; 0x2c
    5b9a:	ldr	r3, [sp, #24]
    5b9c:	ldr.w	fp, [sp, #28]
    5ba0:	add	r3, r1
    5ba2:	str.w	r8, [sp, #32]
    5ba6:	str	r3, [sp, #44]	; 0x2c
        }

      } // 1bpp

      // clear below character
      while (screen_y++ <= end_y) {
    5ba8:	ldr	r3, [sp, #44]	; 0x2c
    5baa:	ldr	r1, [sp, #64]	; 0x40
    5bac:	adds	r4, r3, #1
    5bae:	cmp	r3, r1
    5bb0:	bgt.w	57d0 <ILI9341_t3n::drawFontChar(unsigned int)+0x450>
    5bb4:	ldr	r1, [sp, #68]	; 0x44
    5bb6:	ldr	r7, [sp, #52]	; 0x34
    5bb8:	adds	r1, #1
    5bba:	ldr	r6, [sp, #32]
    5bbc:	ldr	r5, [sp, #56]	; 0x38
        if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
    5bbe:	ldrsh.w	r3, [r9, #56]	; 0x38
    5bc2:	cmp	r3, r4
    5bc4:	bgt.n	5bf4 <ILI9341_t3n::drawFontChar(unsigned int)+0x874>
    5bc6:	ldrsh.w	r3, [r9, #60]	; 0x3c
    5bca:	cmp	r3, r4
    5bcc:	ble.n	5bf4 <ILI9341_t3n::drawFontChar(unsigned int)+0x874>
          pfbPixel = pfbPixel_row;
          for (screen_x = start_x; screen_x <= end_x; screen_x++) {
    5bce:	cmp	r7, fp
    5bd0:	bgt.n	5bf4 <ILI9341_t3n::drawFontChar(unsigned int)+0x874>
    5bd2:	mov	r3, r7
    5bd4:	mov	r2, r6
            if (screen_x >= _displayclipx1) {
    5bd6:	ldrsh.w	r0, [r9, #54]	; 0x36
    5bda:	cmp	r0, r3

      // clear below character
      while (screen_y++ <= end_y) {
        if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
          pfbPixel = pfbPixel_row;
          for (screen_x = start_x; screen_x <= end_x; screen_x++) {
    5bdc:	add.w	r3, r3, #1
            if (screen_x >= _displayclipx1) {
    5be0:	bgt.n	5be8 <ILI9341_t3n::drawFontChar(unsigned int)+0x868>
              *pfbPixel = textbgcolor;
    5be2:	ldrh.w	r0, [r9, #76]	; 0x4c
    5be6:	strh	r0, [r2, #0]

      // clear below character
      while (screen_y++ <= end_y) {
        if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
          pfbPixel = pfbPixel_row;
          for (screen_x = start_x; screen_x <= end_x; screen_x++) {
    5be8:	cmp	r3, r5
            if (screen_x >= _displayclipx1) {
              *pfbPixel = textbgcolor;
            }
            pfbPixel++;
    5bea:	add.w	r2, r2, #2

      // clear below character
      while (screen_y++ <= end_y) {
        if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
          pfbPixel = pfbPixel_row;
          for (screen_x = start_x; screen_x <= end_x; screen_x++) {
    5bee:	bne.n	5bd6 <ILI9341_t3n::drawFontChar(unsigned int)+0x856>
    5bf0:	ldrsh.w	r2, [r9, #32]
        }

      } // 1bpp

      // clear below character
      while (screen_y++ <= end_y) {
    5bf4:	adds	r4, #1
              *pfbPixel = textbgcolor;
            }
            pfbPixel++;
          }
        }
        pfbPixel_row += _width;
    5bf6:	add.w	r6, r6, r2, lsl #1
        }

      } // 1bpp

      // clear below character
      while (screen_y++ <= end_y) {
    5bfa:	cmp	r4, r1
    5bfc:	bne.n	5bbe <ILI9341_t3n::drawFontChar(unsigned int)+0x83e>
    5bfe:	b.n	57d0 <ILI9341_t3n::drawFontChar(unsigned int)+0x450>
            // just chekcing every single pixel, but let's just get this going
            if ((screen_x >= _displayclipx1) && (screen_x < _displayclipx2) &&
                (screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
              // Clear before or after pixel
              if ((screen_x < origin_x) || (screen_x >= glyphend_x)) {
                *pfbPixel = textbgcolor;
    5c00:	ldrh.w	r0, [r9, #76]	; 0x4c
    5c04:	strh	r0, [r2, #0]
    5c06:	b.n	5b82 <ILI9341_t3n::drawFontChar(unsigned int)+0x802>
    5c08:	.word	0x07e0f81f
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    5c0c:	movs	r3, #7
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    5c0e:	ldr.w	r2, [r9, #20]
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    5c12:	ldr.w	r0, [r9, #8]
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    5c16:	str	r3, [sp, #84]	; 0x54
    5c18:	add	r3, sp, #88	; 0x58
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    5c1a:	str	r2, [sp, #80]	; 0x50
    5c1c:	ldmdb	r3, {r1, r2}
    5c20:	bl	2d30 <SPIClass::beginTransaction(SPISettings)>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
    5c24:	ldr.w	r3, [r9, #172]	; 0xac
    5c28:	cmp	r3, #0
    5c2a:	beq.w	63fe <ILI9341_t3n::drawFontChar(unsigned int)+0x107e>
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    5c2e:	ldr.w	r3, [r9, #152]	; 0x98
    5c32:	cbz	r3, 5c3c <ILI9341_t3n::drawFontChar(unsigned int)+0x8bc>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
    5c34:	ldr.w	r2, [r9, #148]	; 0x94
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
    5c38:	str.w	r2, [r3, #136]	; 0x88
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    5c3c:	ldr.w	r1, [r9, #164]	; 0xa4
    5c40:	mov	r0, r9
    5c42:	orr.w	r1, r1, #7
    5c46:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    5c4a:	movs	r2, #42	; 0x2a
    5c4c:	ldr.w	r3, [r9, #28]
    5c50:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    5c52:	ldrb.w	r2, [r9, #146]	; 0x92
    5c56:	adds	r2, #1
    5c58:	strb.w	r2, [r9, #146]	; 0x92

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    5c5c:	ldr	r2, [r3, #112]	; 0x70
    5c5e:	lsls	r0, r2, #30
    5c60:	bmi.n	5c70 <ILI9341_t3n::drawFontChar(unsigned int)+0x8f0>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5c62:	ldrb.w	r2, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    5c66:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    5c68:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5c6a:	cbz	r2, 5c70 <ILI9341_t3n::drawFontChar(unsigned int)+0x8f0>
        pending_rx_count--; // decrement count of bytes still levt
    5c6c:	strb.w	r1, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    5c70:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    5c72:	lsls	r1, r2, #31
    5c74:	bpl.n	5c5c <ILI9341_t3n::drawFontChar(unsigned int)+0x8dc>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    5c76:	ldr.w	r3, [r9, #168]	; 0xa8
    5c7a:	mov	r0, r9
    5c7c:	ldr	r1, [pc, #720]	; (5f50 <ILI9341_t3n::drawFontChar(unsigned int)+0xbd0>)
    5c7e:	orrs	r1, r3
    5c80:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    5c84:	ldr	r2, [sp, #52]	; 0x34
    5c86:	ldr.w	r3, [r9, #28]
    5c8a:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    5c8c:	ldrb.w	r2, [r9, #146]	; 0x92
    5c90:	adds	r2, #1
    5c92:	strb.w	r2, [r9, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    5c96:	ldr	r2, [r3, #112]	; 0x70
    5c98:	lsls	r2, r2, #30
    5c9a:	bmi.n	5caa <ILI9341_t3n::drawFontChar(unsigned int)+0x92a>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5c9c:	ldrb.w	r2, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    5ca0:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    5ca2:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5ca4:	cbz	r2, 5caa <ILI9341_t3n::drawFontChar(unsigned int)+0x92a>
        pending_rx_count--; // decrement count of bytes still levt
    5ca6:	strb.w	r1, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    5caa:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    5cac:	lsls	r6, r2, #31
    5cae:	bpl.n	5c96 <ILI9341_t3n::drawFontChar(unsigned int)+0x916>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    5cb0:	ldr.w	r3, [r9, #168]	; 0xa8
    5cb4:	mov	r0, r9
    5cb6:	ldr	r1, [pc, #664]	; (5f50 <ILI9341_t3n::drawFontChar(unsigned int)+0xbd0>)
    5cb8:	orrs	r1, r3
    5cba:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    5cbe:	ldr.w	r3, [r9, #28]
    5cc2:	uxth.w	r2, fp
    5cc6:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    5cc8:	ldrb.w	r2, [r9, #146]	; 0x92
    5ccc:	adds	r2, #1
    5cce:	strb.w	r2, [r9, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    5cd2:	ldr	r2, [r3, #112]	; 0x70
    5cd4:	lsls	r0, r2, #30
    5cd6:	bmi.n	5ce6 <ILI9341_t3n::drawFontChar(unsigned int)+0x966>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5cd8:	ldrb.w	r2, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    5cdc:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    5cde:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5ce0:	cbz	r2, 5ce6 <ILI9341_t3n::drawFontChar(unsigned int)+0x966>
        pending_rx_count--; // decrement count of bytes still levt
    5ce2:	strb.w	r1, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    5ce6:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    5ce8:	lsls	r1, r2, #31
    5cea:	bpl.n	5cd2 <ILI9341_t3n::drawFontChar(unsigned int)+0x952>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    5cec:	ldr.w	r1, [r9, #164]	; 0xa4
    5cf0:	mov	r0, r9
    5cf2:	orr.w	r1, r1, #7
    5cf6:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    5cfa:	movs	r2, #43	; 0x2b
    5cfc:	ldr.w	r3, [r9, #28]
    5d00:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    5d02:	ldrb.w	r2, [r9, #146]	; 0x92
    5d06:	adds	r2, #1
    5d08:	strb.w	r2, [r9, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    5d0c:	ldr	r2, [r3, #112]	; 0x70
    5d0e:	lsls	r2, r2, #30
    5d10:	bmi.n	5d20 <ILI9341_t3n::drawFontChar(unsigned int)+0x9a0>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5d12:	ldrb.w	r2, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    5d16:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    5d18:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5d1a:	cbz	r2, 5d20 <ILI9341_t3n::drawFontChar(unsigned int)+0x9a0>
        pending_rx_count--; // decrement count of bytes still levt
    5d1c:	strb.w	r1, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    5d20:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    5d22:	lsls	r6, r2, #31
    5d24:	bpl.n	5d0c <ILI9341_t3n::drawFontChar(unsigned int)+0x98c>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    5d26:	ldr.w	r3, [r9, #168]	; 0xa8
    if (end_y >= _displayclipy2)
      end_y = _displayclipy2;
    end_x--; // setup to last one we draw
    end_y--;
    int start_x_min = (start_x >= _displayclipx1) ? start_x : _displayclipx1;
    int start_y_min = (start_y >= _displayclipy1) ? start_y : _displayclipy1;
    5d2a:	cmp	r5, r4
    5d2c:	ldr	r1, [pc, #544]	; (5f50 <ILI9341_t3n::drawFontChar(unsigned int)+0xbd0>)
    5d2e:	mov	r0, r9
    5d30:	it	lt
    5d32:	movlt	r5, r4
    5d34:	orrs	r1, r3
    5d36:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    5d3a:	ldr.w	r3, [r9, #28]
    5d3e:	mov	r6, r5
    5d40:	str	r5, [r3, #100]	; 0x64
    pending_rx_count++; //
    5d42:	ldrb.w	r2, [r9, #146]	; 0x92
    5d46:	adds	r2, #1
    5d48:	strb.w	r2, [r9, #146]	; 0x92

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    5d4c:	ldr	r2, [r3, #112]	; 0x70
    5d4e:	lsls	r4, r2, #30
    5d50:	bmi.n	5d60 <ILI9341_t3n::drawFontChar(unsigned int)+0x9e0>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5d52:	ldrb.w	r2, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    5d56:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    5d58:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5d5a:	cbz	r2, 5d60 <ILI9341_t3n::drawFontChar(unsigned int)+0x9e0>
        pending_rx_count--; // decrement count of bytes still levt
    5d5c:	strb.w	r1, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    5d60:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    5d62:	lsls	r0, r2, #31
    5d64:	bpl.n	5d4c <ILI9341_t3n::drawFontChar(unsigned int)+0x9cc>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    5d66:	ldr.w	r3, [r9, #168]	; 0xa8
    5d6a:	mov	r0, r9
    5d6c:	ldr	r1, [pc, #480]	; (5f50 <ILI9341_t3n::drawFontChar(unsigned int)+0xbd0>)
    5d6e:	orrs	r1, r3
    5d70:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    5d74:	ldrh.w	r3, [sp, #64]	; 0x40
    5d78:	ldr.w	r2, [r9, #28]
    5d7c:	str	r3, [r2, #100]	; 0x64
    pending_rx_count++; //
    5d7e:	ldrb.w	r3, [r9, #146]	; 0x92
    5d82:	adds	r3, #1
    5d84:	strb.w	r3, [r9, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    5d88:	ldr	r3, [r2, #112]	; 0x70
    5d8a:	lsls	r1, r3, #30
    5d8c:	bmi.n	5d9c <ILI9341_t3n::drawFontChar(unsigned int)+0xa1c>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5d8e:	ldrb.w	r3, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    5d92:	ldr	r1, [r2, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    5d94:	subs	r1, r3, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5d96:	cbz	r3, 5d9c <ILI9341_t3n::drawFontChar(unsigned int)+0xa1c>
        pending_rx_count--; // decrement count of bytes still levt
    5d98:	strb.w	r1, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    5d9c:	ldr	r3, [r2, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    5d9e:	lsls	r3, r3, #31
    5da0:	bpl.n	5d88 <ILI9341_t3n::drawFontChar(unsigned int)+0xa08>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    5da2:	ldr.w	r1, [r9, #164]	; 0xa4
    5da6:	mov	r0, r9
    5da8:	orr.w	r1, r1, #7
    5dac:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    5db0:	movs	r2, #44	; 0x2c
    5db2:	ldr.w	r3, [r9, #28]
    5db6:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    5db8:	ldrb.w	r2, [r9, #146]	; 0x92
    5dbc:	adds	r2, #1
    5dbe:	strb.w	r2, [r9, #146]	; 0x92
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    5dc2:	ldr	r2, [r3, #112]	; 0x70
    5dc4:	lsls	r5, r2, #30
    5dc6:	bmi.n	5dd6 <ILI9341_t3n::drawFontChar(unsigned int)+0xa56>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5dc8:	ldrb.w	r2, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    5dcc:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    5dce:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5dd0:	cbz	r2, 5dd6 <ILI9341_t3n::drawFontChar(unsigned int)+0xa56>
        pending_rx_count--; // decrement count of bytes still levt
    5dd2:	strb.w	r1, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    5dd6:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    5dd8:	lsls	r4, r2, #31
    5dda:	bpl.n	5dc2 <ILI9341_t3n::drawFontChar(unsigned int)+0xa42>
      end_y = origin_y + (int)height;
    if (end_y >= _displayclipy2)
      end_y = _displayclipy2;
    end_x--; // setup to last one we draw
    end_y--;
    int start_x_min = (start_x >= _displayclipx1) ? start_x : _displayclipx1;
    5ddc:	ldr	r2, [sp, #52]	; 0x34
    5dde:	mov	r3, r7
    5de0:	cmp	r7, r2
    5de2:	it	lt
    5de4:	movlt	r3, r2
    5de6:	str	r3, [sp, #48]	; 0x30
      writecommand_cont(ILI9341_RAMWR);
      int screen_y = start_y_min;
      int screen_x;

      // Clear above character
      while (screen_y < origin_y) {
    5de8:	ldr	r3, [sp, #44]	; 0x2c
    5dea:	cmp	r3, r6
    5dec:	ble.n	5e42 <ILI9341_t3n::drawFontChar(unsigned int)+0xac2>
    5dee:	ldr	r4, [sp, #56]	; 0x38
        for (screen_x = start_x_min; screen_x <= end_x; screen_x++) {
    5df0:	ldr	r3, [sp, #48]	; 0x30
    5df2:	cmp	fp, r3
    5df4:	blt.n	5e3a <ILI9341_t3n::drawFontChar(unsigned int)+0xaba>
    5df6:	ldr	r7, [sp, #48]	; 0x30
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    5df8:	ldr.w	r3, [r9, #168]	; 0xa8
    5dfc:	mov	r0, r9
    5dfe:	ldr	r1, [pc, #336]	; (5f50 <ILI9341_t3n::drawFontChar(unsigned int)+0xbd0>)
          writedata16_cont(textbgcolor);
    5e00:	ldrh.w	r5, [r9, #76]	; 0x4c
    5e04:	orrs	r1, r3
    5e06:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    5e0a:	ldr.w	r3, [r9, #28]
    5e0e:	str	r5, [r3, #100]	; 0x64
    pending_rx_count++; //
    5e10:	ldrb.w	r2, [r9, #146]	; 0x92
    5e14:	adds	r2, #1
    5e16:	strb.w	r2, [r9, #146]	; 0x92

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    5e1a:	ldr	r2, [r3, #112]	; 0x70
    5e1c:	lsls	r0, r2, #30
    5e1e:	bmi.n	5e2e <ILI9341_t3n::drawFontChar(unsigned int)+0xaae>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5e20:	ldrb.w	r2, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    5e24:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    5e26:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5e28:	cbz	r2, 5e2e <ILI9341_t3n::drawFontChar(unsigned int)+0xaae>
        pending_rx_count--; // decrement count of bytes still levt
    5e2a:	strb.w	r1, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    5e2e:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    5e30:	lsls	r1, r2, #31
    5e32:	bpl.n	5e1a <ILI9341_t3n::drawFontChar(unsigned int)+0xa9a>
      int screen_y = start_y_min;
      int screen_x;

      // Clear above character
      while (screen_y < origin_y) {
        for (screen_x = start_x_min; screen_x <= end_x; screen_x++) {
    5e34:	adds	r7, #1
    5e36:	cmp	r7, r4
    5e38:	bne.n	5df8 <ILI9341_t3n::drawFontChar(unsigned int)+0xa78>
          writedata16_cont(textbgcolor);
        }
        screen_y++;
    5e3a:	adds	r6, #1
      writecommand_cont(ILI9341_RAMWR);
      int screen_y = start_y_min;
      int screen_x;

      // Clear above character
      while (screen_y < origin_y) {
    5e3c:	ldr	r3, [sp, #44]	; 0x2c
    5e3e:	cmp	r3, r6
    5e40:	bne.n	5df0 <ILI9341_t3n::drawFontChar(unsigned int)+0xa70>
        }
        screen_y++;
      }

      // Anti-aliased font
      if (fontbpp > 1) {
    5e42:	ldrb.w	r3, [r9, #100]	; 0x64
    5e46:	cmp	r3, #1
    5e48:	bls.w	6206 <ILI9341_t3n::drawFontChar(unsigned int)+0xe86>
        screen_y = origin_y;
        bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
    5e4c:	add.w	r3, sl, #7
    5e50:	bic.w	r6, r3, #7
        int glyphend_x = origin_x + width;
        uint32_t xp = 0;
        while (linecount) {
    5e54:	ldr	r3, [sp, #24]
    5e56:	cmp	r3, #0
    5e58:	beq.w	5f6a <ILI9341_t3n::drawFontChar(unsigned int)+0xbea>
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    int cursor_y_origin = cursor_y + _originy;
    origin_x += _originx;
    origin_y += _originy;
    5e5c:	ldr	r7, [sp, #44]	; 0x2c
      if (fontbpp > 1) {
        screen_y = origin_y;
        bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
        int glyphend_x = origin_x + width;
        uint32_t xp = 0;
        while (linecount) {
    5e5e:	mov	sl, r3
    5e60:	mov.w	r8, #0
    5e64:	ldr	r5, [sp, #56]	; 0x38
          screen_x = start_x;
          while (screen_x <= end_x) {
    5e66:	ldr	r4, [sp, #52]	; 0x34
    5e68:	cmp	r4, fp
    5e6a:	bgt.n	5f58 <ILI9341_t3n::drawFontChar(unsigned int)+0xbd8>
            // XXX: I'm sure clipping could be done way more efficiently than
            // just chekcing every single pixel, but let's just get this going
            if ((screen_x >= _displayclipx1) && (screen_x < _displayclipx2) &&
    5e6c:	ldrsh.w	r3, [r9, #54]	; 0x36
    5e70:	cmp	r3, r4
    5e72:	bgt.n	5f48 <ILI9341_t3n::drawFontChar(unsigned int)+0xbc8>
    5e74:	ldrsh.w	r3, [r9, #58]	; 0x3a
    5e78:	cmp	r3, r4
    5e7a:	ble.n	5f48 <ILI9341_t3n::drawFontChar(unsigned int)+0xbc8>
    5e7c:	ldrsh.w	r3, [r9, #56]	; 0x38
    5e80:	cmp	r3, r7
    5e82:	bgt.n	5f48 <ILI9341_t3n::drawFontChar(unsigned int)+0xbc8>
                (screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
    5e84:	ldrsh.w	r3, [r9, #60]	; 0x3c
    5e88:	cmp	r3, r7
    5e8a:	ble.n	5f48 <ILI9341_t3n::drawFontChar(unsigned int)+0xbc8>
              // Clear before or after pixel
              if ((screen_x < origin_x) || (screen_x >= glyphend_x)) {
    5e8c:	ldr	r3, [sp, #36]	; 0x24
    5e8e:	cmp	r3, r4
    5e90:	bgt.w	5fbe <ILI9341_t3n::drawFontChar(unsigned int)+0xc3e>
    5e94:	ldr	r3, [sp, #20]
    5e96:	cmp	r3, r4
    5e98:	ble.w	5fbe <ILI9341_t3n::drawFontChar(unsigned int)+0xc3e>

uint32_t ILI9341_t3n::fetchpixel(const uint8_t *p, uint32_t index, uint32_t x) {
  // The byte
  uint8_t b = p[index >> 3];
  // Shift to LSB position and mask to get value
  uint8_t s = ((fontppb - (x % fontppb) - 1) * fontbpp);
    5e9c:	ldrb.w	r3, [r9, #103]	; 0x67
  return (int32_t)val;
}

uint32_t ILI9341_t3n::fetchpixel(const uint8_t *p, uint32_t index, uint32_t x) {
  // The byte
  uint8_t b = p[index >> 3];
    5ea0:	lsrs	r2, r6, #3
   */
  uint16_t alphaBlendRGB565Premultiplied(uint32_t fg, uint32_t bg,
                                         uint8_t alpha)
      __attribute__((always_inline)) {
    uint32_t result =
        ((((fg - bg) * alpha) >> 5) + bg) & 0b00000111111000001111100000011111;
    5ea2:	ldr	r1, [sp, #16]
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    5ea4:	mov	r0, r9
   */
  uint16_t alphaBlendRGB565Premultiplied(uint32_t fg, uint32_t bg,
                                         uint8_t alpha)
      __attribute__((always_inline)) {
    uint32_t result =
        ((((fg - bg) * alpha) >> 5) + bg) & 0b00000111111000001111100000011111;
    5ea6:	ldrb.w	lr, [r9, #102]	; 0x66
    5eaa:	ldrb	r2, [r1, r2]
    5eac:	vldr	s14, [r9, #108]	; 0x6c
    5eb0:	udiv	r1, r8, r3
    5eb4:	mls	r1, r3, r1, r8
    5eb8:	subs	r3, #1
    5eba:	subs	r3, r3, r1
    5ebc:	ldrb.w	r1, [r9, #100]	; 0x64
    5ec0:	smulbb	r3, r3, r1
                writedata16_cont(textbgcolor);
              }
              // Draw alpha-blended character
              else {
                uint8_t alpha = fetchpixel(data, bitoffset, xp);
                writedata16_cont(alphaBlendRGB565Premultiplied(
    5ec4:	ldr.w	r1, [r9, #84]	; 0x54
    5ec8:	uxtb	r3, r3
    5eca:	asrs	r2, r3
    5ecc:	ldr.w	r3, [r9, #80]	; 0x50
    5ed0:	and.w	r2, r2, lr
    5ed4:	rsb	ip, r1, r3
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    5ed8:	ldr.w	r3, [r9, #168]	; 0xa8
   */
  uint16_t alphaBlendRGB565Premultiplied(uint32_t fg, uint32_t bg,
                                         uint8_t alpha)
      __attribute__((always_inline)) {
    uint32_t result =
        ((((fg - bg) * alpha) >> 5) + bg) & 0b00000111111000001111100000011111;
    5edc:	vmov	s15, r2
    5ee0:	ldr	r2, [pc, #112]	; (5f54 <ILI9341_t3n::drawFontChar(unsigned int)+0xbd4>)
    5ee2:	vcvt.f32.s32	s15, s15
    5ee6:	vmul.f32	s15, s15, s14
    5eea:	vcvt.u32.f32	s15, s15
    5eee:	vstr	s15, [sp, #28]
    5ef2:	ldrb.w	lr, [sp, #28]
    5ef6:	mul.w	lr, ip, lr
    5efa:	add.w	lr, r1, lr, lsr #5
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    5efe:	ldr	r1, [pc, #80]	; (5f50 <ILI9341_t3n::drawFontChar(unsigned int)+0xbd0>)
   */
  uint16_t alphaBlendRGB565Premultiplied(uint32_t fg, uint32_t bg,
                                         uint8_t alpha)
      __attribute__((always_inline)) {
    uint32_t result =
        ((((fg - bg) * alpha) >> 5) + bg) & 0b00000111111000001111100000011111;
    5f00:	and.w	r2, lr, r2
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    5f04:	orrs	r1, r3
  uint16_t alphaBlendRGB565Premultiplied(uint32_t fg, uint32_t bg,
                                         uint8_t alpha)
      __attribute__((always_inline)) {
    uint32_t result =
        ((((fg - bg) * alpha) >> 5) + bg) & 0b00000111111000001111100000011111;
    return (uint16_t)((result >> 16) | result); // contract result
    5f06:	orr.w	r2, r2, r2, lsr #16
    5f0a:	uxth	r2, r2
    5f0c:	str	r2, [sp, #28]
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    5f0e:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    5f12:	ldr	r2, [sp, #28]
    5f14:	ldr.w	r3, [r9, #28]
    5f18:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    5f1a:	ldrb.w	r2, [r9, #146]	; 0x92
    5f1e:	adds	r2, #1
    5f20:	strb.w	r2, [r9, #146]	; 0x92

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    5f24:	ldr	r2, [r3, #112]	; 0x70
    5f26:	lsls	r1, r2, #30
    5f28:	bmi.n	5f38 <ILI9341_t3n::drawFontChar(unsigned int)+0xbb8>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5f2a:	ldrb.w	r2, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    5f2e:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    5f30:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5f32:	cbz	r2, 5f38 <ILI9341_t3n::drawFontChar(unsigned int)+0xbb8>
        pending_rx_count--; // decrement count of bytes still levt
    5f34:	strb.w	r1, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    5f38:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    5f3a:	lsls	r2, r2, #31
    5f3c:	bpl.n	5f24 <ILI9341_t3n::drawFontChar(unsigned int)+0xba4>
              else {
                uint8_t alpha = fetchpixel(data, bitoffset, xp);
                writedata16_cont(alphaBlendRGB565Premultiplied(
                    textcolorPrexpanded, textbgcolorPrexpanded,
                    (uint8_t)(alpha * fontalphamx)));
                bitoffset += fontbpp;
    5f3e:	ldrb.w	r3, [r9, #100]	; 0x64
                xp++;
    5f42:	add.w	r8, r8, #1
              else {
                uint8_t alpha = fetchpixel(data, bitoffset, xp);
                writedata16_cont(alphaBlendRGB565Premultiplied(
                    textcolorPrexpanded, textbgcolorPrexpanded,
                    (uint8_t)(alpha * fontalphamx)));
                bitoffset += fontbpp;
    5f46:	add	r6, r3
                xp++;
              }
            } // clip
            screen_x++;
    5f48:	adds	r4, #1
        bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
        int glyphend_x = origin_x + width;
        uint32_t xp = 0;
        while (linecount) {
          screen_x = start_x;
          while (screen_x <= end_x) {
    5f4a:	cmp	r4, r5
    5f4c:	bne.n	5e6c <ILI9341_t3n::drawFontChar(unsigned int)+0xaec>
    5f4e:	b.n	5f58 <ILI9341_t3n::drawFontChar(unsigned int)+0xbd8>
    5f50:	.word	0x0020000f
    5f54:	.word	0x07e0f81f
      if (fontbpp > 1) {
        screen_y = origin_y;
        bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
        int glyphend_x = origin_x + width;
        uint32_t xp = 0;
        while (linecount) {
    5f58:	subs.w	sl, sl, #1
                xp++;
              }
            } // clip
            screen_x++;
          }
          screen_y++;
    5f5c:	add.w	r7, r7, #1
      if (fontbpp > 1) {
        screen_y = origin_y;
        bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
        int glyphend_x = origin_x + width;
        uint32_t xp = 0;
        while (linecount) {
    5f60:	bne.n	5e66 <ILI9341_t3n::drawFontChar(unsigned int)+0xae6>
    5f62:	ldr	r2, [sp, #44]	; 0x2c
    5f64:	ldr	r3, [sp, #24]
    5f66:	add	r3, r2
    5f68:	str	r3, [sp, #44]	; 0x2c
      } // 1bpp

      // clear below character - note reusing xcreen_x for this
      screen_x =
          (end_y + 1 - screen_y) *
          (end_x + 1 - start_x_min); // How many bytes we need to still output
    5f6a:	ldr	r3, [sp, #56]	; 0x38
    5f6c:	ldr	r2, [sp, #48]	; 0x30
    5f6e:	ldr	r1, [sp, #44]	; 0x2c
    5f70:	subs	r2, r3, r2
    5f72:	ldr	r3, [sp, #68]	; 0x44
    5f74:	subs	r3, r3, r1
    5f76:	mul.w	r4, r2, r3
      // Serial.printf("Clear Below: %d\n", screen_x);
      while (screen_x-- > 1) {
    5f7a:	cmp	r4, #1
    5f7c:	ble.n	6000 <ILI9341_t3n::drawFontChar(unsigned int)+0xc80>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    5f7e:	ldr.w	r3, [r9, #168]	; 0xa8
    5f82:	mov	r0, r9
    5f84:	ldr	r1, [pc, #728]	; (6260 <ILI9341_t3n::drawFontChar(unsigned int)+0xee0>)
        writedata16_cont(textbgcolor);
    5f86:	ldrh.w	r5, [r9, #76]	; 0x4c
    5f8a:	orrs	r1, r3
    5f8c:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    5f90:	ldr.w	r3, [r9, #28]
    5f94:	str	r5, [r3, #100]	; 0x64
    pending_rx_count++; //
    5f96:	ldrb.w	r2, [r9, #146]	; 0x92
    5f9a:	adds	r2, #1
    5f9c:	strb.w	r2, [r9, #146]	; 0x92

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    5fa0:	ldr	r2, [r3, #112]	; 0x70
    5fa2:	lsls	r6, r2, #30
    5fa4:	bmi.n	5fb4 <ILI9341_t3n::drawFontChar(unsigned int)+0xc34>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5fa6:	ldrb.w	r2, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    5faa:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    5fac:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5fae:	cbz	r2, 5fb4 <ILI9341_t3n::drawFontChar(unsigned int)+0xc34>
        pending_rx_count--; // decrement count of bytes still levt
    5fb0:	strb.w	r1, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    5fb4:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    5fb6:	lsls	r5, r2, #31
    5fb8:	bpl.n	5fa0 <ILI9341_t3n::drawFontChar(unsigned int)+0xc20>
    5fba:	subs	r4, #1
    5fbc:	b.n	5f7a <ILI9341_t3n::drawFontChar(unsigned int)+0xbfa>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    5fbe:	ldr.w	r3, [r9, #168]	; 0xa8
    5fc2:	mov	r0, r9
    5fc4:	ldr	r1, [pc, #664]	; (6260 <ILI9341_t3n::drawFontChar(unsigned int)+0xee0>)
            // just chekcing every single pixel, but let's just get this going
            if ((screen_x >= _displayclipx1) && (screen_x < _displayclipx2) &&
                (screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
              // Clear before or after pixel
              if ((screen_x < origin_x) || (screen_x >= glyphend_x)) {
                writedata16_cont(textbgcolor);
    5fc6:	ldrh.w	r2, [r9, #76]	; 0x4c
    5fca:	orrs	r1, r3
    5fcc:	str	r2, [sp, #28]
    5fce:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    5fd2:	ldr	r2, [sp, #28]
    5fd4:	ldr.w	r3, [r9, #28]
    5fd8:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    5fda:	ldrb.w	r2, [r9, #146]	; 0x92
    5fde:	adds	r2, #1
    5fe0:	strb.w	r2, [r9, #146]	; 0x92

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    5fe4:	ldr	r2, [r3, #112]	; 0x70
    5fe6:	lsls	r2, r2, #30
    5fe8:	bmi.n	5ff8 <ILI9341_t3n::drawFontChar(unsigned int)+0xc78>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5fea:	ldrb.w	r2, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    5fee:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    5ff0:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    5ff2:	cbz	r2, 5ff8 <ILI9341_t3n::drawFontChar(unsigned int)+0xc78>
        pending_rx_count--; // decrement count of bytes still levt
    5ff4:	strb.w	r1, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    5ff8:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    5ffa:	lsls	r0, r2, #31
    5ffc:	bpl.n	5fe4 <ILI9341_t3n::drawFontChar(unsigned int)+0xc64>
    5ffe:	b.n	5f48 <ILI9341_t3n::drawFontChar(unsigned int)+0xbc8>
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    waitTransmitComplete();
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15));
    6000:	ldr.w	r1, [r9, #168]	; 0xa8
    6004:	mov	r0, r9
          (end_x + 1 - start_x_min); // How many bytes we need to still output
      // Serial.printf("Clear Below: %d\n", screen_x);
      while (screen_x-- > 1) {
        writedata16_cont(textbgcolor);
      }
      writedata16_last(textbgcolor);
    6006:	ldrh.w	r4, [r9, #76]	; 0x4c
    600a:	orr.w	r1, r1, #15
    600e:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    6012:	ldr.w	r1, [r9, #28]
    6016:	str	r4, [r1, #100]	; 0x64
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    6018:	ldrb.w	r2, [r9, #146]	; 0x92
    601c:	adds	r3, r2, #1
    601e:	strb.w	r3, [r9, #146]	; 0x92
    6022:	b.n	602a <ILI9341_t3n::drawFontChar(unsigned int)+0xcaa>
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    6024:	ldr	r3, [r1, #112]	; 0x70
    6026:	lsls	r0, r3, #30
    6028:	bpl.n	6060 <ILI9341_t3n::drawFontChar(unsigned int)+0xce0>
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    602a:	cmp	r2, #255	; 0xff
    602c:	bne.n	6024 <ILI9341_t3n::drawFontChar(unsigned int)+0xca4>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    602e:	movw	r2, #513	; 0x201
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    6032:	ldr.w	r3, [r9, #152]	; 0x98
    6036:	str	r2, [r1, #16]
    6038:	cbz	r3, 6042 <ILI9341_t3n::drawFontChar(unsigned int)+0xcc2>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
    603a:	ldr.w	r2, [r9, #148]	; 0x94
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    603e:	str.w	r2, [r3, #132]	; 0x84
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
#endif
    }
    _pspi->endTransaction();
    6042:	ldr.w	r0, [r9, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    6046:	ldrb	r3, [r0, #19]
    6048:	cmp	r3, #0
    604a:	beq.w	57d0 <ILI9341_t3n::drawFontChar(unsigned int)+0x450>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    604e:	lsls	r3, r3, #31
    6050:	bpl.n	6058 <ILI9341_t3n::drawFontChar(unsigned int)+0xcd8>
    6052:	ldr	r2, [r0, #40]	; 0x28
    6054:	ldr	r3, [pc, #524]	; (6264 <ILI9341_t3n::drawFontChar(unsigned int)+0xee4>)
    6056:	str	r2, [r3, #0]
    6058:	bl	2978 <SPIClass::endTransaction() [clone .part.9]>
    605c:	b.w	57d0 <ILI9341_t3n::drawFontChar(unsigned int)+0x450>
    6060:	subs	r3, r2, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    6062:	ldr	r0, [r1, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
    6064:	strb.w	r2, [r9, #146]	; 0x92
    6068:	uxtb	r2, r3
    606a:	b.n	602a <ILI9341_t3n::drawFontChar(unsigned int)+0xcaa>
      ((origin_x + (int)width) > (scroll_x + scroll_width))) {
    origin_x = 0;
    if (xoffset >= 0) {
      cursor_x = scroll_x;
    } else {
      cursor_x = -xoffset;
    606c:	rsb	r2, fp, #0
    6070:	strh.w	r2, [r9, #36]	; 0x24
    6074:	b.w	54c4 <ILI9341_t3n::drawFontChar(unsigned int)+0x144>
      // 1bpp solid font
      else {

        // Now lets process each of the data lines (draw character)
        screen_y = origin_y;
        while (linecount > 0) {
    6078:	ldr	r3, [sp, #24]
    607a:	cmp	r3, #0
    607c:	ble.w	5ba8 <ILI9341_t3n::drawFontChar(unsigned int)+0x828>
    6080:	ldr	r3, [sp, #36]	; 0x24
    6082:	ldr	r2, [sp, #52]	; 0x34
    6084:	ldr	r4, [sp, #44]	; 0x2c
    6086:	subs	r3, r3, r2
    6088:	lsls	r3, r3, #1
    608a:	str	r3, [sp, #76]	; 0x4c
          // Serial.printf("    linecount = %d\n", linecount);
          uint32_t b = fetchbit(data, bitoffset++);
    608c:	add.w	r1, sl, #1
  }
  gfxFont = f;
}

static uint32_t fetchbit(const uint8_t *p, uint32_t index) {
  if (p[index >> 3] & (1 << (7 - (index & 7))))
    6090:	mov.w	r3, sl, lsr #3
    6094:	mvn.w	r2, sl

        // Now lets process each of the data lines (draw character)
        screen_y = origin_y;
        while (linecount > 0) {
          // Serial.printf("    linecount = %d\n", linecount);
          uint32_t b = fetchbit(data, bitoffset++);
    6098:	str	r1, [sp, #60]	; 0x3c
  }
  gfxFont = f;
}

static uint32_t fetchbit(const uint8_t *p, uint32_t index) {
  if (p[index >> 3] & (1 << (7 - (index & 7))))
    609a:	ldr	r1, [sp, #16]
    609c:	and.w	r2, r2, #7
    60a0:	ldrb	r3, [r1, r3]
    60a2:	asrs	r3, r2
    60a4:	ands.w	r3, r3, #1
    60a8:	bne.w	61de <ILI9341_t3n::drawFontChar(unsigned int)+0xe5e>
            // Serial.println("Multi");
            n = fetchbits_unsigned(data, bitoffset, 3) + 2;
            bitoffset += 3;
          }
          uint32_t bitoffset_row_start = bitoffset;
          while (n--) {
    60ac:	str	r3, [sp, #44]	; 0x2c
    60ae:	ldr	r2, [sp, #56]	; 0x38
    60b0:	mov	r3, r4
    60b2:	ldr.w	sl, [sp, #60]	; 0x3c
    60b6:	adds	r2, #1
    60b8:	str	r2, [sp, #72]	; 0x48
    60ba:	adds	r2, r4, #1
    60bc:	str	r2, [sp, #48]	; 0x30
            pfbPixel = pfbPixel_row;

            // Clear to left
            if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
    60be:	ldrsh.w	r2, [r9, #56]	; 0x38
    60c2:	cmp	r2, r3
    60c4:	str	r2, [sp, #20]
    60c6:	bgt.w	61da <ILI9341_t3n::drawFontChar(unsigned int)+0xe5a>
    60ca:	ldrsh.w	r2, [r9, #60]	; 0x3c
    60ce:	cmp	r2, r3
    60d0:	ble.w	61da <ILI9341_t3n::drawFontChar(unsigned int)+0xe5a>
              bitoffset = bitoffset_row_start; // we will work through these
                                               // bits maybe multiple times
              for (screen_x = start_x; screen_x < origin_x; screen_x++) {
    60d4:	ldr	r2, [sp, #52]	; 0x34
    60d6:	ldr	r4, [sp, #36]	; 0x24
    60d8:	cmp	r2, r4
    60da:	bge.w	61fe <ILI9341_t3n::drawFontChar(unsigned int)+0xe7e>
    60de:	ldr	r1, [sp, #32]
                if (screen_x >= _displayclipx1) {
    60e0:	ldrsh.w	r0, [r9, #54]	; 0x36
    60e4:	cmp	r0, r2

            // Clear to left
            if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
              bitoffset = bitoffset_row_start; // we will work through these
                                               // bits maybe multiple times
              for (screen_x = start_x; screen_x < origin_x; screen_x++) {
    60e6:	add.w	r2, r2, #1
                if (screen_x >= _displayclipx1) {
    60ea:	bgt.n	60f2 <ILI9341_t3n::drawFontChar(unsigned int)+0xd72>
                  *pfbPixel = textbgcolor;
    60ec:	ldrh.w	r0, [r9, #76]	; 0x4c
    60f0:	strh	r0, [r1, #0]

            // Clear to left
            if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
              bitoffset = bitoffset_row_start; // we will work through these
                                               // bits maybe multiple times
              for (screen_x = start_x; screen_x < origin_x; screen_x++) {
    60f2:	cmp	r4, r2
                if (screen_x >= _displayclipx1) {
                  *pfbPixel = textbgcolor;
                } // make sure not clipped
                pfbPixel++;
    60f4:	add.w	r1, r1, #2

            // Clear to left
            if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
              bitoffset = bitoffset_row_start; // we will work through these
                                               // bits maybe multiple times
              for (screen_x = start_x; screen_x < origin_x; screen_x++) {
    60f8:	bne.n	60e0 <ILI9341_t3n::drawFontChar(unsigned int)+0xd60>
    60fa:	ldr	r2, [sp, #32]
    60fc:	ldr	r1, [sp, #76]	; 0x4c
    60fe:	ldr.w	sl, [sp, #60]	; 0x3c
    6102:	adds	r6, r2, r1
    6104:	ldrsh.w	r2, [r9, #56]	; 0x38
    6108:	str	r2, [sp, #20]
    // In this mode we need to update to use the offset and bounding rectangles
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    int cursor_y_origin = cursor_y + _originy;
    origin_x += _originx;
    610a:	ldr	r4, [sp, #36]	; 0x24
    610c:	movs	r7, #0
    610e:	str	r3, [sp, #24]

            // Pixel bits
            screen_x = origin_x;
            uint32_t x = 0;
            do {
              uint32_t xsize = width - x;
    6110:	rsb	r5, r7, r8
              if (xsize > 32)
                xsize = 32;
              uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
    6114:	mov	r1, sl
    6116:	ldr	r0, [sp, #16]
    6118:	cmp	r5, #32
    611a:	it	cs
    611c:	movcs	r5, #32
    611e:	mov	r2, r5
    6120:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
              uint32_t bit_mask = 1 << (xsize - 1);
              // Serial.printf(" %d %d %x %x\n", x, xsize, bits, bit_mask);
              if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
    6124:	ldr	r3, [sp, #20]
    6126:	ldr	r1, [sp, #24]
    6128:	mov	r2, r3
    612a:	cmp	r2, r1
    612c:	bgt.n	617a <ILI9341_t3n::drawFontChar(unsigned int)+0xdfa>
    612e:	ldrsh.w	r2, [r9, #60]	; 0x3c
    6132:	cmp	r2, r1
    6134:	ble.n	617a <ILI9341_t3n::drawFontChar(unsigned int)+0xdfa>
            do {
              uint32_t xsize = width - x;
              if (xsize > 32)
                xsize = 32;
              uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
              uint32_t bit_mask = 1 << (xsize - 1);
    6136:	subs	r2, r5, #1
              // Serial.printf(" %d %d %x %x\n", x, xsize, bits, bit_mask);
              if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
                while (bit_mask && (screen_x <= end_x)) {
    6138:	movs	r3, #1
    613a:	lsls.w	r2, r3, r2
    613e:	beq.n	617a <ILI9341_t3n::drawFontChar(unsigned int)+0xdfa>
    6140:	cmp	r4, fp
    6142:	ble.n	614a <ILI9341_t3n::drawFontChar(unsigned int)+0xdca>
    6144:	b.n	617a <ILI9341_t3n::drawFontChar(unsigned int)+0xdfa>
    6146:	cmp	fp, r4
    6148:	blt.n	6174 <ILI9341_t3n::drawFontChar(unsigned int)+0xdf4>
                  if ((screen_x >= _displayclipx1) &&
    614a:	ldrsh.w	r3, [r9, #54]	; 0x36
    614e:	cmp	r3, r4
    6150:	bgt.n	6168 <ILI9341_t3n::drawFontChar(unsigned int)+0xde8>
    6152:	ldrsh.w	r3, [r9, #58]	; 0x3a
    6156:	cmp	r3, r4
    6158:	ble.n	6168 <ILI9341_t3n::drawFontChar(unsigned int)+0xde8>
                      (screen_x < _displayclipx2)) {
                    *pfbPixel = (bits & bit_mask) ? textcolor : textbgcolor;
    615a:	tst	r0, r2
    615c:	ite	ne
    615e:	ldrhne.w	r3, [r9, #74]	; 0x4a
    6162:	ldrheq.w	r3, [r9, #76]	; 0x4c
    6166:	strh	r3, [r6, #0]
                xsize = 32;
              uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
              uint32_t bit_mask = 1 << (xsize - 1);
              // Serial.printf(" %d %d %x %x\n", x, xsize, bits, bit_mask);
              if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
                while (bit_mask && (screen_x <= end_x)) {
    6168:	lsrs	r2, r2, #1
                  if ((screen_x >= _displayclipx1) &&
                      (screen_x < _displayclipx2)) {
                    *pfbPixel = (bits & bit_mask) ? textcolor : textbgcolor;
                  }
                  pfbPixel++;
    616a:	add.w	r6, r6, #2
                  bit_mask = bit_mask >> 1;
                  screen_x++; // increment our pixel position.
    616e:	add.w	r4, r4, #1
                xsize = 32;
              uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
              uint32_t bit_mask = 1 << (xsize - 1);
              // Serial.printf(" %d %d %x %x\n", x, xsize, bits, bit_mask);
              if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
                while (bit_mask && (screen_x <= end_x)) {
    6172:	bne.n	6146 <ILI9341_t3n::drawFontChar(unsigned int)+0xdc6>
    6174:	ldrsh.w	r3, [r9, #56]	; 0x38
    6178:	str	r3, [sp, #20]
                  bit_mask = bit_mask >> 1;
                  screen_x++; // increment our pixel position.
                }
              }
              bitoffset += xsize;
              x += xsize;
    617a:	add	r7, r5
                  pfbPixel++;
                  bit_mask = bit_mask >> 1;
                  screen_x++; // increment our pixel position.
                }
              }
              bitoffset += xsize;
    617c:	add	sl, r5
              x += xsize;
            } while (x < width);
    617e:	cmp	r8, r7
    6180:	bhi.n	6110 <ILI9341_t3n::drawFontChar(unsigned int)+0xd90>
    6182:	ldr	r3, [sp, #24]

            // Clear to right
            if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
    6184:	ldr	r2, [sp, #20]
    6186:	cmp	r3, r2
    6188:	blt.n	61aa <ILI9341_t3n::drawFontChar(unsigned int)+0xe2a>
    618a:	ldrsh.w	r2, [r9, #60]	; 0x3c
    618e:	cmp	r2, r3
    6190:	ble.n	61aa <ILI9341_t3n::drawFontChar(unsigned int)+0xe2a>
              // output bg color and right hand side
              while (screen_x++ <= end_x) {
    6192:	cmp	r4, fp
    6194:	add.w	r2, r4, #1
    6198:	bgt.n	61aa <ILI9341_t3n::drawFontChar(unsigned int)+0xe2a>
    619a:	ldr	r0, [sp, #72]	; 0x48
    619c:	adds	r2, #1
                *pfbPixel++ = textbgcolor;
    619e:	ldrh.w	r1, [r9, #76]	; 0x4c
            } while (x < width);

            // Clear to right
            if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
              // output bg color and right hand side
              while (screen_x++ <= end_x) {
    61a2:	cmp	r2, r0
                *pfbPixel++ = textbgcolor;
    61a4:	strh.w	r1, [r6], #2
            } while (x < width);

            // Clear to right
            if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
              // output bg color and right hand side
              while (screen_x++ <= end_x) {
    61a8:	bne.n	619c <ILI9341_t3n::drawFontChar(unsigned int)+0xe1c>
    61aa:	ldr	r0, [sp, #44]	; 0x2c
                *pfbPixel++ = textbgcolor;
              }
            }
            screen_y++;
    61ac:	adds	r3, #1
    61ae:	ldr	r1, [sp, #48]	; 0x30
            pfbPixel_row += _width;
    61b0:	ldrsh.w	r2, [r9, #32]
    61b4:	add	r1, r0
    61b6:	ldr	r0, [sp, #32]
            // Serial.println("Multi");
            n = fetchbits_unsigned(data, bitoffset, 3) + 2;
            bitoffset += 3;
          }
          uint32_t bitoffset_row_start = bitoffset;
          while (n--) {
    61b8:	cmp	r1, r3
              while (screen_x++ <= end_x) {
                *pfbPixel++ = textbgcolor;
              }
            }
            screen_y++;
            pfbPixel_row += _width;
    61ba:	add.w	r0, r0, r2, lsl #1
    61be:	str	r0, [sp, #32]
            // Serial.println("Multi");
            n = fetchbits_unsigned(data, bitoffset, 3) + 2;
            bitoffset += 3;
          }
          uint32_t bitoffset_row_start = bitoffset;
          while (n--) {
    61c0:	bne.w	60be <ILI9341_t3n::drawFontChar(unsigned int)+0xd3e>
    61c4:	ldr	r1, [sp, #28]
    61c6:	mov	r4, r3
    61c8:	ldr	r3, [sp, #44]	; 0x2c
    61ca:	subs	r1, #1
    61cc:	subs	r3, r1, r3
      // 1bpp solid font
      else {

        // Now lets process each of the data lines (draw character)
        screen_y = origin_y;
        while (linecount > 0) {
    61ce:	cmp	r3, #0
    61d0:	str	r3, [sp, #28]
    61d2:	bgt.w	608c <ILI9341_t3n::drawFontChar(unsigned int)+0xd0c>
    61d6:	str	r4, [sp, #44]	; 0x2c
    61d8:	b.n	5ba8 <ILI9341_t3n::drawFontChar(unsigned int)+0x828>
    61da:	ldr	r6, [sp, #32]
    61dc:	b.n	610a <ILI9341_t3n::drawFontChar(unsigned int)+0xd8a>
            // Serial.println("Single");
            n = 1;
          } else {
            // Serial.println("Multi");
            n = fetchbits_unsigned(data, bitoffset, 3) + 2;
            bitoffset += 3;
    61de:	add.w	r3, sl, #4
          if (b == 0) {
            // Serial.println("Single");
            n = 1;
          } else {
            // Serial.println("Multi");
            n = fetchbits_unsigned(data, bitoffset, 3) + 2;
    61e2:	ldr	r1, [sp, #60]	; 0x3c
    61e4:	movs	r2, #3
    61e6:	ldr	r0, [sp, #16]
            bitoffset += 3;
    61e8:	str	r3, [sp, #60]	; 0x3c
          if (b == 0) {
            // Serial.println("Single");
            n = 1;
          } else {
            // Serial.println("Multi");
            n = fetchbits_unsigned(data, bitoffset, 3) + 2;
    61ea:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
            bitoffset += 3;
          }
          uint32_t bitoffset_row_start = bitoffset;
          while (n--) {
    61ee:	adds	r3, r0, #1
    61f0:	adds	r0, #2
    61f2:	str	r3, [sp, #44]	; 0x2c
    61f4:	bne.w	60ae <ILI9341_t3n::drawFontChar(unsigned int)+0xd2e>
            // Serial.println("Single");
            n = 1;
          } else {
            // Serial.println("Multi");
            n = fetchbits_unsigned(data, bitoffset, 3) + 2;
            bitoffset += 3;
    61f8:	ldr.w	sl, [sp, #60]	; 0x3c
    61fc:	b.n	608c <ILI9341_t3n::drawFontChar(unsigned int)+0xd0c>

            // Clear to left
            if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
              bitoffset = bitoffset_row_start; // we will work through these
                                               // bits maybe multiple times
              for (screen_x = start_x; screen_x < origin_x; screen_x++) {
    61fe:	ldr	r6, [sp, #32]
    6200:	ldr.w	sl, [sp, #60]	; 0x3c
    6204:	b.n	610a <ILI9341_t3n::drawFontChar(unsigned int)+0xd8a>
      // 1bpp
      else {

        // Now lets process each of the data lines.
        screen_y = origin_y;
        while (linecount > 0) {
    6206:	ldr	r3, [sp, #24]
    6208:	cmp	r3, #0
    620a:	ble.w	5f6a <ILI9341_t3n::drawFontChar(unsigned int)+0xbea>
            do {
              uint32_t xsize = width - x;
              if (xsize > 32)
                xsize = 32;
              uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
              uint32_t bit_mask = 1 << (xsize - 1);
    620e:	str.w	sl, [sp, #20]
    6212:	mov	sl, r8
    6214:	ldr.w	r8, [sp, #44]	; 0x2c
    6218:	str.w	fp, [sp, #64]	; 0x40
  }
  gfxFont = f;
}

static uint32_t fetchbit(const uint8_t *p, uint32_t index) {
  if (p[index >> 3] & (1 << (7 - (index & 7))))
    621c:	ldr	r1, [sp, #20]
    621e:	lsrs	r3, r1, #3
    6220:	mvns	r2, r1

        // Now lets process each of the data lines.
        screen_y = origin_y;
        while (linecount > 0) {
          // Serial.printf("    linecount = %d\n", linecount);
          uint32_t b = fetchbit(data, bitoffset++);
    6222:	adds	r1, #1
  }
  gfxFont = f;
}

static uint32_t fetchbit(const uint8_t *p, uint32_t index) {
  if (p[index >> 3] & (1 << (7 - (index & 7))))
    6224:	and.w	r2, r2, #7

        // Now lets process each of the data lines.
        screen_y = origin_y;
        while (linecount > 0) {
          // Serial.printf("    linecount = %d\n", linecount);
          uint32_t b = fetchbit(data, bitoffset++);
    6228:	str	r1, [sp, #32]
  }
  gfxFont = f;
}

static uint32_t fetchbit(const uint8_t *p, uint32_t index) {
  if (p[index >> 3] & (1 << (7 - (index & 7))))
    622a:	ldr	r1, [sp, #16]
    622c:	ldrb	r3, [r1, r3]
    622e:	asrs	r3, r2
    6230:	ands.w	r3, r3, #1
    6234:	bne.w	63de <ILI9341_t3n::drawFontChar(unsigned int)+0x105e>
            // Serial.println("    Multi");
            n = fetchbits_unsigned(data, bitoffset, 3) + 2;
            bitoffset += 3;
          }
          uint32_t bitoffset_row_start = bitoffset;
          while (n--) {
    6238:	str	r3, [sp, #60]	; 0x3c
    623a:	add.w	r3, r8, #1
    623e:	ldr	r2, [sp, #60]	; 0x3c
    6240:	add	r3, r2
    6242:	str	r3, [sp, #44]	; 0x2c
            // We need to handle case where some of the bits may not be visible,
            // but we still need to
            // read through them
            // Serial.printf("y:%d  %d %d %d %d\n", screen_y, start_x, origin_x,
            // _displayclipx1, _displayclipx2);
            if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
    6244:	ldrsh.w	fp, [r9, #56]	; 0x38
    6248:	cmp	fp, r8
    624a:	bgt.n	62c0 <ILI9341_t3n::drawFontChar(unsigned int)+0xf40>
    624c:	ldrsh.w	r3, [r9, #60]	; 0x3c
    6250:	cmp	r3, r8
    6252:	ble.n	62c0 <ILI9341_t3n::drawFontChar(unsigned int)+0xf40>
              for (screen_x = start_x; screen_x < origin_x; screen_x++) {
    6254:	ldr	r4, [sp, #52]	; 0x34
    6256:	ldr	r5, [sp, #36]	; 0x24
    6258:	cmp	r4, r5
    625a:	blt.n	626e <ILI9341_t3n::drawFontChar(unsigned int)+0xeee>
    625c:	b.n	62c0 <ILI9341_t3n::drawFontChar(unsigned int)+0xf40>
    625e:	nop
    6260:	.word	0x0020000f
    6264:	.word	0xe000e100
    6268:	adds	r4, #1
    626a:	cmp	r5, r4
    626c:	beq.n	62bc <ILI9341_t3n::drawFontChar(unsigned int)+0xf3c>
                if ((screen_x >= _displayclipx1) &&
    626e:	ldrsh.w	r3, [r9, #54]	; 0x36
    6272:	cmp	r3, r4
    6274:	bgt.n	6268 <ILI9341_t3n::drawFontChar(unsigned int)+0xee8>
    6276:	ldrsh.w	r3, [r9, #58]	; 0x3a
    627a:	cmp	r3, r4
    627c:	ble.n	6268 <ILI9341_t3n::drawFontChar(unsigned int)+0xee8>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    627e:	ldr.w	r3, [r9, #168]	; 0xa8
    6282:	mov	r0, r9
    6284:	ldr	r1, [pc, #388]	; (640c <ILI9341_t3n::drawFontChar(unsigned int)+0x108c>)
                    (screen_x < _displayclipx2)) {
                  // Serial.write('-');
                  writedata16_cont(textbgcolor);
    6286:	ldrh.w	r6, [r9, #76]	; 0x4c
    628a:	orrs	r1, r3
    628c:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    6290:	ldr.w	r3, [r9, #28]
    6294:	str	r6, [r3, #100]	; 0x64
    pending_rx_count++; //
    6296:	ldrb.w	r2, [r9, #146]	; 0x92
    629a:	adds	r2, #1
    629c:	strb.w	r2, [r9, #146]	; 0x92

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    62a0:	ldr	r2, [r3, #112]	; 0x70
    62a2:	lsls	r7, r2, #30
    62a4:	bmi.n	62b4 <ILI9341_t3n::drawFontChar(unsigned int)+0xf34>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    62a6:	ldrb.w	r2, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    62aa:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    62ac:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    62ae:	cbz	r2, 62b4 <ILI9341_t3n::drawFontChar(unsigned int)+0xf34>
        pending_rx_count--; // decrement count of bytes still levt
    62b0:	strb.w	r1, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    62b4:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    62b6:	lsls	r6, r2, #31
    62b8:	bpl.n	62a0 <ILI9341_t3n::drawFontChar(unsigned int)+0xf20>
    62ba:	b.n	6268 <ILI9341_t3n::drawFontChar(unsigned int)+0xee8>
    62bc:	ldrsh.w	fp, [r9, #56]	; 0x38
    // In this mode we need to update to use the offset and bounding rectangles
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    int cursor_y_origin = cursor_y + _originy;
    origin_x += _originx;
    62c0:	ldr	r3, [sp, #32]
    62c2:	movs	r7, #0
    62c4:	ldr	r4, [sp, #36]	; 0x24
    62c6:	str	r3, [sp, #20]
              }
            }
            uint32_t x = 0;
            screen_x = origin_x;
            do {
              uint32_t xsize = width - x;
    62c8:	rsb	r6, r7, sl
              if (xsize > 32)
                xsize = 32;
              uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
    62cc:	ldr	r1, [sp, #20]
    62ce:	ldr	r0, [sp, #16]
    62d0:	cmp	r6, #32
    62d2:	it	cs
    62d4:	movcs	r6, #32
    62d6:	mov	r2, r6
    62d8:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
              uint32_t bit_mask = 1 << (xsize - 1);
              // Serial.printf("     %d %d %x %x - ", x, xsize, bits, bit_mask);
              if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
    62dc:	cmp	fp, r8
    62de:	bgt.n	6364 <ILI9341_t3n::drawFontChar(unsigned int)+0xfe4>
    62e0:	ldrsh.w	r3, [r9, #60]	; 0x3c
    62e4:	cmp	r3, r8
    62e6:	ble.n	6364 <ILI9341_t3n::drawFontChar(unsigned int)+0xfe4>
            do {
              uint32_t xsize = width - x;
              if (xsize > 32)
                xsize = 32;
              uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
              uint32_t bit_mask = 1 << (xsize - 1);
    62e8:	subs	r5, r6, #1
              // Serial.printf("     %d %d %x %x - ", x, xsize, bits, bit_mask);
              if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
                while (bit_mask) {
    62ea:	movs	r3, #1
    62ec:	lsls.w	r5, r3, r5
    62f0:	beq.n	635e <ILI9341_t3n::drawFontChar(unsigned int)+0xfde>
    62f2:	mov	fp, r0
    62f4:	str	r6, [sp, #24]
                  if ((screen_x >= _displayclipx1) &&
    62f6:	ldrsh.w	r3, [r9, #54]	; 0x36
    62fa:	cmp	r3, r4
    62fc:	bgt.n	6350 <ILI9341_t3n::drawFontChar(unsigned int)+0xfd0>
    62fe:	ldrsh.w	r3, [r9, #58]	; 0x3a
    6302:	cmp	r3, r4
    6304:	ble.n	6350 <ILI9341_t3n::drawFontChar(unsigned int)+0xfd0>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    6306:	ldr.w	r3, [r9, #168]	; 0xa8
                      (screen_x < _displayclipx2)) {
                    writedata16_cont((bits & bit_mask) ? textcolor
    630a:	tst.w	fp, r5
    630e:	ldr	r1, [pc, #252]	; (640c <ILI9341_t3n::drawFontChar(unsigned int)+0x108c>)
    6310:	mov	r0, r9
    6312:	it	ne
    6314:	ldrhne.w	r6, [r9, #74]	; 0x4a
    6318:	orr.w	r1, r1, r3
    631c:	it	eq
    631e:	ldrheq.w	r6, [r9, #76]	; 0x4c
    6322:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    6326:	ldr.w	r3, [r9, #28]
    632a:	str	r6, [r3, #100]	; 0x64
    pending_rx_count++; //
    632c:	ldrb.w	r2, [r9, #146]	; 0x92
    6330:	adds	r2, #1
    6332:	strb.w	r2, [r9, #146]	; 0x92

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    6336:	ldr	r2, [r3, #112]	; 0x70
    6338:	lsls	r0, r2, #30
    633a:	bmi.n	634a <ILI9341_t3n::drawFontChar(unsigned int)+0xfca>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    633c:	ldrb.w	r2, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    6340:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    6342:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    6344:	cbz	r2, 634a <ILI9341_t3n::drawFontChar(unsigned int)+0xfca>
        pending_rx_count--; // decrement count of bytes still levt
    6346:	strb.w	r1, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    634a:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    634c:	lsls	r1, r2, #31
    634e:	bpl.n	6336 <ILI9341_t3n::drawFontChar(unsigned int)+0xfb6>
                xsize = 32;
              uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
              uint32_t bit_mask = 1 << (xsize - 1);
              // Serial.printf("     %d %d %x %x - ", x, xsize, bits, bit_mask);
              if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
                while (bit_mask) {
    6350:	lsrs	r5, r5, #1
                    writedata16_cont((bits & bit_mask) ? textcolor
                                                       : textbgcolor);
                    // Serial.write((bits & bit_mask) ? '*' : '.');
                  }
                  bit_mask = bit_mask >> 1;
                  screen_x++; // Current actual screen X
    6352:	add.w	r4, r4, #1
                xsize = 32;
              uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
              uint32_t bit_mask = 1 << (xsize - 1);
              // Serial.printf("     %d %d %x %x - ", x, xsize, bits, bit_mask);
              if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
                while (bit_mask) {
    6356:	bne.n	62f6 <ILI9341_t3n::drawFontChar(unsigned int)+0xf76>
    6358:	ldr	r6, [sp, #24]
    635a:	ldrsh.w	fp, [r9, #56]	; 0x38
                  }
                  bit_mask = bit_mask >> 1;
                  screen_x++; // Current actual screen X
                }
                // Serial.println();
                bitoffset += xsize;
    635e:	ldr	r3, [sp, #20]
    6360:	add	r3, r6
    6362:	str	r3, [sp, #20]
              }
              x += xsize;
    6364:	add	r7, r6
            } while (x < width);
    6366:	cmp	sl, r7
    6368:	bhi.n	62c8 <ILI9341_t3n::drawFontChar(unsigned int)+0xf48>
            if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
    636a:	cmp	r8, fp
    636c:	blt.n	63bc <ILI9341_t3n::drawFontChar(unsigned int)+0x103c>
    636e:	ldrsh.w	r3, [r9, #60]	; 0x3c
    6372:	cmp	r3, r8
    6374:	ble.n	63bc <ILI9341_t3n::drawFontChar(unsigned int)+0x103c>
    6376:	ldr	r5, [sp, #64]	; 0x40
              // output bg color and right hand side
              while (screen_x++ <= end_x) {
    6378:	cmp	r5, r4
    637a:	blt.n	63bc <ILI9341_t3n::drawFontChar(unsigned int)+0x103c>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    637c:	ldr.w	r3, [r9, #168]	; 0xa8
    6380:	mov	r0, r9
    6382:	ldr	r1, [pc, #136]	; (640c <ILI9341_t3n::drawFontChar(unsigned int)+0x108c>)
                writedata16_cont(textbgcolor);
    6384:	ldrh.w	r6, [r9, #76]	; 0x4c
    6388:	orrs	r1, r3
    638a:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    638e:	ldr.w	r3, [r9, #28]
    6392:	str	r6, [r3, #100]	; 0x64
    pending_rx_count++; //
    6394:	ldrb.w	r2, [r9, #146]	; 0x92
    6398:	adds	r2, #1
    639a:	strb.w	r2, [r9, #146]	; 0x92

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    639e:	ldr	r2, [r3, #112]	; 0x70
    63a0:	lsls	r2, r2, #30
    63a2:	bmi.n	63b2 <ILI9341_t3n::drawFontChar(unsigned int)+0x1032>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    63a4:	ldrb.w	r2, [r9, #146]	; 0x92
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    63a8:	ldr	r1, [r3, #116]	; 0x74
      if (pending_rx_count)
        pending_rx_count--; // decrement count of bytes still levt
    63aa:	subs	r1, r2, #1
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      if (pending_rx_count)
    63ac:	cbz	r2, 63b2 <ILI9341_t3n::drawFontChar(unsigned int)+0x1032>
        pending_rx_count--; // decrement count of bytes still levt
    63ae:	strb.w	r1, [r9, #146]	; 0x92
    }
  } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0);
    63b2:	ldr	r2, [r3, #20]
}

#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t tmp __attribute__((unused));
  do {
    63b4:	lsls	r7, r2, #31
    63b6:	bpl.n	639e <ILI9341_t3n::drawFontChar(unsigned int)+0x101e>
    63b8:	adds	r4, #1
    63ba:	b.n	6378 <ILI9341_t3n::drawFontChar(unsigned int)+0xff8>
                writedata16_cont(textbgcolor);
                // Serial.write('+');
              }
              // Serial.println();
            }
            screen_y++;
    63bc:	add.w	r8, r8, #1
            // Serial.println("    Multi");
            n = fetchbits_unsigned(data, bitoffset, 3) + 2;
            bitoffset += 3;
          }
          uint32_t bitoffset_row_start = bitoffset;
          while (n--) {
    63c0:	ldr	r3, [sp, #44]	; 0x2c
    63c2:	cmp	r3, r8
    63c4:	bne.w	6244 <ILI9341_t3n::drawFontChar(unsigned int)+0xec4>
    63c8:	ldr	r3, [sp, #28]
    63ca:	ldr	r2, [sp, #60]	; 0x3c
    63cc:	subs	r3, #1
    63ce:	ldr.w	r8, [sp, #44]	; 0x2c
    63d2:	subs	r3, r3, r2
      // 1bpp
      else {

        // Now lets process each of the data lines.
        screen_y = origin_y;
        while (linecount > 0) {
    63d4:	cmp	r3, #0
    63d6:	str	r3, [sp, #28]
    63d8:	bgt.w	621c <ILI9341_t3n::drawFontChar(unsigned int)+0xe9c>
    63dc:	b.n	5f6a <ILI9341_t3n::drawFontChar(unsigned int)+0xbea>
            // Serial.println("    Single");
            n = 1;
          } else {
            // Serial.println("    Multi");
            n = fetchbits_unsigned(data, bitoffset, 3) + 2;
            bitoffset += 3;
    63de:	ldr	r3, [sp, #20]
          if (b == 0) {
            // Serial.println("    Single");
            n = 1;
          } else {
            // Serial.println("    Multi");
            n = fetchbits_unsigned(data, bitoffset, 3) + 2;
    63e0:	movs	r2, #3
    63e2:	ldr	r1, [sp, #32]
            bitoffset += 3;
    63e4:	adds	r3, #4
          if (b == 0) {
            // Serial.println("    Single");
            n = 1;
          } else {
            // Serial.println("    Multi");
            n = fetchbits_unsigned(data, bitoffset, 3) + 2;
    63e6:	ldr	r0, [sp, #16]
            bitoffset += 3;
    63e8:	str	r3, [sp, #32]
          if (b == 0) {
            // Serial.println("    Single");
            n = 1;
          } else {
            // Serial.println("    Multi");
            n = fetchbits_unsigned(data, bitoffset, 3) + 2;
    63ea:	bl	292c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
            bitoffset += 3;
          }
          uint32_t bitoffset_row_start = bitoffset;
          while (n--) {
    63ee:	adds	r3, r0, #1
    63f0:	adds	r0, #2
    63f2:	str	r3, [sp, #60]	; 0x3c
    63f4:	bne.w	623a <ILI9341_t3n::drawFontChar(unsigned int)+0xeba>
            // Serial.println("    Single");
            n = 1;
          } else {
            // Serial.println("    Multi");
            n = fetchbits_unsigned(data, bitoffset, 3) + 2;
            bitoffset += 3;
    63f8:	ldr	r3, [sp, #32]
    63fa:	str	r3, [sp, #20]
    63fc:	b.n	621c <ILI9341_t3n::drawFontChar(unsigned int)+0xe9c>

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
    63fe:	ldr.w	r3, [r9, #28]
    6402:	ldr	r3, [r3, #96]	; 0x60
    6404:	str.w	r3, [r9, #156]	; 0x9c
    6408:	b.n	5c2e <ILI9341_t3n::drawFontChar(unsigned int)+0x8ae>
    640a:	nop
    640c:	.word	0x0020000f

00006410 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)>:
}

// Draw a character
void ILI9341_t3n::drawChar(int16_t x, int16_t y, unsigned char c,
                           uint16_t fgcolor, uint16_t bgcolor, uint8_t size_x,
                           uint8_t size_y) {
    6410:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((x >= _width) ||              // Clip right
    6414:	ldrsh.w	r5, [r0, #32]
}

// Draw a character
void ILI9341_t3n::drawChar(int16_t x, int16_t y, unsigned char c,
                           uint16_t fgcolor, uint16_t bgcolor, uint8_t size_x,
                           uint8_t size_y) {
    6418:	sub	sp, #84	; 0x54
  if ((x >= _width) ||              // Clip right
    641a:	mov	r7, r5
    641c:	str	r5, [sp, #16]
}

// Draw a character
void ILI9341_t3n::drawChar(int16_t x, int16_t y, unsigned char c,
                           uint16_t fgcolor, uint16_t bgcolor, uint8_t size_x,
                           uint8_t size_y) {
    641e:	ldrb.w	r5, [sp, #128]	; 0x80
  if ((x >= _width) ||              // Clip right
    6422:	cmp	r7, r1
}

// Draw a character
void ILI9341_t3n::drawChar(int16_t x, int16_t y, unsigned char c,
                           uint16_t fgcolor, uint16_t bgcolor, uint8_t size_x,
                           uint8_t size_y) {
    6424:	ldrh.w	sl, [sp, #120]	; 0x78
    6428:	mov	r6, r5
    642a:	str	r5, [sp, #12]
    642c:	ldrb.w	r5, [sp, #132]	; 0x84
    6430:	ldrh.w	r9, [sp, #124]	; 0x7c
    6434:	mov	r4, r5
    6436:	str	r5, [sp, #32]
  if ((x >= _width) ||              // Clip right
    6438:	ble.w	662c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x21c>
    643c:	ldrsh.w	r5, [r0, #34]	; 0x22
    6440:	cmp	r5, r2
    6442:	ble.w	662c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x21c>
      (y >= _height) ||             // Clip bottom
      ((x + 6 * size_x - 1) < 0) || // Clip left  TODO: is this correct?
    6446:	sxth	r6, r6
    6448:	add.w	r7, r6, r6, lsl #1
    644c:	str	r6, [sp, #20]
    644e:	lsls	r7, r7, #1
// Draw a character
void ILI9341_t3n::drawChar(int16_t x, int16_t y, unsigned char c,
                           uint16_t fgcolor, uint16_t bgcolor, uint8_t size_x,
                           uint8_t size_y) {
  if ((x >= _width) ||              // Clip right
      (y >= _height) ||             // Clip bottom
    6450:	adds	r5, r1, r7
    6452:	cmp	r5, #0
    6454:	ble.w	662c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x21c>
      ((x + 6 * size_x - 1) < 0) || // Clip left  TODO: is this correct?
      ((y + 8 * size_y - 1) < 0))   // Clip top   TODO: is this correct?
    6458:	sxth	r5, r4
    645a:	mov.w	lr, r5, lsl #3
    645e:	str	r5, [sp, #28]
void ILI9341_t3n::drawChar(int16_t x, int16_t y, unsigned char c,
                           uint16_t fgcolor, uint16_t bgcolor, uint8_t size_x,
                           uint8_t size_y) {
  if ((x >= _width) ||              // Clip right
      (y >= _height) ||             // Clip bottom
      ((x + 6 * size_x - 1) < 0) || // Clip left  TODO: is this correct?
    6460:	add.w	r5, r2, lr
    6464:	cmp	r5, #0
    6466:	ble.w	662c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x21c>
      ((y + 8 * size_y - 1) < 0))   // Clip top   TODO: is this correct?
    return;

  //	Serial.printf("drawchar %d %d %c %x %x %d %d\n", x, y, c, fgcolor,
  //bgcolor, size_x, size_y);
  if (fgcolor == bgcolor) {
    646a:	cmp	sl, r9
    646c:	mov	r5, r3
    646e:	str	r2, [sp, #24]
    6470:	mov	fp, r1
    6472:	mov	r6, r0
    6474:	beq.w	6632 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x222>
    uint8_t xr, yr;
    uint8_t mask = 0x01;
    uint16_t color;

    // We need to offset by the origin.
    x += _originx;
    6478:	ldrh	r3, [r0, #50]	; 0x32
    y += _originy;
    int16_t x_char_start = x; // remember our X where we start outputting...

    if ((x >= _displayclipx2) || // Clip right
    647a:	ldrsh.w	r2, [r0, #58]	; 0x3a
    uint8_t xr, yr;
    uint8_t mask = 0x01;
    uint16_t color;

    // We need to offset by the origin.
    x += _originx;
    647e:	add	r3, r1
    6480:	uxth	r3, r3
    6482:	sxth	r1, r3
    y += _originy;
    int16_t x_char_start = x; // remember our X where we start outputting...

    if ((x >= _displayclipx2) || // Clip right
    6484:	cmp	r1, r2
    uint8_t xr, yr;
    uint8_t mask = 0x01;
    uint16_t color;

    // We need to offset by the origin.
    x += _originx;
    6486:	mov	r4, r1
    6488:	str	r1, [sp, #36]	; 0x24
    y += _originy;
    int16_t x_char_start = x; // remember our X where we start outputting...

    if ((x >= _displayclipx2) || // Clip right
    648a:	bge.w	662c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x21c>
    uint8_t mask = 0x01;
    uint16_t color;

    // We need to offset by the origin.
    x += _originx;
    y += _originy;
    648e:	ldrh	r1, [r6, #52]	; 0x34
    6490:	ldr	r0, [sp, #24]
    int16_t x_char_start = x; // remember our X where we start outputting...

    if ((x >= _displayclipx2) || // Clip right
        (y >= _displayclipy2) || // Clip bottom
    6492:	ldrsh.w	ip, [r6, #60]	; 0x3c
    uint8_t mask = 0x01;
    uint16_t color;

    // We need to offset by the origin.
    x += _originx;
    y += _originy;
    6496:	add	r0, r1
    6498:	uxth	r1, r0
    649a:	sxth.w	fp, r1
    int16_t x_char_start = x; // remember our X where we start outputting...

    if ((x >= _displayclipx2) || // Clip right
    649e:	cmp	fp, ip
    64a0:	bge.w	662c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x21c>
        (y >= _displayclipy2) || // Clip bottom
    64a4:	add	r7, r4
        ((x + 6 * size_x - 1) <
         _displayclipx1) || // Clip left  TODO: this is not correct
    64a6:	ldrsh.w	r0, [r6, #54]	; 0x36
    y += _originy;
    int16_t x_char_start = x; // remember our X where we start outputting...

    if ((x >= _displayclipx2) || // Clip right
        (y >= _displayclipy2) || // Clip bottom
        ((x + 6 * size_x - 1) <
    64aa:	str	r4, [sp, #20]
    x += _originx;
    y += _originy;
    int16_t x_char_start = x; // remember our X where we start outputting...

    if ((x >= _displayclipx2) || // Clip right
        (y >= _displayclipy2) || // Clip bottom
    64ac:	cmp	r7, r0
    64ae:	ble.w	662c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x21c>
        ((x + 6 * size_x - 1) <
         _displayclipx1) || // Clip left  TODO: this is not correct
    64b2:	add	lr, fp
        ((y + 8 * size_y - 1) <
         _displayclipy1)) // Clip top   TODO: this is not correct
    64b4:	ldrsh.w	r8, [r6, #56]	; 0x38

    if ((x >= _displayclipx2) || // Clip right
        (y >= _displayclipy2) || // Clip bottom
        ((x + 6 * size_x - 1) <
         _displayclipx1) || // Clip left  TODO: this is not correct
        ((y + 8 * size_y - 1) <
    64b8:	str.w	fp, [sp, #24]
    int16_t x_char_start = x; // remember our X where we start outputting...

    if ((x >= _displayclipx2) || // Clip right
        (y >= _displayclipy2) || // Clip bottom
        ((x + 6 * size_x - 1) <
         _displayclipx1) || // Clip left  TODO: this is not correct
    64bc:	cmp	lr, r8
    64be:	ble.w	662c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x21c>
        ((y + 8 * size_y - 1) <
         _displayclipy1)) // Clip top   TODO: this is not correct
      return;

#ifdef ENABLE_ILI9341_FRAMEBUFFER
    if (_use_fbtft) {
    64c2:	ldrb.w	r7, [r6, #180]	; 0xb4
    64c6:	cmp	r7, #0
    64c8:	beq.w	6914 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x504>
      updateChangedRange(
    64cc:	ldr	r2, [sp, #12]
    64ce:	ldr	r7, [sp, #32]
    64d0:	add.w	r0, r2, r2, lsl #1
    _changed_max_y = -1;
  }

  void updateChangedRange(int16_t x, int16_t y, int16_t w, int16_t h)
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
    64d4:	ldrsh.w	r2, [r6, #188]	; 0xbc
    64d8:	lsls	r7, r7, #3
    64da:	cmp	r2, r4
    64dc:	mov.w	r0, r0, lsl #1
    64e0:	ble.n	64ea <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xda>
      _changed_min_x = x;
    64e2:	ldrh.w	r2, [sp, #36]	; 0x24
    64e6:	strh.w	r2, [r6, #188]	; 0xbc
    if (y < _changed_min_y)
      _changed_min_y = y;
    x += w - 1;
    64ea:	subs	r0, #1

  void updateChangedRange(int16_t x, int16_t y, int16_t w, int16_t h)
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    if (y < _changed_min_y)
    64ec:	ldrsh.w	r2, [r6, #192]	; 0xc0
      _changed_min_y = y;
    x += w - 1;
    y += h - 1;
    64f0:	subs	r7, #1
          x, y, 6 * size_x,
          8 * size_y); // update the range of the screen that has been changed;
      uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
    64f2:	movs	r4, #8
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    x += w - 1;
    64f4:	add	r0, r3

  void updateChangedRange(int16_t x, int16_t y, int16_t w, int16_t h)
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    if (y < _changed_min_y)
    64f6:	cmp	r2, fp
      _changed_min_y = y;
    x += w - 1;
    y += h - 1;
    64f8:	add	r1, r7
    if (x > _changed_max_x)
    64fa:	ldrsh.w	r2, [r6, #190]	; 0xbe
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    x += w - 1;
    64fe:	sxth	r0, r0
  void updateChangedRange(int16_t x, int16_t y, int16_t w, int16_t h)
      __attribute__((always_inline)) {
    if (x < _changed_min_x)
      _changed_min_x = x;
    if (y < _changed_min_y)
      _changed_min_y = y;
    6500:	it	gt
    6502:	strhgt.w	fp, [r6, #192]	; 0xc0
    x += w - 1;
    y += h - 1;
    6506:	sxth	r3, r1
    6508:	ldr	r7, [sp, #16]
    if (x > _changed_max_x)
    650a:	cmp	r2, r0
      _changed_max_x = x;
    if (y > _changed_max_y)
    650c:	ldrsh.w	r2, [r6, #194]	; 0xc2
    6510:	str	r4, [sp, #64]	; 0x40
    }
  } else {
    // This solid background approach is about 5 time faster
    uint8_t xc, yc;
    uint8_t xr, yr;
    uint8_t mask = 0x01;
    6512:	mov.w	r8, #1
    if (y < _changed_min_y)
      _changed_min_y = y;
    x += w - 1;
    y += h - 1;
    if (x > _changed_max_x)
      _changed_max_x = x;
    6516:	it	lt
    6518:	strhlt.w	r0, [r6, #190]	; 0xbe
    if (y > _changed_max_y)
    651c:	cmp	r2, r3
#ifdef ENABLE_ILI9341_FRAMEBUFFER
    if (_use_fbtft) {
      updateChangedRange(
          x, y, 6 * size_x,
          8 * size_y); // update the range of the screen that has been changed;
      uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
    651e:	ldr	r2, [sp, #36]	; 0x24
      _changed_max_y = y;
    6520:	it	lt
    6522:	strhlt.w	r3, [r6, #194]	; 0xc2
    6526:	ldr	r3, [sp, #12]
    6528:	mla	r2, fp, r7, r2
    652c:	ldr.w	r0, [r6, #176]	; 0xb0
    6530:	subs	r1, r3, #1
    6532:	add.w	r3, r5, r5, lsl #2
    6536:	ldr	r5, [pc, #704]	; (67f8 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3e8>)
    6538:	str	r3, [sp, #48]	; 0x30
    653a:	adds	r3, #5
    653c:	uxtb	r1, r1
    653e:	add	r3, r5
    6540:	adds	r4, r1, #1
    6542:	uxth	r1, r1
    6544:	str	r3, [sp, #52]	; 0x34
    6546:	add.w	r3, r0, r2, lsl #1
    654a:	str	r4, [sp, #56]	; 0x38
    654c:	str	r3, [sp, #16]
    654e:	lsls	r3, r4, #1
    6550:	mov	r4, r7
    6552:	str	r1, [sp, #24]
    6554:	str	r3, [sp, #20]
    6556:	adds	r3, r1, #1
    6558:	str	r3, [sp, #28]
    655a:	ldr	r3, [sp, #32]
    655c:	subs	r3, #1
    655e:	str	r3, [sp, #60]	; 0x3c
      for (yc = 0; (yc < 8) && (y < _displayclipy2); yc++) {
        for (yr = 0; (yr < size_y) && (y < _displayclipy2); yr++) {
    6560:	ldr	r3, [sp, #32]
    6562:	cmp	r3, #0
    6564:	beq.w	68f2 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x4e2>
    6568:	ldrb.w	r3, [sp, #60]	; 0x3c
    656c:	adds	r3, #1
    656e:	add	r3, fp
    6570:	sxth	r3, r3
    6572:	str	r3, [sp, #40]	; 0x28
          x = x_char_start; // get our first x position...
          if (y >= _displayclipy1) {
    6574:	ldrsh.w	r3, [r6, #56]	; 0x38
    6578:	cmp	r3, fp
    657a:	bgt.n	660c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1fc>
    657c:	ldr	r3, [sp, #48]	; 0x30
    657e:	str.w	fp, [sp, #44]	; 0x2c
    6582:	mov	r2, r3
    6584:	ldr	r3, [pc, #624]	; (67f8 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3e8>)
    6586:	ldr	r7, [sp, #16]
    6588:	add.w	ip, r2, r3
    658c:	ldr.w	fp, [sp, #52]	; 0x34
    6590:	ldr	r3, [sp, #36]	; 0x24
            uint16_t *pfbPixel = pfbPixel_row;
            for (xc = 0; xc < 5; xc++) {
              if (glcdfont[c * 5 + xc] & mask) {
    6592:	ldrb.w	r2, [ip], #1
    6596:	tst.w	r8, r2
                color = fgcolor;
              } else {
                color = bgcolor;
              }
              for (xr = 0; xr < size_x; xr++) {
    659a:	ldr	r2, [sp, #12]
        for (yr = 0; (yr < size_y) && (y < _displayclipy2); yr++) {
          x = x_char_start; // get our first x position...
          if (y >= _displayclipy1) {
            uint16_t *pfbPixel = pfbPixel_row;
            for (xc = 0; xc < 5; xc++) {
              if (glcdfont[c * 5 + xc] & mask) {
    659c:	ite	ne
    659e:	movne	lr, sl
    65a0:	moveq	lr, r9
                color = fgcolor;
              } else {
                color = bgcolor;
              }
              for (xr = 0; xr < size_x; xr++) {
    65a2:	cbz	r2, 65d8 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1c8>
    65a4:	uxth	r5, r3
    65a6:	ldr	r1, [sp, #28]
    65a8:	mov	r2, r7
    65aa:	adds	r4, r5, r1
    65ac:	sxth	r4, r4
                if ((x >= _displayclipx1) && (x < _displayclipx2)) {
    65ae:	ldrsh.w	r0, [r6, #54]	; 0x36
    65b2:	adds	r1, r3, #1
    65b4:	cmp	r0, r3
    65b6:	bgt.n	65c4 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1b4>
    65b8:	ldrsh.w	r0, [r6, #58]	; 0x3a
    65bc:	cmp	r0, r3
                  *pfbPixel = color;
    65be:	it	gt
    65c0:	strhgt.w	lr, [r2]
    65c4:	sxth	r3, r1
                }
                pfbPixel++;
    65c6:	adds	r2, #2
              if (glcdfont[c * 5 + xc] & mask) {
                color = fgcolor;
              } else {
                color = bgcolor;
              }
              for (xr = 0; xr < size_x; xr++) {
    65c8:	cmp	r4, r3
    65ca:	bne.n	65ae <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x19e>
    65cc:	ldr	r3, [sp, #24]
    65ce:	ldr	r2, [sp, #20]
    65d0:	add	r3, r5
    65d2:	add	r7, r2
    65d4:	adds	r3, #1
    65d6:	sxth	r3, r3
      for (yc = 0; (yc < 8) && (y < _displayclipy2); yc++) {
        for (yr = 0; (yr < size_y) && (y < _displayclipy2); yr++) {
          x = x_char_start; // get our first x position...
          if (y >= _displayclipy1) {
            uint16_t *pfbPixel = pfbPixel_row;
            for (xc = 0; xc < 5; xc++) {
    65d8:	cmp	fp, ip
    65da:	bne.n	6592 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x182>
                }
                pfbPixel++;
                x++;
              }
            }
            for (xr = 0; xr < size_x; xr++) {
    65dc:	ldr	r2, [sp, #12]
    65de:	ldr.w	fp, [sp, #44]	; 0x2c
    65e2:	cbz	r2, 6608 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1f8>
    65e4:	ldr	r2, [sp, #56]	; 0x38
    65e6:	adds	r0, r2, r3
    65e8:	sxth	r0, r0
              if ((x >= _displayclipx1) && (x < _displayclipx2)) {
    65ea:	ldrsh.w	r1, [r6, #54]	; 0x36
    65ee:	adds	r2, r3, #1
    65f0:	cmp	r1, r3
    65f2:	bgt.n	6600 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1f0>
    65f4:	ldrsh.w	r1, [r6, #58]	; 0x3a
    65f8:	cmp	r1, r3
                *pfbPixel = bgcolor;
    65fa:	it	gt
    65fc:	strhgt.w	r9, [r7]
    6600:	sxth	r3, r2
              }
              pfbPixel++;
    6602:	adds	r7, #2
                }
                pfbPixel++;
                x++;
              }
            }
            for (xr = 0; xr < size_x; xr++) {
    6604:	cmp	r0, r3
    6606:	bne.n	65ea <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1da>
    6608:	ldrsh.w	r4, [r6, #32]
              }
              pfbPixel++;
              x++;
            }
          }
          pfbPixel_row += _width; // setup pointer to
    660c:	ldr	r3, [sp, #16]
    660e:	add.w	fp, fp, #1
    6612:	add.w	r3, r3, r4, lsl #1
    6616:	sxth.w	fp, fp
    661a:	str	r3, [sp, #16]
      updateChangedRange(
          x, y, 6 * size_x,
          8 * size_y); // update the range of the screen that has been changed;
      uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
      for (yc = 0; (yc < 8) && (y < _displayclipy2); yc++) {
        for (yr = 0; (yr < size_y) && (y < _displayclipy2); yr++) {
    661c:	ldr	r3, [sp, #40]	; 0x28
    661e:	cmp	r3, fp
    6620:	beq.w	68f2 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x4e2>
    6624:	ldrsh.w	r3, [r6, #60]	; 0x3c
    6628:	cmp	r3, fp
    662a:	bgt.n	6574 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x164>
      }
      writecommand_last(ILI9341_NOP);
      endSPITransaction();
    }
  }
}
    662c:	add	sp, #84	; 0x54
    662e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  //	Serial.printf("drawchar %d %d %c %x %x %d %d\n", x, y, c, fgcolor,
  //bgcolor, size_x, size_y);
  if (fgcolor == bgcolor) {
    // This transparent approach is only about 20% faster
    if ((size_x == 1) && (size_y == 1)) {
    6632:	ldr	r3, [sp, #12]
    6634:	cmp	r3, #1
    6636:	bne.n	66f2 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2e2>
    6638:	cmp	r4, #1
    663a:	bne.n	66f2 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2e2>
    663c:	ldr	r2, [pc, #440]	; (67f8 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3e8>)
    663e:	movs	r3, #5
    6640:	ldrh.w	r9, [sp, #24]
    6644:	mov	r6, sl
    6646:	mov	r1, r2
    6648:	str	r2, [sp, #16]
    664a:	movs	r2, #0
    664c:	str.w	r9, [sp, #12]
    6650:	movs	r7, #1
    6652:	mov	r9, r0
    6654:	str	r2, [sp, #20]
    6656:	smlabb	r2, r3, r5, r3
    665a:	smulbb	r3, r5, r3
    665e:	str	r3, [sp, #24]
    6660:	mov	r3, r1
    6662:	add	r3, r2
    6664:	mov	sl, r3
    6666:	ldr	r3, [sp, #16]
    6668:	ldr	r2, [sp, #24]
    666a:	adds	r2, r3, r2
    666c:	movs	r3, #0
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
        uint8_t line = 0;
        for (xoff = 0; xoff < 5; xoff++) {
          if (glcdfont[c * 5 + xoff] & mask)
    666e:	ldrb.w	r1, [r2], #1
    6672:	tst	r1, r7
            line |= 1;
    6674:	it	ne
    6676:	orrne.w	r3, r3, #1
    if ((size_x == 1) && (size_y == 1)) {
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
        uint8_t line = 0;
        for (xoff = 0; xoff < 5; xoff++) {
    667a:	cmp	sl, r2
          if (glcdfont[c * 5 + xoff] & mask)
            line |= 1;
          line <<= 1;
    667c:	mov.w	r3, r3, lsl #1
    6680:	uxtb	r3, r3
    if ((size_x == 1) && (size_y == 1)) {
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
        uint8_t line = 0;
        for (xoff = 0; xoff < 5; xoff++) {
    6682:	bne.n	666e <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x25e>
          if (glcdfont[c * 5 + xoff] & mask)
            line |= 1;
          line <<= 1;
        }
        line >>= 1;
    6684:	asrs	r3, r3, #1
    6686:	uxtb	r4, r3
        xoff = 0;
        while (line) {
    6688:	cbz	r3, 66da <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2ca>
          if (line == 0x1F) {
    668a:	cmp	r4, #31
    668c:	beq.w	68ba <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x4aa>
            drawFastHLine(x + xoff, y + yoff, 5, fgcolor);
            break;
          } else if (line == 0x1E) {
    6690:	cmp	r4, #30
    6692:	mov.w	r5, #0
    6696:	beq.n	66c6 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2b6>
          } else if ((line & 0x18) == 0x18) {
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            drawPixel(x + xoff, y + yoff, fgcolor);
    6698:	ldrsh.w	r8, [sp, #12]
            drawFastHLine(x + xoff, y + yoff, 5, fgcolor);
            break;
          } else if (line == 0x1E) {
            drawFastHLine(x + xoff, y + yoff, 4, fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
    669c:	and.w	r3, r4, #28
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
    66a0:	and.w	r2, r4, #24
          } else if ((line & 0x10) == 0x10) {
            drawPixel(x + xoff, y + yoff, fgcolor);
            line <<= 2;
            xoff += 2;
          } else {
            line <<= 1;
    66a4:	lsls	r0, r4, #1
            xoff += 1;
    66a6:	adds	r1, r5, #1
            drawFastHLine(x + xoff, y + yoff, 5, fgcolor);
            break;
          } else if (line == 0x1E) {
            drawFastHLine(x + xoff, y + yoff, 4, fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
    66a8:	cmp	r3, #28
    66aa:	beq.w	685c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x44c>
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
    66ae:	cmp	r2, #24
    66b0:	beq.w	689c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x48c>
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
    66b4:	lsls	r2, r4, #27
    66b6:	bmi.w	681e <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x40e>
            drawPixel(x + xoff, y + yoff, fgcolor);
            line <<= 2;
            xoff += 2;
          } else {
            line <<= 1;
    66ba:	uxtb	r4, r0
            xoff += 1;
    66bc:	sxth	r5, r1
            line |= 1;
          line <<= 1;
        }
        line >>= 1;
        xoff = 0;
        while (line) {
    66be:	cbz	r4, 66da <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2ca>
          if (line == 0x1F) {
            drawFastHLine(x + xoff, y + yoff, 5, fgcolor);
            break;
          } else if (line == 0x1E) {
    66c0:	cmp	r4, #30
    66c2:	bne.n	669c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x28c>
    66c4:	uxth	r5, r5
            drawFastHLine(x + xoff, y + yoff, 4, fgcolor);
    66c6:	add.w	r1, r5, fp
    66ca:	str	r6, [sp, #0]
    66cc:	movs	r3, #4
    66ce:	ldrsh.w	r2, [sp, #12]
    66d2:	sxth	r1, r1
    66d4:	mov	r0, r9
    66d6:	bl	45a0 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)>
    66da:	ldr	r3, [sp, #12]
          } else {
            line <<= 1;
            xoff += 1;
          }
        }
        mask = mask << 1;
    66dc:	lsls	r7, r7, #1
    66de:	ldr	r2, [sp, #20]
    66e0:	adds	r3, #1
    66e2:	uxtb	r7, r7
    66e4:	adds	r2, #1
    66e6:	uxth	r3, r3
  if (fgcolor == bgcolor) {
    // This transparent approach is only about 20% faster
    if ((size_x == 1) && (size_y == 1)) {
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
    66e8:	cmp	r2, #8
    66ea:	str	r2, [sp, #20]
    66ec:	str	r3, [sp, #12]
    66ee:	bne.n	6666 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x256>
    66f0:	b.n	662c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x21c>
    66f2:	ldr	r1, [pc, #260]	; (67f8 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3e8>)
    66f4:	mov.w	lr, #5
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
    66f8:	ldrh.w	r3, [sp, #12]
        }
        line >>= 1;
        xoff = 0;
        while (line) {
          if (line == 0x1F) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 5 * size_x, size_y,
    66fc:	movs	r7, #0
    66fe:	mov	r4, r1
    6700:	str	r1, [sp, #16]
    6702:	movs	r1, #8
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
    6704:	lsls	r2, r3, #1
    6706:	mov	r0, r3
        }
        line >>= 1;
        xoff = 0;
        while (line) {
          if (line == 0x1F) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 5 * size_x, size_y,
    6708:	mov.w	r9, #1
    670c:	str	r1, [sp, #36]	; 0x24
    670e:	lsls	r1, r3, #2
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
    6710:	sxth	r3, r2
        }
        line >>= 1;
        xoff = 0;
        while (line) {
          if (line == 0x1F) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 5 * size_x, size_y,
    6712:	str	r1, [sp, #64]	; 0x40
    6714:	smlabb	r1, lr, r5, lr
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
    6718:	str	r3, [sp, #48]	; 0x30
          } else if (line == 0x1E) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 4 * size_x, size_y,
                     fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
    671a:	adds	r3, r0, r2
        }
        line >>= 1;
        xoff = 0;
        while (line) {
          if (line == 0x1F) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 5 * size_x, size_y,
    671c:	mov	r2, r0
    671e:	ldr	r0, [sp, #64]	; 0x40
          } else if (line == 0x1E) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 4 * size_x, size_y,
                     fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
    6720:	str	r3, [sp, #40]	; 0x28
        }
        line >>= 1;
        xoff = 0;
        while (line) {
          if (line == 0x1F) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 5 * size_x, size_y,
    6722:	adds	r3, r2, r0
    6724:	mov	r8, r2
    6726:	str	r3, [sp, #68]	; 0x44
    6728:	smulbb	r3, r5, lr
    672c:	str	r3, [sp, #56]	; 0x38
    672e:	mov	r3, r4
    6730:	add	r3, r1
    6732:	str	r3, [sp, #60]	; 0x3c
    6734:	mov	r3, r6
    6736:	mov	r6, sl
    6738:	mov	sl, r3
    673a:	ldr	r3, [sp, #16]
    673c:	ldr	r2, [sp, #56]	; 0x38
    673e:	ldr	r0, [sp, #60]	; 0x3c
    6740:	adds	r2, r3, r2
    6742:	movs	r3, #0
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
        uint8_t line = 0;
        for (xoff = 0; xoff < 5; xoff++) {
          if (glcdfont[c * 5 + xoff] & mask)
    6744:	ldrb.w	r1, [r2], #1
    6748:	tst.w	r1, r9
            line |= 1;
    674c:	it	ne
    674e:	orrne.w	r3, r3, #1
    } else {
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
        uint8_t line = 0;
        for (xoff = 0; xoff < 5; xoff++) {
    6752:	cmp	r0, r2
          if (glcdfont[c * 5 + xoff] & mask)
            line |= 1;
          line <<= 1;
    6754:	mov.w	r3, r3, lsl #1
    6758:	uxtb	r3, r3
    } else {
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
        uint8_t line = 0;
        for (xoff = 0; xoff < 5; xoff++) {
    675a:	bne.n	6744 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x334>
          if (glcdfont[c * 5 + xoff] & mask)
            line |= 1;
          line <<= 1;
        }
        line >>= 1;
    675c:	asrs	r3, r3, #1
    675e:	uxtb	r4, r3
        xoff = 0;
        while (line) {
    6760:	cmp	r3, #0
    6762:	beq.w	6cca <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x8ba>
          if (line == 0x1F) {
    6766:	cmp	r4, #31
    6768:	beq.w	68cc <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x4bc>
            fillRect(x + xoff * size_x, y + yoff * size_y, 5 * size_x, size_y,
                     fgcolor);
            break;
          } else if (line == 0x1E) {
    676c:	cmp	r4, #30
    676e:	uxth	r3, r7
    6770:	beq.w	6cb8 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x8a8>
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
    6774:	ldrh.w	r2, [sp, #32]
    6778:	movs	r5, #0
    677a:	str	r3, [sp, #12]
    677c:	smulbb	r3, r2, r3
    6780:	ldr	r2, [sp, #24]
    6782:	str.w	r9, [sp, #44]	; 0x2c
    6786:	adds	r7, r3, r2
    6788:	ldr.w	r9, [sp, #28]
    678c:	str	r3, [sp, #52]	; 0x34
    678e:	sxth	r7, r7
            break;
          } else if (line == 0x1E) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 4 * size_x, size_y,
                     fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
    6790:	and.w	r3, r4, #28
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
    6794:	and.w	r2, r4, #24
            fillRect(x + xoff * size_x, y + yoff * size_y, size_x, size_y,
                     fgcolor);
            line <<= 2;
            xoff += 2;
          } else {
            line <<= 1;
    6798:	lsls	r0, r4, #1
            xoff += 1;
    679a:	adds	r1, r5, #1
            break;
          } else if (line == 0x1E) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 4 * size_x, size_y,
                     fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
    679c:	cmp	r3, #28
    679e:	beq.n	683a <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x42a>
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
    67a0:	cmp	r2, #24
    67a2:	beq.n	687a <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x46a>
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
                     fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
    67a4:	lsls	r3, r4, #27
    67a6:	bmi.n	67fc <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3ec>
            fillRect(x + xoff * size_x, y + yoff * size_y, size_x, size_y,
                     fgcolor);
            line <<= 2;
            xoff += 2;
          } else {
            line <<= 1;
    67a8:	uxtb	r4, r0
            xoff += 1;
    67aa:	sxth	r5, r1
            line |= 1;
          line <<= 1;
        }
        line >>= 1;
        xoff = 0;
        while (line) {
    67ac:	cmp	r4, #0
    67ae:	beq.w	68ec <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x4dc>
          if (line == 0x1F) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 5 * size_x, size_y,
                     fgcolor);
            break;
          } else if (line == 0x1E) {
    67b2:	cmp	r4, #30
    67b4:	bne.n	6790 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x380>
    67b6:	smulbb	r5, r5, r8
    67ba:	ldr.w	r9, [sp, #44]	; 0x2c
    67be:	uxth	r3, r5
            fillRect(x + xoff * size_x, y + yoff * size_y, 4 * size_x, size_y,
                     fgcolor);
    67c0:	ldr	r1, [sp, #24]
    67c2:	ldr	r2, [sp, #52]	; 0x34
    67c4:	ldr	r0, [sp, #28]
    67c6:	add	r2, r1
    67c8:	add.w	r1, r3, fp
    67cc:	str	r0, [sp, #0]
    67ce:	mov	r0, sl
    67d0:	str	r6, [sp, #4]
    67d2:	sxth	r2, r2
    67d4:	ldr	r3, [sp, #64]	; 0x40
    67d6:	sxth	r1, r1
    67d8:	bl	48cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    67dc:	ldr	r3, [sp, #36]	; 0x24
          } else {
            line <<= 1;
            xoff += 1;
          }
        }
        mask = mask << 1;
    67de:	mov.w	r9, r9, lsl #1
        mask = mask << 1;
      }
    } else {
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
    67e2:	ldr	r7, [sp, #12]
    67e4:	subs	r3, #1
          } else {
            line <<= 1;
            xoff += 1;
          }
        }
        mask = mask << 1;
    67e6:	uxtb.w	r9, r9
        mask = mask << 1;
      }
    } else {
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
    67ea:	adds	r7, #1
    67ec:	uxth	r3, r3
    67ee:	sxth	r7, r7
    67f0:	str	r3, [sp, #36]	; 0x24
    67f2:	cmp	r3, #0
    67f4:	bne.n	673a <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x32a>
    67f6:	b.n	662c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x21c>
    67f8:	.word	0x20000360
                     fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            fillRect(x + xoff * size_x, y + yoff * size_y, size_x, size_y,
                     fgcolor);
    67fc:	mla	r1, r5, r8, fp
    6800:	uxth	r5, r5
            line <<= 2;
    6802:	lsls	r4, r4, #2
                     fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            fillRect(x + xoff * size_x, y + yoff * size_y, size_x, size_y,
                     fgcolor);
    6804:	str	r6, [sp, #4]
            line <<= 2;
            xoff += 2;
    6806:	adds	r5, #2
                     fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            fillRect(x + xoff * size_x, y + yoff * size_y, size_x, size_y,
                     fgcolor);
    6808:	ldr	r3, [sp, #20]
    680a:	str.w	r9, [sp]
    680e:	sxth	r1, r1
    6810:	mov	r2, r7
    6812:	mov	r0, sl
    6814:	bl	48cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
            line <<= 2;
            xoff += 2;
    6818:	sxth	r5, r5
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            fillRect(x + xoff * size_x, y + yoff * size_y, size_x, size_y,
                     fgcolor);
            line <<= 2;
    681a:	uxtb	r4, r4
    681c:	b.n	67ac <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x39c>
          } else if ((line & 0x18) == 0x18) {
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            drawPixel(x + xoff, y + yoff, fgcolor);
    681e:	uxth	r5, r5
    6820:	mov	r3, r6
            line <<= 2;
    6822:	lsls	r4, r4, #2
          } else if ((line & 0x18) == 0x18) {
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            drawPixel(x + xoff, y + yoff, fgcolor);
    6824:	mov	r2, r8
    6826:	add.w	r1, r5, fp
            line <<= 2;
            xoff += 2;
    682a:	adds	r5, #2
          } else if ((line & 0x18) == 0x18) {
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            drawPixel(x + xoff, y + yoff, fgcolor);
    682c:	mov	r0, r9
            line <<= 2;
    682e:	uxtb	r4, r4
          } else if ((line & 0x18) == 0x18) {
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            drawPixel(x + xoff, y + yoff, fgcolor);
    6830:	sxth	r1, r1
    6832:	bl	439c <ILI9341_t3n::drawPixel(short, short, unsigned short)>
            line <<= 2;
            xoff += 2;
    6836:	sxth	r5, r5
    6838:	b.n	66be <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2ae>
            fillRect(x + xoff * size_x, y + yoff * size_y, 4 * size_x, size_y,
                     fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
    683a:	mla	r1, r5, r8, fp
    683e:	uxth	r5, r5
            line <<= 4;
    6840:	lsls	r4, r4, #4
            fillRect(x + xoff * size_x, y + yoff * size_y, 4 * size_x, size_y,
                     fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
    6842:	str	r6, [sp, #4]
            line <<= 4;
            xoff += 4;
    6844:	adds	r5, #4
            fillRect(x + xoff * size_x, y + yoff * size_y, 4 * size_x, size_y,
                     fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
    6846:	ldr	r3, [sp, #40]	; 0x28
    6848:	str.w	r9, [sp]
    684c:	sxth	r1, r1
    684e:	mov	r2, r7
    6850:	mov	r0, sl
    6852:	bl	48cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
            line <<= 4;
            xoff += 4;
    6856:	sxth	r5, r5
                     fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
            line <<= 4;
    6858:	uxtb	r4, r4
    685a:	b.n	67ac <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x39c>
            break;
          } else if (line == 0x1E) {
            drawFastHLine(x + xoff, y + yoff, 4, fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
    685c:	uxth	r5, r5
    685e:	str	r6, [sp, #0]
            line <<= 4;
    6860:	lsls	r4, r4, #4
            break;
          } else if (line == 0x1E) {
            drawFastHLine(x + xoff, y + yoff, 4, fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
    6862:	movs	r3, #3
    6864:	add.w	r1, r5, fp
            line <<= 4;
            xoff += 4;
    6868:	adds	r5, #4
            break;
          } else if (line == 0x1E) {
            drawFastHLine(x + xoff, y + yoff, 4, fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
    686a:	mov	r2, r8
    686c:	mov	r0, r9
    686e:	sxth	r1, r1
    6870:	bl	45a0 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)>
            line <<= 4;
            xoff += 4;
    6874:	sxth	r5, r5
          } else if (line == 0x1E) {
            drawFastHLine(x + xoff, y + yoff, 4, fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
            line <<= 4;
    6876:	uxtb	r4, r4
    6878:	b.n	66be <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2ae>
                     fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
                     fgcolor);
    687a:	mla	r1, r5, r8, fp
    687e:	uxth	r5, r5
            line <<= 3;
    6880:	lsls	r4, r4, #3
                     fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
                     fgcolor);
    6882:	str	r6, [sp, #4]
            line <<= 3;
            xoff += 3;
    6884:	adds	r5, #3
                     fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
                     fgcolor);
    6886:	ldr	r3, [sp, #48]	; 0x30
    6888:	str.w	r9, [sp]
    688c:	sxth	r1, r1
    688e:	mov	r2, r7
    6890:	mov	r0, sl
    6892:	bl	48cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
            line <<= 3;
            xoff += 3;
    6896:	sxth	r5, r5
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
                     fgcolor);
            line <<= 3;
    6898:	uxtb	r4, r4
    689a:	b.n	67ac <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x39c>
          } else if ((line & 0x1C) == 0x1C) {
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
    689c:	uxth	r5, r5
    689e:	str	r6, [sp, #0]
            line <<= 3;
    68a0:	lsls	r4, r4, #3
          } else if ((line & 0x1C) == 0x1C) {
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
    68a2:	movs	r3, #2
    68a4:	add.w	r1, r5, fp
            line <<= 3;
            xoff += 3;
    68a8:	adds	r5, #3
          } else if ((line & 0x1C) == 0x1C) {
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
    68aa:	mov	r2, r8
    68ac:	mov	r0, r9
    68ae:	sxth	r1, r1
    68b0:	bl	45a0 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)>
            line <<= 3;
            xoff += 3;
    68b4:	sxth	r5, r5
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
            line <<= 3;
    68b6:	uxtb	r4, r4
    68b8:	b.n	66be <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2ae>
        }
        line >>= 1;
        xoff = 0;
        while (line) {
          if (line == 0x1F) {
            drawFastHLine(x + xoff, y + yoff, 5, fgcolor);
    68ba:	str	r6, [sp, #0]
    68bc:	movs	r3, #5
    68be:	ldrsh.w	r2, [sp, #12]
    68c2:	mov	r1, fp
    68c4:	mov	r0, r9
    68c6:	bl	45a0 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)>
            break;
    68ca:	b.n	66da <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2ca>
        line >>= 1;
        xoff = 0;
        while (line) {
          if (line == 0x1F) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 5 * size_x, size_y,
                     fgcolor);
    68cc:	ldr	r3, [sp, #32]
    68ce:	uxth	r4, r7
    68d0:	ldr	r2, [sp, #24]
    68d2:	mov	r1, fp
    68d4:	ldr	r0, [sp, #28]
    68d6:	mla	r2, r7, r3, r2
    68da:	ldr	r3, [sp, #68]	; 0x44
    68dc:	str	r0, [sp, #0]
    68de:	mov	r0, sl
    68e0:	str	r6, [sp, #4]
    68e2:	sxth	r2, r2
    68e4:	str	r4, [sp, #12]
    68e6:	bl	48cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
            break;
    68ea:	b.n	67dc <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3cc>
    68ec:	ldr.w	r9, [sp, #44]	; 0x2c
    68f0:	b.n	67dc <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3cc>
    68f2:	ldr	r3, [sp, #64]	; 0x40
            }
          }
          pfbPixel_row += _width; // setup pointer to
          y++;
        }
        mask = mask << 1;
    68f4:	mov.w	r8, r8, lsl #1
    68f8:	subs	r3, #1
    68fa:	uxtb.w	r8, r8
    if (_use_fbtft) {
      updateChangedRange(
          x, y, 6 * size_x,
          8 * size_y); // update the range of the screen that has been changed;
      uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
      for (yc = 0; (yc < 8) && (y < _displayclipy2); yc++) {
    68fe:	ands.w	r3, r3, #255	; 0xff
    6902:	str	r3, [sp, #64]	; 0x40
    6904:	beq.w	662c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x21c>
    6908:	ldrsh.w	r3, [r6, #60]	; 0x3c
    690c:	cmp	r3, fp
    690e:	bgt.w	6560 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x150>
    6912:	b.n	662c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x21c>
#endif
    {
      // need to build actual pixel rectangle we will output into.
      int16_t y_char_top = y; // remember the y
      int16_t w = 6 * size_x;
      int16_t h = 8 * size_y;
    6914:	ldr	r7, [sp, #32]
    } else
#endif
    {
      // need to build actual pixel rectangle we will output into.
      int16_t y_char_top = y; // remember the y
      int16_t w = 6 * size_x;
    6916:	ldr	r4, [sp, #12]
      int16_t h = 8 * size_y;
    6918:	mov.w	lr, r7, lsl #3

      if (x < _displayclipx1) {
    691c:	ldr	r7, [sp, #36]	; 0x24
    } else
#endif
    {
      // need to build actual pixel rectangle we will output into.
      int16_t y_char_top = y; // remember the y
      int16_t w = 6 * size_x;
    691e:	add.w	r4, r4, r4, lsl #1
      int16_t h = 8 * size_y;

      if (x < _displayclipx1) {
    6922:	cmp	r7, r0
    } else
#endif
    {
      // need to build actual pixel rectangle we will output into.
      int16_t y_char_top = y; // remember the y
      int16_t w = 6 * size_x;
    6924:	mov.w	r4, r4, lsl #1
      int16_t h = 8 * size_y;

      if (x < _displayclipx1) {
    6928:	blt.w	6cf8 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x8e8>
    } else
#endif
    {
      // need to build actual pixel rectangle we will output into.
      int16_t y_char_top = y; // remember the y
      int16_t w = 6 * size_x;
    692c:	sxth	r7, r4
    692e:	str	r3, [sp, #16]

      if (x < _displayclipx1) {
        w -= (_displayclipx1 - x);
        x = _displayclipx1;
      }
      if ((x + w - 1) >= _displayclipx2)
    6930:	ldr	r3, [sp, #20]
    6932:	add	r3, r7
    6934:	cmp	r3, r2
    6936:	ble.n	693e <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x52e>
        w = _displayclipx2 - x;
    6938:	ldr	r3, [sp, #16]
    693a:	subs	r2, r2, r3
    693c:	sxth	r7, r2
      if (y < _displayclipy1) {
    693e:	cmp	fp, r8
    6940:	blt.w	6ce4 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x8d4>
#endif
    {
      // need to build actual pixel rectangle we will output into.
      int16_t y_char_top = y; // remember the y
      int16_t w = 6 * size_x;
      int16_t h = 8 * size_y;
    6944:	sxth.w	r4, lr
    6948:	mov	r8, r1
        w = _displayclipx2 - x;
      if (y < _displayclipy1) {
        h -= (_displayclipy1 - y);
        y = _displayclipy1;
      }
      if ((y + h - 1) >= _displayclipy2)
    694a:	ldr	r3, [sp, #24]
    694c:	add	r3, r4
    694e:	cmp	r3, ip
    6950:	ble.n	6958 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x548>
        h = _displayclipy2 - y;
    6952:	rsb	r4, r8, ip
    6956:	sxth	r4, r4
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    6958:	movs	r3, #7
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    695a:	ldr	r2, [r6, #20]
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    695c:	ldr	r0, [r6, #8]
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    695e:	str	r3, [sp, #76]	; 0x4c
    6960:	add	r3, sp, #80	; 0x50
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    6962:	str	r2, [sp, #72]	; 0x48
    6964:	ldmdb	r3, {r1, r2}
    6968:	bl	2d30 <SPIClass::beginTransaction(SPISettings)>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
    696c:	ldr.w	r3, [r6, #172]	; 0xac
    6970:	cmp	r3, #0
    6972:	beq.w	6d06 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x8f6>
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    6976:	ldr.w	r3, [r6, #152]	; 0x98
    697a:	cbz	r3, 6984 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x574>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
    697c:	ldr.w	r2, [r6, #148]	; 0x94
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
    6980:	str.w	r2, [r3, #136]	; 0x88

      beginSPITransaction(_SPI_CLOCK);
      setAddr(x, y, x + w - 1, y + h - 1);
    6984:	ldr	r3, [sp, #16]
    6986:	add.w	r0, r5, r5, lsl #2
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    698a:	ldr.w	r1, [r6, #164]	; 0xa4
    698e:	subs	r2, r3, #1
    6990:	add.w	r3, r8, #4294967295
    6994:	str	r0, [sp, #48]	; 0x30
    6996:	orr.w	r1, r1, #7
    699a:	mov	r0, r6
    699c:	adds	r5, r2, r7
    699e:	add	r4, r3
    69a0:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    69a4:	movs	r2, #42	; 0x2a
    69a6:	ldr	r3, [r6, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    69a8:	movs	r1, #8
    69aa:	mov	r0, r6
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    69ac:	str	r2, [r3, #100]	; 0x64
    69ae:	uxth	r5, r5
    pending_rx_count++; //
    69b0:	ldrb.w	r3, [r6, #146]	; 0x92
    69b4:	uxth	r4, r4
    waitFifoNotFull();
    69b6:	str	r1, [sp, #52]	; 0x34

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    69b8:	adds	r3, #1
    69ba:	strb.w	r3, [r6, #146]	; 0x92
    waitFifoNotFull();
    69be:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    69c2:	ldr.w	r3, [r6, #168]	; 0xa8
    69c6:	ldr	r1, [pc, #776]	; (6cd0 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x8c0>)
    69c8:	mov	r0, r6
    69ca:	orrs	r1, r3
    69cc:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    69d0:	ldr	r3, [r6, #28]
    69d2:	ldr	r2, [sp, #16]
    pending_rx_count++; //
    waitFifoNotFull();
    69d4:	mov	r0, r6
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    69d6:	str	r2, [r3, #100]	; 0x64
    }
  } else {
    // This solid background approach is about 5 time faster
    uint8_t xc, yc;
    uint8_t xr, yr;
    uint8_t mask = 0x01;
    69d8:	movs	r2, #1
    pending_rx_count++; //
    69da:	ldrb.w	r3, [r6, #146]	; 0x92
    69de:	str	r2, [sp, #20]
    69e0:	add	r3, r2
    69e2:	strb.w	r3, [r6, #146]	; 0x92
    waitFifoNotFull();
    69e6:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    69ea:	ldr.w	r3, [r6, #168]	; 0xa8
    69ee:	ldr	r1, [pc, #736]	; (6cd0 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x8c0>)
    69f0:	mov	r0, r6
    69f2:	orrs	r1, r3
    69f4:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    69f8:	ldr	r3, [r6, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    69fa:	mov	r0, r6
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    69fc:	str	r5, [r3, #100]	; 0x64
    pending_rx_count++; //
    69fe:	ldrb.w	r3, [r6, #146]	; 0x92
    6a02:	adds	r3, #1
    6a04:	strb.w	r3, [r6, #146]	; 0x92
    waitFifoNotFull();
    6a08:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    6a0c:	ldr.w	r1, [r6, #164]	; 0xa4
    6a10:	mov	r0, r6
    6a12:	orr.w	r1, r1, #7
    6a16:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    6a1a:	movs	r2, #43	; 0x2b
    6a1c:	ldr	r3, [r6, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    6a1e:	mov	r0, r6
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    6a20:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    6a22:	ldrb.w	r3, [r6, #146]	; 0x92
    6a26:	adds	r3, #1
    6a28:	strb.w	r3, [r6, #146]	; 0x92
    waitFifoNotFull();
    6a2c:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    6a30:	ldr.w	r3, [r6, #168]	; 0xa8
    6a34:	ldr	r1, [pc, #664]	; (6cd0 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x8c0>)
    6a36:	mov	r0, r6
    6a38:	orrs	r1, r3
    6a3a:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    6a3e:	ldr	r3, [r6, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    6a40:	mov	r0, r6
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    6a42:	str.w	r8, [r3, #100]	; 0x64
    pending_rx_count++; //
    6a46:	ldrb.w	r3, [r6, #146]	; 0x92
    6a4a:	adds	r3, #1
    6a4c:	strb.w	r3, [r6, #146]	; 0x92
    waitFifoNotFull();
    6a50:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    6a54:	ldr.w	r3, [r6, #168]	; 0xa8
    6a58:	ldr	r1, [pc, #628]	; (6cd0 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x8c0>)
    6a5a:	mov	r0, r6
    6a5c:	orrs	r1, r3
    6a5e:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    6a62:	ldr	r3, [r6, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    6a64:	mov	r0, r6
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    6a66:	str	r4, [r3, #100]	; 0x64
    pending_rx_count++; //
    6a68:	ldrb.w	r3, [r6, #146]	; 0x92
    6a6c:	adds	r3, #1
    6a6e:	strb.w	r3, [r6, #146]	; 0x92
    waitFifoNotFull();
    6a72:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    6a76:	ldr.w	r1, [r6, #164]	; 0xa4
    6a7a:	mov	r0, r6
    6a7c:	orr.w	r1, r1, #7
    6a80:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    6a84:	ldr	r3, [r6, #28]
    6a86:	movs	r2, #44	; 0x2c
    pending_rx_count++; //
    waitFifoNotFull();
    6a88:	mov	r0, r6
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    6a8a:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    6a8c:	ldrb.w	r3, [r6, #146]	; 0x92
    6a90:	adds	r3, #1
    6a92:	strb.w	r3, [r6, #146]	; 0x92
    waitFifoNotFull();
    6a96:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    6a9a:	ldr	r0, [sp, #48]	; 0x30
    6a9c:	ldr	r2, [pc, #564]	; (6cd4 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x8c4>)
    6a9e:	adds	r3, r0, #5
    6aa0:	str.w	sl, [sp, #28]
    6aa4:	str.w	r9, [sp, #16]
    6aa8:	add	r3, r2
    6aaa:	str	r3, [sp, #24]
      beginSPITransaction(_SPI_CLOCK);
      setAddr(x, y, x + w - 1, y + h - 1);

      y = y_char_top; // restore the actual y.
      writecommand_cont(ILI9341_RAMWR);
      for (yc = 0; (yc < 8) && (y < _displayclipy2); yc++) {
    6aac:	ldrsh.w	r3, [r6, #60]	; 0x3c
    6ab0:	cmp	r3, fp
    6ab2:	ble.w	6c3e <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x82e>
        for (yr = 0; (yr < size_y) && (y < _displayclipy2); yr++) {
    6ab6:	ldr	r3, [sp, #32]
    6ab8:	cmp	r3, #0
    6aba:	beq.w	6c28 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x818>
    6abe:	ldr	r3, [sp, #32]
    6ac0:	subs	r3, #1
    6ac2:	uxtb	r3, r3
    6ac4:	adds	r3, #1
    6ac6:	add	r3, fp
    6ac8:	sxth	r3, r3
    6aca:	str	r3, [sp, #40]	; 0x28
          x = x_char_start; // get our first x position...
          if (y >= _displayclipy1) {
    6acc:	ldrsh.w	r3, [r6, #56]	; 0x38
    6ad0:	cmp	r3, fp
    6ad2:	bgt.w	6c10 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x800>
    6ad6:	ldr	r3, [sp, #12]
    6ad8:	str.w	fp, [sp, #44]	; 0x2c
    6adc:	add.w	r8, r3, #4294967295
    6ae0:	ldr	r3, [sp, #48]	; 0x30
    6ae2:	ldr	r4, [sp, #36]	; 0x24
    6ae4:	mov	r2, r3
    6ae6:	ldr	r3, [pc, #492]	; (6cd4 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x8c4>)
    6ae8:	uxtb.w	r8, r8
    6aec:	add.w	sl, r2, r3
    6af0:	mov	fp, sl
            for (xc = 0; xc < 5; xc++) {
              if (glcdfont[c * 5 + xc] & mask) {
    6af2:	ldrb.w	r2, [fp], #1
    6af6:	ldr	r3, [sp, #20]
    6af8:	tst	r2, r3
    6afa:	ldr	r3, [sp, #28]
    6afc:	ldr	r2, [sp, #16]
    6afe:	it	ne
    6b00:	movne	r9, r3
                color = fgcolor;
              } else {
                color = bgcolor;
              }
              for (xr = 0; xr < size_x; xr++) {
    6b02:	ldr	r3, [sp, #12]
      for (yc = 0; (yc < 8) && (y < _displayclipy2); yc++) {
        for (yr = 0; (yr < size_y) && (y < _displayclipy2); yr++) {
          x = x_char_start; // get our first x position...
          if (y >= _displayclipy1) {
            for (xc = 0; xc < 5; xc++) {
              if (glcdfont[c * 5 + xc] & mask) {
    6b04:	it	eq
    6b06:	moveq	r9, r2
                color = fgcolor;
              } else {
                color = bgcolor;
              }
              for (xr = 0; xr < size_x; xr++) {
    6b08:	cmp	r3, #0
    6b0a:	beq.n	6bb2 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x7a2>
    6b0c:	uxth	r7, r4
    6b0e:	add.w	r5, r8, #1
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    6b12:	movw	sl, #513	; 0x201
    6b16:	add	r5, r7
    6b18:	sxth	r5, r5
    6b1a:	b.n	6b24 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x714>
    6b1c:	adds	r4, #1
    6b1e:	sxth	r4, r4
              if (glcdfont[c * 5 + xc] & mask) {
                color = fgcolor;
              } else {
                color = bgcolor;
              }
              for (xr = 0; xr < size_x; xr++) {
    6b20:	cmp	r4, r5
    6b22:	beq.n	6baa <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x79a>
                if ((x >= _displayclipx1) && (x < _displayclipx2)) {
    6b24:	ldrsh.w	r3, [r6, #54]	; 0x36
    6b28:	cmp	r3, r4
    6b2a:	bgt.n	6b1c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x70c>
    6b2c:	ldrsh.w	r3, [r6, #58]	; 0x3a
    6b30:	cmp	r3, r4
    6b32:	ble.n	6b1c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x70c>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    6b34:	ldr.w	lr, [r6, #168]	; 0xa8
    6b38:	ldr	r3, [pc, #404]	; (6cd0 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x8c0>)
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
    6b3a:	ldr.w	r0, [r6, #156]	; 0x9c
    6b3e:	ldr	r2, [pc, #408]	; (6cd8 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x8c8>)
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    6b40:	orr.w	r3, lr, r3
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
    6b44:	ands	r2, r0
    6b46:	cmp	r3, r2
    6b48:	beq.w	6cae <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x89e>
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    6b4c:	ldr	r1, [pc, #396]	; (6cdc <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x8cc>)
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    6b4e:	eor.w	r2, r3, r0
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    6b52:	ands	r1, r0
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    6b54:	tst.w	r2, #50331648	; 0x3000000
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    6b58:	orr.w	r1, r1, r3
    6b5c:	str.w	r1, [r6, #156]	; 0x9c
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    6b60:	beq.w	6c8e <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x87e>
    6b64:	ldr.w	r0, [r6, #160]	; 0xa0
    6b68:	cmp	r0, #0
    6b6a:	beq.w	6c8e <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x87e>
    6b6e:	ldrb.w	r1, [r6, #146]	; 0x92
    6b72:	ldr	r2, [r6, #28]
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    6b74:	cbz	r1, 6b8a <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x77a>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    6b76:	ldr	r3, [r2, #112]	; 0x70
    6b78:	lsls	r3, r3, #30
    6b7a:	bmi.n	6b74 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x764>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    6b7c:	subs	r1, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    6b7e:	ldr	r3, [r2, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
    6b80:	uxtb	r1, r1
    6b82:	strb.w	r1, [r6, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    6b86:	cmp	r1, #0
    6b88:	bne.n	6b76 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x766>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
    6b8a:	tst.w	lr, #50331648	; 0x3000000
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    6b8e:	str.w	sl, [r2, #16]
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
    6b92:	ldr.w	r3, [r6, #172]	; 0xac
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
    6b96:	beq.w	6cb2 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x8a2>
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    6b9a:	str.w	r0, [r3, #132]	; 0x84
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
        else
          DIRECT_WRITE_LOW(_dcport, _dcpinmask);
        _pimxrt_spi->TCR = _spi_tcr_current &
    6b9e:	ldr.w	r3, [r6, #156]	; 0x9c
    6ba2:	bic.w	r3, r3, #52428800	; 0x3200000
                           ~(LPSPI_TCR_PCS(3) |
                             LPSPI_TCR_CONT); // go ahead and update TCR anyway?
    6ba6:	str	r3, [r2, #96]	; 0x60
    6ba8:	b.n	6c98 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x888>
    6baa:	add.w	r4, r8, r7
    6bae:	adds	r4, #1
    6bb0:	sxth	r4, r4
      writecommand_cont(ILI9341_RAMWR);
      for (yc = 0; (yc < 8) && (y < _displayclipy2); yc++) {
        for (yr = 0; (yr < size_y) && (y < _displayclipy2); yr++) {
          x = x_char_start; // get our first x position...
          if (y >= _displayclipy1) {
            for (xc = 0; xc < 5; xc++) {
    6bb2:	ldr	r3, [sp, #24]
    6bb4:	cmp	r3, fp
    6bb6:	bne.n	6af2 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x6e2>
                  writedata16_cont(color);
                }
                x++;
              }
            }
            for (xr = 0; xr < size_x; xr++) {
    6bb8:	ldr	r3, [sp, #12]
    6bba:	ldr.w	fp, [sp, #44]	; 0x2c
    6bbe:	cbz	r3, 6c10 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x800>
    6bc0:	subs	r5, r3, #1
    6bc2:	uxtb	r5, r5
    6bc4:	adds	r5, #1
    6bc6:	add	r5, r4
    6bc8:	sxth	r5, r5
    6bca:	b.n	6bd4 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x7c4>
    6bcc:	adds	r4, #1
    6bce:	sxth	r4, r4
    6bd0:	cmp	r4, r5
    6bd2:	beq.n	6c10 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x800>
              if ((x >= _displayclipx1) && (x < _displayclipx2)) {
    6bd4:	ldrsh.w	r3, [r6, #54]	; 0x36
    6bd8:	cmp	r3, r4
    6bda:	bgt.n	6bcc <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x7bc>
    6bdc:	ldrsh.w	r3, [r6, #58]	; 0x3a
    6be0:	cmp	r3, r4
    6be2:	ble.n	6bcc <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x7bc>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    6be4:	ldr.w	r3, [r6, #168]	; 0xa8
    6be8:	mov	r0, r6
    6bea:	ldr	r1, [pc, #228]	; (6cd0 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x8c0>)
    6bec:	adds	r4, #1
    6bee:	orrs	r1, r3
    6bf0:	sxth	r4, r4
    6bf2:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    6bf6:	ldr	r3, [r6, #28]
    6bf8:	ldr	r2, [sp, #16]
    pending_rx_count++; //
    waitFifoNotFull();
    6bfa:	mov	r0, r6
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    6bfc:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    6bfe:	ldrb.w	r3, [r6, #146]	; 0x92
    6c02:	adds	r3, #1
    6c04:	strb.w	r3, [r6, #146]	; 0x92
    waitFifoNotFull();
    6c08:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
                  writedata16_cont(color);
                }
                x++;
              }
            }
            for (xr = 0; xr < size_x; xr++) {
    6c0c:	cmp	r4, r5
    6c0e:	bne.n	6bd4 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x7c4>
    6c10:	add.w	fp, fp, #1
      setAddr(x, y, x + w - 1, y + h - 1);

      y = y_char_top; // restore the actual y.
      writecommand_cont(ILI9341_RAMWR);
      for (yc = 0; (yc < 8) && (y < _displayclipy2); yc++) {
        for (yr = 0; (yr < size_y) && (y < _displayclipy2); yr++) {
    6c14:	ldr	r3, [sp, #40]	; 0x28
    6c16:	sxth.w	fp, fp
    6c1a:	cmp	r3, fp
    6c1c:	beq.n	6c28 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x818>
    6c1e:	ldrsh.w	r3, [r6, #60]	; 0x3c
    6c22:	cmp	r3, fp
    6c24:	bgt.w	6acc <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x6bc>
              x++;
            }
          }
          y++;
        }
        mask = mask << 1;
    6c28:	ldr	r3, [sp, #20]
    6c2a:	lsls	r2, r3, #1
    6c2c:	ldr	r3, [sp, #52]	; 0x34
    6c2e:	subs	r3, #1
    6c30:	uxtb	r2, r2
      beginSPITransaction(_SPI_CLOCK);
      setAddr(x, y, x + w - 1, y + h - 1);

      y = y_char_top; // restore the actual y.
      writecommand_cont(ILI9341_RAMWR);
      for (yc = 0; (yc < 8) && (y < _displayclipy2); yc++) {
    6c32:	ands.w	r3, r3, #255	; 0xff
              x++;
            }
          }
          y++;
        }
        mask = mask << 1;
    6c36:	str	r2, [sp, #20]
      beginSPITransaction(_SPI_CLOCK);
      setAddr(x, y, x + w - 1, y + h - 1);

      y = y_char_top; // restore the actual y.
      writecommand_cont(ILI9341_RAMWR);
      for (yc = 0; (yc < 8) && (y < _displayclipy2); yc++) {
    6c38:	str	r3, [sp, #52]	; 0x34
    6c3a:	bne.w	6aac <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x69c>
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7));
    6c3e:	ldr.w	r1, [r6, #164]	; 0xa4
    6c42:	mov	r0, r6
    6c44:	orr.w	r1, r1, #7
    6c48:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    6c4c:	ldr	r3, [r6, #28]
    6c4e:	movs	r2, #0
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    waitTransmitComplete();
    6c50:	mov	r0, r6
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7));
    _pimxrt_spi->TDR = c;
    6c52:	str	r2, [r3, #100]	; 0x64
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    6c54:	ldrb.w	r3, [r6, #146]	; 0x92
    6c58:	adds	r3, #1
    6c5a:	strb.w	r3, [r6, #146]	; 0x92
    waitTransmitComplete();
    6c5e:	bl	3de8 <ILI9341_t3n::waitTransmitComplete()>
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    6c62:	ldr.w	r3, [r6, #152]	; 0x98
    6c66:	cbz	r3, 6c70 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x860>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
    6c68:	ldr.w	r2, [r6, #148]	; 0x94
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    6c6c:	str.w	r2, [r3, #132]	; 0x84
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
#endif
    }
    _pspi->endTransaction();
    6c70:	ldr	r0, [r6, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    6c72:	ldrb	r3, [r0, #19]
    6c74:	cmp	r3, #0
    6c76:	beq.w	662c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x21c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    6c7a:	lsls	r3, r3, #31
    6c7c:	bpl.n	6c84 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x874>
    6c7e:	ldr	r2, [r0, #40]	; 0x28
    6c80:	ldr	r3, [pc, #92]	; (6ce0 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x8d0>)
    6c82:	str	r2, [r3, #0]
      }
      writecommand_last(ILI9341_NOP);
      endSPITransaction();
    }
  }
}
    6c84:	add	sp, #84	; 0x54
    6c86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c8a:	b.w	2978 <SPIClass::endTransaction() [clone .part.9]>
    6c8e:	ldr	r2, [r6, #28]
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
        while ((_pimxrt_spi->FSR & 0x1f))
    6c90:	ldr	r3, [r2, #92]	; 0x5c
    6c92:	lsls	r0, r3, #27
    6c94:	bne.n	6c90 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x880>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR
    6c96:	str	r1, [r2, #96]	; 0x60
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    6c98:	str.w	r9, [r2, #100]	; 0x64
    pending_rx_count++; //
    waitFifoNotFull();
    6c9c:	mov	r0, r6
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    pending_rx_count++; //
    6c9e:	ldrb.w	r3, [r6, #146]	; 0x92
    6ca2:	adds	r3, #1
    6ca4:	strb.w	r3, [r6, #146]	; 0x92
    waitFifoNotFull();
    6ca8:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    6cac:	b.n	6b1c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x70c>
    6cae:	ldr	r2, [r6, #28]
    6cb0:	b.n	6c98 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x888>
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
    6cb2:	str.w	r0, [r3, #136]	; 0x88
    6cb6:	b.n	6b9e <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x78e>
    6cb8:	mov	r2, r3
    6cba:	ldrh.w	r1, [sp, #32]
    6cbe:	str	r3, [sp, #12]
        while (line) {
          if (line == 0x1F) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 5 * size_x, size_y,
                     fgcolor);
            break;
          } else if (line == 0x1E) {
    6cc0:	movs	r3, #0
    6cc2:	smulbb	r2, r1, r2
    6cc6:	str	r2, [sp, #52]	; 0x34
    6cc8:	b.n	67c0 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3b0>
    6cca:	uxth	r3, r7
    6ccc:	str	r3, [sp, #12]
    6cce:	b.n	67dc <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3cc>
    6cd0:	.word	0x0020000f
    6cd4:	.word	0x20000360
    6cd8:	.word	0x0328001f
    6cdc:	.word	0xfcd7ffe0
    6ce0:	.word	0xe000e100
        x = _displayclipx1;
      }
      if ((x + w - 1) >= _displayclipx2)
        w = _displayclipx2 - x;
      if (y < _displayclipy1) {
        h -= (_displayclipy1 - y);
    6ce4:	uxth.w	r3, r8
    6ce8:	str.w	r8, [sp, #24]
    6cec:	rsb	r4, r3, lr
    6cf0:	mov	r8, r3
    6cf2:	add	r1, r4
    6cf4:	sxth	r4, r1
    6cf6:	b.n	694a <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x53a>
      int16_t y_char_top = y; // remember the y
      int16_t w = 6 * size_x;
      int16_t h = 8 * size_y;

      if (x < _displayclipx1) {
        w -= (_displayclipx1 - x);
    6cf8:	uxth	r7, r0
    6cfa:	str	r0, [sp, #20]
    6cfc:	subs	r4, r4, r7
    6cfe:	str	r7, [sp, #16]
    6d00:	add	r4, r3
    6d02:	sxth	r7, r4
    6d04:	b.n	6930 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x520>

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
    6d06:	ldr	r3, [r6, #28]
    6d08:	ldr	r3, [r3, #96]	; 0x60
    6d0a:	str.w	r3, [r6, #156]	; 0x9c
    6d0e:	b.n	6976 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x566>

00006d10 <ILI9341_t3n::drawGFXFontChar(unsigned int)>:
  }
}

void ILI9341_t3n::drawGFXFontChar(unsigned int c) {
  // Lets do Adafruit GFX character output here as well
  if (c == '\r')
    6d10:	cmp	r1, #13
    6d12:	beq.w	6f78 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x268>
      }
    }
  }
}

void ILI9341_t3n::drawGFXFontChar(unsigned int c) {
    6d16:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Lets do Adafruit GFX character output here as well
  if (c == '\r')
    return;

  // Some quick and dirty tests to see if we can
  uint8_t first = gfxFont->first;
    6d1a:	ldr	r5, [r0, #116]	; 0x74
      }
    }
  }
}

void ILI9341_t3n::drawGFXFontChar(unsigned int c) {
    6d1c:	sub	sp, #100	; 0x64
  if (c == '\r')
    return;

  // Some quick and dirty tests to see if we can
  uint8_t first = gfxFont->first;
  if ((c < first) || (c > gfxFont->last))
    6d1e:	ldrb	r3, [r5, #8]
    6d20:	cmp	r1, r3
    6d22:	bcc.n	6d4e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x3e>
    6d24:	ldrb	r2, [r5, #9]
    6d26:	cmp	r1, r2
    6d28:	bhi.n	6d4e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x3e>
    return;

  GFXglyph *glyph = gfxFont->glyph + (c - first);
    6d2a:	subs	r3, r1, r3
    6d2c:	ldr	r6, [r5, #4]
    6d2e:	add.w	r2, r6, r3, lsl #3
    6d32:	mov	r4, r2
    6d34:	str	r2, [sp, #68]	; 0x44
  uint8_t w = glyph->width, h = glyph->height;
    6d36:	ldrb	r2, [r2, #2]
    6d38:	mov	r7, r2
    6d3a:	str	r2, [sp, #36]	; 0x24
    6d3c:	ldrb	r2, [r4, #3]
    6d3e:	mov	r4, r2
    6d40:	str	r2, [sp, #64]	; 0x40
  // wonder if we should look at xo, yo instead?
  if ((w == 0 || h == 0) && (c != 32))
    6d42:	cmp	r4, #0
    6d44:	it	ne
    6d46:	cmpne	r7, #0
    6d48:	bne.n	6d54 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x44>
    6d4a:	cmp	r1, #32
    6d4c:	beq.n	6d54 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x44>
    _gfx_last_char_textcolor = textcolor;
    _gfx_last_char_textbgcolor = textbgcolor;
  }

  cursor_x += glyph->xAdvance * (int16_t)textsize_x;
}
    6d4e:	add	sp, #100	; 0x64
    6d50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // wonder if we should look at xo, yo instead?
  if ((w == 0 || h == 0) && (c != 32))
    return; // Is there an associated bitmap?

  int16_t xo = glyph->xOffset; // sic
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;
    6d54:	ldr	r2, [sp, #68]	; 0x44
    6d56:	ldrb	r7, [r5, #10]
    6d58:	ldrsb.w	r4, [r2, #6]

  if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    6d5c:	ldrb.w	r2, [r0, #92]	; 0x5c
  // wonder if we should look at xo, yo instead?
  if ((w == 0 || h == 0) && (c != 32))
    return; // Is there an associated bitmap?

  int16_t xo = glyph->xOffset; // sic
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;
    6d60:	add.w	r7, r4, r7, lsr #1
  uint8_t w = glyph->width, h = glyph->height;
  // wonder if we should look at xo, yo instead?
  if ((w == 0 || h == 0) && (c != 32))
    return; // Is there an associated bitmap?

  int16_t xo = glyph->xOffset; // sic
    6d64:	ldr	r4, [sp, #68]	; 0x44
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;

  if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    6d66:	ldrsh.w	lr, [r0, #36]	; 0x24
  // wonder if we should look at xo, yo instead?
  if ((w == 0 || h == 0) && (c != 32))
    return; // Is there an associated bitmap?

  int16_t xo = glyph->xOffset; // sic
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;
    6d6a:	str	r7, [sp, #24]
  uint8_t w = glyph->width, h = glyph->height;
  // wonder if we should look at xo, yo instead?
  if ((w == 0 || h == 0) && (c != 32))
    return; // Is there an associated bitmap?

  int16_t xo = glyph->xOffset; // sic
    6d6c:	ldrsb.w	sl, [r4, #5]
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;

  if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    6d70:	cmp	r2, #0
    6d72:	bne.w	6f7a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x26a>
    6d76:	uxth.w	ip, lr
  }

  // Lets do the work to output the font character
  uint8_t *bitmap = gfxFont->bitmap;

  uint16_t bo = glyph->bitmapOffset;
    6d7a:	ldrh.w	r3, [r6, r3, lsl #3]
    6d7e:	mov	r4, r0
    6d80:	str	r1, [sp, #84]	; 0x54
  // Serial.printf("DGFX_char: %c (%d,%d) : %u %u %u %u %d %d %x %x %d\n", c,
  // cursor_x, cursor_y, w, h,
  //			glyph->xAdvance, gfxFont->yAdvance, xo, yo, textcolor,
  //textbgcolor, _use_fbtft);Serial.flush();

  if (textcolor == textbgcolor) {
    6d82:	ldrh.w	r2, [r0, #76]	; 0x4c
    6d86:	ldrh.w	r1, [r0, #74]	; 0x4a
  }

  // Lets do the work to output the font character
  uint8_t *bitmap = gfxFont->bitmap;

  uint16_t bo = glyph->bitmapOffset;
    6d8a:	str	r3, [sp, #32]
  // Serial.printf("DGFX_char: %c (%d,%d) : %u %u %u %u %d %d %x %x %d\n", c,
  // cursor_x, cursor_y, w, h,
  //			glyph->xAdvance, gfxFont->yAdvance, xo, yo, textcolor,
  //textbgcolor, _use_fbtft);Serial.flush();

  if (textcolor == textbgcolor) {
    6d8c:	cmp	r1, r2
    cursor_x = 0;
    cursor_y += (int16_t)textsize_y * gfxFont->yAdvance;
  }

  // Lets do the work to output the font character
  uint8_t *bitmap = gfxFont->bitmap;
    6d8e:	ldr	r3, [r5, #0]
    6d90:	str	r3, [sp, #16]
  // Serial.printf("DGFX_char: %c (%d,%d) : %u %u %u %u %d %d %x %x %d\n", c,
  // cursor_x, cursor_y, w, h,
  //			glyph->xAdvance, gfxFont->yAdvance, xo, yo, textcolor,
  //textbgcolor, _use_fbtft);Serial.flush();

  if (textcolor == textbgcolor) {
    6d92:	beq.w	6fbe <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2ae>
    // Lets calculate bounding rectangle that we will update
    // We need to offset by the origin.

    // We are going direct so do some offsets and clipping
    int16_t x_offset_cursor =
        cursor_x + _originx;           // This is where the offseted cursor is.
    6d96:	ldrh	r3, [r0, #50]	; 0x32
    int16_t x_start = x_offset_cursor; // I am assuming no negative x offsets.
    int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
    if (glyph->xAdvance < (xo + w))
    6d98:	ldr	r1, [sp, #36]	; 0x24
    // Lets calculate bounding rectangle that we will update
    // We need to offset by the origin.

    // We are going direct so do some offsets and clipping
    int16_t x_offset_cursor =
        cursor_x + _originx;           // This is where the offseted cursor is.
    6d9a:	add	r3, ip
    int16_t x_start = x_offset_cursor; // I am assuming no negative x offsets.
    int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
    if (glyph->xAdvance < (xo + w))
    6d9c:	add.w	lr, sl, r1

    // We are going direct so do some offsets and clipping
    int16_t x_offset_cursor =
        cursor_x + _originx;           // This is where the offseted cursor is.
    int16_t x_start = x_offset_cursor; // I am assuming no negative x offsets.
    int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
    6da0:	ldr	r1, [sp, #68]	; 0x44
    // Lets calculate bounding rectangle that we will update
    // We need to offset by the origin.

    // We are going direct so do some offsets and clipping
    int16_t x_offset_cursor =
        cursor_x + _originx;           // This is where the offseted cursor is.
    6da2:	uxth	r3, r3
    int16_t x_start = x_offset_cursor; // I am assuming no negative x offsets.
    int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
    6da4:	ldrb	r6, [r1, #4]
    6da6:	ldrb.w	r1, [r0, #88]	; 0x58
    // Lets calculate bounding rectangle that we will update
    // We need to offset by the origin.

    // We are going direct so do some offsets and clipping
    int16_t x_offset_cursor =
        cursor_x + _originx;           // This is where the offseted cursor is.
    6daa:	sxth	r0, r3
    int16_t x_start = x_offset_cursor; // I am assuming no negative x offsets.
    int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
    if (glyph->xAdvance < (xo + w))
    6dac:	cmp	r6, lr

    // We are going direct so do some offsets and clipping
    int16_t x_offset_cursor =
        cursor_x + _originx;           // This is where the offseted cursor is.
    int16_t x_start = x_offset_cursor; // I am assuming no negative x offsets.
    int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
    6dae:	mul.w	r7, r6, r1
    // Lets calculate bounding rectangle that we will update
    // We need to offset by the origin.

    // We are going direct so do some offsets and clipping
    int16_t x_offset_cursor =
        cursor_x + _originx;           // This is where the offseted cursor is.
    6db2:	str	r0, [sp, #20]
    int16_t x_start = x_offset_cursor; // I am assuming no negative x offsets.
    int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
    6db4:	str	r7, [sp, #12]
    if (glyph->xAdvance < (xo + w))
    6db6:	bge.w	6fb8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2a8>
      x_end =
          x_offset_cursor +
          ((xo + w) * textsize_x); // BUGBUG Overlflows into next char position.
    6dba:	mla	r0, lr, r1, r3
    6dbe:	sxth	r6, r0
    int16_t x_left_fill = x_offset_cursor + xo * textsize_x;
    6dc0:	mla	r3, sl, r1, r3
    int16_t x;

    if (xo < 0) {
    6dc4:	cmp.w	sl, #0
    int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
    if (glyph->xAdvance < (xo + w))
      x_end =
          x_offset_cursor +
          ((xo + w) * textsize_x); // BUGBUG Overlflows into next char position.
    int16_t x_left_fill = x_offset_cursor + xo * textsize_x;
    6dc8:	sxth	r3, r3
    6dca:	str	r3, [sp, #44]	; 0x2c
    int16_t x;

    if (xo < 0) {
    6dcc:	blt.w	71f0 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x4e0>
    // Lets calculate bounding rectangle that we will update
    // We need to offset by the origin.

    // We are going direct so do some offsets and clipping
    int16_t x_offset_cursor =
        cursor_x + _originx;           // This is where the offseted cursor is.
    6dd0:	ldr	r3, [sp, #20]
    6dd2:	str	r3, [sp, #28]
    // negative like -10 - -16 = 6...
    int8_t y_top_fill =
        (yo - gfxFont->yAdvance / 2 - _gfxFont_min_yOffset) * textsize_y;

    // See if anything is within clip rectangle, if not bail
    if ((x_start >= _displayclipx2) || // Clip right
    6dd4:	ldrsh.w	fp, [r4, #58]	; 0x3a
    6dd8:	ldr	r3, [sp, #28]
    6dda:	cmp	r3, fp
    6ddc:	bge.w	6fac <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x29c>
      x_start += xo * textsize_x;
      x_left_fill = 0; // Don't need to fill anything here...
    }

    int16_t y_start =
        cursor_y + _originy + (_gfxFont_min_yOffset * textsize_y) +
    6de0:	ldrsh.w	r0, [r4, #38]	; 0x26
    6de4:	ldrsh.w	r1, [r4, #52]	; 0x34
    6de8:	ldrb.w	r3, [r4, #89]	; 0x59
        gfxFont->yAdvance * textsize_y / 2; // UP to most negative value.
    6dec:	adds	r1, r0, r1
    6dee:	ldrb.w	lr, [r5, #10]
      x_start += xo * textsize_x;
      x_left_fill = 0; // Don't need to fill anything here...
    }

    int16_t y_start =
        cursor_y + _originy + (_gfxFont_min_yOffset * textsize_y) +
    6df2:	ldrsb.w	r5, [r4, #120]	; 0x78
        gfxFont->yAdvance * textsize_y / 2; // UP to most negative value.
    6df6:	mov	r0, r1
    6df8:	mov	sl, r1
    6dfa:	uxth	r1, r3
    int8_t y_top_fill =
        (yo - gfxFont->yAdvance / 2 - _gfxFont_min_yOffset) * textsize_y;

    // See if anything is within clip rectangle, if not bail
    if ((x_start >= _displayclipx2) || // Clip right
        (y_start >= _displayclipy2) || // Clip bottom
    6dfc:	ldrsh.w	r7, [r4, #60]	; 0x3c
      x_left_fill = 0; // Don't need to fill anything here...
    }

    int16_t y_start =
        cursor_y + _originy + (_gfxFont_min_yOffset * textsize_y) +
        gfxFont->yAdvance * textsize_y / 2; // UP to most negative value.
    6e00:	smulbb	r8, lr, r3
    6e04:	mla	r0, r5, r1, r0
    6e08:	add.w	r0, r0, r8, lsr #1
    6e0c:	uxth.w	r8, r0
    6e10:	sxth.w	r0, r8
    // negative like -10 - -16 = 6...
    int8_t y_top_fill =
        (yo - gfxFont->yAdvance / 2 - _gfxFont_min_yOffset) * textsize_y;

    // See if anything is within clip rectangle, if not bail
    if ((x_start >= _displayclipx2) || // Clip right
    6e14:	cmp	r0, r7
      x_left_fill = 0; // Don't need to fill anything here...
    }

    int16_t y_start =
        cursor_y + _originy + (_gfxFont_min_yOffset * textsize_y) +
        gfxFont->yAdvance * textsize_y / 2; // UP to most negative value.
    6e16:	str	r0, [sp, #8]
    // negative like -10 - -16 = 6...
    int8_t y_top_fill =
        (yo - gfxFont->yAdvance / 2 - _gfxFont_min_yOffset) * textsize_y;

    // See if anything is within clip rectangle, if not bail
    if ((x_start >= _displayclipx2) || // Clip right
    6e18:	bge.w	6fac <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x29c>
        (y_start >= _displayclipy2) || // Clip bottom
    6e1c:	ldrsh.w	r0, [r4, #54]	; 0x36
    6e20:	cmp	r0, r6
    6e22:	bgt.w	6fac <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x29c>

    int16_t y_start =
        cursor_y + _originy + (_gfxFont_min_yOffset * textsize_y) +
        gfxFont->yAdvance * textsize_y / 2; // UP to most negative value.
    int16_t y_end =
        y_start + gfxFont->yAdvance * textsize_y; // how far we will update
    6e26:	mla	r1, lr, r1, r8

    // See if anything is within clip rectangle, if not bail
    if ((x_start >= _displayclipx2) || // Clip right
        (y_start >= _displayclipy2) || // Clip bottom
        (x_end < _displayclipx1) ||    // Clip left
        (y_end < _displayclipy1))      // Clip top
    6e2a:	ldrsh.w	r9, [r4, #56]	; 0x38

    int16_t y_start =
        cursor_y + _originy + (_gfxFont_min_yOffset * textsize_y) +
        gfxFont->yAdvance * textsize_y / 2; // UP to most negative value.
    int16_t y_end =
        y_start + gfxFont->yAdvance * textsize_y; // how far we will update
    6e2e:	sxth	r1, r1
        (yo - gfxFont->yAdvance / 2 - _gfxFont_min_yOffset) * textsize_y;

    // See if anything is within clip rectangle, if not bail
    if ((x_start >= _displayclipx2) || // Clip right
        (y_start >= _displayclipy2) || // Clip bottom
        (x_end < _displayclipx1) ||    // Clip left
    6e30:	cmp	r1, r9
    6e32:	blt.w	6fac <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x29c>
    6e36:	cmp	r1, r7
      y_end = _displayclipy2;
    if (x_end > _displayclipx2)
      x_end = _displayclipx2;

    // If we get here and
    if (_gfx_last_cursor_y != (cursor_y + _originy))
    6e38:	ldrsh.w	r0, [r4, #130]	; 0x82
    6e3c:	it	ge
    6e3e:	movge	r1, r7
    6e40:	cmp	r6, fp
    6e42:	str	r1, [sp, #76]	; 0x4c
    6e44:	mov	r1, r6
    6e46:	it	ge
    6e48:	movge	r1, fp
    6e4a:	cmp	r0, sl
    6e4c:	str	r1, [sp, #40]	; 0x28
    6e4e:	beq.n	6e56 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x146>
      _gfx_last_char_x_write = 0;
    6e50:	movs	r1, #0
    6e52:	strh.w	r1, [r4, #132]	; 0x84
        y_start + gfxFont->yAdvance * textsize_y; // how far we will update
    int16_t y = y_start;
    // int8_t y_top_fill = (yo - _gfxFont_min_yOffset) * textsize_y;	 // both
    // negative like -10 - -16 = 6...
    int8_t y_top_fill =
        (yo - gfxFont->yAdvance / 2 - _gfxFont_min_yOffset) * textsize_y;
    6e56:	ldr	r1, [sp, #24]
    // If we get here and
    if (_gfx_last_cursor_y != (cursor_y + _originy))
      _gfx_last_char_x_write = 0;

#ifdef ENABLE_ILI9341_FRAMEBUFFER
    if (_use_fbtft) {
    6e58:	ldrb.w	r0, [r4, #180]	; 0xb4
        y_start + gfxFont->yAdvance * textsize_y; // how far we will update
    int16_t y = y_start;
    // int8_t y_top_fill = (yo - _gfxFont_min_yOffset) * textsize_y;	 // both
    // negative like -10 - -16 = 6...
    int8_t y_top_fill =
        (yo - gfxFont->yAdvance / 2 - _gfxFont_min_yOffset) * textsize_y;
    6e5c:	sub.w	r1, r1, lr, lsr #1
    6e60:	subs	r1, r1, r5
    6e62:	smulbb	r1, r1, r3
    6e66:	uxtb.w	sl, r1
    6e6a:	sxtb.w	r1, sl
    6e6e:	str	r1, [sp, #12]
    // If we get here and
    if (_gfx_last_cursor_y != (cursor_y + _originy))
      _gfx_last_char_x_write = 0;

#ifdef ENABLE_ILI9341_FRAMEBUFFER
    if (_use_fbtft) {
    6e70:	cmp	r0, #0
    6e72:	beq.w	74a4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x794>
      _changed_max_y = y;
  }

  // could combine with above, but avoids the +-...
  void updateChangedRange(int16_t x, int16_t y) __attribute__((always_inline)) {
    if (x < _changed_min_x)
    6e76:	ldrsh.w	r5, [r4, #188]	; 0xbc
    6e7a:	ldr	r0, [sp, #28]
    6e7c:	cmp	r0, r5
    6e7e:	bge.n	6e86 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x176>
      _changed_min_x = x;
    6e80:	mov	r5, r0
    6e82:	strh.w	r0, [r4, #188]	; 0xbc
    if (y < _changed_min_y)
    6e86:	ldrsh.w	r6, [r4, #192]	; 0xc0
    6e8a:	ldr	r0, [sp, #8]
    6e8c:	cmp	r0, r6
    6e8e:	bge.n	6e96 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x186>
      _changed_min_y = y;
    6e90:	mov	r6, r0
    6e92:	strh.w	r0, [r4, #192]	; 0xc0
    if (x > _changed_max_x)
    6e96:	ldrsh.w	lr, [r4, #190]	; 0xbe
    6e9a:	ldr	r0, [sp, #28]
    6e9c:	cmp	r0, lr
    6e9e:	ble.n	6ea6 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x196>
      _changed_max_x = x;
    6ea0:	mov	lr, r0
    6ea2:	strh.w	r0, [r4, #190]	; 0xbe
    if (y > _changed_max_y)
    6ea6:	ldrsh.w	r1, [r4, #194]	; 0xc2
    6eaa:	ldr	r0, [sp, #8]
    6eac:	cmp	r0, r1
    6eae:	ble.n	6eb6 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x1a6>
      _changed_max_y = y;
    6eb0:	mov	r1, r0
    6eb2:	strh.w	r0, [r4, #194]	; 0xc2
      _changed_max_y = y;
  }

  // could combine with above, but avoids the +-...
  void updateChangedRange(int16_t x, int16_t y) __attribute__((always_inline)) {
    if (x < _changed_min_x)
    6eb6:	ldr	r0, [sp, #40]	; 0x28
    6eb8:	cmp	r0, r5
    6eba:	bge.n	6ec4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x1b4>
      _changed_min_x = x;
    6ebc:	ldrh.w	r0, [sp, #40]	; 0x28
    6ec0:	strh.w	r0, [r4, #188]	; 0xbc
    if (y < _changed_min_y)
    6ec4:	ldr	r5, [sp, #76]	; 0x4c
    6ec6:	cmp	r5, r6
    6ec8:	bge.n	6ece <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x1be>
      _changed_min_y = y;
    6eca:	strh.w	r5, [r4, #192]	; 0xc0
    if (x > _changed_max_x)
    6ece:	ldr	r5, [sp, #40]	; 0x28
    6ed0:	cmp	r5, lr
    6ed2:	ble.n	6ed8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x1c8>
      _changed_max_x = x;
    6ed4:	strh.w	r5, [r4, #190]	; 0xbe
    if (y > _changed_max_y)
    6ed8:	ldr	r5, [sp, #76]	; 0x4c
    6eda:	cmp	r5, r1
    6edc:	ble.n	6ee2 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x1d2>
      _changed_max_y = y;
    6ede:	strh.w	r5, [r4, #194]	; 0xc2
          x_start,
          y_start); // update the range of the screen that has been changed;
      updateChangedRange(
          x_end,
          y_end); // update the range of the screen that has been changed;
      uint16_t *pfbPixel_row = &_pfbtft[y_start * _width + x_start];
    6ee2:	ldr	r6, [sp, #8]
      uint16_t *pfbPixel;
      // First lets fill in the top parts above the actual rectangle...
      while (y_top_fill--) {
    6ee4:	add.w	r5, sl, #4294967295
          x_start,
          y_start); // update the range of the screen that has been changed;
      updateChangedRange(
          x_end,
          y_end); // update the range of the screen that has been changed;
      uint16_t *pfbPixel_row = &_pfbtft[y_start * _width + x_start];
    6ee8:	ldrsh.w	r1, [r4, #32]
    6eec:	mov	lr, r6
    6eee:	ldr	r6, [sp, #28]
    6ef0:	ldr.w	r0, [r4, #176]	; 0xb0
      uint16_t *pfbPixel;
      // First lets fill in the top parts above the actual rectangle...
      while (y_top_fill--) {
    6ef4:	uxtb	r5, r5
          x_start,
          y_start); // update the range of the screen that has been changed;
      updateChangedRange(
          x_end,
          y_end); // update the range of the screen that has been changed;
      uint16_t *pfbPixel_row = &_pfbtft[y_start * _width + x_start];
    6ef6:	mla	r6, lr, r1, r6
    6efa:	add.w	fp, r0, r6, lsl #1
      uint16_t *pfbPixel;
      // First lets fill in the top parts above the actual rectangle...
      while (y_top_fill--) {
    6efe:	ldr	r0, [sp, #12]
    6f00:	cmp	r0, #0
    6f02:	beq.w	7abc <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xdac>
    6f06:	uxth	r5, r5
    6f08:	add.w	r6, r8, #1
    6f0c:	ldr.w	sl, [sp, #28]
    6f10:	add	r6, r5
    6f12:	ldr.w	ip, [sp, #20]
    6f16:	ldr.w	lr, [sp, #40]	; 0x28
    6f1a:	sxth	r6, r6
    6f1c:	ldr	r7, [sp, #8]
        pfbPixel = pfbPixel_row;
        if ((y >= _displayclipy1) && (y < _displayclipy2)) {
    6f1e:	cmp	r7, r9
    6f20:	blt.n	6f64 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x254>
    6f22:	ldrsh.w	r3, [r4, #60]	; 0x3c
    6f26:	cmp	r3, r7
    6f28:	ble.n	6f64 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x254>
          for (int16_t xx = x_start; xx < x_end; xx++) {
    6f2a:	cmp	sl, lr
    6f2c:	bge.n	6f64 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x254>
    6f2e:	mov	r3, sl
    6f30:	mov	r2, fp
            if ((xx >= _displayclipx1) && (xx >= x_offset_cursor)) {
    6f32:	ldrsh.w	r0, [r4, #54]	; 0x36
    6f36:	adds	r1, r3, #1
    6f38:	cmp	r0, r3
    6f3a:	bgt.n	6f58 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x248>
    6f3c:	cmp	ip, r3
    6f3e:	bgt.n	6f58 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x248>
              if ((xx >= _gfx_last_char_x_write) ||
    6f40:	ldrsh.w	r0, [r4, #132]	; 0x84
    6f44:	cmp	r0, r3
    6f46:	ble.n	6f52 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x242>
    6f48:	ldrh	r0, [r2, #0]
    6f4a:	ldrh.w	r3, [r4, #134]	; 0x86
    6f4e:	cmp	r0, r3
    6f50:	beq.n	6f58 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x248>
                  (*pfbPixel != _gfx_last_char_textcolor))
                *pfbPixel = textbgcolor;
    6f52:	ldrh.w	r3, [r4, #76]	; 0x4c
    6f56:	strh	r3, [r2, #0]
    6f58:	sxth	r3, r1
            }
            pfbPixel++;
    6f5a:	adds	r2, #2
      uint16_t *pfbPixel;
      // First lets fill in the top parts above the actual rectangle...
      while (y_top_fill--) {
        pfbPixel = pfbPixel_row;
        if ((y >= _displayclipy1) && (y < _displayclipy2)) {
          for (int16_t xx = x_start; xx < x_end; xx++) {
    6f5c:	cmp	lr, r3
    6f5e:	bne.n	6f32 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x222>
    6f60:	ldrsh.w	r1, [r4, #32]
    6f64:	adds	r7, #1
                *pfbPixel = textbgcolor;
            }
            pfbPixel++;
          }
        }
        pfbPixel_row += _width;
    6f66:	add.w	fp, fp, r1, lsl #1
    6f6a:	sxth	r7, r7
          x_end,
          y_end); // update the range of the screen that has been changed;
      uint16_t *pfbPixel_row = &_pfbtft[y_start * _width + x_start];
      uint16_t *pfbPixel;
      // First lets fill in the top parts above the actual rectangle...
      while (y_top_fill--) {
    6f6c:	cmp	r7, r6
    6f6e:	beq.w	71fa <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x4ea>
    6f72:	ldrsh.w	r9, [r4, #56]	; 0x38
    6f76:	b.n	6f1e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x20e>
    6f78:	bx	lr
    return; // Is there an associated bitmap?

  int16_t xo = glyph->xOffset; // sic
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;

  if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    6f7a:	ldr	r2, [sp, #36]	; 0x24
    6f7c:	ldrsh.w	r4, [r0, #32]
    6f80:	add.w	r7, sl, r2
    6f84:	ldrb.w	r2, [r0, #88]	; 0x58
    6f88:	mla	r2, r7, r2, lr
    6f8c:	cmp	r2, r4
    6f8e:	ble.w	6d76 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x66>
    cursor_x = 0;
    6f92:	mov.w	ip, #0
    cursor_y += (int16_t)textsize_y * gfxFont->yAdvance;
    6f96:	ldrh	r4, [r0, #38]	; 0x26
    6f98:	ldrb.w	r7, [r0, #89]	; 0x59

  int16_t xo = glyph->xOffset; // sic
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;

  if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    cursor_x = 0;
    6f9c:	strh.w	ip, [r0, #36]	; 0x24
    6fa0:	mov	lr, ip
    cursor_y += (int16_t)textsize_y * gfxFont->yAdvance;
    6fa2:	ldrb	r2, [r5, #10]
    6fa4:	mla	r2, r7, r2, r4
    6fa8:	strh	r2, [r0, #38]	; 0x26
    6faa:	b.n	6d7a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6a>
        (y_start >= _displayclipy2) || // Clip bottom
        (x_end < _displayclipx1) ||    // Clip left
        (y_end < _displayclipy1))      // Clip top
    {
      // But remember to first update the cursor position
      cursor_x += glyph->xAdvance * (int16_t)textsize_x;
    6fac:	ldr	r3, [sp, #12]
    6fae:	add	r3, ip
    6fb0:	strh	r3, [r4, #36]	; 0x24
    _gfx_last_char_textcolor = textcolor;
    _gfx_last_char_textbgcolor = textbgcolor;
  }

  cursor_x += glyph->xAdvance * (int16_t)textsize_x;
}
    6fb2:	add	sp, #100	; 0x64
    6fb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    // We are going direct so do some offsets and clipping
    int16_t x_offset_cursor =
        cursor_x + _originx;           // This is where the offseted cursor is.
    int16_t x_start = x_offset_cursor; // I am assuming no negative x offsets.
    int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
    6fb8:	adds	r6, r3, r7
    6fba:	sxth	r6, r6
    6fbc:	b.n	6dc0 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xb0>
    // So the below is not perfect as we may overwrite a small portion
    // of a letter with the next one, when we blank out...
    // But: I prefer to let each of us decide if the limitations are
    // worth it or not.  If Not you still have the option to not
    // Do transparent mode and instead blank out and blink...
    for (yy = 0; yy < h; yy++) {
    6fbe:	ldr	r3, [sp, #64]	; 0x40
    6fc0:	cmp	r3, #0
    6fc2:	beq.w	70f0 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x3e0>
    6fc6:	movs	r3, #0
    6fc8:	str.w	sl, [sp, #8]
    6fcc:	ldrh.w	r9, [sp, #24]
    6fd0:	mov	r7, r3
    6fd2:	mov	r6, r3
    6fd4:	ldr.w	sl, [sp, #32]
    6fd8:	str	r3, [sp, #12]
      uint8_t w_left = w;
      xx = 0;
      while (w_left) {
    6fda:	ldr	r3, [sp, #36]	; 0x24
    6fdc:	cmp	r3, #0
    6fde:	beq.n	70d4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x3c4>
    6fe0:	mov	r5, r3
    6fe2:	mov.w	r8, #0
    6fe6:	b.n	7024 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x314>
          xCount = 8;
          // Serial.print("8");
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 4) && ((bits & 0xf0) == 0xf0)) {
    6fe8:	and.w	r3, r6, #240	; 0xf0
    6fec:	cmp	r3, #240	; 0xf0
    6fee:	beq.w	7146 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x436>
          xCount = 4;
          // Serial.print("4");
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 3) && ((bits & 0xe0) == 0xe0)) {
    6ff2:	and.w	r3, r6, #224	; 0xe0
    6ff6:	cmp	r3, #224	; 0xe0
    6ff8:	beq.w	7184 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x474>
          // Serial.print("3");
          xCount = 3;
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 2) && ((bits & 0xc0) == 0xc0)) {
    6ffc:	and.w	r3, r6, #192	; 0xc0
    7000:	cmp	r3, #192	; 0xc0
    7002:	beq.w	7108 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x3f8>
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else {
          xCount = 1;
          if (bits & 0x80) {
    7006:	lsls	r3, r6, #24
    7008:	bmi.n	704c <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x33c>
    700a:	movs	r2, #1
          xCount = 2;
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else {
          xCount = 1;
    700c:	mov	r3, r2
                       textsize_y, textcolor);
            }
          }
        }
        xx += xCount;
        w_left -= xCount;
    700e:	subs	r5, r5, r3
                       cursor_y + (yo + yy) * textsize_y, textsize_x,
                       textsize_y, textcolor);
            }
          }
        }
        xx += xCount;
    7010:	add	r8, r3
        w_left -= xCount;
        bit += xCount;
    7012:	add	r7, r3
        bits <<= xCount;
    7014:	lsls	r6, r2
    // worth it or not.  If Not you still have the option to not
    // Do transparent mode and instead blank out and blink...
    for (yy = 0; yy < h; yy++) {
      uint8_t w_left = w;
      xx = 0;
      while (w_left) {
    7016:	ands.w	r5, r5, #255	; 0xff
                       cursor_y + (yo + yy) * textsize_y, textsize_x,
                       textsize_y, textcolor);
            }
          }
        }
        xx += xCount;
    701a:	uxtb.w	r8, r8
        w_left -= xCount;
        bit += xCount;
    701e:	uxtb	r7, r7
        bits <<= xCount;
    7020:	uxtb	r6, r6
    // worth it or not.  If Not you still have the option to not
    // Do transparent mode and instead blank out and blink...
    for (yy = 0; yy < h; yy++) {
      uint8_t w_left = w;
      xx = 0;
      while (w_left) {
    7022:	beq.n	70d4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x3c4>
        if (!(bit & 7)) {
    7024:	lsls	r2, r7, #29
    7026:	bne.n	7036 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x326>
          bits = bitmap[bo++];
    7028:	add.w	r3, sl, #1
    702c:	ldr	r2, [sp, #16]
    702e:	ldrb.w	r6, [r2, sl]
    7032:	uxth.w	sl, r3
        }
        // Could try up to 8 bits at time, but start off trying up to 4
        uint8_t xCount;
        if ((w_left >= 8) && ((bits & 0xff) == 0xff)) {
    7036:	cmp	r5, #7
    7038:	bls.n	703e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x32e>
    703a:	cmp	r6, #255	; 0xff
    703c:	beq.n	7096 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x386>
          xCount = 8;
          // Serial.print("8");
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 4) && ((bits & 0xf0) == 0xf0)) {
    703e:	cmp	r5, #3
    7040:	bhi.n	6fe8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2d8>
          xCount = 4;
          // Serial.print("4");
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 3) && ((bits & 0xe0) == 0xe0)) {
    7042:	beq.n	6ff2 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2e2>
          // Serial.print("3");
          xCount = 3;
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 2) && ((bits & 0xc0) == 0xc0)) {
    7044:	cmp	r5, #2
    7046:	beq.n	6ffc <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2ec>
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else {
          xCount = 1;
          if (bits & 0x80) {
    7048:	lsls	r3, r6, #24
    704a:	bpl.n	700a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2fa>
            if ((textsize_x == 1) && (textsize_y == 1)) {
    704c:	ldrh.w	r3, [r4, #88]	; 0x58
    7050:	movw	r2, #257	; 0x101
    7054:	cmp	r3, r2
    7056:	beq.w	71c4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x4b4>
              drawPixel(cursor_x + xo + xx, cursor_y + yo + yy, textcolor);
            } else {
              fillRect(cursor_x + (xo + xx) * textsize_x,
                       cursor_y + (yo + yy) * textsize_y, textsize_x,
    705a:	ldrb.w	r2, [r4, #89]	; 0x59
                       textsize_y, textcolor);
    705e:	mov	r0, r4
    7060:	ldr	r3, [sp, #8]
    7062:	ldrh.w	ip, [r4, #38]	; 0x26
    7066:	smulbb	fp, r2, r9
    706a:	add.w	r1, r3, r8
          xCount = 1;
          if (bits & 0x80) {
            if ((textsize_x == 1) && (textsize_y == 1)) {
              drawPixel(cursor_x + xo + xx, cursor_y + yo + yy, textcolor);
            } else {
              fillRect(cursor_x + (xo + xx) * textsize_x,
    706e:	ldrb.w	r3, [r4, #88]	; 0x58
                       cursor_y + (yo + yy) * textsize_y, textsize_x,
                       textsize_y, textcolor);
    7072:	str	r2, [sp, #0]
    7074:	add.w	r2, fp, ip
    7078:	mla	r1, r1, r3, lr
    707c:	ldrh.w	lr, [r4, #74]	; 0x4a
    7080:	sxth	r2, r2
    7082:	str.w	lr, [sp, #4]
    7086:	sxth	r1, r1
    7088:	bl	48cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    708c:	movs	r2, #1
    708e:	ldrsh.w	lr, [r4, #36]	; 0x24
          xCount = 2;
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else {
          xCount = 1;
    7092:	mov	r3, r2
    7094:	b.n	700e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2fe>
        uint8_t xCount;
        if ((w_left >= 8) && ((bits & 0xff) == 0xff)) {
          xCount = 8;
          // Serial.print("8");
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
    7096:	ldrb.w	r2, [r4, #89]	; 0x59
                   textsize_y, textcolor);
    709a:	mov	r0, r4
    709c:	ldr	r3, [sp, #8]
    709e:	ldrh.w	ip, [r4, #38]	; 0x26
    70a2:	smulbb	fp, r2, r9
    70a6:	add.w	r1, r3, r8
        // Could try up to 8 bits at time, but start off trying up to 4
        uint8_t xCount;
        if ((w_left >= 8) && ((bits & 0xff) == 0xff)) {
          xCount = 8;
          // Serial.print("8");
          fillRect(cursor_x + (xo + xx) * textsize_x,
    70aa:	ldrb.w	r3, [r4, #88]	; 0x58
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
    70ae:	str	r2, [sp, #0]
    70b0:	add.w	r2, fp, ip
    70b4:	mla	r1, r1, r3, lr
    70b8:	ldrh.w	lr, [r4, #74]	; 0x4a
    70bc:	lsls	r3, r3, #3
    70be:	sxth	r2, r2
    70c0:	str.w	lr, [sp, #4]
    70c4:	sxth	r1, r1
    70c6:	bl	48cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    70ca:	movs	r2, #8
    70cc:	ldrsh.w	lr, [r4, #36]	; 0x24
          bits = bitmap[bo++];
        }
        // Could try up to 8 bits at time, but start off trying up to 4
        uint8_t xCount;
        if ((w_left >= 8) && ((bits & 0xff) == 0xff)) {
          xCount = 8;
    70d0:	mov	r3, r2
    70d2:	b.n	700e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2fe>
    70d4:	ldr	r3, [sp, #12]
    70d6:	add.w	r9, r9, #1
    // So the below is not perfect as we may overwrite a small portion
    // of a letter with the next one, when we blank out...
    // But: I prefer to let each of us decide if the limitations are
    // worth it or not.  If Not you still have the option to not
    // Do transparent mode and instead blank out and blink...
    for (yy = 0; yy < h; yy++) {
    70da:	ldr	r2, [sp, #64]	; 0x40
    70dc:	adds	r3, #1
    70de:	uxth.w	r9, r9
    70e2:	str	r3, [sp, #12]
    70e4:	uxtb	r3, r3
    70e6:	cmp	r2, r3
    70e8:	bhi.w	6fda <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2ca>
    70ec:	uxth.w	ip, lr
        w_left -= xCount;
        bit += xCount;
        bits <<= xCount;
      }
    }
    _gfx_last_char_x_write = 0;
    70f0:	movs	r3, #0
    70f2:	strh.w	r3, [r4, #132]	; 0x84
    _gfx_last_char_x_write = x_end;
    _gfx_last_char_textcolor = textcolor;
    _gfx_last_char_textbgcolor = textbgcolor;
  }

  cursor_x += glyph->xAdvance * (int16_t)textsize_x;
    70f6:	ldr	r3, [sp, #68]	; 0x44
    70f8:	ldrb	r2, [r3, #4]
    70fa:	ldrb.w	r3, [r4, #88]	; 0x58
    70fe:	mla	ip, r2, r3, ip
    7102:	strh.w	ip, [r4, #36]	; 0x24
    7106:	b.n	6d4e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x3e>
                   textsize_y, textcolor);
        } else if ((w_left >= 2) && ((bits & 0xc0) == 0xc0)) {
          // Serial.print("2");
          xCount = 2;
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
    7108:	ldrb.w	r2, [r4, #89]	; 0x59
                   textsize_y, textcolor);
    710c:	mov	r0, r4
    710e:	ldr	r3, [sp, #8]
    7110:	ldrh.w	ip, [r4, #38]	; 0x26
    7114:	smulbb	fp, r2, r9
    7118:	add.w	r1, r3, r8
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 2) && ((bits & 0xc0) == 0xc0)) {
          // Serial.print("2");
          xCount = 2;
          fillRect(cursor_x + (xo + xx) * textsize_x,
    711c:	ldrb.w	r3, [r4, #88]	; 0x58
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
    7120:	str	r2, [sp, #0]
    7122:	add.w	r2, fp, ip
    7126:	mla	r1, r1, r3, lr
    712a:	ldrh.w	lr, [r4, #74]	; 0x4a
    712e:	lsls	r3, r3, #1
    7130:	sxth	r2, r2
    7132:	str.w	lr, [sp, #4]
    7136:	sxth	r1, r1
    7138:	bl	48cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    713c:	movs	r2, #2
    713e:	ldrsh.w	lr, [r4, #36]	; 0x24
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 2) && ((bits & 0xc0) == 0xc0)) {
          // Serial.print("2");
          xCount = 2;
    7142:	mov	r3, r2
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
    7144:	b.n	700e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2fe>
                   textsize_y, textcolor);
        } else if ((w_left >= 4) && ((bits & 0xf0) == 0xf0)) {
          xCount = 4;
          // Serial.print("4");
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
    7146:	ldrb.w	r2, [r4, #89]	; 0x59
                   textsize_y, textcolor);
    714a:	mov	r0, r4
    714c:	ldr	r3, [sp, #8]
    714e:	ldrh.w	ip, [r4, #38]	; 0x26
    7152:	smulbb	fp, r2, r9
    7156:	add.w	r1, r3, r8
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 4) && ((bits & 0xf0) == 0xf0)) {
          xCount = 4;
          // Serial.print("4");
          fillRect(cursor_x + (xo + xx) * textsize_x,
    715a:	ldrb.w	r3, [r4, #88]	; 0x58
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
    715e:	str	r2, [sp, #0]
    7160:	add.w	r2, fp, ip
    7164:	mla	r1, r1, r3, lr
    7168:	ldrh.w	lr, [r4, #74]	; 0x4a
    716c:	lsls	r3, r3, #2
    716e:	sxth	r2, r2
    7170:	str.w	lr, [sp, #4]
    7174:	sxth	r1, r1
    7176:	bl	48cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    717a:	movs	r2, #4
    717c:	ldrsh.w	lr, [r4, #36]	; 0x24
          // Serial.print("8");
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 4) && ((bits & 0xf0) == 0xf0)) {
          xCount = 4;
    7180:	mov	r3, r2
          // Serial.print("4");
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
    7182:	b.n	700e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2fe>
        } else if ((w_left >= 3) && ((bits & 0xe0) == 0xe0)) {
          // Serial.print("3");
          xCount = 3;
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
    7184:	ldrb.w	r2, [r4, #89]	; 0x59
                   textsize_y, textcolor);
    7188:	mov	r0, r4
    718a:	ldr	r3, [sp, #8]
    718c:	ldrh.w	ip, [r4, #38]	; 0x26
    7190:	smulbb	fp, r2, r9
    7194:	add.w	r1, r3, r8
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 3) && ((bits & 0xe0) == 0xe0)) {
          // Serial.print("3");
          xCount = 3;
          fillRect(cursor_x + (xo + xx) * textsize_x,
    7198:	ldrb.w	r3, [r4, #88]	; 0x58
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
    719c:	str	r2, [sp, #0]
    719e:	add.w	r2, fp, ip
    71a2:	mla	r1, r1, r3, lr
    71a6:	ldrh.w	lr, [r4, #74]	; 0x4a
    71aa:	add.w	r3, r3, r3, lsl #1
    71ae:	sxth	r2, r2
    71b0:	str.w	lr, [sp, #4]
    71b4:	sxth	r1, r1
    71b6:	bl	48cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    71ba:	movs	r2, #3
    71bc:	ldrsh.w	lr, [r4, #36]	; 0x24
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 3) && ((bits & 0xe0) == 0xe0)) {
          // Serial.print("3");
          xCount = 3;
    71c0:	mov	r3, r2
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
    71c2:	b.n	700e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2fe>
                   textsize_y, textcolor);
        } else {
          xCount = 1;
          if (bits & 0x80) {
            if ((textsize_x == 1) && (textsize_y == 1)) {
              drawPixel(cursor_x + xo + xx, cursor_y + yo + yy, textcolor);
    71c4:	ldrh	r2, [r4, #38]	; 0x26
    71c6:	add.w	ip, lr, r8
    71ca:	ldr	r1, [sp, #24]
    71cc:	mov	r0, r4
    71ce:	ldrh.w	r3, [r4, #74]	; 0x4a
    71d2:	add.w	lr, r2, r1
    71d6:	ldr	r1, [sp, #8]
    71d8:	ldr	r2, [sp, #12]
    71da:	add	r1, ip
    71dc:	add	r2, lr
    71de:	sxth	r1, r1
    71e0:	sxth	r2, r2
    71e2:	bl	439c <ILI9341_t3n::drawPixel(short, short, unsigned short)>
    71e6:	movs	r2, #1
    71e8:	ldrsh.w	lr, [r4, #36]	; 0x24
          xCount = 2;
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else {
          xCount = 1;
    71ec:	mov	r3, r2
    71ee:	b.n	700e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2fe>

    if (xo < 0) {
      // Unusual character that goes back into previous character
      // Serial.printf("GFX Font char XO < 0: %c %d %d %u %u %u\n", c, xo, yo,
      // w, h, glyph->xAdvance );
      x_start += xo * textsize_x;
    71f0:	ldr	r3, [sp, #44]	; 0x2c
    71f2:	str	r3, [sp, #28]
      x_left_fill = 0; // Don't need to fill anything here...
    71f4:	movs	r3, #0
    71f6:	str	r3, [sp, #44]	; 0x2c
    71f8:	b.n	6dd4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xc4>
    71fa:	add	r5, r8
    71fc:	adds	r3, r5, #1
    71fe:	sxth	r3, r3
    7200:	str	r3, [sp, #8]
        }
        pfbPixel_row += _width;
        y++;
      }
      // Now lets output all of the pixels for each of the rows..
      for (yy = 0; (yy < h) && (y < _displayclipy2); yy++) {
    7202:	ldr	r3, [sp, #64]	; 0x40
    7204:	cmp	r3, #0
    7206:	beq.w	73b0 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6a0>
    720a:	ldrsh.w	r7, [r4, #60]	; 0x3c
    720e:	ldr	r3, [sp, #8]
    7210:	cmp	r7, r3
    7212:	ble.w	73b0 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6a0>
    7216:	ldrb.w	r3, [r4, #89]	; 0x59
    721a:	ldr	r6, [sp, #44]	; 0x2c
      uint16_t *pfbPixel;
      // First lets fill in the top parts above the actual rectangle...
      while (y_top_fill--) {
        pfbPixel = pfbPixel_row;
        if ((y >= _displayclipy1) && (y < _displayclipy2)) {
          for (int16_t xx = x_start; xx < x_end; xx++) {
    721c:	movs	r0, #0
    721e:	ldr	r5, [sp, #40]	; 0x28
    7220:	uxth	r2, r6
    7222:	str	r0, [sp, #80]	; 0x50
    7224:	str	r0, [sp, #24]
    7226:	add.w	r8, r5, #1
    722a:	subs	r2, #1
    722c:	str	r0, [sp, #48]	; 0x30
    722e:	ldr	r0, [sp, #28]
    7230:	sxth.w	r8, r8
    7234:	ldr	r5, [sp, #8]
    7236:	subs	r2, r2, r0
    7238:	str.w	fp, [sp, #12]
    723c:	ldr.w	lr, [sp, #20]
    7240:	mov	fp, r8
    7242:	uxth	r2, r2
    7244:	mov	r8, r6
    7246:	str	r5, [sp, #44]	; 0x2c
    7248:	adds	r2, #1
    724a:	lsls	r2, r2, #1
    724c:	str	r2, [sp, #72]	; 0x48
      // Now lets output all of the pixels for each of the rows..
      for (yy = 0; (yy < h) && (y < _displayclipy2); yy++) {
        uint16_t bo_save = bo;
        uint8_t bit_save = bit;
        uint8_t bits_save = bits;
        for (uint8_t yts = 0; (yts < textsize_y) && (y < _displayclipy2);
    724e:	cmp	r3, #0
    7250:	beq.w	7470 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x760>
    7254:	ldr	r2, [sp, #8]
    7256:	cmp	r7, r2
    7258:	ble.w	73ac <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x69c>
    725c:	ldr	r2, [sp, #24]
    725e:	ldr	r0, [sp, #36]	; 0x24
    7260:	add.w	r9, r2, r0
    7264:	uxtb.w	r9, r9
          // need to repeat the stuff for each row...
          bo = bo_save;
          bit = bit_save;
          bits = bits_save;
          x = x_start;
          if (y >= _displayclipy1) {
    7268:	ldrsh.w	r2, [r4, #56]	; 0x38
    726c:	ldr	r0, [sp, #8]
    726e:	cmp	r2, r0
    7270:	bgt.w	7458 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x748>
            while (x < x_left_fill) {
    7274:	ldr	r3, [sp, #28]
    7276:	ldr	r2, [sp, #12]
    7278:	cmp	r3, r8
    727a:	bge.w	74a0 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x790>
    727e:	ldr	r3, [sp, #28]
              if ((x >= _displayclipx1) && (x < _displayclipx2)) {
    7280:	ldrsh.w	r0, [r4, #54]	; 0x36
    7284:	adds	r1, r3, #1
    7286:	cmp	r0, r3
    7288:	bgt.n	72aa <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x59a>
    728a:	ldrsh.w	r0, [r4, #58]	; 0x3a
    728e:	cmp	r0, r3
    7290:	ble.n	72aa <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x59a>
                if ((x >= _gfx_last_char_x_write) ||
    7292:	ldrsh.w	r0, [r4, #132]	; 0x84
    7296:	cmp	r0, r3
    7298:	ble.n	72a4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x594>
    729a:	ldrh	r0, [r2, #0]
    729c:	ldrh.w	r3, [r4, #134]	; 0x86
    72a0:	cmp	r0, r3
    72a2:	beq.n	72aa <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x59a>
                    (*pfbPixel != _gfx_last_char_textcolor))
                  *pfbPixel = textbgcolor;
    72a4:	ldrh.w	r3, [r4, #76]	; 0x4c
    72a8:	strh	r3, [r2, #0]
    72aa:	sxth	r3, r1
              }
              pfbPixel++;
    72ac:	adds	r2, #2
          bo = bo_save;
          bit = bit_save;
          bits = bits_save;
          x = x_start;
          if (y >= _displayclipy1) {
            while (x < x_left_fill) {
    72ae:	cmp	r8, r3
    72b0:	bne.n	7280 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x570>
    72b2:	ldr	r3, [sp, #12]
                if ((x >= _gfx_last_char_x_write) ||
                    (*pfbPixel != _gfx_last_char_textcolor))
                  *pfbPixel = textbgcolor;
              }
              pfbPixel++;
              x++;
    72b4:	mov	r0, r8
    72b6:	ldr	r2, [sp, #72]	; 0x48
    72b8:	adds	r2, r3, r2
            }
            for (xx = 0; xx < w; xx++) {
    72ba:	ldr	r3, [sp, #36]	; 0x24
    72bc:	cmp	r3, #0
    72be:	beq.w	7494 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x784>
    72c2:	str.w	fp, [sp, #60]	; 0x3c
    72c6:	ldr	r3, [sp, #24]
    72c8:	ldr	r5, [sp, #48]	; 0x30
    72ca:	ldr.w	ip, [sp, #32]
    72ce:	ldrb.w	r1, [r4, #88]	; 0x58
    72d2:	ldr.w	fp, [sp, #16]
    72d6:	str.w	r9, [sp, #52]	; 0x34
    72da:	str.w	r8, [sp, #56]	; 0x38
              if (!(bit++ & 7)) {
    72de:	adds	r6, r3, #1
    72e0:	lsls	r7, r3, #29
    72e2:	uxtb	r6, r6
    72e4:	bne.n	72f2 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x5e2>
                bits = bitmap[bo++];
    72e6:	add.w	r3, ip, #1
    72ea:	ldrb.w	r5, [fp, ip]
    72ee:	uxth.w	ip, r3
              }
              for (uint8_t xts = 0; xts < textsize_x; xts++) {
    72f2:	cbz	r1, 7346 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x636>
    72f4:	mov	r3, r0
                if ((x >= _displayclipx1) && (x < _displayclipx2)) {
                  if (bits & 0x80)
    72f6:	sxtb	r7, r5
            for (xx = 0; xx < w; xx++) {
              if (!(bit++ & 7)) {
                bits = bitmap[bo++];
              }
              for (uint8_t xts = 0; xts < textsize_x; xts++) {
                if ((x >= _displayclipx1) && (x < _displayclipx2)) {
    72f8:	ldrsh.w	r8, [r4, #54]	; 0x36
    72fc:	cmp	r8, r3
    72fe:	bgt.n	7330 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x620>
    7300:	ldrsh.w	r8, [r4, #58]	; 0x3a
    7304:	cmp	r8, r3
    7306:	ble.n	7330 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x620>
                  if (bits & 0x80)
    7308:	cmp	r7, #0
    730a:	blt.w	744c <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x73c>
                    *pfbPixel = textcolor;
                  else if (x >= x_offset_cursor) {
    730e:	cmp	lr, r3
    7310:	bgt.n	7330 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x620>
                    if ((x >= _gfx_last_char_x_write) ||
    7312:	ldrsh.w	r8, [r4, #132]	; 0x84
    7316:	cmp	r8, r3
    7318:	ble.n	7326 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x616>
    731a:	ldrh.w	sl, [r2]
    731e:	ldrh.w	r8, [r4, #134]	; 0x86
    7322:	cmp	sl, r8
    7324:	beq.n	7330 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x620>
                        (*pfbPixel != _gfx_last_char_textcolor))
                      *pfbPixel = textbgcolor;
    7326:	ldrh.w	r1, [r4, #76]	; 0x4c
    732a:	strh	r1, [r2, #0]
    732c:	ldrb.w	r1, [r4, #88]	; 0x58
    7330:	adds	r3, #1
                  }
                }
                pfbPixel++;
    7332:	adds	r2, #2
    7334:	uxth	r3, r3
            }
            for (xx = 0; xx < w; xx++) {
              if (!(bit++ & 7)) {
                bits = bitmap[bo++];
              }
              for (uint8_t xts = 0; xts < textsize_x; xts++) {
    7336:	rsb	r8, r0, r3
    733a:	sxth	r3, r3
    733c:	uxtb.w	r8, r8
    7340:	cmp	r1, r8
    7342:	bhi.n	72f8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x5e8>
    7344:	mov	r0, r3
                  }
                }
                pfbPixel++;
                x++; // remember our logical position...
              }
              bits <<= 1;
    7346:	lsls	r5, r5, #1
                  *pfbPixel = textbgcolor;
              }
              pfbPixel++;
              x++;
            }
            for (xx = 0; xx < w; xx++) {
    7348:	cmp	r6, r9
    734a:	mov	r3, r6
                  }
                }
                pfbPixel++;
                x++; // remember our logical position...
              }
              bits <<= 1;
    734c:	uxtb	r5, r5
                  *pfbPixel = textbgcolor;
              }
              pfbPixel++;
              x++;
            }
            for (xx = 0; xx < w; xx++) {
    734e:	bne.n	72de <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x5ce>
    7350:	ldr.w	r8, [sp, #56]	; 0x38
    7354:	ldr.w	fp, [sp, #60]	; 0x3c
                x++; // remember our logical position...
              }
              bits <<= 1;
            }
            // Fill in any additional bg colors to right of our output
            while (x++ < x_end) {
    7358:	ldr	r1, [sp, #40]	; 0x28
    735a:	adds	r3, r0, #1
    735c:	cmp	r1, r0
    735e:	sxth	r3, r3
    7360:	ble.n	737c <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x66c>
              if (x >= _displayclipx1) {
    7362:	ldrsh.w	r0, [r4, #54]	; 0x36
    7366:	adds	r1, r3, #1
    7368:	cmp	r0, r3
    736a:	sxth	r3, r1
    736c:	bgt.n	7374 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x664>
                *pfbPixel = textbgcolor;
    736e:	ldrh.w	r1, [r4, #76]	; 0x4c
    7372:	strh	r1, [r2, #0]
                x++; // remember our logical position...
              }
              bits <<= 1;
            }
            // Fill in any additional bg colors to right of our output
            while (x++ < x_end) {
    7374:	cmp	fp, r3
              if (x >= _displayclipx1) {
                *pfbPixel = textbgcolor;
              }
              pfbPixel++;
    7376:	add.w	r2, r2, #2
                x++; // remember our logical position...
              }
              bits <<= 1;
            }
            // Fill in any additional bg colors to right of our output
            while (x++ < x_end) {
    737a:	bne.n	7362 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x652>
    737c:	ldrsh.w	r1, [r4, #32]
    7380:	ldrb.w	r3, [r4, #89]	; 0x59
    7384:	ldr	r0, [sp, #8]
              }
              pfbPixel++;
            }
          }
          y++; // remember which row we just output
          pfbPixel_row += _width;
    7386:	ldr	r2, [sp, #12]
    7388:	adds	r0, #1
    738a:	add.w	r2, r2, r1, lsl #1
    738e:	uxth	r0, r0
    7390:	str	r2, [sp, #12]
      // Now lets output all of the pixels for each of the rows..
      for (yy = 0; (yy < h) && (y < _displayclipy2); yy++) {
        uint16_t bo_save = bo;
        uint8_t bit_save = bit;
        uint8_t bits_save = bits;
        for (uint8_t yts = 0; (yts < textsize_y) && (y < _displayclipy2);
    7392:	ldr	r2, [sp, #44]	; 0x2c
    7394:	subs	r2, r0, r2
    7396:	sxth	r0, r0
    7398:	uxtb	r2, r2
    739a:	str	r0, [sp, #8]
    739c:	cmp	r3, r2
    739e:	bls.n	7464 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x754>
    73a0:	ldrsh.w	r2, [r4, #60]	; 0x3c
    73a4:	ldr	r0, [sp, #8]
    73a6:	cmp	r2, r0
    73a8:	bgt.w	7268 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x558>
    73ac:	ldr.w	fp, [sp, #12]
    73b0:	ldrh.w	r2, [r4, #76]	; 0x4c
          y++; // remember which row we just output
          pfbPixel_row += _width;
        }
      }
      // And output any more rows below us...
      while (y < y_end) {
    73b4:	ldr	r3, [sp, #8]
    73b6:	ldr	r0, [sp, #76]	; 0x4c
    73b8:	cmp	r3, r0
    73ba:	bge.n	741c <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x70c>
    73bc:	ldr.w	ip, [sp, #28]
    73c0:	ldr	r7, [sp, #20]
    73c2:	ldr	r6, [sp, #40]	; 0x28
    73c4:	ldr.w	lr, [sp, #8]
        if (y >= _displayclipy1) {
    73c8:	ldrsh.w	r3, [r4, #56]	; 0x38
    73cc:	cmp	r3, lr
    73ce:	bgt.n	740a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6fa>
          pfbPixel = pfbPixel_row;
          for (int16_t xx = x_start; xx < x_end; xx++) {
    73d0:	cmp	ip, r6
    73d2:	bge.n	740a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6fa>
    73d4:	mov	r3, ip
    73d6:	mov	r1, fp
            if ((xx >= _displayclipx1) && (xx >= x_offset_cursor)) {
    73d8:	ldrsh.w	r5, [r4, #54]	; 0x36
    73dc:	adds	r0, r3, #1
    73de:	cmp	r5, r3
    73e0:	bgt.n	73fe <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6ee>
    73e2:	cmp	r7, r3
    73e4:	bgt.n	73fe <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6ee>
              if ((xx >= _gfx_last_char_x_write) ||
    73e6:	ldrsh.w	r5, [r4, #132]	; 0x84
    73ea:	cmp	r5, r3
    73ec:	ble.n	73f8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6e8>
    73ee:	ldrh	r5, [r1, #0]
    73f0:	ldrh.w	r3, [r4, #134]	; 0x86
    73f4:	cmp	r5, r3
    73f6:	beq.n	73fe <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6ee>
                  (*pfbPixel != _gfx_last_char_textcolor))
                *pfbPixel = textbgcolor;
    73f8:	strh	r2, [r1, #0]
    73fa:	ldrh.w	r2, [r4, #76]	; 0x4c
    73fe:	sxth	r3, r0
            }
            pfbPixel++;
    7400:	adds	r1, #2
      }
      // And output any more rows below us...
      while (y < y_end) {
        if (y >= _displayclipy1) {
          pfbPixel = pfbPixel_row;
          for (int16_t xx = x_start; xx < x_end; xx++) {
    7402:	cmp	r6, r3
    7404:	bne.n	73d8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6c8>
    7406:	ldrsh.w	r1, [r4, #32]
    740a:	add.w	lr, lr, #1
          y++; // remember which row we just output
          pfbPixel_row += _width;
        }
      }
      // And output any more rows below us...
      while (y < y_end) {
    740e:	ldr	r3, [sp, #76]	; 0x4c
                *pfbPixel = textbgcolor;
            }
            pfbPixel++;
          }
        }
        pfbPixel_row += _width;
    7410:	add.w	fp, fp, r1, lsl #1
    7414:	sxth.w	lr, lr
          y++; // remember which row we just output
          pfbPixel_row += _width;
        }
      }
      // And output any more rows below us...
      while (y < y_end) {
    7418:	cmp	r3, lr
    741a:	bne.n	73c8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6b8>
      endSPITransaction();
    }
    // Save away info about this last char
    _gfx_c_last = c;
    _gfx_last_cursor_x = cursor_x + _originx;
    _gfx_last_cursor_y = cursor_y + _originy;
    741c:	ldrh	r0, [r4, #38]	; 0x26
      }
      writecommand_last(ILI9341_NOP);
      endSPITransaction();
    }
    // Save away info about this last char
    _gfx_c_last = c;
    741e:	ldr	r5, [sp, #84]	; 0x54
    _gfx_last_cursor_x = cursor_x + _originx;
    7420:	ldrh.w	ip, [r4, #36]	; 0x24
    7424:	ldrh	r1, [r4, #50]	; 0x32
    _gfx_last_cursor_y = cursor_y + _originy;
    7426:	ldrh	r3, [r4, #52]	; 0x34
      writecommand_last(ILI9341_NOP);
      endSPITransaction();
    }
    // Save away info about this last char
    _gfx_c_last = c;
    _gfx_last_cursor_x = cursor_x + _originx;
    7428:	add	r1, ip
      }
      writecommand_last(ILI9341_NOP);
      endSPITransaction();
    }
    // Save away info about this last char
    _gfx_c_last = c;
    742a:	str	r5, [r4, #124]	; 0x7c
    _gfx_last_cursor_x = cursor_x + _originx;
    _gfx_last_cursor_y = cursor_y + _originy;
    742c:	add	r3, r0
    _gfx_last_char_x_write = x_end;
    742e:	ldrh.w	r5, [sp, #40]	; 0x28
    _gfx_last_char_textcolor = textcolor;
    7432:	ldrh.w	r0, [r4, #74]	; 0x4a
    }
    // Save away info about this last char
    _gfx_c_last = c;
    _gfx_last_cursor_x = cursor_x + _originx;
    _gfx_last_cursor_y = cursor_y + _originy;
    _gfx_last_char_x_write = x_end;
    7436:	strh.w	r5, [r4, #132]	; 0x84
    _gfx_last_char_textcolor = textcolor;
    _gfx_last_char_textbgcolor = textbgcolor;
    743a:	strh.w	r2, [r4, #136]	; 0x88
      writecommand_last(ILI9341_NOP);
      endSPITransaction();
    }
    // Save away info about this last char
    _gfx_c_last = c;
    _gfx_last_cursor_x = cursor_x + _originx;
    743e:	strh.w	r1, [r4, #128]	; 0x80
    _gfx_last_cursor_y = cursor_y + _originy;
    7442:	strh.w	r3, [r4, #130]	; 0x82
    _gfx_last_char_x_write = x_end;
    _gfx_last_char_textcolor = textcolor;
    7446:	strh.w	r0, [r4, #134]	; 0x86
    744a:	b.n	70f6 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x3e6>
                bits = bitmap[bo++];
              }
              for (uint8_t xts = 0; xts < textsize_x; xts++) {
                if ((x >= _displayclipx1) && (x < _displayclipx2)) {
                  if (bits & 0x80)
                    *pfbPixel = textcolor;
    744c:	ldrh.w	r1, [r4, #74]	; 0x4a
    7450:	strh	r1, [r2, #0]
    7452:	ldrb.w	r1, [r4, #88]	; 0x58
    7456:	b.n	7330 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x620>
    7458:	ldr	r2, [sp, #24]
    745a:	ldr	r5, [sp, #48]	; 0x30
    745c:	str	r2, [sp, #52]	; 0x34
    745e:	ldr.w	ip, [sp, #32]
    7462:	b.n	7384 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x674>
    7464:	ldr	r2, [sp, #52]	; 0x34
    7466:	str	r5, [sp, #48]	; 0x30
    7468:	str	r2, [sp, #24]
    746a:	str.w	ip, [sp, #32]
    746e:	str	r0, [sp, #44]	; 0x2c
        }
        pfbPixel_row += _width;
        y++;
      }
      // Now lets output all of the pixels for each of the rows..
      for (yy = 0; (yy < h) && (y < _displayclipy2); yy++) {
    7470:	ldr	r2, [sp, #80]	; 0x50
    7472:	ldr	r0, [sp, #64]	; 0x40
    7474:	adds	r2, #1
    7476:	uxtb	r2, r2
    7478:	cmp	r0, r2
    747a:	str	r2, [sp, #80]	; 0x50
    747c:	bls.n	748a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x77a>
    747e:	ldrsh.w	r7, [r4, #60]	; 0x3c
    7482:	ldr	r2, [sp, #8]
    7484:	cmp	r7, r2
    7486:	bgt.w	724e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x53e>
    748a:	ldr.w	fp, [sp, #12]
    748e:	ldrh.w	r2, [r4, #76]	; 0x4c
    7492:	b.n	73b4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6a4>
                  *pfbPixel = textbgcolor;
              }
              pfbPixel++;
              x++;
            }
            for (xx = 0; xx < w; xx++) {
    7494:	ldr	r3, [sp, #24]
    7496:	ldr	r5, [sp, #48]	; 0x30
    7498:	str	r3, [sp, #52]	; 0x34
    749a:	ldr.w	ip, [sp, #32]
    749e:	b.n	7358 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x648>
          bo = bo_save;
          bit = bit_save;
          bits = bits_save;
          x = x_start;
          if (y >= _displayclipy1) {
            while (x < x_left_fill) {
    74a0:	mov	r0, r3
    74a2:	b.n	72ba <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x5aa>
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    74a4:	movs	r3, #7
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    74a6:	ldr	r2, [r4, #20]
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    74a8:	ldr	r0, [r4, #8]
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    74aa:	str	r3, [sp, #92]	; 0x5c
    74ac:	add	r3, sp, #96	; 0x60
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    74ae:	str	r2, [sp, #88]	; 0x58
    74b0:	ldmdb	r3, {r1, r2}
    74b4:	bl	2d30 <SPIClass::beginTransaction(SPISettings)>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
    74b8:	ldr.w	r3, [r4, #172]	; 0xac
    74bc:	cmp	r3, #0
    74be:	beq.w	7ab2 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xda2>
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    74c2:	ldr.w	r3, [r4, #152]	; 0x98
    74c6:	cbz	r3, 74d0 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x7c0>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
    74c8:	ldr.w	r2, [r4, #148]	; 0x94
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
    74cc:	str.w	r2, [r3, #136]	; 0x88
      // Serial.printf("    SPI (%d %d) (%d %d)\n", x_start, y_start, x_end,
      // y_end);Serial.flush();
      // compute the actual region we will output given
      beginSPITransaction(_SPI_CLOCK);

      setAddr((x_start >= _displayclipx1) ? x_start : _displayclipx1,
    74d0:	ldrsh.w	r5, [r4, #54]	; 0x36
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    74d4:	mov	r0, r4
    74d6:	ldr	r3, [sp, #28]
      //		(y_start >= _displayclipy1) ? y_start : _displayclipy1,
      //		x_end  - 1,  y_end - 1);
      // First lets fill in the top parts above the actual rectangle...
      // Serial.printf("    y_top_fill %d x_left_fill %d\n", y_top_fill,
      // x_left_fill);
      while (y_top_fill--) {
    74d8:	add.w	r7, sl, #4294967295
      // y_end);Serial.flush();
      // compute the actual region we will output given
      beginSPITransaction(_SPI_CLOCK);

      setAddr((x_start >= _displayclipx1) ? x_start : _displayclipx1,
              (y_start >= _displayclipy1) ? y_start : _displayclipy1, x_end - 1,
    74dc:	ldrsh.w	r6, [r4, #56]	; 0x38
      // Serial.printf("    SPI (%d %d) (%d %d)\n", x_start, y_start, x_end,
      // y_end);Serial.flush();
      // compute the actual region we will output given
      beginSPITransaction(_SPI_CLOCK);

      setAddr((x_start >= _displayclipx1) ? x_start : _displayclipx1,
    74e0:	cmp	r3, r5
    74e2:	ldr	r3, [sp, #8]
    74e4:	ldr.w	r1, [r4, #164]	; 0xa4
      //		(y_start >= _displayclipy1) ? y_start : _displayclipy1,
      //		x_end  - 1,  y_end - 1);
      // First lets fill in the top parts above the actual rectangle...
      // Serial.printf("    y_top_fill %d x_left_fill %d\n", y_top_fill,
      // x_left_fill);
      while (y_top_fill--) {
    74e8:	uxtb	r7, r7
      // Serial.printf("    SPI (%d %d) (%d %d)\n", x_start, y_start, x_end,
      // y_end);Serial.flush();
      // compute the actual region we will output given
      beginSPITransaction(_SPI_CLOCK);

      setAddr((x_start >= _displayclipx1) ? x_start : _displayclipx1,
    74ea:	ite	ge
    74ec:	ldrhge.w	r5, [sp, #28]
    74f0:	uxthlt	r5, r5
    74f2:	cmp	r3, r6
    74f4:	orr.w	r1, r1, #7
    74f8:	ite	lt
    74fa:	uxthlt	r6, r6
    74fc:	movge	r6, r8
    74fe:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    7502:	movs	r2, #42	; 0x2a
    7504:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    7506:	mov	r0, r4
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    7508:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    750a:	ldrb.w	r3, [r4, #146]	; 0x92
    750e:	adds	r3, #1
    7510:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    7514:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    7518:	ldr.w	r3, [r4, #168]	; 0xa8
    751c:	ldr	r1, [pc, #708]	; (77e4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xad4>)
    751e:	mov	r0, r4
    7520:	orrs	r1, r3
    7522:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    7526:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    7528:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    752a:	str	r5, [r3, #100]	; 0x64
    pending_rx_count++; //
    752c:	ldrb.w	r3, [r4, #146]	; 0x92
    7530:	adds	r3, #1
    7532:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    7536:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    753a:	ldr.w	r3, [r4, #168]	; 0xa8
    753e:	ldr	r1, [pc, #676]	; (77e4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xad4>)
    7540:	mov	r0, r4
    7542:	orrs	r1, r3
    7544:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    7548:	ldr	r3, [sp, #40]	; 0x28
    pending_rx_count++; //
    waitFifoNotFull();
    754a:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    754c:	subs	r2, r3, #1
    754e:	ldr	r3, [r4, #28]
    7550:	uxth	r2, r2
    7552:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    7554:	ldrb.w	r3, [r4, #146]	; 0x92
    7558:	adds	r3, #1
    755a:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    755e:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    7562:	ldr.w	r1, [r4, #164]	; 0xa4
    7566:	mov	r0, r4
    7568:	orr.w	r1, r1, #7
    756c:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    7570:	movs	r2, #43	; 0x2b
    7572:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    7574:	mov	r0, r4
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    7576:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    7578:	ldrb.w	r3, [r4, #146]	; 0x92
    757c:	adds	r3, #1
    757e:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    7582:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    7586:	ldr.w	r3, [r4, #168]	; 0xa8
    758a:	ldr	r1, [pc, #600]	; (77e4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xad4>)
    758c:	mov	r0, r4
    758e:	orrs	r1, r3
    7590:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    7594:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    7596:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    7598:	str	r6, [r3, #100]	; 0x64
    pending_rx_count++; //
    759a:	ldrb.w	r3, [r4, #146]	; 0x92
    759e:	adds	r3, #1
    75a0:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    75a4:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    75a8:	ldr.w	r3, [r4, #168]	; 0xa8
    75ac:	ldr	r1, [pc, #564]	; (77e4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xad4>)
    75ae:	mov	r0, r4
    75b0:	orrs	r1, r3
    75b2:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    75b6:	ldr	r3, [sp, #76]	; 0x4c
    75b8:	ldr	r2, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    75ba:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    75bc:	subs	r3, #1
    75be:	uxth	r3, r3
    75c0:	str	r3, [r2, #100]	; 0x64
    pending_rx_count++; //
    75c2:	ldrb.w	r3, [r4, #146]	; 0x92
    75c6:	adds	r3, #1
    75c8:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    75cc:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    }
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    75d0:	ldr.w	r1, [r4, #164]	; 0xa4
    75d4:	mov	r0, r4
    75d6:	orr.w	r1, r1, #7
    75da:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    75de:	ldr	r3, [r4, #28]
    75e0:	movs	r2, #44	; 0x2c
    pending_rx_count++; //
    waitFifoNotFull();
    75e2:	mov	r0, r4
  }

  // BUGBUG:: currently assumming we only have CS_0 as valid CS
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
    _pimxrt_spi->TDR = c;
    75e4:	str	r2, [r3, #100]	; 0x64
    pending_rx_count++; //
    75e6:	ldrb.w	r3, [r4, #146]	; 0x92
    75ea:	adds	r3, #1
    75ec:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    75f0:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
      //		(y_start >= _displayclipy1) ? y_start : _displayclipy1,
      //		x_end  - 1,  y_end - 1);
      // First lets fill in the top parts above the actual rectangle...
      // Serial.printf("    y_top_fill %d x_left_fill %d\n", y_top_fill,
      // x_left_fill);
      while (y_top_fill--) {
    75f4:	ldr	r3, [sp, #12]
    75f6:	cmp	r3, #0
    75f8:	beq.n	768c <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x97c>
    75fa:	uxth	r7, r7
    75fc:	add.w	r9, r8, #1
    7600:	ldr.w	fp, [sp, #40]	; 0x28
    7604:	add	r9, r7
    7606:	ldr	r6, [sp, #8]
    7608:	sxth.w	r9, r9
        if ((y >= _displayclipy1) && (y < _displayclipy2)) {
    760c:	ldrsh.w	r3, [r4, #56]	; 0x38
    7610:	cmp	r3, r6
    7612:	bgt.n	767a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x96a>
    7614:	ldrsh.w	r3, [r4, #60]	; 0x3c
    7618:	cmp	r3, r6
    761a:	ble.n	767a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x96a>
          for (int16_t xx = x_start; xx < x_end; xx++) {
    761c:	ldr	r5, [sp, #28]
    761e:	cmp	r5, fp
    7620:	blt.n	7654 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x944>
    7622:	b.n	767a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x96a>
            if (xx >= _displayclipx1) {
              writedata16_cont(gfxFontLastCharPosFG(xx, y)
    7624:	ldrh.w	sl, [r4, #134]	; 0x86
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    7628:	ldr.w	r3, [r4, #168]	; 0xa8
    762c:	mov	r0, r4
    762e:	ldr	r1, [pc, #436]	; (77e4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xad4>)
    7630:	orrs	r1, r3
    7632:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    7636:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    7638:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    763a:	str.w	sl, [r3, #100]	; 0x64
    pending_rx_count++; //
    763e:	ldrb.w	r3, [r4, #146]	; 0x92
    7642:	adds	r3, #1
    7644:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    7648:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    764c:	adds	r5, #1
    764e:	sxth	r5, r5
      // First lets fill in the top parts above the actual rectangle...
      // Serial.printf("    y_top_fill %d x_left_fill %d\n", y_top_fill,
      // x_left_fill);
      while (y_top_fill--) {
        if ((y >= _displayclipy1) && (y < _displayclipy2)) {
          for (int16_t xx = x_start; xx < x_end; xx++) {
    7650:	cmp	fp, r5
    7652:	ble.n	767a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x96a>
            if (xx >= _displayclipx1) {
    7654:	ldrsh.w	r3, [r4, #54]	; 0x36
              writedata16_cont(gfxFontLastCharPosFG(xx, y)
    7658:	mov	r2, r6
    765a:	mov	r1, r5
    765c:	mov	r0, r4
      // Serial.printf("    y_top_fill %d x_left_fill %d\n", y_top_fill,
      // x_left_fill);
      while (y_top_fill--) {
        if ((y >= _displayclipy1) && (y < _displayclipy2)) {
          for (int16_t xx = x_start; xx < x_end; xx++) {
            if (xx >= _displayclipx1) {
    765e:	cmp	r3, r5
    7660:	bgt.n	764c <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x93c>
              writedata16_cont(gfxFontLastCharPosFG(xx, y)
    7662:	bl	3d28 <ILI9341_t3n::gfxFontLastCharPosFG(short, short)>
    7666:	cmp	r0, #0
    7668:	bne.n	7624 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x914>
    766a:	ldr	r3, [sp, #20]
    766c:	cmp	r3, r5
    766e:	ite	gt
    7670:	ldrhgt.w	sl, [r4, #136]	; 0x88
    7674:	ldrhle.w	sl, [r4, #76]	; 0x4c
    7678:	b.n	7628 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x918>
    767a:	adds	r6, #1
    767c:	sxth	r6, r6
      //		(y_start >= _displayclipy1) ? y_start : _displayclipy1,
      //		x_end  - 1,  y_end - 1);
      // First lets fill in the top parts above the actual rectangle...
      // Serial.printf("    y_top_fill %d x_left_fill %d\n", y_top_fill,
      // x_left_fill);
      while (y_top_fill--) {
    767e:	cmp	r6, r9
    7680:	bne.n	760c <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x8fc>
    7682:	add.w	r3, r8, r7
    7686:	adds	r3, #1
    7688:	sxth	r3, r3
    768a:	str	r3, [sp, #8]
        }
        y++;
      }
      // Serial.println("    After top fill"); Serial.flush();
      // Now lets output all of the pixels for each of the rows..
      for (yy = 0; (yy < h) && (y < _displayclipy2); yy++) {
    768c:	ldr	r3, [sp, #64]	; 0x40
    768e:	cmp	r3, #0
    7690:	beq.n	7764 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xa54>
    7692:	ldrsh.w	r7, [r4, #60]	; 0x3c
    7696:	ldr	r3, [sp, #8]
    7698:	cmp	r7, r3
    769a:	ble.n	7764 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xa54>
    769c:	ldr	r3, [sp, #28]
    769e:	ldr	r1, [sp, #44]	; 0x2c
    76a0:	cmp	r3, r1
    76a2:	it	lt
    76a4:	movlt	r3, r1
    76a6:	mov	r2, r3
    76a8:	movs	r3, #0
    76aa:	sxth	r2, r2
    76ac:	mov	r1, r3
    76ae:	str	r3, [sp, #60]	; 0x3c
    76b0:	ldrb.w	r3, [r4, #89]	; 0x59
    76b4:	str	r2, [sp, #56]	; 0x38
    76b6:	str	r1, [sp, #52]	; 0x34
    76b8:	str	r1, [sp, #48]	; 0x30
        uint16_t bo_save = bo;
        uint8_t bit_save = bit;
        uint8_t bits_save = bits;
        for (uint8_t yts = 0; (yts < textsize_y) && (y < _displayclipy2);
    76ba:	cmp	r3, #0
    76bc:	beq.w	7a7e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xd6e>
    76c0:	ldr	r1, [sp, #8]
    76c2:	cmp	r7, r1
    76c4:	ble.w	7aac <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xd9c>
    76c8:	mov	sl, r1
          // need to repeat the stuff for each row...
          bo = bo_save;
          bit = bit_save;
          bits = bits_save;
          x = x_start;
          if (y >= _displayclipy1) {
    76ca:	ldrsh.w	r2, [r4, #56]	; 0x38
    76ce:	cmp	r2, sl
    76d0:	bgt.n	7734 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xa24>
            while (x < x_left_fill) {
    76d2:	ldr	r3, [sp, #28]
    76d4:	ldr	r2, [sp, #44]	; 0x2c
    76d6:	cmp	r3, r2
    76d8:	bge.w	77e8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xad8>
    76dc:	ldr	r6, [sp, #28]
    76de:	ldr	r5, [sp, #44]	; 0x2c
    76e0:	b.n	7710 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xa00>
              if ((x >= _displayclipx1) && (x < _displayclipx2)) {
                // Don't need to check if we are in previous char as in this
                // case x_left_fill is set to 0...
                writedata16_cont(gfxFontLastCharPosFG(x, y)
    76e2:	ldrh.w	r7, [r4, #134]	; 0x86
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    76e6:	ldr.w	r3, [r4, #168]	; 0xa8
    76ea:	mov	r0, r4
    76ec:	ldr	r1, [pc, #244]	; (77e4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xad4>)
    76ee:	orrs	r1, r3
    76f0:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    76f4:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    76f6:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    76f8:	str	r7, [r3, #100]	; 0x64
    pending_rx_count++; //
    76fa:	ldrb.w	r3, [r4, #146]	; 0x92
    76fe:	adds	r3, #1
    7700:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    7704:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    7708:	adds	r6, #1
    770a:	sxth	r6, r6
          bo = bo_save;
          bit = bit_save;
          bits = bits_save;
          x = x_start;
          if (y >= _displayclipy1) {
            while (x < x_left_fill) {
    770c:	cmp	r5, r6
    770e:	ble.n	77e8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xad8>
              if ((x >= _displayclipx1) && (x < _displayclipx2)) {
    7710:	ldrsh.w	r3, [r4, #54]	; 0x36
    7714:	cmp	r3, r6
    7716:	bgt.n	7708 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x9f8>
    7718:	ldrsh.w	r3, [r4, #58]	; 0x3a
                // Don't need to check if we are in previous char as in this
                // case x_left_fill is set to 0...
                writedata16_cont(gfxFontLastCharPosFG(x, y)
    771c:	mov	r2, sl
    771e:	mov	r1, r6
    7720:	mov	r0, r4
          bit = bit_save;
          bits = bits_save;
          x = x_start;
          if (y >= _displayclipy1) {
            while (x < x_left_fill) {
              if ((x >= _displayclipx1) && (x < _displayclipx2)) {
    7722:	cmp	r3, r6
    7724:	ble.n	7708 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x9f8>
                // Don't need to check if we are in previous char as in this
                // case x_left_fill is set to 0...
                writedata16_cont(gfxFontLastCharPosFG(x, y)
    7726:	bl	3d28 <ILI9341_t3n::gfxFontLastCharPosFG(short, short)>
    772a:	cmp	r0, #0
    772c:	bne.n	76e2 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x9d2>
    772e:	ldrh.w	r7, [r4, #76]	; 0x4c
    7732:	b.n	76e6 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x9d6>
    7734:	ldr	r2, [sp, #52]	; 0x34
    7736:	ldr	r6, [sp, #48]	; 0x30
    7738:	ldr.w	r9, [sp, #32]
    773c:	str	r2, [sp, #24]
    773e:	add.w	sl, sl, #1
      // Now lets output all of the pixels for each of the rows..
      for (yy = 0; (yy < h) && (y < _displayclipy2); yy++) {
        uint16_t bo_save = bo;
        uint8_t bit_save = bit;
        uint8_t bits_save = bits;
        for (uint8_t yts = 0; (yts < textsize_y) && (y < _displayclipy2);
    7742:	ldr	r2, [sp, #8]
    7744:	uxth.w	sl, sl
    7748:	rsb	r2, r2, sl
    774c:	sxth.w	sl, sl
    7750:	uxtb	r2, r2
    7752:	cmp	r3, r2
    7754:	bls.w	7a70 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xd60>
    7758:	ldrsh.w	r2, [r4, #60]	; 0x3c
    775c:	cmp	r2, sl
    775e:	bgt.n	76ca <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x9ba>
        }
        y++;
      }
      // Serial.println("    After top fill"); Serial.flush();
      // Now lets output all of the pixels for each of the rows..
      for (yy = 0; (yy < h) && (y < _displayclipy2); yy++) {
    7760:	str.w	sl, [sp, #8]
          y++; // remember which row we just output
        }
      }
      // And output any more rows below us...
      // Serial.println("    Bottom fill"); Serial.flush();
      while (y < y_end) {
    7764:	ldr	r3, [sp, #76]	; 0x4c
    7766:	ldr	r2, [sp, #8]
    7768:	cmp	r3, r2
    776a:	ble.w	7a24 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xd14>
    776e:	ldr.w	r8, [sp, #28]
    7772:	ldr	r7, [sp, #40]	; 0x28
    7774:	ldr	r6, [sp, #8]
        if (y >= _displayclipy1) {
    7776:	ldrsh.w	r3, [r4, #56]	; 0x38
    777a:	cmp	r3, r6
    777c:	bgt.w	7a18 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xd08>
          for (int16_t xx = x_start; xx < x_end; xx++) {
    7780:	cmp	r8, r7
    7782:	bge.w	7a18 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xd08>
    7786:	mov	r5, r8
    7788:	b.n	77bc <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xaac>
            if (xx >= _displayclipx1) {
              writedata16_cont(gfxFontLastCharPosFG(xx, y)
    778a:	ldrh.w	r9, [r4, #134]	; 0x86
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    778e:	ldr.w	r3, [r4, #168]	; 0xa8
    7792:	mov	r0, r4
    7794:	ldr	r1, [pc, #76]	; (77e4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xad4>)
    7796:	orrs	r1, r3
    7798:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    779c:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    779e:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    77a0:	str.w	r9, [r3, #100]	; 0x64
    pending_rx_count++; //
    77a4:	ldrb.w	r3, [r4, #146]	; 0x92
    77a8:	adds	r3, #1
    77aa:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    77ae:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    77b2:	adds	r5, #1
    77b4:	sxth	r5, r5
      }
      // And output any more rows below us...
      // Serial.println("    Bottom fill"); Serial.flush();
      while (y < y_end) {
        if (y >= _displayclipy1) {
          for (int16_t xx = x_start; xx < x_end; xx++) {
    77b6:	cmp	r7, r5
    77b8:	ble.w	7a18 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xd08>
            if (xx >= _displayclipx1) {
    77bc:	ldrsh.w	r3, [r4, #54]	; 0x36
              writedata16_cont(gfxFontLastCharPosFG(xx, y)
    77c0:	mov	r2, r6
    77c2:	mov	r1, r5
    77c4:	mov	r0, r4
      // And output any more rows below us...
      // Serial.println("    Bottom fill"); Serial.flush();
      while (y < y_end) {
        if (y >= _displayclipy1) {
          for (int16_t xx = x_start; xx < x_end; xx++) {
            if (xx >= _displayclipx1) {
    77c6:	cmp	r3, r5
    77c8:	bgt.n	77b2 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xaa2>
              writedata16_cont(gfxFontLastCharPosFG(xx, y)
    77ca:	bl	3d28 <ILI9341_t3n::gfxFontLastCharPosFG(short, short)>
    77ce:	cmp	r0, #0
    77d0:	bne.n	778a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xa7a>
    77d2:	ldr	r3, [sp, #20]
    77d4:	cmp	r3, r5
    77d6:	ite	gt
    77d8:	ldrhgt.w	r9, [r4, #136]	; 0x88
    77dc:	ldrhle.w	r9, [r4, #76]	; 0x4c
    77e0:	b.n	778e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xa7e>
    77e2:	nop
    77e4:	.word	0x0020000f
                                     ? _gfx_last_char_textcolor
                                     : textbgcolor);
              }
              x++;
            }
            for (xx = 0; xx < w; xx++) {
    77e8:	ldr	r3, [sp, #36]	; 0x24
    77ea:	cmp	r3, #0
    77ec:	beq.w	7a9c <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xd8c>
    77f0:	ldr	r2, [sp, #36]	; 0x24
    77f2:	ldr	r3, [sp, #52]	; 0x34
    77f4:	ldr.w	fp, [sp, #56]	; 0x38
    77f8:	add	r2, r3
    77fa:	ldr	r6, [sp, #48]	; 0x30
    77fc:	ldr.w	r9, [sp, #32]
    7800:	uxtb	r2, r2
    7802:	str	r2, [sp, #24]
    7804:	ldrb.w	r2, [r4, #88]	; 0x58
              if (!(bit++ & 7)) {
    7808:	adds	r7, r3, #1
    780a:	lsls	r5, r3, #29
    780c:	uxtb	r7, r7
    780e:	bne.n	781e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xb0e>
                bits = bitmap[bo++];
    7810:	add.w	r3, r9, #1
    7814:	ldr	r1, [sp, #16]
    7816:	ldrb.w	r6, [r1, r9]
    781a:	uxth.w	r9, r3
              }
              for (uint8_t xts = 0; xts < textsize_x; xts++) {
    781e:	cmp	r2, #0
    7820:	beq.n	78fc <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xbec>
    7822:	mov	r5, fp
                if ((x >= _displayclipx1) && (x < _displayclipx2)) {
                  if (bits & 0x80)
    7824:	sxtb.w	r8, r6
    7828:	str	r6, [sp, #12]
            for (xx = 0; xx < w; xx++) {
              if (!(bit++ & 7)) {
                bits = bitmap[bo++];
              }
              for (uint8_t xts = 0; xts < textsize_x; xts++) {
                if ((x >= _displayclipx1) && (x < _displayclipx2)) {
    782a:	ldrsh.w	r3, [r4, #54]	; 0x36
    782e:	cmp	r3, r5
    7830:	bgt.n	78e8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xbd8>
    7832:	ldrsh.w	r3, [r4, #58]	; 0x3a
    7836:	cmp	r3, r5
    7838:	ble.n	78e8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xbd8>
                  if (bits & 0x80)
    783a:	cmp.w	r8, #0
    783e:	blt.w	79e0 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xcd0>
                    writedata16_cont(textcolor);
                  else
                    writedata16_cont(gfxFontLastCharPosFG(x, y)
    7842:	mov	r2, sl
    7844:	mov	r1, r5
    7846:	mov	r0, r4
    7848:	bl	3d28 <ILI9341_t3n::gfxFontLastCharPosFG(short, short)>
    784c:	cmp	r0, #0
    784e:	beq.w	799e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xc8e>
    7852:	ldrh.w	r1, [r4, #134]	; 0x86
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    7856:	ldr.w	ip, [r4, #168]	; 0xa8
    785a:	ldr	r3, [pc, #620]	; (7ac8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xdb8>)
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
    785c:	ldr.w	r0, [r4, #156]	; 0x9c
    7860:	ldr	r2, [pc, #616]	; (7acc <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xdbc>)
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    7862:	orr.w	r3, ip, r3
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
    7866:	ands	r2, r0
    7868:	cmp	r3, r2
    786a:	beq.w	79dc <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xccc>
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    786e:	ldr	r6, [pc, #608]	; (7ad0 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xdc0>)
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    7870:	eor.w	r2, r3, r0
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    7874:	ands	r6, r0
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    7876:	tst.w	r2, #50331648	; 0x3000000
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    787a:	orr.w	r6, r6, r3
    787e:	str.w	r6, [r4, #156]	; 0x9c
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    7882:	beq.n	78c8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xbb8>
    7884:	ldr.w	r0, [r4, #160]	; 0xa0
    7888:	cbz	r0, 78c8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xbb8>
    788a:	ldrb.w	r6, [r4, #146]	; 0x92
    788e:	ldr	r3, [r4, #28]
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    7890:	cbz	r6, 78a6 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xb96>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    7892:	ldr	r2, [r3, #112]	; 0x70
    7894:	lsls	r2, r2, #30
    7896:	bmi.n	7890 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xb80>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    7898:	subs	r6, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    789a:	ldr	r2, [r3, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
    789c:	uxtb	r6, r6
    789e:	strb.w	r6, [r4, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    78a2:	cmp	r6, #0
    78a4:	bne.n	7892 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xb82>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    78a6:	movw	r2, #513	; 0x201
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
    78aa:	tst.w	ip, #50331648	; 0x3000000
    78ae:	str	r2, [r3, #16]
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
    78b0:	ldr.w	r2, [r4, #172]	; 0xac
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
    78b4:	beq.w	7a08 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xcf8>
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    78b8:	str.w	r0, [r2, #132]	; 0x84
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
        else
          DIRECT_WRITE_LOW(_dcport, _dcpinmask);
        _pimxrt_spi->TCR = _spi_tcr_current &
    78bc:	ldr.w	r2, [r4, #156]	; 0x9c
    78c0:	bic.w	r2, r2, #52428800	; 0x3200000
                           ~(LPSPI_TCR_PCS(3) |
                             LPSPI_TCR_CONT); // go ahead and update TCR anyway?
    78c4:	str	r2, [r3, #96]	; 0x60
    78c6:	b.n	78d2 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xbc2>
    78c8:	ldr	r3, [r4, #28]
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
        while ((_pimxrt_spi->FSR & 0x1f))
    78ca:	ldr	r2, [r3, #92]	; 0x5c
    78cc:	lsls	r0, r2, #27
    78ce:	bne.n	78ca <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xbba>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR
    78d0:	str	r6, [r3, #96]	; 0x60
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    pending_rx_count++; //
    waitFifoNotFull();
    78d2:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    78d4:	str	r1, [r3, #100]	; 0x64
    pending_rx_count++; //
    78d6:	ldrb.w	r3, [r4, #146]	; 0x92
    78da:	adds	r3, #1
    78dc:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    78e0:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    78e4:	ldrb.w	r2, [r4, #88]	; 0x58
    78e8:	adds	r5, #1
    78ea:	uxth	r5, r5
            }
            for (xx = 0; xx < w; xx++) {
              if (!(bit++ & 7)) {
                bits = bitmap[bo++];
              }
              for (uint8_t xts = 0; xts < textsize_x; xts++) {
    78ec:	rsb	r3, fp, r5
    78f0:	sxth	r5, r5
    78f2:	uxtb	r3, r3
    78f4:	cmp	r2, r3
    78f6:	bhi.n	782a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xb1a>
    78f8:	ldr	r6, [sp, #12]
    78fa:	mov	fp, r5
                                     ? _gfx_last_char_textcolor
                                     : textbgcolor);
              }
              x++;
            }
            for (xx = 0; xx < w; xx++) {
    78fc:	ldr	r1, [sp, #24]
                                               ? _gfx_last_char_textbgcolor
                                               : textbgcolor);
                }
                x++; // remember our logical position...
              }
              bits <<= 1;
    78fe:	lsls	r6, r6, #1
    7900:	mov	r3, r7
                                     ? _gfx_last_char_textcolor
                                     : textbgcolor);
              }
              x++;
            }
            for (xx = 0; xx < w; xx++) {
    7902:	cmp	r7, r1
                                               ? _gfx_last_char_textbgcolor
                                               : textbgcolor);
                }
                x++; // remember our logical position...
              }
              bits <<= 1;
    7904:	uxtb	r6, r6
                                     ? _gfx_last_char_textcolor
                                     : textbgcolor);
              }
              x++;
            }
            for (xx = 0; xx < w; xx++) {
    7906:	bne.w	7808 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xaf8>
                x++; // remember our logical position...
              }
              bits <<= 1;
            }
            // Fill in any additional bg colors to right of our output
            while (x < x_end) {
    790a:	ldr	r3, [sp, #40]	; 0x28
    790c:	cmp	r3, fp
    790e:	ble.n	79d6 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xcc6>
    7910:	ldr.w	r8, [sp, #20]
    7914:	ldr	r5, [sp, #40]	; 0x28
              if (x >= _displayclipx1) {
    7916:	ldrsh.w	r3, [r4, #54]	; 0x36
    791a:	cmp	r3, fp
    791c:	bgt.n	79ca <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xcba>
                writedata16_cont(gfxFontLastCharPosFG(x, y)
    791e:	mov	r2, sl
    7920:	mov	r1, fp
    7922:	mov	r0, r4
    7924:	bl	3d28 <ILI9341_t3n::gfxFontLastCharPosFG(short, short)>
    7928:	cmp	r0, #0
    792a:	beq.n	79fa <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xcea>
    792c:	ldrh.w	r0, [r4, #134]	; 0x86
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    7930:	ldr.w	ip, [r4, #168]	; 0xa8
    7934:	ldr	r3, [pc, #400]	; (7ac8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xdb8>)
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
    7936:	ldr.w	r1, [r4, #156]	; 0x9c
    793a:	ldr	r2, [pc, #400]	; (7acc <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xdbc>)
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    793c:	orr.w	r3, ip, r3
#elif defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
#define TCR_MASK                                                               \
  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK)
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
    7940:	ands	r2, r1
    7942:	cmp	r3, r2
    7944:	beq.n	7a0e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xcfe>
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    7946:	ldr	r2, [pc, #392]	; (7ad0 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xdc0>)
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    7948:	eor.w	lr, r3, r1
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    794c:	ands	r2, r1
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    794e:	tst.w	lr, #50331648	; 0x3000000
  void maybeUpdateTCR(
      uint32_t requested_tcr_state) /*__attribute__((always_inline)) */ {
    if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
    7952:	orr.w	r1, r2, r3
    7956:	str.w	r1, [r4, #156]	; 0x9c
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
    795a:	beq.n	79ae <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xc9e>
    795c:	ldr.w	r7, [r4, #160]	; 0xa0
    7960:	cbz	r7, 79ae <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xc9e>
    7962:	ldrb.w	r1, [r4, #146]	; 0x92
    7966:	ldr	r3, [r4, #28]
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    7968:	cbz	r1, 797e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xc6e>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
    796a:	ldr	r2, [r3, #112]	; 0x70
    796c:	lsls	r2, r2, #30
    796e:	bmi.n	7968 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xc58>
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    7970:	subs	r1, #1
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
    7972:	ldr	r2, [r3, #116]	; 0x74
      pending_rx_count--;     // decrement count of bytes still levt
    7974:	uxtb	r1, r1
    7976:	strb.w	r1, [r4, #146]	; 0x92
}
void ILI9341_t3n::waitTransmitComplete(void) {
  uint32_t tmp __attribute__((unused));
  //    digitalWriteFast(2, HIGH);

  while (pending_rx_count) {
    797a:	cmp	r1, #0
    797c:	bne.n	796a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xc5a>
    if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0) {
      tmp = _pimxrt_spi->RDR; // Read any pending RX bytes in
      pending_rx_count--;     // decrement count of bytes still levt
    }
  }
  _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF; // Clear RX FIFO
    797e:	movw	r2, #513	; 0x201
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
    7982:	tst.w	ip, #50331648	; 0x3000000
    7986:	str	r2, [r3, #16]
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
    7988:	ldr.w	r2, [r4, #172]	; 0xac
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR

      } else {
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
    798c:	beq.n	7a12 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xd02>
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    798e:	str.w	r7, [r2, #132]	; 0x84
        waitTransmitComplete();
        if (requested_tcr_state & LPSPI_TCR_PCS(3))
          DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
        else
          DIRECT_WRITE_LOW(_dcport, _dcpinmask);
        _pimxrt_spi->TCR = _spi_tcr_current &
    7992:	ldr.w	r2, [r4, #156]	; 0x9c
    7996:	bic.w	r2, r2, #52428800	; 0x3200000
                           ~(LPSPI_TCR_PCS(3) |
                             LPSPI_TCR_CONT); // go ahead and update TCR anyway?
    799a:	str	r2, [r3, #96]	; 0x60
    799c:	b.n	79b8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xca8>
              for (uint8_t xts = 0; xts < textsize_x; xts++) {
                if ((x >= _displayclipx1) && (x < _displayclipx2)) {
                  if (bits & 0x80)
                    writedata16_cont(textcolor);
                  else
                    writedata16_cont(gfxFontLastCharPosFG(x, y)
    799e:	ldr	r3, [sp, #20]
    79a0:	cmp	r3, r5
    79a2:	ite	gt
    79a4:	ldrhgt.w	r1, [r4, #136]	; 0x88
    79a8:	ldrhle.w	r1, [r4, #76]	; 0x4c
    79ac:	b.n	7856 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xb46>
    79ae:	ldr	r3, [r4, #28]
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) !=
                             (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state;
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
        while ((_pimxrt_spi->FSR & 0x1f))
    79b0:	ldr	r2, [r3, #92]	; 0x5c
    79b2:	lsls	r7, r2, #27
    79b4:	bne.n	79b0 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xca0>
          ;
        _pimxrt_spi->TCR = _spi_tcr_current; // update the TCR
    79b6:	str	r1, [r3, #96]	; 0x60
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    79b8:	str	r0, [r3, #100]	; 0x64
    pending_rx_count++; //
    waitFifoNotFull();
    79ba:	mov	r0, r4
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    pending_rx_count++; //
    79bc:	ldrb.w	r3, [r4, #146]	; 0x92
    79c0:	adds	r3, #1
    79c2:	strb.w	r3, [r4, #146]	; 0x92
    waitFifoNotFull();
    79c6:	bl	3dc8 <ILI9341_t3n::waitFifoNotFull()>
    79ca:	add.w	fp, fp, #1
    79ce:	sxth.w	fp, fp
                x++; // remember our logical position...
              }
              bits <<= 1;
            }
            // Fill in any additional bg colors to right of our output
            while (x < x_end) {
    79d2:	cmp	r5, fp
    79d4:	bgt.n	7916 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xc06>
    79d6:	ldrb.w	r3, [r4, #89]	; 0x59
    79da:	b.n	773e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xa2e>
    79dc:	ldr	r3, [r4, #28]
    79de:	b.n	78d2 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xbc2>
    _pimxrt_spi->TDR = c;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    79e0:	ldr.w	r3, [r4, #168]	; 0xa8
    79e4:	mov	r0, r4
    79e6:	ldr	r1, [pc, #224]	; (7ac8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xdb8>)
                bits = bitmap[bo++];
              }
              for (uint8_t xts = 0; xts < textsize_x; xts++) {
                if ((x >= _displayclipx1) && (x < _displayclipx2)) {
                  if (bits & 0x80)
                    writedata16_cont(textcolor);
    79e8:	ldrh.w	r6, [r4, #74]	; 0x4a
    79ec:	orrs	r1, r3
    79ee:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = d;
    79f2:	ldr	r3, [r4, #28]
    pending_rx_count++; //
    waitFifoNotFull();
    79f4:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
    _pimxrt_spi->TDR = d;
    79f6:	str	r6, [r3, #100]	; 0x64
    79f8:	b.n	78d6 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xbc6>
              bits <<= 1;
            }
            // Fill in any additional bg colors to right of our output
            while (x < x_end) {
              if (x >= _displayclipx1) {
                writedata16_cont(gfxFontLastCharPosFG(x, y)
    79fa:	cmp	r8, fp
    79fc:	ite	gt
    79fe:	ldrhgt.w	r0, [r4, #136]	; 0x88
    7a02:	ldrhle.w	r0, [r4, #76]	; 0x4c
    7a06:	b.n	7930 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xc20>
//. From Onewire utility files
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x

  void DIRECT_WRITE_LOW(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 34) = mask;
    7a08:	str.w	r0, [r2, #136]	; 0x88
    7a0c:	b.n	78bc <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xbac>
    7a0e:	ldr	r3, [r4, #28]
    7a10:	b.n	79b8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xca8>
    7a12:	str.w	r7, [r2, #136]	; 0x88
    7a16:	b.n	7992 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xc82>
    7a18:	adds	r6, #1
          y++; // remember which row we just output
        }
      }
      // And output any more rows below us...
      // Serial.println("    Bottom fill"); Serial.flush();
      while (y < y_end) {
    7a1a:	ldr	r3, [sp, #76]	; 0x4c
    7a1c:	sxth	r6, r6
    7a1e:	cmp	r6, r3
    7a20:	blt.w	7776 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xa66>
    _pimxrt_spi->TDR = d;
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7));
    7a24:	ldr.w	r1, [r4, #164]	; 0xa4
    7a28:	mov	r0, r4
    7a2a:	orr.w	r1, r1, #7
    7a2e:	bl	2e3c <ILI9341_t3n::maybeUpdateTCR(unsigned long)>
    _pimxrt_spi->TDR = c;
    7a32:	ldr	r3, [r4, #28]
    7a34:	movs	r2, #0
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    waitTransmitComplete();
    7a36:	mov	r0, r4
    pending_rx_count++; //
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7));
    _pimxrt_spi->TDR = c;
    7a38:	str	r2, [r3, #100]	; 0x64
    //		_pimxrt_spi->SR = LPSPI_SR_WCF | LPSPI_SR_FCF | LPSPI_SR_TCF;
    pending_rx_count++; //
    7a3a:	ldrb.w	r3, [r4, #146]	; 0x92
    7a3e:	adds	r3, #1
    7a40:	strb.w	r3, [r4, #146]	; 0x92
    waitTransmitComplete();
    7a44:	bl	3de8 <ILI9341_t3n::waitTransmitComplete()>
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    7a48:	ldr.w	r3, [r4, #152]	; 0x98
    7a4c:	cbz	r3, 7a56 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xd46>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
    7a4e:	ldr.w	r2, [r4, #148]	; 0x94
      __attribute__((always_inline)) {
    *(base + 34) = mask;
  }
  void DIRECT_WRITE_HIGH(volatile uint32_t *base, uint32_t mask)
      __attribute__((always_inline)) {
    *(base + 33) = mask;
    7a52:	str.w	r2, [r3, #132]	; 0x84
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
#endif
    }
    _pspi->endTransaction();
    7a56:	ldr	r0, [r4, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7a58:	ldrb	r3, [r0, #19]
    7a5a:	cbz	r3, 7a6a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xd5a>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    7a5c:	lsls	r3, r3, #31
    7a5e:	bpl.n	7a66 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xd56>
    7a60:	ldr	r2, [r0, #40]	; 0x28
    7a62:	ldr	r3, [pc, #112]	; (7ad4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xdc4>)
    7a64:	str	r2, [r3, #0]
    7a66:	bl	2978 <SPIClass::endTransaction() [clone .part.9]>
    7a6a:	ldrh.w	r2, [r4, #76]	; 0x4c
    7a6e:	b.n	741c <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x70c>
    7a70:	ldr	r2, [sp, #24]
    7a72:	str.w	sl, [sp, #8]
    7a76:	str	r2, [sp, #52]	; 0x34
    7a78:	str	r6, [sp, #48]	; 0x30
    7a7a:	str.w	r9, [sp, #32]
        }
        y++;
      }
      // Serial.println("    After top fill"); Serial.flush();
      // Now lets output all of the pixels for each of the rows..
      for (yy = 0; (yy < h) && (y < _displayclipy2); yy++) {
    7a7e:	ldr	r2, [sp, #60]	; 0x3c
    7a80:	ldr	r1, [sp, #64]	; 0x40
    7a82:	adds	r2, #1
    7a84:	uxtb	r2, r2
    7a86:	cmp	r1, r2
    7a88:	str	r2, [sp, #60]	; 0x3c
    7a8a:	beq.w	7764 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xa54>
    7a8e:	ldrsh.w	r7, [r4, #60]	; 0x3c
    7a92:	ldr	r2, [sp, #8]
    7a94:	cmp	r7, r2
    7a96:	bgt.w	76ba <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x9aa>
    7a9a:	b.n	7764 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xa54>
                                     ? _gfx_last_char_textcolor
                                     : textbgcolor);
              }
              x++;
            }
            for (xx = 0; xx < w; xx++) {
    7a9c:	ldr	r3, [sp, #52]	; 0x34
    7a9e:	ldr	r6, [sp, #48]	; 0x30
    7aa0:	str	r3, [sp, #24]
    7aa2:	ldr.w	r9, [sp, #32]
    7aa6:	ldr.w	fp, [sp, #56]	; 0x38
    7aaa:	b.n	790a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xbfa>
      // Now lets output all of the pixels for each of the rows..
      for (yy = 0; (yy < h) && (y < _displayclipy2); yy++) {
        uint16_t bo_save = bo;
        uint8_t bit_save = bit;
        uint8_t bits_save = bits;
        for (uint8_t yts = 0; (yts < textsize_y) && (y < _displayclipy2);
    7aac:	ldr.w	sl, [sp, #8]
    7ab0:	b.n	7760 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xa50>

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
    7ab2:	ldr	r3, [r4, #28]
    7ab4:	ldr	r3, [r3, #96]	; 0x60
    7ab6:	str.w	r3, [r4, #156]	; 0x9c
    7aba:	b.n	74c2 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x7b2>
        }
        pfbPixel_row += _width;
        y++;
      }
      // Now lets output all of the pixels for each of the rows..
      for (yy = 0; (yy < h) && (y < _displayclipy2); yy++) {
    7abc:	ldr	r0, [sp, #64]	; 0x40
    7abe:	cmp	r0, #0
    7ac0:	bne.w	721a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x50a>
    7ac4:	b.n	73b4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6a4>
    7ac6:	nop
    7ac8:	.word	0x0020000f
    7acc:	.word	0x0328001f
    7ad0:	.word	0xfcd7ffe0
    7ad4:	.word	0xe000e100

00007ad8 <ILI9341_t3n::write(unsigned char const*, unsigned int)>:
size_t ILI9341_t3n::write(uint8_t c) { return write(&c, 1); }

size_t ILI9341_t3n::write(const uint8_t *buffer, size_t size) {
  // Lets try to handle some of the special font centering code that was done
  // for default fonts.
  if (_center_x_text || _center_y_text) {
    7ad8:	ldrb.w	r3, [r0, #40]	; 0x28

// overwrite functions from class Print:

size_t ILI9341_t3n::write(uint8_t c) { return write(&c, 1); }

size_t ILI9341_t3n::write(const uint8_t *buffer, size_t size) {
    7adc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ae0:	mov	r4, r0
    7ae2:	sub	sp, #40	; 0x28
    7ae4:	mov	r6, r1
    7ae6:	mov	r8, r2
  // Lets try to handle some of the special font centering code that was done
  // for default fonts.
  if (_center_x_text || _center_y_text) {
    7ae8:	cbnz	r3, 7b34 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x5c>
    7aea:	ldrb.w	r3, [r0, #41]	; 0x29
    7aee:	cbnz	r3, 7b34 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x5c>
    _center_x_text = false;
    _center_y_text = false;
  }

  size_t cb = size;
  while (cb) {
    7af0:	cmp.w	r8, #0
    7af4:	beq.n	7b2c <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x54>
    7af6:	mov	r5, r8
            (cursor_x > (scroll_x + scroll_width - textsize_x * 6))) {
          cursor_y += textsize_y * 8;
          cursor_x = scroll_x;
        } else if (wrap && (cursor_x > (_width - textsize_x * 6))) {
          cursor_y += textsize_y * 6;
          cursor_x = 0;
    7af8:	movs	r7, #0
  size_t cb = size;
  while (cb) {
    uint8_t c = *buffer++;
    cb--;

    if (font) {
    7afa:	ldr	r2, [r4, #96]	; 0x60
  }

  size_t cb = size;
  while (cb) {
    uint8_t c = *buffer++;
    cb--;
    7afc:	subs	r5, #1
    _center_y_text = false;
  }

  size_t cb = size;
  while (cb) {
    uint8_t c = *buffer++;
    7afe:	ldrb.w	r3, [r6], #1
    cb--;

    if (font) {
    7b02:	cmp	r2, #0
    7b04:	beq.n	7bb0 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0xd8>
      if (c == '\n') {
    7b06:	cmp	r3, #10
    7b08:	bne.n	7ba2 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0xca>
        cursor_y += font->line_space;
    7b0a:	ldrb	r1, [r2, #24]
    7b0c:	ldrh	r3, [r4, #38]	; 0x26
        if (scrollEnable && isWritingScrollArea) {
    7b0e:	ldrb.w	r2, [r4, #72]	; 0x48
    uint8_t c = *buffer++;
    cb--;

    if (font) {
      if (c == '\n') {
        cursor_y += font->line_space;
    7b12:	add	r3, r1
    7b14:	strh	r3, [r4, #38]	; 0x26
        if (scrollEnable && isWritingScrollArea) {
    7b16:	cmp	r2, #0
    7b18:	beq.n	7bce <ILI9341_t3n::write(unsigned char const*, unsigned int)+0xf6>
        drawGFXFontChar(c);
      }
    } else {
      if (c == '\n') {
        cursor_y += textsize_y * 8;
        if (scrollEnable && isWritingScrollArea) {
    7b1a:	ldrb.w	r3, [r4, #73]	; 0x49
    7b1e:	cmp	r3, #0
    7b20:	beq.n	7bce <ILI9341_t3n::write(unsigned char const*, unsigned int)+0xf6>
          cursor_x = scroll_x;
    7b22:	ldrh.w	r3, [r4, #64]	; 0x40
    7b26:	strh	r3, [r4, #36]	; 0x24
    _center_x_text = false;
    _center_y_text = false;
  }

  size_t cb = size;
  while (cb) {
    7b28:	cmp	r5, #0
    7b2a:	bne.n	7afa <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x22>
        }
      }
    }
  }
  return size;
}
    7b2c:	mov	r0, r8
    7b2e:	add	sp, #40	; 0x28
    7b30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // Lets try to handle some of the special font centering code that was done
  // for default fonts.
  if (_center_x_text || _center_y_text) {
    int16_t x, y;
    uint16_t strngWidth, strngHeight;
    getTextBounds(buffer, size, 0, 0, &x, &y, &strngWidth, &strngHeight);
    7b34:	movs	r0, #0
    7b36:	add	r2, sp, #36	; 0x24
    7b38:	add.w	r3, sp, #34	; 0x22
    7b3c:	add	r1, sp, #32
    7b3e:	add.w	r5, sp, #38	; 0x26
    7b42:	str	r2, [sp, #12]
    7b44:	str	r3, [sp, #8]
    7b46:	uxth.w	r2, r8
    7b4a:	mov	r3, r0
    7b4c:	str	r1, [sp, #4]
    7b4e:	str	r0, [sp, #0]
    7b50:	mov	r1, r6
    7b52:	str	r5, [sp, #16]
    7b54:	mov	r0, r4
    7b56:	bl	3c64 <ILI9341_t3n::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)>
    // Serial.printf("_fontwrite bounds: %d %d %u %u\n", x, y, strngWidth,
    // strngHeight);
    // Note we may want to play with the x ane y returned if they offset some
    if (_center_x_text &&
    7b5a:	ldrb.w	r3, [r4, #40]	; 0x28
    7b5e:	cbz	r3, 7b78 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0xa0>
        strngWidth > 0) { // Avoid operations for strngWidth = 0
    7b60:	ldrh.w	r3, [sp, #36]	; 0x24
    uint16_t strngWidth, strngHeight;
    getTextBounds(buffer, size, 0, 0, &x, &y, &strngWidth, &strngHeight);
    // Serial.printf("_fontwrite bounds: %d %d %u %u\n", x, y, strngWidth,
    // strngHeight);
    // Note we may want to play with the x ane y returned if they offset some
    if (_center_x_text &&
    7b64:	cbz	r3, 7b78 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0xa0>
        strngWidth > 0) { // Avoid operations for strngWidth = 0
      cursor_x -= ((x + strngWidth) / 2);
    7b66:	ldrsh.w	r2, [sp, #32]
    7b6a:	adds	r3, r2, r3
    7b6c:	ldrh	r2, [r4, #36]	; 0x24
    7b6e:	it	mi
    7b70:	addmi	r3, #1
    7b72:	sub.w	r3, r2, r3, asr #1
    7b76:	strh	r3, [r4, #36]	; 0x24
    }
    if (_center_y_text &&
    7b78:	ldrb.w	r3, [r4, #41]	; 0x29
    7b7c:	cbz	r3, 7b96 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0xbe>
        strngHeight > 0) { // Avoid operations for strngWidth = 0
    7b7e:	ldrh.w	r3, [sp, #38]	; 0x26
    // Note we may want to play with the x ane y returned if they offset some
    if (_center_x_text &&
        strngWidth > 0) { // Avoid operations for strngWidth = 0
      cursor_x -= ((x + strngWidth) / 2);
    }
    if (_center_y_text &&
    7b82:	cbz	r3, 7b96 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0xbe>
        strngHeight > 0) { // Avoid operations for strngWidth = 0
      cursor_y -= ((y + strngHeight) / 2);
    7b84:	ldrsh.w	r2, [sp, #34]	; 0x22
    7b88:	adds	r3, r2, r3
    7b8a:	ldrh	r2, [r4, #38]	; 0x26
    7b8c:	it	mi
    7b8e:	addmi	r3, #1
    7b90:	sub.w	r3, r2, r3, asr #1
    7b94:	strh	r3, [r4, #38]	; 0x26
    }
    _center_x_text = false;
    7b96:	movs	r3, #0
    7b98:	strb.w	r3, [r4, #40]	; 0x28
    _center_y_text = false;
    7b9c:	strb.w	r3, [r4, #41]	; 0x29
    7ba0:	b.n	7af0 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x18>
          cursor_x = scroll_x;
        } else {
          cursor_x = 0;
        }
      } else {
        drawFontChar(c);
    7ba2:	mov	r1, r3
    7ba4:	mov	r0, r4
    7ba6:	bl	5380 <ILI9341_t3n::drawFontChar(unsigned int)>
    _center_x_text = false;
    _center_y_text = false;
  }

  size_t cb = size;
  while (cb) {
    7baa:	cmp	r5, #0
    7bac:	bne.n	7afa <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x22>
    7bae:	b.n	7b2c <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x54>
          cursor_x = 0;
        }
      } else {
        drawFontChar(c);
      }
    } else if (gfxFont) {
    7bb0:	ldr	r2, [r4, #116]	; 0x74
    7bb2:	cbz	r2, 7be4 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x10c>
      if (c == '\n') {
    7bb4:	cmp	r3, #10
    7bb6:	bne.n	7bd6 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0xfe>
        cursor_y += (int16_t)textsize_y * gfxFont->yAdvance;
    7bb8:	ldrb	r2, [r2, #10]
    7bba:	ldrh	r3, [r4, #38]	; 0x26
    7bbc:	ldrb.w	r0, [r4, #89]	; 0x59
        if (scrollEnable && isWritingScrollArea) {
    7bc0:	ldrb.w	r1, [r4, #72]	; 0x48
      } else {
        drawFontChar(c);
      }
    } else if (gfxFont) {
      if (c == '\n') {
        cursor_y += (int16_t)textsize_y * gfxFont->yAdvance;
    7bc4:	mla	r3, r0, r2, r3
    7bc8:	strh	r3, [r4, #38]	; 0x26
        if (scrollEnable && isWritingScrollArea) {
    7bca:	cmp	r1, #0
    7bcc:	bne.n	7b1a <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x42>
      if (c == '\n') {
        cursor_y += font->line_space;
        if (scrollEnable && isWritingScrollArea) {
          cursor_x = scroll_x;
        } else {
          cursor_x = 0;
    7bce:	strh	r7, [r4, #36]	; 0x24
    _center_x_text = false;
    _center_y_text = false;
  }

  size_t cb = size;
  while (cb) {
    7bd0:	cmp	r5, #0
    7bd2:	bne.n	7afa <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x22>
    7bd4:	b.n	7b2c <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x54>
          cursor_x = scroll_x;
        } else {
          cursor_x = 0;
        }
      } else {
        drawGFXFontChar(c);
    7bd6:	mov	r1, r3
    7bd8:	mov	r0, r4
    7bda:	bl	6d10 <ILI9341_t3n::drawGFXFontChar(unsigned int)>
    _center_x_text = false;
    _center_y_text = false;
  }

  size_t cb = size;
  while (cb) {
    7bde:	cmp	r5, #0
    7be0:	bne.n	7afa <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x22>
    7be2:	b.n	7b2c <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x54>
        }
      } else {
        drawGFXFontChar(c);
      }
    } else {
      if (c == '\n') {
    7be4:	cmp	r3, #10
    7be6:	beq.n	7c74 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x19c>
        if (scrollEnable && isWritingScrollArea) {
          cursor_x = scroll_x;
        } else {
          cursor_x = 0;
        }
      } else if (c == '\r') {
    7be8:	cmp	r3, #13
    7bea:	beq.n	7b28 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x50>
        // skip em
      } else {
        if (scrollEnable && isWritingScrollArea &&
    7bec:	ldrb.w	r2, [r4, #72]	; 0x48
    7bf0:	cbz	r2, 7bfa <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x122>
    7bf2:	ldrb.w	r2, [r4, #73]	; 0x49
    7bf6:	cmp	r2, #0
    7bf8:	bne.n	7cbe <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x1e6>
    7bfa:	ldrsh.w	r1, [r4, #36]	; 0x24
    7bfe:	ldrsh.w	r2, [r4, #38]	; 0x26
    7c02:	ldrb.w	r0, [r4, #89]	; 0x59
          scrollTextArea(textsize_y * 8);
          cursor_y -= textsize_y * 8;
          cursor_x = scroll_x;
        }
        drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                 textsize_y);
    7c06:	ldrb.w	ip, [r4, #88]	; 0x58
    7c0a:	str	r0, [sp, #12]
    7c0c:	mov	r0, r4
    7c0e:	ldrh.w	lr, [r4, #76]	; 0x4c
    7c12:	str.w	ip, [sp, #8]
    7c16:	str.w	lr, [sp, #4]
    7c1a:	ldrh.w	lr, [r4, #74]	; 0x4a
    7c1e:	str.w	lr, [sp]
    7c22:	bl	6410 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)>
        cursor_x += textsize_x * 6;
    7c26:	ldrb.w	r2, [r4, #88]	; 0x58
    7c2a:	ldrh	r3, [r4, #36]	; 0x24
    7c2c:	add.w	r0, r2, r2, lsl #1
        if (wrap && scrollEnable && isWritingScrollArea &&
    7c30:	ldrb.w	r1, [r4, #92]	; 0x5c
          cursor_y -= textsize_y * 8;
          cursor_x = scroll_x;
        }
        drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                 textsize_y);
        cursor_x += textsize_x * 6;
    7c34:	add.w	r3, r3, r0, lsl #1
    7c38:	sxth	r3, r3
    7c3a:	strh	r3, [r4, #36]	; 0x24
        if (wrap && scrollEnable && isWritingScrollArea &&
    7c3c:	cmp	r1, #0
    7c3e:	beq.w	7b28 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x50>
    7c42:	ldrb.w	r1, [r4, #72]	; 0x48
    7c46:	cbnz	r1, 7c8a <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x1b2>
    7c48:	sub.w	r2, r2, r2, lsl #2
    7c4c:	lsls	r2, r2, #1
            (cursor_x > (scroll_x + scroll_width - textsize_x * 6))) {
          cursor_y += textsize_y * 8;
          cursor_x = scroll_x;
        } else if (wrap && (cursor_x > (_width - textsize_x * 6))) {
    7c4e:	ldrsh.w	r1, [r4, #32]
    7c52:	add	r2, r1
    7c54:	cmp	r2, r3
    7c56:	bge.w	7b28 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x50>
          cursor_y += textsize_y * 6;
    7c5a:	ldrb.w	r3, [r4, #89]	; 0x59
    7c5e:	ldrh	r2, [r4, #38]	; 0x26
    7c60:	add.w	r3, r3, r3, lsl #1
          cursor_x = 0;
    7c64:	strh	r7, [r4, #36]	; 0x24
        if (wrap && scrollEnable && isWritingScrollArea &&
            (cursor_x > (scroll_x + scroll_width - textsize_x * 6))) {
          cursor_y += textsize_y * 8;
          cursor_x = scroll_x;
        } else if (wrap && (cursor_x > (_width - textsize_x * 6))) {
          cursor_y += textsize_y * 6;
    7c66:	add.w	r3, r2, r3, lsl #1
    7c6a:	strh	r3, [r4, #38]	; 0x26
    _center_x_text = false;
    _center_y_text = false;
  }

  size_t cb = size;
  while (cb) {
    7c6c:	cmp	r5, #0
    7c6e:	bne.w	7afa <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x22>
    7c72:	b.n	7b2c <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x54>
      } else {
        drawGFXFontChar(c);
      }
    } else {
      if (c == '\n') {
        cursor_y += textsize_y * 8;
    7c74:	ldrh	r3, [r4, #38]	; 0x26
    7c76:	ldrb.w	r1, [r4, #89]	; 0x59
        if (scrollEnable && isWritingScrollArea) {
    7c7a:	ldrb.w	r2, [r4, #72]	; 0x48
      } else {
        drawGFXFontChar(c);
      }
    } else {
      if (c == '\n') {
        cursor_y += textsize_y * 8;
    7c7e:	add.w	r3, r3, r1, lsl #3
    7c82:	strh	r3, [r4, #38]	; 0x26
        if (scrollEnable && isWritingScrollArea) {
    7c84:	cmp	r2, #0
    7c86:	beq.n	7bce <ILI9341_t3n::write(unsigned char const*, unsigned int)+0xf6>
    7c88:	b.n	7b1a <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x42>
          cursor_x = scroll_x;
        }
        drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                 textsize_y);
        cursor_x += textsize_x * 6;
        if (wrap && scrollEnable && isWritingScrollArea &&
    7c8a:	ldrb.w	r1, [r4, #73]	; 0x49
            (cursor_x > (scroll_x + scroll_width - textsize_x * 6))) {
    7c8e:	sub.w	r2, r2, r2, lsl #2
          cursor_x = scroll_x;
        }
        drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                 textsize_y);
        cursor_x += textsize_x * 6;
        if (wrap && scrollEnable && isWritingScrollArea &&
    7c92:	cmp	r1, #0
    7c94:	beq.n	7c4c <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x174>
            (cursor_x > (scroll_x + scroll_width - textsize_x * 6))) {
    7c96:	ldrsh.w	r0, [r4, #64]	; 0x40
    7c9a:	lsls	r2, r2, #1
          cursor_x = scroll_x;
        }
        drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                 textsize_y);
        cursor_x += textsize_x * 6;
        if (wrap && scrollEnable && isWritingScrollArea &&
    7c9c:	ldrsh.w	r1, [r4, #68]	; 0x44
    7ca0:	add	r1, r0
    7ca2:	add	r1, r2
    7ca4:	cmp	r3, r1
    7ca6:	ble.n	7c4e <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x176>
            (cursor_x > (scroll_x + scroll_width - textsize_x * 6))) {
          cursor_y += textsize_y * 8;
    7ca8:	ldrh	r3, [r4, #38]	; 0x26
    7caa:	ldrb.w	r2, [r4, #89]	; 0x59
          cursor_x = scroll_x;
    7cae:	strh	r0, [r4, #36]	; 0x24
        drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                 textsize_y);
        cursor_x += textsize_x * 6;
        if (wrap && scrollEnable && isWritingScrollArea &&
            (cursor_x > (scroll_x + scroll_width - textsize_x * 6))) {
          cursor_y += textsize_y * 8;
    7cb0:	add.w	r3, r3, r2, lsl #3
    7cb4:	strh	r3, [r4, #38]	; 0x26
    _center_x_text = false;
    _center_y_text = false;
  }

  size_t cb = size;
  while (cb) {
    7cb6:	cmp	r5, #0
    7cb8:	bne.w	7afa <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x22>
    7cbc:	b.n	7b2c <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x54>
          cursor_x = 0;
        }
      } else if (c == '\r') {
        // skip em
      } else {
        if (scrollEnable && isWritingScrollArea &&
    7cbe:	ldrsh.w	r2, [r4, #70]	; 0x46
    7cc2:	ldrsh.w	r1, [r4, #66]	; 0x42
            (cursor_y > (scroll_y + scroll_height - textsize_y * 8))) {
    7cc6:	ldrb.w	r0, [r4, #89]	; 0x59
          cursor_x = 0;
        }
      } else if (c == '\r') {
        // skip em
      } else {
        if (scrollEnable && isWritingScrollArea &&
    7cca:	add	r1, r2
            (cursor_y > (scroll_y + scroll_height - textsize_y * 8))) {
    7ccc:	ldrsh.w	r2, [r4, #38]	; 0x26
          cursor_x = 0;
        }
      } else if (c == '\r') {
        // skip em
      } else {
        if (scrollEnable && isWritingScrollArea &&
    7cd0:	sub.w	r1, r1, r0, lsl #3
    7cd4:	cmp	r2, r1
    7cd6:	bgt.n	7cde <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x206>
    7cd8:	ldrsh.w	r1, [r4, #36]	; 0x24
    7cdc:	b.n	7c06 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x12e>
            (cursor_y > (scroll_y + scroll_height - textsize_y * 8))) {
          scrollTextArea(textsize_y * 8);
    7cde:	lsls	r1, r0, #3
    7ce0:	mov	r0, r4
    7ce2:	str	r3, [sp, #28]
    7ce4:	and.w	r1, r1, #248	; 0xf8
    7ce8:	bl	52e0 <ILI9341_t3n::scrollTextArea(unsigned char)>
          cursor_y -= textsize_y * 8;
    7cec:	ldrh	r2, [r4, #38]	; 0x26
    7cee:	ldrb.w	r0, [r4, #89]	; 0x59
          cursor_x = scroll_x;
    7cf2:	ldrsh.w	r1, [r4, #64]	; 0x40
        // skip em
      } else {
        if (scrollEnable && isWritingScrollArea &&
            (cursor_y > (scroll_y + scroll_height - textsize_y * 8))) {
          scrollTextArea(textsize_y * 8);
          cursor_y -= textsize_y * 8;
    7cf6:	sub.w	r2, r2, r0, lsl #3
    7cfa:	ldr	r3, [sp, #28]
          cursor_x = scroll_x;
    7cfc:	strh	r1, [r4, #36]	; 0x24
        // skip em
      } else {
        if (scrollEnable && isWritingScrollArea &&
            (cursor_y > (scroll_y + scroll_height - textsize_y * 8))) {
          scrollTextArea(textsize_y * 8);
          cursor_y -= textsize_y * 8;
    7cfe:	sxth	r2, r2
    7d00:	strh	r2, [r4, #38]	; 0x26
    7d02:	b.n	7c06 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x12e>

00007d04 <memcpy_tointerleaveLR>:
	@ r0: dst
	@ r1: srcL
	@ r2: srcR

#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11,r14}
    7d04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	add r14,r0,#(AUDIO_BLOCK_SAMPLES*2)
    7d08:	add.w	lr, r0, #256	; 0x100

00007d0c <.loopLR>:
	.align 2
.loopLR:
	//Load 2*4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    7d0c:	ldmia.w	r1!, {r5, r7, r9, fp}
	ldmia r2!, {r6,r8,r10,r12} //1+4	
    7d10:	ldmia.w	r2!, {r6, r8, sl, ip}

	pkhbt r3,r5,r6,LSL #16	//1
    7d14:	pkhbt	r3, r5, r6, lsl #16
	pkhtb r4,r6,r5,ASR #16	//1
    7d18:	pkhtb	r4, r6, r5, asr #16

	pkhbt r5,r7,r8,LSL #16	//1
    7d1c:	pkhbt	r5, r7, r8, lsl #16
	pkhtb r6,r8,r7,ASR #16	//1
    7d20:	pkhtb	r6, r8, r7, asr #16

	pkhbt r7,r9,r10,LSL #16	//1
    7d24:	pkhbt	r7, r9, sl, lsl #16
	pkhtb r8,r10,r9,ASR #16	//1
    7d28:	pkhtb	r8, sl, r9, asr #16

	pkhbt r9,r11,r12,LSL #16	//1
    7d2c:	pkhbt	r9, fp, ip, lsl #16
	pkhtb r10,r12,r11,ASR #16	//1
    7d30:	pkhtb	sl, ip, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8 -> 5+5+8+9 = 27 Cycles to interleave 32 bytes. 
    7d34:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	
	cmp r14, r0
    7d38:	cmp	lr, r0
	bne .loopLR
    7d3a:	bne.n	7d0c <.loopLR>

	pop	{r4-r11,r14}	
    7d3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pkhtb r6,r8,r7,ASR #16

	stmia r0!, {r3,r4,r5,r6}
	pop	{r4-r8,r14}	
#endif
	BX lr
    7d40:	bx	lr

00007d42 <memcpy_tointerleaveL>:
	memcpy_tointerleaveL:

	@ r0: dst
	@ r1: srcL
	
	mov r2, #0
    7d42:	mov.w	r2, #0
	
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    7d46:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    7d4a:	add.w	ip, r0, #256	; 0x100
    7d4e:	nop

00007d50 <.loopL>:
	.align 2
.loopL:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    7d50:	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r5,r2	//1
    7d54:	pkhbt	r3, r5, r2
	pkhtb r4,r2,r5,ASR #16	//1
    7d58:	pkhtb	r4, r2, r5, asr #16

	pkhbt r5,r7,r2	//1
    7d5c:	pkhbt	r5, r7, r2
	pkhtb r6,r2,r7,ASR #16	//1
    7d60:	pkhtb	r6, r2, r7, asr #16

	pkhbt r7,r9,r2	//1
    7d64:	pkhbt	r7, r9, r2
	pkhtb r8,r2,r9,ASR #16	//1
    7d68:	pkhtb	r8, r2, r9, asr #16

	pkhbt r9,r11,r2	//1
    7d6c:	pkhbt	r9, fp, r2
	pkhtb r10,r2,r11,ASR #16	//1
    7d70:	pkhtb	sl, r2, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8
    7d74:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    7d78:	cmp	ip, r0
	bne .loopL
    7d7a:	bne.n	7d50 <.loopL>

	pop	{r4-r11}
    7d7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	stmia r0!, {r3,r4,r5,r6}
	
	pop	{r4-r7}
#endif	
	BX lr
    7d80:	bx	lr

00007d82 <memcpy_tointerleaveR>:
	memcpy_tointerleaveR:

	@ r0: dst
	@ r1: srcR

	mov r2, #0
    7d82:	mov.w	r2, #0
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    7d86:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    7d8a:	add.w	ip, r0, #256	; 0x100
    7d8e:	nop

00007d90 <.loopR>:
	.align 2
.loopR:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}
    7d90:	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r2,r5,LSL #16
    7d94:	pkhbt	r3, r2, r5, lsl #16
	pkhtb r4,r5,r2
    7d98:	pkhbt	r4, r2, r5

	pkhbt r5,r2,r7,LSL #16
    7d9c:	pkhbt	r5, r2, r7, lsl #16
	pkhtb r6,r7,r2
    7da0:	pkhbt	r6, r2, r7

	pkhbt r7,r2,r9,LSL #16
    7da4:	pkhbt	r7, r2, r9, lsl #16
	pkhtb r8,r9,r2
    7da8:	pkhbt	r8, r2, r9

	pkhbt r9,r2,r11,LSL #16
    7dac:	pkhbt	r9, r2, fp, lsl #16
	pkhtb r10,r11,r2
    7db0:	pkhbt	sl, r2, fp

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}
    7db4:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    7db8:	cmp	ip, r0
	bne .loopR
    7dba:	bne.n	7d90 <.loopR>

	pop	{r4-r11}
    7dbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	stmia r0!, {r3,r4,r5,r6}

	pop	{r4-r7}

#endif	
	BX lr
    7dc0:	bx	lr

00007dc2 <memcpy_tointerleaveQuad>:
	@ r1: src1
	@ r2: src2
	@ r3: src3
	@ r4: src4

	push	{r4-r11}
    7dc2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	ldr r4, [sp, #(0+32)] //5th parameter is saved on the stack
    7dc6:	ldr	r4, [sp, #32]
	add r11,r0,#(AUDIO_BLOCK_SAMPLES*4)
    7dc8:	add.w	fp, r0, #512	; 0x200

00007dcc <.loopQuad>:
	.align 2
.loopQuad:

	ldr r5, [r1],4
    7dcc:	ldr.w	r5, [r1], #4
	ldr r6, [r3],4
    7dd0:	ldr.w	r6, [r3], #4
	pkhbt r7,r5,r6,LSL #16
    7dd4:	pkhbt	r7, r5, r6, lsl #16
	pkhtb r9,r6,r5,ASR #16
    7dd8:	pkhtb	r9, r6, r5, asr #16
	ldr r5, [r2],4
    7ddc:	ldr.w	r5, [r2], #4
	ldr r6, [r4],4
    7de0:	ldr.w	r6, [r4], #4
	pkhbt r8,r5,r6,LSL #16
    7de4:	pkhbt	r8, r5, r6, lsl #16
	pkhtb r10,r6,r5,ASR #16
    7de8:	pkhtb	sl, r6, r5, asr #16

	stmia r0!, {r7-r10}
    7dec:	stmia.w	r0!, {r7, r8, r9, sl}

	cmp r11, r0
    7df0:	cmp	fp, r0
	bne .loopQuad
    7df2:	bne.n	7dcc <.loopQuad>

	pop	{r4-r11}
    7df4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BX lr
    7df8:	bx	lr
    7dfa:	nop

00007dfc <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    7dfc:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    7dfe:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    7e02:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    7e06:	bne.n	7ee4 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    7e08:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    7e0a:	bcc.n	7e90 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    7e0c:	ldr.w	r3, [r1], #4
    7e10:	str.w	r3, [r0], #4
    7e14:	ldr.w	r3, [r1], #4
    7e18:	str.w	r3, [r0], #4
    7e1c:	ldr.w	r3, [r1], #4
    7e20:	str.w	r3, [r0], #4
    7e24:	ldr.w	r3, [r1], #4
    7e28:	str.w	r3, [r0], #4
    7e2c:	ldr.w	r3, [r1], #4
    7e30:	str.w	r3, [r0], #4
    7e34:	ldr.w	r3, [r1], #4
    7e38:	str.w	r3, [r0], #4
    7e3c:	ldr.w	r3, [r1], #4
    7e40:	str.w	r3, [r0], #4
    7e44:	ldr.w	r3, [r1], #4
    7e48:	str.w	r3, [r0], #4
    7e4c:	ldr.w	r3, [r1], #4
    7e50:	str.w	r3, [r0], #4
    7e54:	ldr.w	r3, [r1], #4
    7e58:	str.w	r3, [r0], #4
    7e5c:	ldr.w	r3, [r1], #4
    7e60:	str.w	r3, [r0], #4
    7e64:	ldr.w	r3, [r1], #4
    7e68:	str.w	r3, [r0], #4
    7e6c:	ldr.w	r3, [r1], #4
    7e70:	str.w	r3, [r0], #4
    7e74:	ldr.w	r3, [r1], #4
    7e78:	str.w	r3, [r0], #4
    7e7c:	ldr.w	r3, [r1], #4
    7e80:	str.w	r3, [r0], #4
    7e84:	ldr.w	r3, [r1], #4
    7e88:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    7e8c:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    7e8e:	bcs.n	7e0c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    7e90:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    7e92:	bcc.n	7eb8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    7e94:	ldr.w	r3, [r1], #4
    7e98:	str.w	r3, [r0], #4
    7e9c:	ldr.w	r3, [r1], #4
    7ea0:	str.w	r3, [r0], #4
    7ea4:	ldr.w	r3, [r1], #4
    7ea8:	str.w	r3, [r0], #4
    7eac:	ldr.w	r3, [r1], #4
    7eb0:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    7eb4:	subs	r2, #16
	bhs	.Lmid_block_loop
    7eb6:	bcs.n	7e94 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    7eb8:	adds	r2, #12
	blo	.Lcopy_less_than_4
    7eba:	bcc.n	7ec8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    7ebc:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    7ec0:	str.w	r3, [r0], #4
	subs	r2, #4
    7ec4:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    7ec6:	bcs.n	7ebc <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    7ec8:	adds	r2, #4
	beq	.Ldone
    7eca:	beq.n	7ede <memcpy+0xe2>

	lsls	r2, r2, #31
    7ecc:	lsls	r2, r2, #31
	itt ne
    7ece:	itt	ne
	ldrbne  r3, [r1], #1
    7ed0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    7ed4:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    7ed8:	bcc.n	7ede <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    7eda:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    7edc:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    7ede:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    7ee0:	bx	lr
    7ee2:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    7ee4:	cmp	r2, #8
	blo	.Lbyte_copy
    7ee6:	bcc.n	7f10 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    7ee8:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    7eea:	beq.n	7e08 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    7eec:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    7ef0:	beq.n	7e08 <memcpy+0xc>

	rsb	r3, #4
    7ef2:	rsb	r3, r3, #4
	subs	r2, r3
    7ef6:	subs	r2, r2, r3

	lsls    r3, r3, #31
    7ef8:	lsls	r3, r3, #31
	itt ne
    7efa:	itt	ne
	ldrbne  r3, [r1], #1
    7efc:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    7f00:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    7f04:	bcc.n	7e08 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    7f06:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    7f0a:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    7f0e:	b.n	7e08 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    7f10:	subs	r2, #4
	blo	.Lcopy_less_than_4
    7f12:	bcc.n	7ec8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    7f14:	subs	r2, #1
	ldrb    r3, [r1], #1
    7f16:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    7f1a:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    7f1e:	bcs.n	7f14 <memcpy+0x118>

	ldrb	r3, [r1]
    7f20:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    7f22:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    7f24:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    7f26:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    7f28:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    7f2a:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    7f2c:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    7f2e:	bx	lr

00007f30 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    7f30:	ldr	r2, [pc, #600]	; (818c <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7f32:	ldr	r3, [pc, #604]	; (8190 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    7f34:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    7f36:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    7f3a:	ldr	r4, [pc, #600]	; (8194 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7f3c:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    7f40:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    7f42:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    7f44:	bls.n	7f80 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    7f46:	ldr	r3, [pc, #592]	; (8198 <set_arm_clock+0x268>)
    7f48:	cmp	r0, r3
    7f4a:	bls.w	8178 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    7f4e:	ldr	r3, [pc, #588]	; (819c <set_arm_clock+0x26c>)
    7f50:	movw	r5, #1575	; 0x627
    7f54:	ldr	r7, [pc, #584]	; (81a0 <set_arm_clock+0x270>)
    7f56:	add	r3, r0
    7f58:	ldr	r4, [pc, #584]	; (81a4 <set_arm_clock+0x274>)
    7f5a:	lsrs	r2, r3, #8
    7f5c:	umull	r3, r2, r7, r2
    7f60:	lsrs	r3, r2, #7
    7f62:	add.w	r3, r3, r3, lsl #2
    7f66:	add.w	r2, r3, r3, lsl #2
    7f6a:	addw	r3, r2, #1250	; 0x4e2
    7f6e:	cmp	r3, r5
    7f70:	it	cs
    7f72:	movcs	r3, r5
    7f74:	sub.w	r3, r3, #800	; 0x320
    7f78:	umull	r3, r5, r4, r3
    7f7c:	lsrs	r5, r5, #3
    7f7e:	b.n	7f8a <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    7f80:	ldr	r5, [pc, #548]	; (81a8 <set_arm_clock+0x278>)
    7f82:	cmp	r0, r5
    7f84:	ite	ls
    7f86:	movls	r5, #6
    7f88:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7f8a:	ldr	r2, [pc, #516]	; (8190 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7f8c:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7f90:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7f94:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7f96:	orr.w	r3, r3, #192	; 0xc0
    7f9a:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7f9e:	bcs.n	7fb6 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    7fa0:	ldr	r3, [pc, #496]	; (8194 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    7fa2:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7fa6:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7fa8:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    7faa:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7fac:	ldr	r3, [r2, #0]
    7fae:	cmp	r3, #0
    7fb0:	bge.n	7fac <set_arm_clock+0x7c>
    7fb2:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    7fb6:	ands.w	r3, lr, #33554432	; 0x2000000
    7fba:	bne.n	8020 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    7fbc:	ldr	r4, [pc, #492]	; (81ac <set_arm_clock+0x27c>)
    7fbe:	ldr	r2, [pc, #496]	; (81b0 <set_arm_clock+0x280>)
    7fc0:	ldr.w	ip, [r4, #16]
    7fc4:	mov	r4, r2
    7fc6:	and.w	r2, ip, r2
    7fca:	cmp	r2, r4
    7fcc:	itet	eq
    7fce:	moveq.w	r3, #402653184	; 0x18000000
    7fd2:	movne.w	r2, #4096	; 0x1000
    7fd6:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    7fd8:	eor.w	r4, lr, r3
    7fdc:	tst.w	r4, #939524096	; 0x38000000
    7fe0:	beq.n	7ff4 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    7fe2:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    7fe6:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    7fea:	ldr	r4, [pc, #420]	; (8190 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    7fec:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    7ff0:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7ff4:	eor.w	r3, r1, r2
    7ff8:	tst.w	r3, #12288	; 0x3000
    7ffc:	beq.n	8010 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    7ffe:	ldr	r3, [pc, #400]	; (8190 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    8000:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    8004:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    8006:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    8008:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    800a:	ldr	r3, [r2, #72]	; 0x48
    800c:	lsls	r4, r3, #28
    800e:	bmi.n	800a <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    8010:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    8014:	ldr	r2, [pc, #376]	; (8190 <set_arm_clock+0x260>)
    8016:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    801a:	ldr	r3, [r2, #72]	; 0x48
    801c:	lsls	r1, r3, #26
    801e:	bmi.n	801a <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    8020:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    8022:	ldr	r4, [pc, #400]	; (81b4 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    8024:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    8026:	mul.w	r3, r1, r2
    802a:	mul.w	r3, r0, r3
    802e:	cmp	r3, r4
    8030:	bhi.n	8046 <set_arm_clock+0x116>
		if (div_arm < 8) {
    8032:	cmp	r2, #7
    8034:	bhi.w	8162 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    8038:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    803a:	mul.w	r3, r1, r2
    803e:	mul.w	r3, r0, r3
    8042:	cmp	r3, r4
    8044:	bls.n	8032 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    8046:	ldr	r0, [pc, #368]	; (81b8 <set_arm_clock+0x288>)
    8048:	ldr	r4, [pc, #368]	; (81bc <set_arm_clock+0x28c>)
    804a:	add	r0, r3
    804c:	umull	r0, r3, r4, r0
    8050:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    8052:	cmp	r3, #108	; 0x6c
    8054:	bhi.w	816e <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    8058:	cmp	r3, #53	; 0x35
    805a:	bhi.w	817c <set_arm_clock+0x24c>
    805e:	ldr.w	r8, [pc, #392]	; 81e8 <set_arm_clock+0x2b8>
    8062:	movs	r3, #54	; 0x36
    8064:	ldr	r0, [pc, #344]	; (81c0 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8066:	ldr.w	ip, [pc, #324]	; 81ac <set_arm_clock+0x27c>
    806a:	ldr	r4, [pc, #344]	; (81c4 <set_arm_clock+0x294>)
    806c:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    8070:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8074:	and.w	r4, r9, r4
    8078:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    807a:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    807e:	beq.n	8098 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    8080:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    8084:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    8088:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    808a:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    808e:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    8092:	ldr	r3, [r4, #0]
    8094:	cmp	r3, #0
    8096:	bge.n	8092 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    8098:	ldr.w	ip, [pc, #244]	; 8190 <set_arm_clock+0x260>
    809c:	subs	r2, #1
    809e:	ldr.w	r3, [ip, #16]
    80a2:	and.w	r3, r3, #7
    80a6:	cmp	r3, r2
    80a8:	beq.n	80ba <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    80aa:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    80ae:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    80b0:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    80b4:	ldr	r3, [r4, #72]	; 0x48
    80b6:	lsls	r3, r3, #15
    80b8:	bmi.n	80b4 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    80ba:	subs	r1, #1
    80bc:	lsls	r1, r1, #10
    80be:	eor.w	r3, lr, r1
    80c2:	tst.w	r3, #7168	; 0x1c00
    80c6:	beq.n	80e2 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    80c8:	ldr	r3, [pc, #196]	; (8190 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    80ca:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    80ce:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    80d2:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    80d4:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    80d8:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    80dc:	ldr	r3, [r2, #72]	; 0x48
    80de:	lsls	r1, r3, #30
    80e0:	bmi.n	80dc <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    80e2:	ldr	r3, [pc, #228]	; (81c8 <set_arm_clock+0x298>)
    80e4:	ldr	r1, [pc, #228]	; (81cc <set_arm_clock+0x29c>)
    80e6:	add	r3, r0
    80e8:	lsrs	r3, r3, #7
    80ea:	umull	r3, r1, r1, r3
    80ee:	lsrs	r1, r1, #12
    80f0:	cmp	r1, #4
    80f2:	it	cs
    80f4:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    80f6:	subs	r3, r1, #1
    80f8:	lsls	r3, r3, #8
    80fa:	eor.w	r2, lr, r3
    80fe:	tst.w	r2, #768	; 0x300
    8102:	beq.n	8114 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    8104:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    8108:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    810c:	ldr	r2, [pc, #128]	; (8190 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    810e:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    8112:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    8114:	ldr	r3, [pc, #120]	; (8190 <set_arm_clock+0x260>)
    8116:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8118:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    811a:	bic.w	r4, r4, #33554432	; 0x2000000
    811e:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8120:	ldr	r3, [r2, #72]	; 0x48
    8122:	lsls	r3, r3, #26
    8124:	bmi.n	8120 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8126:	ldr	r3, [pc, #168]	; (81d0 <set_arm_clock+0x2a0>)
    8128:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    812c:	ldr	r4, [pc, #164]	; (81d4 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    812e:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8130:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    8134:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8136:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    813a:	ldr	r4, [pc, #156]	; (81d8 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    813c:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    8140:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8144:	ldr	r2, [pc, #148]	; (81dc <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    8146:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8148:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    814a:	bcs.n	815e <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    814c:	ldr	r3, [pc, #68]	; (8194 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    814e:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8152:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    8154:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    8156:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8158:	ldr	r3, [r2, #0]
    815a:	cmp	r3, #0
    815c:	bge.n	8158 <set_arm_clock+0x228>
	}

	return frequency;
}
    815e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    8162:	cmp	r1, #4
    8164:	bhi.w	8046 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    8168:	adds	r1, #1
				div_arm = 1;
    816a:	movs	r2, #1
    816c:	b.n	8026 <set_arm_clock+0xf6>
    816e:	ldr.w	r8, [pc, #124]	; 81ec <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    8172:	movs	r3, #108	; 0x6c
    8174:	ldr	r0, [pc, #104]	; (81e0 <set_arm_clock+0x2b0>)
    8176:	b.n	8066 <set_arm_clock+0x136>
    8178:	movs	r5, #18
    817a:	b.n	7f8a <set_arm_clock+0x5a>
    817c:	ldr	r0, [pc, #100]	; (81e4 <set_arm_clock+0x2b4>)
    817e:	ldr.w	r8, [pc, #112]	; 81f0 <set_arm_clock+0x2c0>
    8182:	mul.w	r0, r0, r3
    8186:	orr.w	r8, r3, r8
    818a:	b.n	8066 <set_arm_clock+0x136>
    818c:	.word	0x1f78a400
    8190:	.word	0x400fc000
    8194:	.word	0x40080000
    8198:	.word	0x23c34600
    819c:	.word	0xdc3cba00
    81a0:	.word	0x004cb223
    81a4:	.word	0x51eb851f
    81a8:	.word	0x016e3600
    81ac:	.word	0x400d8000
    81b0:	.word	0x80003040
    81b4:	.word	0x269fb1ff
    81b8:	.word	0x005b8d80
    81bc:	.word	0x165e9f81
    81c0:	.word	0x269fb200
    81c4:	.word	0x8001307f
    81c8:	.word	0x08f0d17f
    81cc:	.word	0x00e5109f
    81d0:	.word	0x431bde83
    81d4:	.word	0x20001010
    81d8:	.word	0x2000100c
    81dc:	.word	0x20002484
    81e0:	.word	0x4d3f6400
    81e4:	.word	0x00b71b00
    81e8:	.word	0x80002036
    81ec:	.word	0x8000206c
    81f0:	.word	0x80002000

000081f4 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    81f4:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    81f6:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    81f8:	cbz	r3, 8202 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    81fa:	ldr	r3, [r2, #4]
    81fc:	orr.w	r3, r3, #32768	; 0x8000
    8200:	str	r3, [r2, #4]
	}
	__disable_irq();
    8202:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    8204:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    8206:	cbz	r4, 8240 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    8208:	ldr	r3, [pc, #80]	; (825c <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    820a:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    820c:	ldr.w	r4, [r3, #432]	; 0x1b0
    8210:	tst	r4, r1
    8212:	bne.n	8254 <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    8214:	ldr	r5, [pc, #72]	; (8260 <schedule_transfer+0x6c>)
    8216:	ldr	r7, [r5, #0]
    8218:	b.n	8224 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    821a:	ldr	r4, [r5, #0]
    821c:	subs	r4, r4, r7
    821e:	cmp.w	r4, #2400	; 0x960
    8222:	bcs.n	823c <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    8224:	ldr.w	r4, [r3, #320]	; 0x140
    8228:	orr.w	r4, r4, #16384	; 0x4000
    822c:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    8230:	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8234:	ldr.w	r4, [r3, #320]	; 0x140
    8238:	lsls	r4, r4, #17
    823a:	bpl.n	821a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    823c:	tst	r1, r6
    823e:	bne.n	8254 <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    8240:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    8242:	ldr	r4, [pc, #24]	; (825c <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    8244:	str	r2, [r0, #8]
	endpoint->status = 0;
    8246:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    8248:	ldr.w	r3, [r4, #432]	; 0x1b0
    824c:	orrs	r1, r3
    824e:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    8252:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    8254:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    8256:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    8258:	pop	{r4, r5, r6, r7}
    825a:	bx	lr
    825c:	.word	0x402e0000
    8260:	.word	0xe0001004

00008264 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    8264:	push	{r4, r5, r6, lr}
    8266:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    8268:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    826a:	cbz	r0, 8292 <run_callbacks+0x2e>
    826c:	mov	r2, r0
    826e:	movs	r4, #0
    8270:	b.n	827a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    8272:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    8274:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    8276:	cmp	r2, #1
    8278:	beq.n	8294 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    827a:	ldr	r3, [r2, #4]
    827c:	ands.w	r3, r3, #128	; 0x80
    8280:	beq.n	8272 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    8282:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8284:	cbz	r4, 8292 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    8286:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    8288:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    828a:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    828c:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    828e:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8290:	bne.n	8286 <run_callbacks+0x22>
    8292:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    8294:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    8296:	str	r3, [r6, #52]	; 0x34
			break;
    8298:	b.n	8284 <run_callbacks+0x20>
    829a:	nop

0000829c <endpoint0_receive.constprop.1>:
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
    829c:	push	{r4, r5, r6, r7, lr}
{
	//printf("rx %lu\n", len);
	if (len > 0) {
    829e:	cbnz	r0, 82de <endpoint0_receive.constprop.1+0x42>
    82a0:	ldr	r4, [pc, #136]	; (832c <endpoint0_receive.constprop.1+0x90>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    82a2:	ldr	r1, [pc, #140]	; (8330 <endpoint0_receive.constprop.1+0x94>)
    82a4:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    82a6:	ldr	r3, [pc, #140]	; (8334 <endpoint0_receive.constprop.1+0x98>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    82a8:	movs	r5, #0
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    82aa:	mov.w	r0, #65537	; 0x10001
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    82ae:	movw	r7, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    82b2:	str	r1, [r4, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    82b4:	mov.w	r6, #65536	; 0x10000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    82b8:	str	r2, [r1, #0]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    82ba:	mov	r2, r3
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    82bc:	str	r5, [r4, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    82be:	str	r7, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    82c0:	str.w	r0, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    82c4:	ldr.w	r0, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    82c8:	ldr	r4, [pc, #108]	; (8338 <endpoint0_receive.constprop.1+0x9c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    82ca:	orrs	r0, r6
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    82cc:	str	r5, [r1, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    82ce:	str.w	r0, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    82d2:	str	r6, [r4, #0]
	while (USB1_ENDPTPRIME) ;
    82d4:	ldr.w	r3, [r2, #432]	; 0x1b0
    82d8:	cmp	r3, #0
    82da:	bne.n	82d4 <endpoint0_receive.constprop.1+0x38>
}
    82dc:	pop	{r4, r5, r6, r7, pc}
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    82de:	lsls	r0, r0, #16
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    82e0:	ldr	r3, [pc, #88]	; (833c <endpoint0_receive.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    82e2:	ldr	r5, [pc, #80]	; (8334 <endpoint0_receive.constprop.1+0x98>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    82e4:	movs	r2, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    82e6:	ldr	r4, [pc, #68]	; (832c <endpoint0_receive.constprop.1+0x90>)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    82e8:	orr.w	r0, r0, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    82ec:	movs	r6, #0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    82ee:	ldr	r1, [pc, #80]	; (8340 <endpoint0_receive.constprop.1+0xa4>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    82f0:	str	r2, [r3, #0]
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    82f2:	mov	r2, r5
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    82f4:	str	r6, [r4, #12]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    82f6:	add.w	lr, r1, #4096	; 0x1000
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    82fa:	str	r0, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    82fc:	add.w	r7, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    8300:	str	r3, [r4, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8302:	add.w	r6, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    8306:	ldr.w	r0, [r5, #432]	; 0x1b0
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    830a:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    830c:	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    8310:	orr.w	r0, r0, #1
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8314:	str.w	lr, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8318:	str	r7, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    831a:	str	r6, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    831c:	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    831e:	str.w	r0, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    8322:	ldr.w	r3, [r2, #432]	; 0x1b0
    8326:	cmp	r3, #0
    8328:	bne.n	8322 <endpoint0_receive.constprop.1+0x86>
    832a:	b.n	82a2 <endpoint0_receive.constprop.1+0x6>
    832c:	.word	0x20004000
    8330:	.word	0x20003020
    8334:	.word	0x402e0000
    8338:	.word	0x20002198
    833c:	.word	0x20003000
    8340:	.word	0x200021b0

00008344 <endpoint0_transmit.constprop.2>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    8344:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    8346:	cbnz	r1, 8382 <endpoint0_transmit.constprop.2+0x3e>
    8348:	ldr	r4, [pc, #132]	; (83d0 <endpoint0_transmit.constprop.2+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    834a:	ldr	r1, [pc, #136]	; (83d4 <endpoint0_transmit.constprop.2+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    834c:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    834e:	ldr	r3, [pc, #136]	; (83d8 <endpoint0_transmit.constprop.2+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8350:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8352:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8356:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8358:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    835a:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    835c:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    835e:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    8360:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8362:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    8366:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    836a:	ldr	r5, [pc, #112]	; (83dc <endpoint0_transmit.constprop.2+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    836c:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8370:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    8372:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8376:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    8378:	ldr.w	r3, [r2, #432]	; 0x1b0
    837c:	cmp	r3, #0
    837e:	bne.n	8378 <endpoint0_transmit.constprop.2+0x34>
}
    8380:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8382:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8384:	ldr	r3, [pc, #88]	; (83e0 <endpoint0_transmit.constprop.2+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8386:	ldr	r5, [pc, #80]	; (83d8 <endpoint0_transmit.constprop.2+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8388:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    838a:	ldr	r4, [pc, #68]	; (83d0 <endpoint0_transmit.constprop.2+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    838c:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    8390:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8392:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8394:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8396:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    839a:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    839c:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    83a0:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    83a2:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    83a6:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    83aa:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    83ae:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    83b0:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    83b2:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    83b6:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    83ba:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    83be:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    83c0:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    83c2:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    83c6:	ldr.w	r3, [r2, #432]	; 0x1b0
    83ca:	cmp	r3, #0
    83cc:	bne.n	83c6 <endpoint0_transmit.constprop.2+0x82>
    83ce:	b.n	834a <endpoint0_transmit.constprop.2+0x6>
    83d0:	.word	0x20004000
    83d4:	.word	0x20003020
    83d8:	.word	0x402e0000
    83dc:	.word	0x20002198
    83e0:	.word	0x20003000

000083e4 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    83e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    83e8:	ldr	r4, [pc, #752]	; (86dc <isr+0x2f8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    83ea:	sub	sp, #28
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    83ec:	ldr.w	r7, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    83f0:	lsls	r5, r7, #31
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    83f2:	str.w	r7, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    83f6:	bpl.n	84e8 <isr+0x104>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    83f8:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    83fc:	cmp	r3, #0
    83fe:	beq.n	84de <isr+0xfa>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8400:	mov.w	sl, #65537	; 0x10001
    8404:	ldr.w	r8, [pc, #764]	; 8704 <isr+0x320>
    8408:	ldr	r6, [pc, #724]	; (86e0 <isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    840a:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    840c:	mov	r9, sl
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    840e:	str.w	r3, [r4, #428]	; 0x1ac
    8412:	ldr	r2, [r6, #40]	; 0x28
    8414:	ldr	r1, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    8416:	ldr.w	r3, [r4, #320]	; 0x140
    841a:	orr.w	r3, r3, #8192	; 0x2000
    841e:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    8422:	ldr.w	r3, [r4, #320]	; 0x140
    8426:	lsls	r0, r3, #18
    8428:	bpl.n	8416 <isr+0x32>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    842a:	ldr.w	r3, [r5, #320]	; 0x140
    842e:	bic.w	r3, r3, #8192	; 0x2000
    8432:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8436:	str.w	r9, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    843a:	ldr.w	r3, [r4, #436]	; 0x1b4
    843e:	ands.w	r3, r3, #65537	; 0x10001
    8442:	bne.n	843a <isr+0x56>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8444:	uxth	r0, r2
    8446:	movw	lr, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    844a:	str.w	r3, [r8]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    844e:	cmp	r0, lr
{
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
    8450:	str	r2, [sp, #16]
    8452:	str	r1, [sp, #20]
	switch (setup.wRequestAndType) {
    8454:	bhi.w	85e6 <isr+0x202>
    8458:	cmp.w	r0, #1664	; 0x680
    845c:	bcs.w	8908 <isr+0x524>
    8460:	movw	lr, #545	; 0x221
    8464:	cmp	r0, lr
    8466:	beq.w	88e8 <isr+0x504>
    846a:	bhi.w	8630 <isr+0x24c>
    846e:	cmp	r0, #130	; 0x82
    8470:	beq.w	87ba <isr+0x3d6>
    8474:	bls.w	8776 <isr+0x392>
    8478:	cmp.w	r0, #258	; 0x102
    847c:	bne.w	88de <isr+0x4fa>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    8480:	ldrh.w	r2, [sp, #20]
    8484:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    8488:	cmp	r3, #7
    848a:	bhi.w	8620 <isr+0x23c>
		dir = setup.wIndex & 0x80;
		if (dir) {
    848e:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    8492:	mov.w	r3, r3, lsl #2
    8496:	ldr	r2, [pc, #588]	; (86e4 <isr+0x300>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8498:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    849c:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    84a0:	add	r2, r3
    84a2:	ldr	r3, [r2, #0]
    84a4:	ite	ne
    84a6:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    84aa:	biceq.w	r3, r3, #1
    84ae:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    84b0:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    84b2:	ldr	r3, [pc, #564]	; (86e8 <isr+0x304>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    84b4:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    84b6:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    84b8:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    84ba:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    84bc:	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    84c0:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    84c4:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    84c6:	orr.w	r3, r2, #65536	; 0x10000
    84ca:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    84ce:	ldr.w	r3, [r4, #432]	; 0x1b0
    84d2:	cmp	r3, #0
    84d4:	bne.n	84ce <isr+0xea>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    84d6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    84da:	cmp	r3, #0
    84dc:	bne.n	840e <isr+0x2a>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    84de:	ldr	r3, [pc, #508]	; (86dc <isr+0x2f8>)
    84e0:	ldr.w	r4, [r3, #444]	; 0x1bc
		if (completestatus) {
    84e4:	cmp	r4, #0
    84e6:	bne.n	857c <isr+0x198>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    84e8:	lsls	r4, r7, #25
    84ea:	bpl.n	851a <isr+0x136>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    84ec:	ldr	r3, [pc, #492]	; (86dc <isr+0x2f8>)
    84ee:	ldr.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    84f2:	mov	r1, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    84f4:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    84f8:	ldr.w	r2, [r3, #444]	; 0x1bc
    84fc:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    8500:	ldr.w	r3, [r1, #432]	; 0x1b0
    8504:	ldr	r2, [pc, #468]	; (86dc <isr+0x2f8>)
    8506:	cmp	r3, #0
    8508:	bne.n	8500 <isr+0x11c>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    850a:	mov.w	r0, #4294967295
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
		#endif
		endpointN_notify_mask = 0;
    850e:	ldr	r1, [pc, #476]	; (86ec <isr+0x308>)
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    8510:	str.w	r0, [r2, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    8514:	ldr.w	r2, [r2, #388]	; 0x184
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
		#endif
		endpointN_notify_mask = 0;
    8518:	str	r3, [r1, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    851a:	lsls	r5, r7, #7
    851c:	bpl.n	8526 <isr+0x142>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    851e:	ldr	r3, [pc, #464]	; (86f0 <isr+0x30c>)
    8520:	ldr	r3, [r3, #0]
    8522:	cbz	r3, 8526 <isr+0x142>
    8524:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    8526:	lsls	r4, r7, #6
    8528:	bpl.n	8532 <isr+0x14e>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    852a:	ldr	r3, [pc, #456]	; (86f4 <isr+0x310>)
    852c:	ldr	r3, [r3, #0]
    852e:	cbz	r3, 8532 <isr+0x14e>
    8530:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    8532:	lsls	r0, r7, #29
    8534:	bpl.n	8548 <isr+0x164>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    8536:	ldr	r3, [pc, #420]	; (86dc <isr+0x2f8>)
    8538:	ldr.w	r3, [r3, #388]	; 0x184
    853c:	ands.w	r3, r3, #512	; 0x200
    8540:	beq.n	85e0 <isr+0x1fc>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    8542:	ldr	r3, [pc, #436]	; (86f8 <isr+0x314>)
    8544:	movs	r2, #1
    8546:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    8548:	ldr	r3, [pc, #400]	; (86dc <isr+0x2f8>)
    854a:	ldr.w	r2, [r3, #328]	; 0x148
    854e:	lsls	r1, r2, #24
    8550:	bpl.n	8576 <isr+0x192>
    8552:	lsls	r2, r7, #24
    8554:	bpl.n	8576 <isr+0x192>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    8556:	ldr	r1, [pc, #420]	; (86fc <isr+0x318>)
    8558:	ldrb	r2, [r1, #0]
    855a:	cbz	r2, 8576 <isr+0x192>
			if (--usb_reboot_timer == 0) {
    855c:	subs	r2, #1
    855e:	uxtb	r2, r2
    8560:	strb	r2, [r1, #0]
    8562:	cbnz	r2, 8576 <isr+0x192>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    8564:	ldr	r1, [pc, #408]	; (8700 <isr+0x31c>)
    8566:	ldrb	r2, [r1, #0]
    8568:	and.w	r2, r2, #239	; 0xef
    856c:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    856e:	cmp	r2, #0
    8570:	beq.w	8ace <isr+0x6ea>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    8574:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    8576:	add	sp, #28
    8578:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    857c:	ldr	r2, [pc, #388]	; (8704 <isr+0x320>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    857e:	str.w	r4, [r3, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    8582:	ldr	r1, [r2, #0]
    8584:	tst	r4, r1
    8586:	bne.w	89c0 <isr+0x5dc>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    858a:	ldr	r3, [pc, #352]	; (86ec <isr+0x308>)
    858c:	ldr	r5, [r3, #0]
#if 1
			if (completestatus) {
    858e:	ands	r5, r4
    8590:	beq.n	84e8 <isr+0x104>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    8592:	movs.w	r8, r5, lsr #16
    8596:	beq.n	85ba <isr+0x1d6>
    8598:	ldr	r6, [pc, #324]	; (86e0 <isr+0x2fc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    859a:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    859e:	rbit	r4, r8
    85a2:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    85a6:	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    85aa:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    85ae:	adds	r0, #64	; 0x40
    85b0:	bl	8264 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    85b4:	bics.w	r8, r8, r4
    85b8:	bne.n	859e <isr+0x1ba>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    85ba:	uxth	r5, r5
				while(rx) {
    85bc:	cmp	r5, #0
    85be:	beq.n	84e8 <isr+0x104>
    85c0:	ldr	r6, [pc, #284]	; (86e0 <isr+0x2fc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    85c2:	mov.w	r8, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    85c6:	rbit	r4, r5
    85ca:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    85ce:	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    85d2:	lsl.w	r4, r8, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    85d6:	bl	8264 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    85da:	bics	r5, r4
    85dc:	bne.n	85c6 <isr+0x1e2>
    85de:	b.n	84e8 <isr+0x104>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    85e0:	ldr	r2, [pc, #276]	; (86f8 <isr+0x314>)
    85e2:	strb	r3, [r2, #0]
    85e4:	b.n	8548 <isr+0x164>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    85e6:	movw	lr, #2817	; 0xb01
    85ea:	cmp	r0, lr
    85ec:	beq.w	889a <isr+0x4b6>
    85f0:	bhi.n	868e <isr+0x2aa>
    85f2:	cmp.w	r0, #2304	; 0x900
    85f6:	beq.w	8800 <isr+0x41c>
    85fa:	bls.w	8796 <isr+0x3b2>
    85fe:	movw	r3, #2337	; 0x921
    8602:	cmp	r0, r3
    8604:	beq.w	898c <isr+0x5a8>
    8608:	movw	r3, #2689	; 0xa81
    860c:	cmp	r0, r3
    860e:	bne.n	8620 <isr+0x23c>
			endpoint0_receive(NULL, 0, 0);
			return;
		}
		break;
	  case 0x0A81: // GET_INTERFACE (alternate setting)
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    8610:	ldrh.w	r3, [sp, #20]
    8614:	cmp	r3, #2
    8616:	beq.w	8a7c <isr+0x698>
			endpoint0_buffer[0] = usb_audio_transmit_setting;
			endpoint0_transmit(endpoint0_buffer, 1, 0);
			return;
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    861a:	cmp	r3, #3
    861c:	beq.w	8a60 <isr+0x67c>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    8620:	str.w	sl, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8624:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8628:	cmp	r3, #0
    862a:	bne.w	840e <isr+0x2a>
    862e:	b.n	84de <isr+0xfa>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8630:	movw	lr, #801	; 0x321
    8634:	cmp	r0, lr
    8636:	beq.w	88e8 <isr+0x504>
    863a:	bls.n	870c <isr+0x328>
    863c:	movw	lr, #1057	; 0x421
    8640:	cmp	r0, lr
    8642:	beq.w	88e8 <isr+0x504>
    8646:	cmp.w	r0, #1280	; 0x500
    864a:	bne.n	8620 <isr+0x23c>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    864c:	ldr	r2, [pc, #152]	; (86e8 <isr+0x304>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    864e:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8650:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8652:	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8654:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8656:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8658:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    865a:	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    865e:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8662:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    8664:	orr.w	r3, r1, #65536	; 0x10000
    8668:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    866c:	ldr.w	r3, [r4, #432]	; 0x1b0
    8670:	cmp	r3, #0
    8672:	bne.n	866c <isr+0x288>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    8674:	ldrh.w	r3, [sp, #18]
    8678:	lsls	r3, r3, #25
    867a:	orr.w	r3, r3, #16777216	; 0x1000000
    867e:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8682:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8686:	cmp	r3, #0
    8688:	bne.w	840e <isr+0x2a>
    868c:	b.n	84de <isr+0xfa>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    868e:	movw	r2, #33441	; 0x82a1
    8692:	cmp	r0, r2
    8694:	beq.w	8876 <isr+0x492>
    8698:	bhi.w	8864 <isr+0x480>
    869c:	movw	r2, #33185	; 0x81a1
    86a0:	cmp	r0, r2
    86a2:	beq.w	8876 <isr+0x492>
    86a6:	movw	r2, #33186	; 0x81a2
    86aa:	cmp	r0, r2
    86ac:	bne.n	8620 <isr+0x23c>
				return;
			}
		}
		break;
	  case 0x81A2: // GET_CUR (wValue=0, wIndex=interface, wLength=len)
		if (setup.wLength >= 3) {
    86ae:	ldrh.w	r2, [sp, #22]
    86b2:	cmp	r2, #2
    86b4:	bls.n	8620 <isr+0x23c>
			endpoint0_buffer[0] = 44100 & 255;
    86b6:	ldr	r2, [pc, #80]	; (8708 <isr+0x324>)
    86b8:	movs	r1, #68	; 0x44
			endpoint0_buffer[1] = 44100 >> 8;
    86ba:	mov.w	lr, #172	; 0xac
			}
		}
		break;
	  case 0x81A2: // GET_CUR (wValue=0, wIndex=interface, wLength=len)
		if (setup.wLength >= 3) {
			endpoint0_buffer[0] = 44100 & 255;
    86be:	strb	r1, [r2, #0]
			endpoint0_buffer[1] = 44100 >> 8;
			endpoint0_buffer[2] = 0;
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    86c0:	mov	r0, r2
    86c2:	movs	r1, #3
		break;
	  case 0x81A2: // GET_CUR (wValue=0, wIndex=interface, wLength=len)
		if (setup.wLength >= 3) {
			endpoint0_buffer[0] = 44100 & 255;
			endpoint0_buffer[1] = 44100 >> 8;
			endpoint0_buffer[2] = 0;
    86c4:	strb	r3, [r2, #2]
		}
		break;
	  case 0x81A2: // GET_CUR (wValue=0, wIndex=interface, wLength=len)
		if (setup.wLength >= 3) {
			endpoint0_buffer[0] = 44100 & 255;
			endpoint0_buffer[1] = 44100 >> 8;
    86c6:	strb.w	lr, [r2, #1]
			endpoint0_buffer[2] = 0;
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    86ca:	bl	8344 <endpoint0_transmit.constprop.2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    86ce:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    86d2:	cmp	r3, #0
    86d4:	bne.w	840e <isr+0x2a>
    86d8:	b.n	84de <isr+0xfa>
    86da:	nop
    86dc:	.word	0x402e0000
    86e0:	.word	0x20004000
    86e4:	.word	0x402e01c0
    86e8:	.word	0x20003020
    86ec:	.word	0x20002188
    86f0:	.word	0x20002184
    86f4:	.word	0x20002190
    86f8:	.word	0x20002194
    86fc:	.word	0x2000219c
    8700:	.word	0x2000218c
    8704:	.word	0x20002198
    8708:	.word	0x200021b0
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    870c:	movw	r3, #770	; 0x302
    8710:	cmp	r0, r3
    8712:	bne.n	8620 <isr+0x23c>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    8714:	ldrh.w	r2, [sp, #20]
    8718:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    871c:	cmp	r3, #7
    871e:	bhi.w	8620 <isr+0x23c>
		dir = setup.wIndex & 0x80;
		if (dir) {
    8722:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    8726:	mov.w	r3, r3, lsl #2
    872a:	ldr	r2, [pc, #760]	; (8a24 <isr+0x640>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    872c:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8730:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    8734:	add	r2, r3
    8736:	ldr	r3, [r2, #0]
    8738:	ite	ne
    873a:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    873e:	orreq.w	r3, r3, #1
    8742:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8744:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8746:	ldr	r3, [pc, #736]	; (8a28 <isr+0x644>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8748:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    874a:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    874c:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    874e:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8750:	str.w	sl, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8754:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8758:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    875a:	orr.w	r3, r2, #65536	; 0x10000
    875e:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    8762:	ldr.w	r3, [r4, #432]	; 0x1b0
    8766:	cmp	r3, #0
    8768:	bne.n	8762 <isr+0x37e>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    876a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    876e:	cmp	r3, #0
    8770:	bne.w	840e <isr+0x2a>
    8774:	b.n	84de <isr+0xfa>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8776:	cmp	r0, #128	; 0x80
    8778:	bne.w	8620 <isr+0x23c>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    877c:	ldr	r2, [pc, #684]	; (8a2c <isr+0x648>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    877e:	movs	r1, #2
    8780:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    8782:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    8784:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    8786:	bl	8344 <endpoint0_transmit.constprop.2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    878a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    878e:	cmp	r3, #0
    8790:	bne.w	840e <isr+0x2a>
    8794:	b.n	84de <isr+0xfa>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8796:	cmp.w	r0, #2176	; 0x880
    879a:	bne.w	8620 <isr+0x23c>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    879e:	ldr	r2, [pc, #656]	; (8a30 <isr+0x64c>)
		endpoint0_transmit(reply_buffer, 1, 0);
    87a0:	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    87a2:	ldr	r3, [pc, #648]	; (8a2c <isr+0x648>)
    87a4:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    87a6:	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    87a8:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    87aa:	bl	8344 <endpoint0_transmit.constprop.2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    87ae:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    87b2:	cmp	r3, #0
    87b4:	bne.w	840e <isr+0x2a>
    87b8:	b.n	84de <isr+0xfa>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    87ba:	ldrh.w	r1, [sp, #20]
    87be:	and.w	r2, r1, #127	; 0x7f
		if (endpoint > 7) break;
    87c2:	cmp	r2, #7
    87c4:	bhi.w	8620 <isr+0x23c>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    87c8:	lsls	r2, r2, #2
    87ca:	ldr	r0, [pc, #600]	; (8a24 <isr+0x640>)
		reply_buffer[0] = 0;
    87cc:	ldr.w	lr, [pc, #604]	; 8a2c <isr+0x648>
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    87d0:	lsls	r1, r1, #24
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    87d2:	add	r0, r2
    87d4:	ldr	r2, [r0, #0]
		reply_buffer[0] = 0;
    87d6:	strb.w	r3, [lr]
		reply_buffer[1] = 0;
    87da:	strb.w	r3, [lr, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    87de:	bpl.w	89b8 <isr+0x5d4>
    87e2:	lsls	r2, r2, #15
    87e4:	bpl.n	87ec <isr+0x408>
			reply_buffer[0] = 1;
    87e6:	movs	r3, #1
    87e8:	strb.w	r3, [lr]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    87ec:	movs	r1, #2
    87ee:	ldr	r0, [pc, #572]	; (8a2c <isr+0x648>)
    87f0:	bl	8344 <endpoint0_transmit.constprop.2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    87f4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    87f8:	cmp	r3, #0
    87fa:	bne.w	840e <isr+0x2a>
    87fe:	b.n	84de <isr+0xfa>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    8800:	ldrb.w	lr, [sp, #18]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    8804:	mov.w	r0, #13369548	; 0xcc00cc
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    8808:	ldr	r2, [pc, #548]	; (8a30 <isr+0x64c>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    880a:	mov.w	r1, #12845252	; 0xc400c4
    880e:	str	r3, [sp, #4]
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    8810:	strb.w	lr, [r2]
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    8814:	ldr	r2, [pc, #540]	; (8a34 <isr+0x650>)
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    8816:	str.w	r0, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    881a:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    881e:	str.w	r2, [r5, #464]	; 0x1d0
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
		#elif defined(SEREMU_INTERFACE)
		usb_seremu_configure();
    8822:	bl	8e34 <usb_seremu_configure>
		#endif
		#if defined(MIDI_INTERFACE)
		usb_midi_configure();
		#endif
		#if defined(AUDIO_INTERFACE)
		usb_audio_configure();
    8826:	bl	a038 <usb_audio_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    882a:	ldr	r2, [pc, #508]	; (8a28 <isr+0x644>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    882c:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    882e:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8830:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8832:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8834:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8836:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8838:	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    883a:	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    883e:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8842:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    8844:	orr.w	r2, r1, #65536	; 0x10000
    8848:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    884c:	ldr	r2, [pc, #488]	; (8a38 <isr+0x654>)
    884e:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    8850:	ldr.w	r3, [r4, #432]	; 0x1b0
    8854:	cmp	r3, #0
    8856:	bne.n	8850 <isr+0x46c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8858:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    885c:	cmp	r3, #0
    885e:	bne.w	840e <isr+0x2a>
    8862:	b.n	84de <isr+0xfa>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8864:	movw	r3, #33697	; 0x83a1
    8868:	cmp	r0, r3
    886a:	beq.n	8876 <isr+0x492>
    886c:	movw	r3, #33953	; 0x84a1
    8870:	cmp	r0, r3
    8872:	bne.w	8620 <isr+0x23c>
		break;
	  case 0x81A1: // GET FEATURE
	  case 0x82A1:
	  case 0x83A1:
	  case 0x84A1:
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    8876:	ldrh.w	r3, [sp, #22]
    887a:	cmp	r3, #8
    887c:	bhi.w	8620 <isr+0x23c>
			uint32_t len;
			if (usb_audio_get_feature(&setup, endpoint0_buffer, &len)) {
    8880:	add	r2, sp, #12
    8882:	ldr	r1, [pc, #440]	; (8a3c <isr+0x658>)
    8884:	add	r0, sp, #16
    8886:	bl	a0f4 <usb_audio_get_feature>
    888a:	cmp	r0, #0
    888c:	beq.w	8620 <isr+0x23c>
				//printf("GET feature, len=%d\n", len);
				endpoint0_transmit(endpoint0_buffer, len, 0);
    8890:	ldr	r1, [sp, #12]
    8892:	ldr	r0, [pc, #424]	; (8a3c <isr+0x658>)
    8894:	bl	8344 <endpoint0_transmit.constprop.2>
    8898:	b.n	84d6 <isr+0xf2>
		}
		break;
#endif
#if defined(AUDIO_INTERFACE)
	  case 0x0B01: // SET_INTERFACE (alternate setting)
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    889a:	ldrh.w	r2, [sp, #20]
    889e:	cmp	r2, #2
    88a0:	beq.w	89e4 <isr+0x600>
			if (usb_audio_transmit_setting > 0) {
				// TODO: set up AUDIO_TX_ENDPOINT to transmit
			}
			endpoint0_receive(NULL, 0, 0);
			return;
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    88a4:	cmp	r2, #3
    88a6:	bne.w	8620 <isr+0x23c>
			usb_audio_receive_setting = setup.wValue;
    88aa:	ldrh.w	lr, [sp, #18]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    88ae:	movs	r1, #128	; 0x80
				// TODO: set up AUDIO_TX_ENDPOINT to transmit
			}
			endpoint0_receive(NULL, 0, 0);
			return;
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
			usb_audio_receive_setting = setup.wValue;
    88b0:	ldr	r2, [pc, #396]	; (8a40 <isr+0x65c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    88b2:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    88b4:	str	r3, [r6, #76]	; 0x4c
				// TODO: set up AUDIO_TX_ENDPOINT to transmit
			}
			endpoint0_receive(NULL, 0, 0);
			return;
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
			usb_audio_receive_setting = setup.wValue;
    88b6:	strb.w	lr, [r2]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    88ba:	ldr	r2, [pc, #364]	; (8a28 <isr+0x644>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    88bc:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    88be:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    88c0:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    88c2:	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    88c6:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    88ca:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    88cc:	orr.w	r3, r1, #65536	; 0x10000
    88d0:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    88d4:	ldr.w	r3, [r4, #432]	; 0x1b0
    88d8:	cmp	r3, #0
    88da:	bne.n	88d4 <isr+0x4f0>
    88dc:	b.n	84d6 <isr+0xf2>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    88de:	movw	r3, #289	; 0x121
    88e2:	cmp	r0, r3
    88e4:	bne.w	8620 <isr+0x23c>
	  case 0x0121: // SET FEATURE
	  case 0x0221:
	  case 0x0321:
	  case 0x0421:
		//printf("set_feature, word1=%x, len=%d\n", setup.word1, setup.wLength);
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    88e8:	ldrh.w	r0, [sp, #22]
    88ec:	cmp	r0, #8
    88ee:	bhi.w	8620 <isr+0x23c>
			endpoint0_setupdata.bothwords = setupdata;
    88f2:	ldr	r3, [pc, #336]	; (8a44 <isr+0x660>)
    88f4:	str	r2, [r3, #0]
    88f6:	str	r1, [r3, #4]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    88f8:	bl	829c <endpoint0_receive.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    88fc:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8900:	cmp	r3, #0
    8902:	bne.w	840e <isr+0x2a>
    8906:	b.n	84de <isr+0xfa>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    8908:	ldr	r3, [pc, #316]	; (8a48 <isr+0x664>)
    890a:	ldr	r1, [r3, #4]
    890c:	cmp	r1, #0
    890e:	beq.w	8620 <isr+0x23c>
    8912:	ldrh.w	r0, [sp, #18]
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    8916:	ldrh.w	lr, [sp, #20]
    891a:	b.n	8926 <isr+0x542>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    891c:	adds	r3, #12
    891e:	ldr	r1, [r3, #4]
    8920:	cmp	r1, #0
    8922:	beq.w	8620 <isr+0x23c>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    8926:	ldrh	r2, [r3, #0]
    8928:	cmp	r2, r0
    892a:	bne.n	891c <isr+0x538>
    892c:	ldrh	r2, [r3, #2]
    892e:	cmp	r2, lr
    8930:	bne.n	891c <isr+0x538>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    8932:	lsrs	r2, r0, #8
    8934:	cmp	r2, #3
    8936:	beq.w	8b32 <isr+0x74e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    893a:	ldrh	r2, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    893c:	ldrh.w	r3, [sp, #22]
    8940:	cmp	r3, r2
    8942:	it	cs
    8944:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    8946:	cmp.w	r0, #512	; 0x200
    894a:	beq.w	8aaa <isr+0x6c6>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    894e:	cmp.w	r0, #1792	; 0x700
    8952:	beq.w	8a80 <isr+0x69c>
    8956:	ldr.w	fp, [pc, #248]	; 8a50 <isr+0x66c>
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    895a:	mov	r2, r3
    895c:	str	r3, [sp, #4]
    895e:	mov	r0, fp
    8960:	bl	7dfc <memcpy>
    8964:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8966:	bic.w	r2, fp, #31
	uint32_t end_addr = (uint32_t)addr + size;
    896a:	add	fp, r3
	asm volatile("": : :"memory");
	asm("dsb");
    896c:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    8970:	ldr	r1, [pc, #216]	; (8a4c <isr+0x668>)
    8972:	str	r2, [r1, #0]
		location += 32;
    8974:	adds	r2, #32
	} while (location < end_addr);
    8976:	cmp	fp, r2
    8978:	bhi.n	8970 <isr+0x58c>
	asm("dsb");
    897a:	dsb	sy
	asm("isb");
    897e:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    8982:	ldr	r0, [pc, #204]	; (8a50 <isr+0x66c>)
    8984:	mov	r1, r3
    8986:	bl	8344 <endpoint0_transmit.constprop.2>
    898a:	b.n	84d6 <isr+0xf2>
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    898c:	ldrh.w	r0, [sp, #22]
    8990:	cmp	r0, #8
    8992:	bhi.w	8620 <isr+0x23c>
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
			endpoint0_setupdata.bothwords = setup.bothwords;
    8996:	ldr	r3, [pc, #172]	; (8a44 <isr+0x660>)
			endpoint0_buffer[0] = 0xE9;
    8998:	mov.w	ip, #233	; 0xe9
    899c:	ldr.w	lr, [pc, #156]	; 8a3c <isr+0x658>
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
			endpoint0_setupdata.bothwords = setup.bothwords;
    89a0:	str	r2, [r3, #0]
    89a2:	str	r1, [r3, #4]
			endpoint0_buffer[0] = 0xE9;
    89a4:	strb.w	ip, [lr]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    89a8:	bl	829c <endpoint0_receive.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    89ac:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    89b0:	cmp	r3, #0
    89b2:	bne.w	840e <isr+0x2a>
    89b6:	b.n	84de <isr+0xfa>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    89b8:	lsls	r3, r2, #31
    89ba:	bpl.w	87ec <isr+0x408>
    89be:	b.n	87e6 <isr+0x402>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    89c0:	ldr	r0, [pc, #128]	; (8a44 <isr+0x660>)
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    89c2:	movs	r6, #0
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
    89c4:	ldr	r5, [pc, #140]	; (8a54 <isr+0x670>)

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    89c6:	ldr	r1, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    89c8:	str	r6, [r2, #0]
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
    89ca:	cmp	r1, r5

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    89cc:	ldr	r0, [r0, #4]
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
    89ce:	beq.w	8adc <isr+0x6f8>
		usb_start_sof_interrupts(NUM_INTERFACE);
		usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
	}
#endif
#ifdef AUDIO_INTERFACE
	if (setup.word1 == 0x02010121 /* TODO: check setup.word2 */) {
    89d2:	ldr	r3, [pc, #132]	; (8a58 <isr+0x674>)
    89d4:	cmp	r1, r3
    89d6:	bne.w	858a <isr+0x1a6>
		usb_audio_set_feature(&endpoint0_setupdata, endpoint0_buffer);
    89da:	ldr	r1, [pc, #96]	; (8a3c <isr+0x658>)
    89dc:	ldr	r0, [pc, #100]	; (8a44 <isr+0x660>)
    89de:	bl	a160 <usb_audio_set_feature>
    89e2:	b.n	858a <isr+0x1a6>
		break;
#endif
#if defined(AUDIO_INTERFACE)
	  case 0x0B01: // SET_INTERFACE (alternate setting)
		if (setup.wIndex == AUDIO_INTERFACE+1) {
			usb_audio_transmit_setting = setup.wValue;
    89e4:	ldrh.w	lr, [sp, #18]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    89e8:	movs	r1, #128	; 0x80
		break;
#endif
#if defined(AUDIO_INTERFACE)
	  case 0x0B01: // SET_INTERFACE (alternate setting)
		if (setup.wIndex == AUDIO_INTERFACE+1) {
			usb_audio_transmit_setting = setup.wValue;
    89ea:	ldr	r2, [pc, #112]	; (8a5c <isr+0x678>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    89ec:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    89ee:	str	r3, [r6, #76]	; 0x4c
		break;
#endif
#if defined(AUDIO_INTERFACE)
	  case 0x0B01: // SET_INTERFACE (alternate setting)
		if (setup.wIndex == AUDIO_INTERFACE+1) {
			usb_audio_transmit_setting = setup.wValue;
    89f0:	strb.w	lr, [r2]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    89f4:	ldr	r2, [pc, #48]	; (8a28 <isr+0x644>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    89f6:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    89f8:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    89fa:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    89fc:	str.w	sl, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8a00:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8a04:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    8a06:	orr.w	r3, r1, #65536	; 0x10000
    8a0a:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    8a0e:	ldr.w	r3, [r4, #432]	; 0x1b0
    8a12:	cmp	r3, #0
    8a14:	bne.n	8a0e <isr+0x62a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8a16:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8a1a:	cmp	r3, #0
    8a1c:	bne.w	840e <isr+0x2a>
    8a20:	b.n	84de <isr+0xfa>
    8a22:	nop
    8a24:	.word	0x402e01c0
    8a28:	.word	0x20003020
    8a2c:	.word	0x200021a8
    8a30:	.word	0x200021b8
    8a34:	.word	0x00c40002
    8a38:	.word	0x20002198
    8a3c:	.word	0x200021b0
    8a40:	.word	0x20002640
    8a44:	.word	0x200021a0
    8a48:	.word	0x2000085c
    8a4c:	.word	0xe000ef70
    8a50:	.word	0x20201c60
    8a54:	.word	0x03000921
    8a58:	.word	0x02010121
    8a5c:	.word	0x200025d5
		if (setup.wIndex == AUDIO_INTERFACE+1) {
			endpoint0_buffer[0] = usb_audio_transmit_setting;
			endpoint0_transmit(endpoint0_buffer, 1, 0);
			return;
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
			endpoint0_buffer[0] = usb_audio_receive_setting;
    8a60:	ldr	r2, [pc, #220]	; (8b40 <isr+0x75c>)
    8a62:	ldr	r3, [pc, #224]	; (8b44 <isr+0x760>)
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    8a64:	movs	r1, #1
		if (setup.wIndex == AUDIO_INTERFACE+1) {
			endpoint0_buffer[0] = usb_audio_transmit_setting;
			endpoint0_transmit(endpoint0_buffer, 1, 0);
			return;
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
			endpoint0_buffer[0] = usb_audio_receive_setting;
    8a66:	ldrb	r2, [r2, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    8a68:	mov	r0, r3
		if (setup.wIndex == AUDIO_INTERFACE+1) {
			endpoint0_buffer[0] = usb_audio_transmit_setting;
			endpoint0_transmit(endpoint0_buffer, 1, 0);
			return;
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
			endpoint0_buffer[0] = usb_audio_receive_setting;
    8a6a:	strb	r2, [r3, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    8a6c:	bl	8344 <endpoint0_transmit.constprop.2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8a70:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8a74:	cmp	r3, #0
    8a76:	bne.w	840e <isr+0x2a>
    8a7a:	b.n	84de <isr+0xfa>
			return;
		}
		break;
	  case 0x0A81: // GET_INTERFACE (alternate setting)
		if (setup.wIndex == AUDIO_INTERFACE+1) {
			endpoint0_buffer[0] = usb_audio_transmit_setting;
    8a7c:	ldr	r2, [pc, #200]	; (8b48 <isr+0x764>)
    8a7e:	b.n	8a62 <isr+0x67e>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    8a80:	ldr	r0, [pc, #200]	; (8b4c <isr+0x768>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8a82:	mov	r2, r3
    8a84:	ldr.w	fp, [pc, #208]	; 8b58 <isr+0x774>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    8a88:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    8a8c:	ldr	r1, [pc, #192]	; (8b50 <isr+0x76c>)
    8a8e:	ldr	r0, [pc, #196]	; (8b54 <isr+0x770>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    8a90:	str	r3, [sp, #4]
    8a92:	cmp.w	lr, #0
    8a96:	it	eq
    8a98:	moveq	r1, r0
    8a9a:	mov	r0, fp
    8a9c:	bl	7dfc <memcpy>
					usb_descriptor_buffer[1] = 7;
    8aa0:	movs	r2, #7
    8aa2:	ldr	r3, [sp, #4]
    8aa4:	strb.w	r2, [fp, #1]
    8aa8:	b.n	8966 <isr+0x582>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    8aaa:	ldr	r0, [pc, #160]	; (8b4c <isr+0x768>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8aac:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    8aae:	ldr	r1, [pc, #164]	; (8b54 <isr+0x770>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    8ab0:	ldrb.w	lr, [r0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    8ab4:	ldr	r0, [pc, #152]	; (8b50 <isr+0x76c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    8ab6:	str	r3, [sp, #4]
    8ab8:	cmp.w	lr, #0
    8abc:	it	eq
    8abe:	moveq	r1, r0
    8ac0:	ldr	r0, [pc, #148]	; (8b58 <isr+0x774>)
    8ac2:	bl	7dfc <memcpy>
    8ac6:	ldr.w	fp, [pc, #144]	; 8b58 <isr+0x774>
    8aca:	ldr	r3, [sp, #4]
    8acc:	b.n	8966 <isr+0x582>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    8ace:	ldr.w	r2, [r3, #328]	; 0x148
    8ad2:	bic.w	r2, r2, #128	; 0x80
    8ad6:	str.w	r2, [r3, #328]	; 0x148
    8ada:	b.n	8574 <isr+0x190>
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
    8adc:	cmp.w	r0, #262144	; 0x40000
    8ae0:	bne.w	858a <isr+0x1a6>
	  && endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
    8ae4:	ldr	r2, [pc, #92]	; (8b44 <isr+0x760>)
    8ae6:	ldrb	r0, [r2, #0]
    8ae8:	cmp	r0, #169	; 0xa9
    8aea:	bne.w	858a <isr+0x1a6>
    8aee:	ldrb	r0, [r2, #1]
    8af0:	cmp	r0, #69	; 0x45
    8af2:	bne.w	858a <isr+0x1a6>
	  && endpoint0_buffer[2] == 0xC2 && endpoint0_buffer[3] == 0x6B) {
    8af6:	ldrb	r0, [r2, #2]
    8af8:	cmp	r0, #194	; 0xc2
    8afa:	bne.w	858a <isr+0x1a6>
    8afe:	ldrb	r2, [r2, #3]
    8b00:	cmp	r2, #107	; 0x6b
    8b02:	bne.w	858a <isr+0x1a6>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    8b06:	cpsid	i
	sof_usage |= (1 << interface);
    8b08:	ldr	r0, [pc, #80]	; (8b5c <isr+0x778>)
    8b0a:	ldrb	r2, [r0, #0]
    8b0c:	orr.w	r2, r2, #16
    8b10:	strb	r2, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    8b12:	ldr.w	r2, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    8b16:	lsls	r6, r2, #24
    8b18:	bmi.n	8b28 <isr+0x744>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    8b1a:	orr.w	r2, r2, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    8b1e:	movs	r0, #128	; 0x80
    8b20:	str.w	r0, [r3, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    8b24:	str.w	r2, [r3, #328]	; 0x148
	}
	__enable_irq();
    8b28:	cpsie	i
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
	  && endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
	  && endpoint0_buffer[2] == 0xC2 && endpoint0_buffer[3] == 0x6B) {
		printf("seremu reboot request\n");
		usb_start_sof_interrupts(NUM_INTERFACE);
		usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    8b2a:	ldr	r3, [pc, #52]	; (8b60 <isr+0x77c>)
    8b2c:	movs	r2, #80	; 0x50
    8b2e:	strb	r2, [r3, #0]
    8b30:	b.n	89d2 <isr+0x5ee>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    8b32:	ldrb	r2, [r1, #0]
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    8b34:	ldrh.w	r3, [sp, #22]
    8b38:	cmp	r3, r2
    8b3a:	it	cs
    8b3c:	movcs	r3, r2
    8b3e:	b.n	894e <isr+0x56a>
    8b40:	.word	0x20002640
    8b44:	.word	0x200021b0
    8b48:	.word	0x200025d5
    8b4c:	.word	0x20002194
    8b50:	.word	0x600021b4
    8b54:	.word	0x600022a0
    8b58:	.word	0x20201c60
    8b5c:	.word	0x2000218c
    8b60:	.word	0x2000219c

00008b64 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8b64:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8b66:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    8b6a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8b6e:	ite	ne
    8b70:	movne	r7, #0
    8b72:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8b76:	cmp	r2, #2
    8b78:	bls.n	8b7e <usb_config_rx+0x1a>
    8b7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8b7e:	mov.w	sl, r0, lsl #7
    8b82:	ldr.w	r9, [pc, #64]	; 8bc4 <usb_config_rx+0x60>
    8b86:	mov	r5, r1
    8b88:	mov	r4, r0
    8b8a:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    8b8e:	movs	r1, #0
    8b90:	movs	r2, #64	; 0x40
    8b92:	mov	r8, r3
    8b94:	mov	r0, r6
    8b96:	bl	af48 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    8b9a:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    8b9c:	orr.w	r1, r7, r5, lsl #16
    8ba0:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    8ba4:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    8ba8:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    8baa:	cmp.w	r8, #0
    8bae:	beq.n	8b7a <usb_config_rx+0x16>
    8bb0:	ldr	r3, [pc, #12]	; (8bc0 <usb_config_rx+0x5c>)
    8bb2:	lsls	r0, r4
    8bb4:	ldr	r4, [r3, #0]
    8bb6:	orrs	r0, r4
    8bb8:	str	r0, [r3, #0]
    8bba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8bbe:	nop
    8bc0:	.word	0x20002188
    8bc4:	.word	0x20004000

00008bc8 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8bc8:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8bca:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    8bce:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8bd2:	ite	ne
    8bd4:	movne	r7, #0
    8bd6:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8bda:	cmp	r2, #2
    8bdc:	bls.n	8be2 <usb_config_tx+0x1a>
    8bde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    8be2:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    8be4:	lsls	r5, r0, #7
    8be6:	ldr.w	r9, [pc, #68]	; 8c2c <usb_config_tx+0x64>
    8bea:	mov	r8, r1
    8bec:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    8bee:	movs	r1, #0
    8bf0:	mov	r4, r0
    8bf2:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    8bf4:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    8bf8:	mov	r0, sl
    8bfa:	bl	af48 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    8bfe:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    8c00:	orr.w	r1, r7, r8, lsl #16
    8c04:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    8c08:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    8c0c:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    8c10:	cmp	r6, #0
    8c12:	beq.n	8bde <usb_config_tx+0x16>
    8c14:	add.w	r0, r4, #16
    8c18:	ldr	r3, [pc, #12]	; (8c28 <usb_config_tx+0x60>)
    8c1a:	lsls	r2, r0
    8c1c:	ldr	r0, [r3, #0]
    8c1e:	orrs	r2, r0
    8c20:	str	r2, [r3, #0]
    8c22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8c26:	nop
    8c28:	.word	0x20002188
    8c2c:	.word	0x20004000

00008c30 <usb_config_rx_iso>:
}

void usb_config_rx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
    8c30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (mult < 1 || mult > 3) return;
    8c34:	subs	r5, r2, #1
    8c36:	cmp	r5, #2
    8c38:	bhi.n	8c40 <usb_config_rx_iso+0x10>
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8c3a:	subs	r4, r0, #2
    8c3c:	cmp	r4, #2
    8c3e:	bls.n	8c44 <usb_config_rx_iso+0x14>
    8c40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8c44:	mov.w	sl, r0, lsl #7
    8c48:	ldr.w	r9, [pc, #64]	; 8c8c <usb_config_rx_iso+0x5c>
    8c4c:	mov	r4, r2
    8c4e:	mov	r6, r1
    8c50:	add.w	r8, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    8c54:	movs	r2, #64	; 0x40
    8c56:	movs	r1, #0
    8c58:	mov	r5, r0
    8c5a:	mov	r0, r8
    8c5c:	mov	r7, r3
    8c5e:	bl	af48 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    8c62:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    8c64:	lsls	r2, r4, #30
    8c66:	orr.w	r1, r2, r6, lsl #16
    8c6a:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    8c6e:	str.w	r7, [r8, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    8c72:	str.w	r0, [r8, #8]
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    8c76:	cmp	r7, #0
    8c78:	beq.n	8c40 <usb_config_rx_iso+0x10>
    8c7a:	ldr	r3, [pc, #12]	; (8c88 <usb_config_rx_iso+0x58>)
    8c7c:	lsls	r0, r5
    8c7e:	ldr	r5, [r3, #0]
    8c80:	orrs	r0, r5
    8c82:	str	r0, [r3, #0]
    8c84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8c88:	.word	0x20002188
    8c8c:	.word	0x20004000

00008c90 <usb_config_tx_iso>:
}

void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
    8c90:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (mult < 1 || mult > 3) return;
    8c94:	subs	r5, r2, #1
    8c96:	cmp	r5, #2
    8c98:	bhi.n	8ca0 <usb_config_tx_iso+0x10>
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8c9a:	subs	r4, r0, #2
    8c9c:	cmp	r4, #2
    8c9e:	bls.n	8ca4 <usb_config_tx_iso+0x14>
    8ca0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8ca4:	mov	r4, r2
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    8ca6:	mov.w	r8, r0, lsl #7
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    8caa:	movs	r2, #64	; 0x40
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    8cac:	ldr.w	sl, [pc, #68]	; 8cf4 <usb_config_tx_iso+0x64>
    8cb0:	mov	r6, r1
    8cb2:	mov	r5, r0
    8cb4:	add	r8, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    8cb6:	movs	r1, #0
    8cb8:	mov	r7, r3
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    8cba:	add.w	r9, r8, sl
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    8cbe:	mov	r0, r9
    8cc0:	bl	af48 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    8cc4:	movs	r3, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    8cc6:	lsls	r2, r4, #30
    8cc8:	orr.w	r1, r2, r6, lsl #16
    8ccc:	str.w	r1, [r8, sl]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    8cd0:	str.w	r7, [r9, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    8cd4:	str.w	r3, [r9, #8]
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    8cd8:	cmp	r7, #0
    8cda:	beq.n	8ca0 <usb_config_tx_iso+0x10>
    8cdc:	ldr	r1, [pc, #16]	; (8cf0 <usb_config_tx_iso+0x60>)
    8cde:	add.w	r0, r5, #16
    8ce2:	ldr	r2, [r1, #0]
    8ce4:	lsls	r3, r0
    8ce6:	orrs	r3, r2
    8ce8:	str	r3, [r1, #0]
    8cea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8cee:	nop
    8cf0:	.word	0x20002188
    8cf4:	.word	0x20004000

00008cf8 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    8cf8:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    8cfa:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    8cfc:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    8cfe:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    8d02:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    8d04:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    8d06:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    8d08:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    8d0c:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    8d10:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    8d14:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    8d18:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    8d1a:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    8d1c:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    8d1e:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    8d20:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    8d22:	pop	{r4, r5, r6, r7}
    8d24:	bx	lr
    8d26:	nop

00008d28 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8d28:	subs	r3, r0, #2
    8d2a:	cmp	r3, #2
    8d2c:	bls.n	8d30 <usb_transmit+0x8>
    8d2e:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    8d30:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    8d32:	ldr	r3, [pc, #24]	; (8d4c <usb_transmit+0x24>)
    8d34:	add.w	r4, r0, #16
    8d38:	movs	r5, #1
    8d3a:	mov	r2, r1
    8d3c:	add.w	r0, r3, r0, lsl #7
    8d40:	lsl.w	r1, r5, r4
}
    8d44:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    8d46:	b.w	81f4 <schedule_transfer>
    8d4a:	nop
    8d4c:	.word	0x20004040

00008d50 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8d50:	subs	r3, r0, #2
    8d52:	cmp	r3, #2
    8d54:	bls.n	8d58 <usb_receive+0x8>
    8d56:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    8d58:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    8d5a:	ldr	r3, [pc, #20]	; (8d70 <usb_receive+0x20>)
    8d5c:	movs	r4, #1
    8d5e:	mov	r2, r1
    8d60:	lsl.w	r1, r4, r0
    8d64:	add.w	r0, r3, r0, lsl #7
}
    8d68:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    8d6c:	b.w	81f4 <schedule_transfer>
    8d70:	.word	0x20004000

00008d74 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    8d74:	ldr	r0, [r0, #4]
#endif
}
    8d76:	bx	lr

00008d78 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    8d78:	push	{r4, r5, r6, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
    8d7a:	lsls	r1, r0, #5
    8d7c:	ldr	r4, [pc, #72]	; (8dc8 <rx_queue_transfer+0x50>)
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
    8d7e:	ldr	r5, [pc, #76]	; (8dcc <rx_queue_transfer+0x54>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    8d80:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
    8d82:	add	r4, r1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8d84:	mov.w	r6, #131072	; 0x20000
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
    8d88:	add	r5, r1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8d8a:	ldr	r0, [pc, #68]	; (8dd0 <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
    8d8c:	mov	r1, r4
    8d8e:	movs	r2, #32
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8d90:	str	r6, [r0, #0]
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
    8d92:	mov	r0, r5
    8d94:	bl	8cf8 <usb_prepare_transfer>
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8d98:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8d9c:	add.w	r1, r4, #32
	asm volatile("": : :"memory");
	asm("dsb");
    8da0:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    8da4:	ldr	r2, [pc, #44]	; (8dd4 <rx_queue_transfer+0x5c>)
    8da6:	str	r3, [r2, #0]
		location += 32;
    8da8:	adds	r3, #32
	} while (location < end_addr);
    8daa:	cmp	r1, r3
    8dac:	bhi.n	8da6 <rx_queue_transfer+0x2e>
	asm("dsb");
    8dae:	dsb	sy
	asm("isb");
    8db2:	isb	sy
	arm_dcache_delete(buffer, SEREMU_RX_SIZE);
	usb_receive(SEREMU_RX_ENDPOINT, rx_transfer + i);
    8db6:	movs	r0, #2
    8db8:	mov	r1, r5
    8dba:	bl	8d50 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    8dbe:	ldr	r3, [pc, #24]	; (8dd8 <rx_queue_transfer+0x60>)
    8dc0:	mov.w	r2, #131072	; 0x20000
    8dc4:	str	r2, [r3, #0]
    8dc6:	pop	{r4, r5, r6, pc}
    8dc8:	.word	0x20201860
    8dcc:	.word	0x200021c0
    8dd0:	.word	0xe000e18c
    8dd4:	.word	0xe000ef5c
    8dd8:	.word	0xe000e10c

00008ddc <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
    8ddc:	ldr	r3, [r0, #4]
	int i = t->callback_param;
    8dde:	ldr	r0, [r0, #28]
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
    8de0:	ubfx	r3, r3, #16, #15
    8de4:	cbz	r3, 8dea <rx_event+0xe>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a short packet - should never happen with HID
		rx_queue_transfer(i);
    8de6:	b.w	8d78 <rx_queue_transfer>
static void rx_event(transfer_t *t)
{
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
    8dea:	ldr	r1, [pc, #52]	; (8e20 <rx_event+0x44>)
    8dec:	lsls	r2, r0, #5
    8dee:	ldrb	r2, [r1, r2]
    8df0:	cmp	r2, #0
    8df2:	beq.n	8de6 <rx_event+0xa>
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
    8df4:	ldr	r1, [pc, #44]	; (8e24 <rx_event+0x48>)
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    8df6:	push	{r4}
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
    8df8:	ldr	r4, [pc, #44]	; (8e28 <rx_event+0x4c>)
		rx_index[i] = 0;
    8dfa:	strh.w	r3, [r1, r0, lsl #1]
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
    8dfe:	ldrb	r2, [r4, #0]
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    8e00:	ldr	r1, [pc, #40]	; (8e2c <rx_event+0x50>)
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    8e02:	adds	r2, #1
    8e04:	cmp	r2, #8
    8e06:	ite	ls
    8e08:	uxtbls	r3, r2
    8e0a:	movhi	r2, r3
		rx_list[head] = i;
		rx_head = head;
    8e0c:	strb	r3, [r4, #0]
		rx_available += len;
    8e0e:	ldr	r3, [r1, #0]
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    8e10:	ldr	r4, [pc, #28]	; (8e30 <rx_event+0x54>)
		rx_head = head;
		rx_available += len;
    8e12:	adds	r3, #32
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    8e14:	strb	r0, [r4, r2]
		rx_head = head;
		rx_available += len;
    8e16:	str	r3, [r1, #0]
		// TODO: trigger serialEvent
	} else {
		// received a short packet - should never happen with HID
		rx_queue_transfer(i);
	}
}
    8e18:	ldr.w	r4, [sp], #4
    8e1c:	bx	lr
    8e1e:	nop
    8e20:	.word	0x20201860
    8e24:	.word	0x200022c0
    8e28:	.word	0x200022e0
    8e2c:	.word	0x200022dc
    8e30:	.word	0x200022d0

00008e34 <usb_seremu_configure>:


void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8e34:	movs	r1, #0
    8e36:	mov.w	r2, #384	; 0x180
    8e3a:	ldr	r0, [pc, #124]	; (8eb8 <usb_seremu_configure+0x84>)
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_seremu_configure(void)
{
    8e3c:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    8e3e:	mov	r5, r1
    8e40:	ldr	r4, [pc, #120]	; (8ebc <usb_seremu_configure+0x88>)


void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8e42:	bl	af48 <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    8e46:	ldr	r6, [pc, #120]	; (8ec0 <usb_seremu_configure+0x8c>)
void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    8e48:	ldr	r3, [pc, #120]	; (8ec4 <usb_seremu_configure+0x90>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8e4a:	mov	r1, r5
    8e4c:	mov.w	r2, #256	; 0x100
    8e50:	ldr	r0, [pc, #116]	; (8ec8 <usb_seremu_configure+0x94>)

void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    8e52:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
	usb_config_tx(SEREMU_TX_ENDPOINT, SEREMU_TX_SIZE, 0, NULL);     // SEREMU_TX_SIZE = 64
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    8e54:	mov	r4, r5
void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    8e56:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8e58:	bl	af48 <memset>
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    8e5c:	strb	r5, [r6, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    8e5e:	mov	r2, r5
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
    8e60:	ldr	r6, [pc, #104]	; (8ecc <usb_seremu_configure+0x98>)
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    8e62:	movs	r1, #32
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    8e64:	ldr	r3, [pc, #104]	; (8ed0 <usb_seremu_configure+0x9c>)
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    8e66:	movs	r0, #2
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    8e68:	ldr	r7, [pc, #104]	; (8ed4 <usb_seremu_configure+0xa0>)
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    8e6a:	strb	r5, [r3, #0]
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
    8e6c:	str	r5, [r6, #0]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    8e6e:	ldr	r3, [pc, #104]	; (8ed8 <usb_seremu_configure+0xa4>)
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
    8e70:	str	r5, [r6, #4]
    8e72:	str	r5, [r6, #8]
    8e74:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    8e76:	str	r5, [r7, #0]
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    8e78:	bl	8b64 <usb_config_rx>
	usb_config_tx(SEREMU_TX_ENDPOINT, SEREMU_TX_SIZE, 0, NULL);     // SEREMU_TX_SIZE = 64
    8e7c:	mov	r3, r5
    8e7e:	mov	r2, r5
    8e80:	movs	r1, #64	; 0x40
    8e82:	movs	r0, #2
    8e84:	bl	8bc8 <usb_config_tx>
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    8e88:	mov	r0, r4
    8e8a:	adds	r4, #1
    8e8c:	bl	8d78 <rx_queue_transfer>
    8e90:	cmp	r4, #8
    8e92:	bne.n	8e88 <usb_seremu_configure+0x54>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    8e94:	ldr	r3, [pc, #68]	; (8edc <usb_seremu_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
    8e96:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    8e98:	ldr	r0, [pc, #68]	; (8ee0 <usb_seremu_configure+0xac>)
	USB1_GPTIMER0CTRL = 0;
    8e9a:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    8e9c:	ldr	r4, [pc, #68]	; (8ee4 <usb_seremu_configure+0xb0>)
    8e9e:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    8ea0:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    8ea4:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    8ea8:	ldr.w	r2, [r3, #328]	; 0x148
    8eac:	orr.w	r2, r2, #16777216	; 0x1000000
    8eb0:	str.w	r2, [r3, #328]	; 0x148
    8eb4:	pop	{r3, r4, r5, r6, r7, pc}
    8eb6:	nop
    8eb8:	.word	0x20002300
    8ebc:	.word	0x200021bb
    8ec0:	.word	0x200022e0
    8ec4:	.word	0x200022da
    8ec8:	.word	0x200021c0
    8ecc:	.word	0x200022c0
    8ed0:	.word	0x200021b9
    8ed4:	.word	0x200022dc
    8ed8:	.word	0x00008ddd
    8edc:	.word	0x402e0000
    8ee0:	.word	0x20002184
    8ee4:	.word	0x00009045

00008ee8 <usb_seremu_getchar>:
	}
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
    8ee8:	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = rx_tail;
    8eea:	ldr	r5, [pc, #80]	; (8f3c <usb_seremu_getchar+0x54>)

	if (tail == rx_head) return -1;
    8eec:	ldr	r2, [pc, #80]	; (8f40 <usb_seremu_getchar+0x58>)
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;
    8eee:	ldrb	r3, [r5, #0]

	if (tail == rx_head) return -1;
    8ef0:	ldrb	r2, [r2, #0]
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;
    8ef2:	uxtb	r3, r3

	if (tail == rx_head) return -1;
    8ef4:	cmp	r3, r2
    8ef6:	beq.n	8f34 <usb_seremu_getchar+0x4c>
	if (++tail > RX_NUM) tail = 0;
    8ef8:	adds	r3, #1
	uint32_t i = rx_list[tail];
    8efa:	ldr	r2, [pc, #72]	; (8f44 <usb_seremu_getchar+0x5c>)
	uint32_t index = rx_index[i];
    8efc:	ldr	r6, [pc, #72]	; (8f48 <usb_seremu_getchar+0x60>)
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    8efe:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
    8f00:	ldr	r4, [pc, #72]	; (8f4c <usb_seremu_getchar+0x64>)
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    8f02:	it	cs
    8f04:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    8f06:	ldrb	r0, [r2, r3]
	uint32_t index = rx_index[i];
    8f08:	ldrh.w	r2, [r6, r0, lsl #1]
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
    8f0c:	add.w	r1, r2, r0, lsl #5
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
    8f10:	adds	r2, #1
    8f12:	cmp	r2, #31

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
    8f14:	add.w	r7, r4, r1
	int c = *p;
    8f18:	ldrb	r4, [r4, r1]
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
    8f1a:	bhi.n	8f28 <usb_seremu_getchar+0x40>
    8f1c:	ldrb	r1, [r7, #1]
    8f1e:	cbz	r1, 8f28 <usb_seremu_getchar+0x40>
		rx_tail = tail;
		rx_queue_transfer(i);
	} else {
		rx_index[i] = index;
    8f20:	strh.w	r2, [r6, r0, lsl #1]
	}
	return c;
    8f24:	mov	r0, r4
    8f26:	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
		rx_tail = tail;
    8f28:	uxtb	r3, r3
    8f2a:	strb	r3, [r5, #0]
		rx_queue_transfer(i);
    8f2c:	bl	8d78 <rx_queue_transfer>
	} else {
		rx_index[i] = index;
	}
	return c;
    8f30:	mov	r0, r4
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
		rx_tail = tail;
		rx_queue_transfer(i);
    8f32:	pop	{r3, r4, r5, r6, r7, pc}
// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
    8f34:	mov.w	r0, #4294967295
		rx_queue_transfer(i);
	} else {
		rx_index[i] = index;
	}
	return c;
}
    8f38:	pop	{r3, r4, r5, r6, r7, pc}
    8f3a:	nop
    8f3c:	.word	0x200021b9
    8f40:	.word	0x200022e0
    8f44:	.word	0x200022d0
    8f48:	.word	0x200022c0
    8f4c:	.word	0x20201860

00008f50 <usb_seremu_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
    8f50:	ldr	r3, [pc, #44]	; (8f80 <usb_seremu_peekchar+0x30>)
	if (tail == rx_head) return -1;
    8f52:	ldr	r2, [pc, #48]	; (8f84 <usb_seremu_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
    8f54:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    8f56:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
    8f58:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    8f5a:	cmp	r3, r2
    8f5c:	beq.n	8f7a <usb_seremu_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    8f5e:	adds	r3, #1
	uint32_t i = rx_list[tail];
    8f60:	ldr	r2, [pc, #36]	; (8f88 <usb_seremu_peekchar+0x38>)
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
    8f62:	ldr	r0, [pc, #40]	; (8f8c <usb_seremu_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    8f64:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
    8f66:	ldr	r1, [pc, #40]	; (8f90 <usb_seremu_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    8f68:	it	cs
    8f6a:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    8f6c:	ldrb	r2, [r2, r3]
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
    8f6e:	ldrh.w	r3, [r0, r2, lsl #1]
    8f72:	add.w	r3, r3, r2, lsl #5
    8f76:	ldrb	r0, [r1, r3]
    8f78:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    8f7a:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
}
    8f7e:	bx	lr
    8f80:	.word	0x200021b9
    8f84:	.word	0x200022e0
    8f88:	.word	0x200022d0
    8f8c:	.word	0x200022c0
    8f90:	.word	0x20201860

00008f94 <usb_seremu_available>:

// number of bytes available in the receive buffer
int usb_seremu_available(void)
{
	uint32_t tail = rx_tail;
    8f94:	ldr	r2, [pc, #12]	; (8fa4 <usb_seremu_available+0x10>)
	if (tail == rx_head) return 0;
    8f96:	ldr	r3, [pc, #16]	; (8fa8 <usb_seremu_available+0x14>)
}

// number of bytes available in the receive buffer
int usb_seremu_available(void)
{
	uint32_t tail = rx_tail;
    8f98:	ldrb	r0, [r2, #0]
	if (tail == rx_head) return 0;
    8f9a:	ldrb	r3, [r3, #0]
	// TODO: how much is actually available?
	return 1;
}
    8f9c:	subs	r0, r0, r3
    8f9e:	it	ne
    8fa0:	movne	r0, #1
    8fa2:	bx	lr
    8fa4:	.word	0x200021b9
    8fa8:	.word	0x200022e0

00008fac <tx_zero_pad>:
	USB1_GPTIMER0CTRL = 0;
}


void tx_zero_pad(void)
{
    8fac:	push	{r3, r4, r5, lr}
	if (!tx_available) return;
    8fae:	ldr	r4, [pc, #32]	; (8fd0 <tx_zero_pad+0x24>)
    8fb0:	ldrh	r2, [r4, #0]
    8fb2:	cbz	r2, 8fce <tx_zero_pad+0x22>
	uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
    8fb4:	ldr	r1, [pc, #28]	; (8fd4 <tx_zero_pad+0x28>)
	memset(txdata, 0, tx_available);
    8fb6:	rsb	r3, r2, #64	; 0x40
    8fba:	ldr	r0, [pc, #28]	; (8fd8 <tx_zero_pad+0x2c>)


void tx_zero_pad(void)
{
	if (!tx_available) return;
	uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
    8fbc:	ldrb	r5, [r1, #0]
	memset(txdata, 0, tx_available);
    8fbe:	movs	r1, #0
    8fc0:	add.w	r3, r3, r5, lsl #6
    8fc4:	add	r0, r3
    8fc6:	bl	af48 <memset>
	tx_available = 0;
    8fca:	movs	r3, #0
    8fcc:	strh	r3, [r4, #0]
    8fce:	pop	{r3, r4, r5, pc}
    8fd0:	.word	0x200022da
    8fd4:	.word	0x200021bb
    8fd8:	.word	0x20201960

00008fdc <tx_queue_transfer>:
}

void tx_queue_transfer(void)
{
    8fdc:	push	{r4, r5, r6, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    8fde:	ldr	r6, [pc, #84]	; (9034 <tx_queue_transfer+0x58>)
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
    8fe0:	movs	r3, #0
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
    8fe2:	ldr	r5, [pc, #84]	; (9038 <tx_queue_transfer+0x5c>)
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
    8fe4:	movs	r2, #64	; 0x40
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
    8fe6:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
    8fe8:	ldr	r4, [pc, #80]	; (903c <tx_queue_transfer+0x60>)
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
    8fea:	add.w	r5, r5, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
    8fee:	add.w	r4, r4, r1, lsl #6
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
    8ff2:	mov	r0, r5
    8ff4:	mov	r1, r4
    8ff6:	bl	8cf8 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8ffa:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8ffe:	add.w	r1, r4, #64	; 0x40
	asm volatile("": : :"memory");
	asm("dsb");
    9002:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    9006:	ldr	r2, [pc, #56]	; (9040 <tx_queue_transfer+0x64>)
    9008:	str	r3, [r2, #0]
		location += 32;
    900a:	adds	r3, #32
	} while (location < end_addr);
    900c:	cmp	r1, r3
    900e:	bhi.n	9008 <tx_queue_transfer+0x2c>
	asm("dsb");
    9010:	dsb	sy
	asm("isb");
    9014:	isb	sy
	arm_dcache_flush_delete(txbuf, SEREMU_TX_SIZE);
	usb_transmit(SEREMU_TX_ENDPOINT, xfer);
    9018:	movs	r0, #2
    901a:	mov	r1, r5
    901c:	bl	8d28 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9020:	ldrb	r3, [r6, #0]
    9022:	ldr	r2, [pc, #16]	; (9034 <tx_queue_transfer+0x58>)
    9024:	adds	r3, #1
    9026:	uxtb	r3, r3
    9028:	cmp	r3, #11
    902a:	it	hi
    902c:	movhi	r3, #0
    902e:	strb	r3, [r2, #0]
    9030:	pop	{r4, r5, r6, pc}
    9032:	nop
    9034:	.word	0x200021bb
    9038:	.word	0x20002300
    903c:	.word	0x20201960
    9040:	.word	0xe000ef70

00009044 <usb_seremu_flush_callback>:
	tx_queue_transfer();
	tx_noautoflush = 0;
}

static void usb_seremu_flush_callback(void)
{
    9044:	push	{r3, lr}
	if (tx_noautoflush) return;
    9046:	ldr	r3, [pc, #20]	; (905c <usb_seremu_flush_callback+0x18>)
    9048:	ldrb	r3, [r3, #0]
    904a:	cbz	r3, 904e <usb_seremu_flush_callback+0xa>
    904c:	pop	{r3, pc}
	tx_zero_pad();
    904e:	bl	8fac <tx_zero_pad>
	tx_queue_transfer();
}
    9052:	ldmia.w	sp!, {r3, lr}

static void usb_seremu_flush_callback(void)
{
	if (tx_noautoflush) return;
	tx_zero_pad();
	tx_queue_transfer();
    9056:	b.w	8fdc <tx_queue_transfer>
    905a:	nop
    905c:	.word	0x200021ba

00009060 <usb_seremu_write.part.0>:
	arm_dcache_flush_delete(txbuf, SEREMU_TX_SIZE);
	usb_transmit(SEREMU_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
}

int usb_seremu_write(const void *buffer, uint32_t size)
    9060:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9064:	sub	sp, #20
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9066:	mov	fp, r1
	arm_dcache_flush_delete(txbuf, SEREMU_TX_SIZE);
	usb_transmit(SEREMU_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
}

int usb_seremu_write(const void *buffer, uint32_t size)
    9068:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    906a:	cmp	r1, #0
    906c:	beq.n	9162 <usb_seremu_write.part.0+0x102>
    906e:	movs	r3, #0
    9070:	ldr	r7, [pc, #244]	; (9168 <usb_seremu_write.part.0+0x108>)
    9072:	ldr.w	r9, [pc, #260]	; 9178 <usb_seremu_write.part.0+0x118>
				tx_available = SEREMU_TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    9076:	ldr	r6, [pc, #244]	; (916c <usb_seremu_write.part.0+0x10c>)
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
				return sent;
			}
			if (!usb_configuration) return sent;
    9078:	ldr.w	sl, [pc, #264]	; 9184 <usb_seremu_write.part.0+0x124>
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    907c:	str	r3, [sp, #4]
		transfer_t *xfer = tx_transfer + tx_head;
    907e:	ldr	r3, [pc, #240]	; (9170 <usb_seremu_write.part.0+0x110>)
    9080:	ldr	r1, [pc, #240]	; (9174 <usb_seremu_write.part.0+0x114>)
    9082:	ldrb	r2, [r3, #0]
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    9084:	ldrh	r3, [r7, #0]
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    9086:	add.w	r8, r1, r2, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    908a:	cmp	r3, #0
    908c:	bne.n	911c <usb_seremu_write.part.0+0xbc>
    908e:	mov	r5, r3
    9090:	mov	r4, r3
    9092:	b.n	90b8 <usb_seremu_write.part.0+0x58>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9094:	ldrb.w	r3, [r9]
				}
				tx_available = SEREMU_TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    9098:	cbnz	r4, 909c <usb_seremu_write.part.0+0x3c>
				wait_begin_at = systick_millis_count;
    909a:	ldr	r5, [r6, #0]
    909c:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    909e:	cmp	r3, #0
    90a0:	bne.n	9110 <usb_seremu_write.part.0+0xb0>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    90a2:	ldr	r3, [r6, #0]
    90a4:	subs	r3, r3, r5
    90a6:	cmp	r3, #50	; 0x32
    90a8:	bhi.n	9156 <usb_seremu_write.part.0+0xf6>
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
				return sent;
			}
			if (!usb_configuration) return sent;
    90aa:	ldrb.w	r3, [sl]
    90ae:	cbz	r3, 9110 <usb_seremu_write.part.0+0xb0>
			yield();
    90b0:	bl	9808 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    90b4:	ldrh	r3, [r7, #0]
    90b6:	cbnz	r3, 9118 <usb_seremu_write.part.0+0xb8>
			uint32_t status = usb_transfer_status(xfer);
    90b8:	mov	r0, r8
    90ba:	bl	8d74 <usb_transfer_status>
			if (!(status & 0x80)) {
    90be:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    90c2:	ldr	r2, [pc, #180]	; (9178 <usb_seremu_write.part.0+0x118>)
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    90c4:	bne.n	9094 <usb_seremu_write.part.0+0x34>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = SEREMU_TX_SIZE;
    90c6:	movs	r3, #64	; 0x40
    90c8:	ldr	r2, [pc, #164]	; (9170 <usb_seremu_write.part.0+0x110>)
				transmit_previous_timeout = 0;
    90ca:	strb.w	r0, [r9]
    90ce:	ldrb	r2, [r2, #0]
    90d0:	mov	r4, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = SEREMU_TX_SIZE;
    90d2:	strh	r3, [r7, #0]
				return sent;
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
    90d4:	add.w	r0, r0, r2, lsl #6
		if (size >= tx_available) {
    90d8:	cmp	fp, r4
				return sent;
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
    90da:	ldr	r2, [pc, #160]	; (917c <usb_seremu_write.part.0+0x11c>)
    90dc:	add	r0, r2
		if (size >= tx_available) {
    90de:	bcc.n	912e <usb_seremu_write.part.0+0xce>
			memcpy(txdata, data, tx_available);
    90e0:	ldr.w	r8, [sp, #8]
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    90e4:	movs	r5, #0
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    90e6:	mov	r2, r4
			size -= tx_available;
    90e8:	rsb	fp, r4, fp
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    90ec:	mov	r1, r8
    90ee:	bl	7dfc <memcpy>
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    90f2:	strh	r5, [r7, #0]
			tx_queue_transfer();
    90f4:	bl	8fdc <tx_queue_transfer>
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
			size -= tx_available;
			sent += tx_available;
    90f8:	ldr	r2, [sp, #4]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    90fa:	ldr	r3, [pc, #132]	; (9180 <usb_seremu_write.part.0+0x120>)
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
			size -= tx_available;
			sent += tx_available;
    90fc:	add	r2, r4
    90fe:	str	r2, [sp, #4]
			data += tx_available;
    9100:	mov	r2, r8
    9102:	add	r2, r4
    9104:	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    9106:	str.w	r5, [r3, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    910a:	cmp.w	fp, #0
    910e:	bne.n	907e <usb_seremu_write.part.0+0x1e>
    9110:	ldr	r0, [sp, #4]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    9112:	add	sp, #20
    9114:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9118:	ldr	r2, [pc, #84]	; (9170 <usb_seremu_write.part.0+0x110>)
    911a:	ldrb	r2, [r2, #0]
    911c:	mov	r4, r3
    911e:	rsb	r0, r3, #64	; 0x40
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
    9122:	cmp	fp, r4
				return sent;
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
    9124:	add.w	r0, r0, r2, lsl #6
    9128:	ldr	r2, [pc, #80]	; (917c <usb_seremu_write.part.0+0x11c>)
    912a:	add	r0, r2
		if (size >= tx_available) {
    912c:	bcs.n	90e0 <usb_seremu_write.part.0+0x80>
			data += tx_available;
			tx_available = 0;
			tx_queue_transfer();
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    912e:	ldr	r1, [sp, #8]
    9130:	mov	r2, fp
    9132:	str	r3, [sp, #12]
    9134:	bl	7dfc <memcpy>
			tx_available -= size;
    9138:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    913a:	mov.w	r1, #3221225472	; 0xc0000000
    913e:	ldr	r2, [pc, #64]	; (9180 <usb_seremu_write.part.0+0x120>)
			tx_available = 0;
			tx_queue_transfer();
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    9140:	rsb	r3, fp, r3
    9144:	strh	r3, [r7, #0]
    9146:	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9148:	str.w	r1, [r2, #132]	; 0x84
    914c:	add	r3, fp
    914e:	mov	r0, r3
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    9150:	add	sp, #20
    9152:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    9156:	movs	r3, #1
				return sent;
    9158:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    915a:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    915c:	add	sp, #20
    915e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9162:	mov	r0, r1
    9164:	b.n	9112 <usb_seremu_write.part.0+0xb2>
    9166:	nop
    9168:	.word	0x200022da
    916c:	.word	0x20002488
    9170:	.word	0x200021bb
    9174:	.word	0x20002300
    9178:	.word	0x200022e1
    917c:	.word	0x20201960
    9180:	.word	0x402e0000
    9184:	.word	0x200021b8

00009188 <usb_seremu_putchar>:
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    9188:	ldr	r3, [pc, #36]	; (91b0 <usb_seremu_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
    918a:	push	{lr}
    918c:	sub	sp, #12
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    918e:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
    9190:	strb.w	r0, [sp, #7]
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    9194:	cbnz	r3, 91a0 <usb_seremu_putchar+0x18>
    9196:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
	return usb_seremu_write(&c, 1);
}
    919a:	add	sp, #12
    919c:	ldr.w	pc, [sp], #4
    91a0:	movs	r1, #1
    91a2:	add.w	r0, sp, #7
    91a6:	bl	9060 <usb_seremu_write.part.0>
    91aa:	add	sp, #12
    91ac:	ldr.w	pc, [sp], #4
    91b0:	.word	0x200021b8

000091b4 <usb_seremu_write>:
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    91b4:	ldr	r3, [pc, #16]	; (91c8 <usb_seremu_write+0x14>)
    91b6:	ldrb	r3, [r3, #0]
    91b8:	and.w	r2, r3, #255	; 0xff
    91bc:	cbz	r3, 91c2 <usb_seremu_write+0xe>
    91be:	b.w	9060 <usb_seremu_write.part.0>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    91c2:	mov	r0, r2
    91c4:	bx	lr
    91c6:	nop
    91c8:	.word	0x200021b8

000091cc <usb_seremu_write_buffer_free>:

int usb_seremu_write_buffer_free(void)
{
	return 1;
}
    91cc:	movs	r0, #1
    91ce:	bx	lr

000091d0 <usb_seremu_flush_output>:

void usb_seremu_flush_output(void)
{
	if (!usb_configuration) return;
    91d0:	ldr	r3, [pc, #32]	; (91f4 <usb_seremu_flush_output+0x24>)
    91d2:	ldrb	r3, [r3, #0]
    91d4:	cbz	r3, 91dc <usb_seremu_flush_output+0xc>
	if (tx_available == 0) return;
    91d6:	ldr	r3, [pc, #32]	; (91f8 <usb_seremu_flush_output+0x28>)
    91d8:	ldrh	r3, [r3, #0]
    91da:	cbnz	r3, 91de <usb_seremu_flush_output+0xe>
    91dc:	bx	lr
{
	return 1;
}

void usb_seremu_flush_output(void)
{
    91de:	push	{r4, lr}
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    91e0:	movs	r3, #1
    91e2:	ldr	r4, [pc, #24]	; (91fc <usb_seremu_flush_output+0x2c>)
    91e4:	strb	r3, [r4, #0]
	tx_zero_pad();
    91e6:	bl	8fac <tx_zero_pad>
	tx_queue_transfer();
    91ea:	bl	8fdc <tx_queue_transfer>
	tx_noautoflush = 0;
    91ee:	movs	r3, #0
    91f0:	strb	r3, [r4, #0]
    91f2:	pop	{r4, pc}
    91f4:	.word	0x200021b8
    91f8:	.word	0x200022da
    91fc:	.word	0x200021ba

00009200 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    9200:	cmp	r0, #0
    9202:	beq.n	92b4 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9204:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    9206:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    920a:	sub	sp, #20
    920c:	mov	fp, r0
    920e:	ldr	r4, [pc, #168]	; (92b8 <delay+0xb8>)
    9210:	ldr	r5, [pc, #168]	; (92bc <delay+0xbc>)
    9212:	ldr	r6, [pc, #172]	; (92c0 <delay+0xc0>)
    9214:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    9218:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    921c:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    921e:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9220:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    9224:	cmp	r1, #0
    9226:	bne.n	9218 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    9228:	ldr	r7, [pc, #152]	; (92c4 <delay+0xc4>)
    922a:	strd	r8, r9, [sp, #8]
    922e:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    9230:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9232:	ldr	r2, [pc, #148]	; (92c8 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    9234:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    9238:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    923a:	ldr	r2, [r2, #0]
    923c:	movs	r7, #1
    923e:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    9242:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9246:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    9248:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    924a:	cmp	r3, r1
    924c:	it	eq
    924e:	cmpeq	r2, r8
    9250:	ite	cs
    9252:	movcs	sl, r8
    9254:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    9256:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    925a:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    925e:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    9260:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9262:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    9266:	cmp	r3, #0
    9268:	bne.n	925a <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    926a:	ldr	r0, [sp, #4]
    926c:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    926e:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9270:	ldr	r0, [pc, #84]	; (92c8 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    9272:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9276:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    9278:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    927c:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    9280:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    9284:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9288:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    928a:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    928c:	cmp	r1, r3
    928e:	it	eq
    9290:	cmpeq	r0, r8
    9292:	ite	cs
    9294:	movcs	r3, r8
    9296:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    9298:	add	r2, r3
    929a:	cmp	r2, lr
    929c:	bcc.n	92ae <delay+0xae>
			if (--msec == 0) return;
    929e:	subs.w	fp, fp, #1
			start += 1000;
    92a2:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    92a6:	bne.n	925a <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    92a8:	add	sp, #20
    92aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    92ae:	bl	9808 <yield>
	}
    92b2:	b.n	925a <delay+0x5a>
    92b4:	bx	lr
    92b6:	nop
    92b8:	.word	0x20004280
    92bc:	.word	0x20002488
    92c0:	.word	0x20002480
    92c4:	.word	0xe0001004
    92c8:	.word	0x20002484

000092cc <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    92cc:	ldr	r2, [pc, #72]	; (9318 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    92ce:	ldr	r3, [pc, #76]	; (931c <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    92d0:	ldr.w	r0, [r2, #544]	; 0x220
    92d4:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    92d8:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    92da:	push	{r4, lr}
    92dc:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    92de:	bhi.n	92e6 <usb_init_serialnumber+0x1a>
    92e0:	add.w	r0, r0, r0, lsl #2
    92e4:	lsls	r0, r0, #1
    92e6:	ldr	r4, [pc, #56]	; (9320 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    92e8:	add	r1, sp, #4
    92ea:	movs	r2, #10
    92ec:	bl	9404 <ultoa>
    92f0:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    92f2:	movs	r3, #0
    92f4:	mov	r0, r4
		char c = buf[i];
    92f6:	ldrb.w	r2, [r1], #1
    92fa:	adds	r3, #1
		if (!c) break;
    92fc:	cbz	r2, 930e <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    92fe:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    9300:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    9304:	bne.n	92f6 <usb_init_serialnumber+0x2a>
    9306:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9308:	strb	r3, [r4, #0]
}
    930a:	add	sp, #16
    930c:	pop	{r4, pc}
    930e:	lsls	r3, r3, #1
    9310:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9312:	strb	r3, [r4, #0]
}
    9314:	add	sp, #16
    9316:	pop	{r4, pc}
    9318:	.word	0x401f4400
    931c:	.word	0x0098967f
    9320:	.word	0x2000104c

00009324 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    9324:	movs	r0, #4
    9326:	mov	r1, lr
    9328:	tst	r0, r1
    932a:	beq.n	9334 <_MSP>
    932c:	mrs	r0, PSP
    9330:	b.w	9344 <HardFault_HandlerC>

00009334 <_MSP>:
    9334:	mrs	r0, MSP
    9338:	b.w	9344 <HardFault_HandlerC>

0000933c <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    933c:	bx	lr
    933e:	nop

00009340 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    9340:	bx	lr
    9342:	nop

00009344 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    9344:	ldr	r3, [pc, #108]	; (93b4 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    9346:	movs	r1, #5
    9348:	ldr	r2, [pc, #108]	; (93b8 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    934a:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    934c:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    934e:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    9352:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    9354:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    9358:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    935a:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    935c:	ldr	r4, [pc, #92]	; (93bc <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    935e:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    9360:	ldr	r0, [pc, #92]	; (93c0 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    9362:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    9364:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    9368:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    936c:	ldr	r3, [r4, #0]
    936e:	cmp	r3, r0
    9370:	bls.n	9378 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    9372:	ldr	r0, [pc, #80]	; (93c4 <HardFault_HandlerC+0x80>)
    9374:	bl	7f30 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    9378:	ldr	r5, [pc, #56]	; (93b4 <HardFault_HandlerC+0x70>)
    937a:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    937c:	movs	r0, #0
    937e:	ldr	r2, [pc, #72]	; (93c8 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    9380:	ldr	r1, [pc, #72]	; (93cc <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    9382:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    9386:	str	r0, [sp, #4]
    9388:	ldr	r3, [sp, #4]
    938a:	cmp	r3, r2
    938c:	bhi.n	939a <HardFault_HandlerC+0x56>
    938e:	ldr	r3, [sp, #4]
    9390:	adds	r3, #1
    9392:	str	r3, [sp, #4]
    9394:	ldr	r3, [sp, #4]
    9396:	cmp	r3, r2
    9398:	bls.n	938e <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    939a:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    939e:	str	r0, [sp, #4]
    93a0:	ldr	r3, [sp, #4]
    93a2:	cmp	r3, r1
    93a4:	bhi.n	9382 <HardFault_HandlerC+0x3e>
    93a6:	ldr	r3, [sp, #4]
    93a8:	adds	r3, #1
    93aa:	str	r3, [sp, #4]
    93ac:	ldr	r3, [sp, #4]
    93ae:	cmp	r3, r1
    93b0:	bls.n	93a6 <HardFault_HandlerC+0x62>
    93b2:	b.n	9382 <HardFault_HandlerC+0x3e>
    93b4:	.word	0x401bc000
    93b8:	.word	0x401f8000
    93bc:	.word	0x20001010
    93c0:	.word	0x23c345ff
    93c4:	.word	0x11e1a300
    93c8:	.word	0x000f423f
    93cc:	.word	0x0089543f

000093d0 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    93d0:	ldr	r2, [pc, #36]	; (93f8 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    93d2:	push	{r3, lr}
        char *prev = __brkval;
    93d4:	ldr	r3, [r2, #0]
        if (incr != 0) {
    93d6:	cbz	r0, 93e2 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    93d8:	add	r0, r3
    93da:	ldr	r1, [pc, #32]	; (93fc <_sbrk+0x2c>)
    93dc:	cmp	r0, r1
    93de:	bhi.n	93e6 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    93e0:	str	r0, [r2, #0]
        }
        return prev;
}
    93e2:	mov	r0, r3
    93e4:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    93e6:	bl	a868 <__errno>
    93ea:	movs	r2, #12
                        return (void *)-1;
    93ec:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    93f0:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    93f2:	mov	r0, r3
    93f4:	pop	{r3, pc}
    93f6:	nop
    93f8:	.word	0x20001064
    93fc:	.word	0x20280000

00009400 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    9400:	wfi
    9402:	b.n	9400 <__cxa_pure_virtual>

00009404 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    9404:	push	{r4, r5, r6, r7}
    9406:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    9408:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    940a:	mov	r7, r6
    940c:	b.n	9410 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    940e:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    9410:	udiv	r3, r0, r2
    9414:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9418:	add.w	r4, r0, #55	; 0x37
    941c:	cmp	r0, #9
    941e:	add.w	r0, r0, #48	; 0x30
    9422:	uxtb	r4, r4
    9424:	it	ls
    9426:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    9428:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    942a:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    942e:	cmp	r3, #0
    9430:	bne.n	940e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    9432:	adds	r2, r1, r5
    9434:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    9436:	cbz	r5, 944c <ultoa+0x48>
    9438:	adds	r3, #1
		t = buf[j];
    943a:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    943e:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    9440:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    9442:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    9444:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    9446:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    944a:	blt.n	9438 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    944c:	mov	r0, r1
    944e:	pop	{r4, r5, r6, r7}
    9450:	bx	lr
    9452:	nop

00009454 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    9454:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    9456:	ldr	r2, [pc, #24]	; (9470 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    9458:	movs	r1, #7
    945a:	ldr	r3, [pc, #24]	; (9474 <Panic_Temp_isr+0x20>)
    945c:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    945e:	ldr	r3, [r2, #56]	; 0x38
    9460:	orr.w	r3, r3, #64	; 0x40
    9464:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    9466:	dsb	sy
  while (1) asm ("wfi");
    946a:	wfi
    946c:	b.n	946a <Panic_Temp_isr+0x16>
    946e:	nop
    9470:	.word	0x400d4000
    9474:	.word	0x400ac000

00009478 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    9478:	lsls	r0, r0, #4
    947a:	ldr	r3, [pc, #60]	; (94b8 <digitalWrite.part.0+0x40>)
    947c:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    947e:	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
    9480:	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
    9482:	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    9484:	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    9486:	tst	r4, r0
    9488:	beq.n	9496 <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
    948a:	cbz	r1, 94a4 <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
    948c:	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    9490:	ldr.w	r4, [sp], #4
    9494:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    9496:	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
    9498:	cbnz	r1, 94ae <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    949a:	ldr	r2, [pc, #32]	; (94bc <digitalWrite.part.0+0x44>)
		}
	}
}
    949c:	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    94a0:	str	r2, [r3, #0]
		}
	}
}
    94a2:	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    94a4:	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    94a8:	ldr.w	r4, [sp], #4
    94ac:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    94ae:	ldr	r2, [pc, #16]	; (94c0 <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    94b0:	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    94b4:	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    94b6:	bx	lr
    94b8:	.word	0x200008e0
    94bc:	.word	0x00013038
    94c0:	.word	0x0001f038

000094c4 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    94c4:	cmp	r0, #54	; 0x36
    94c6:	bhi.n	94cc <digitalWrite+0x8>
    94c8:	b.w	9478 <digitalWrite.part.0>
    94cc:	bx	lr
    94ce:	nop

000094d0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    94d0:	cmp	r0, #54	; 0x36
    94d2:	bhi.n	950e <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    94d4:	lsls	r0, r0, #4
    94d6:	ldr	r2, [pc, #104]	; (9540 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    94d8:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    94da:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    94de:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    94e0:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    94e2:	beq.n	9510 <pinMode+0x40>
    94e4:	cmp	r1, #4
    94e6:	beq.n	9510 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    94e8:	ldr	r4, [r3, #12]
    94ea:	ldr	r2, [r0, #4]
    94ec:	bic.w	r2, r2, r4
    94f0:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    94f2:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    94f4:	cbz	r1, 9532 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    94f6:	cmp	r1, #2
    94f8:	beq.n	9538 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    94fa:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    94fc:	ldr	r3, [r3, #4]
}
    94fe:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    9502:	ite	eq
    9504:	ldreq	r1, [pc, #60]	; (9544 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    9506:	ldrne	r1, [pc, #64]	; (9548 <pinMode+0x78>)
    9508:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    950a:	movs	r2, #21
    950c:	str	r2, [r3, #0]
}
    950e:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9510:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    9512:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9514:	ldr	r4, [r0, #4]
    9516:	orr.w	r2, r2, r4
    951a:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    951c:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    951e:	beq.n	9532 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    9520:	movw	r1, #2104	; 0x838
    9524:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9526:	ldr	r3, [r3, #4]
    9528:	movs	r2, #21
}
    952a:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    952e:	str	r2, [r3, #0]
}
    9530:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9532:	movs	r1, #56	; 0x38
    9534:	str	r1, [r2, #0]
    9536:	b.n	9526 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    9538:	ldr	r1, [pc, #16]	; (954c <pinMode+0x7c>)
    953a:	str	r1, [r2, #0]
    953c:	b.n	9526 <pinMode+0x56>
    953e:	nop
    9540:	.word	0x200008e0
    9544:	.word	0x00013038
    9548:	.word	0x00010038
    954c:	.word	0x0001f038

00009550 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9550:	ldr	r0, [pc, #656]	; (97e4 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9552:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9556:	ldr	r3, [pc, #656]	; (97e8 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9558:	ldr	r2, [r0, #120]	; 0x78
    955a:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    955e:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9560:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    9562:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9564:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9568:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    956c:	ldr	r4, [pc, #636]	; (97ec <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    956e:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9572:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9574:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9578:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    957a:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    957c:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9580:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9584:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9588:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    958c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9590:	ldrh.w	r0, [r3, #392]	; 0x188
    9594:	uxth	r0, r0
    9596:	orr.w	r0, r0, #240	; 0xf0
    959a:	strh.w	r0, [r3, #392]	; 0x188
    959e:	add.w	r0, r1, r1, lsl #1
    95a2:	ldr	r3, [pc, #580]	; (97e8 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    95a4:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    95a6:	movs	r5, #0
    95a8:	lsls	r0, r0, #5
    95aa:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    95ac:	cmp	r1, #4
    95ae:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    95b0:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    95b4:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    95b6:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    95b8:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    95ba:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    95bc:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    95be:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    95c0:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    95c2:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    95c4:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    95c6:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    95c8:	bne.n	959e <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    95ca:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    95ce:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    95d2:	ldr	r3, [pc, #540]	; (97f0 <pwm_init+0x2a0>)
    95d4:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    95d8:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    95da:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    95dc:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    95e0:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    95e2:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    95e6:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    95ea:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    95ee:	ldrh.w	r0, [r4, #392]	; 0x188
    95f2:	uxth	r0, r0
    95f4:	orr.w	r0, r0, #3840	; 0xf00
    95f8:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    95fc:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9600:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9604:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9608:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    960c:	ldrh.w	r0, [r3, #392]	; 0x188
    9610:	uxth	r0, r0
    9612:	orr.w	r0, r0, #240	; 0xf0
    9616:	strh.w	r0, [r3, #392]	; 0x188
    961a:	add.w	r0, r1, r1, lsl #1
    961e:	ldr	r3, [pc, #464]	; (97f0 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    9620:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9622:	movs	r5, #0
    9624:	lsls	r0, r0, #5
    9626:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9628:	cmp	r1, #4
    962a:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    962c:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    962e:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9632:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9634:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9636:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9638:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    963a:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    963c:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    963e:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9640:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9642:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9644:	bne.n	961a <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9646:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    964a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    964e:	ldr	r3, [pc, #420]	; (97f4 <pwm_init+0x2a4>)
    9650:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9654:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9656:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9658:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    965c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    965e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9662:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9666:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    966a:	ldrh.w	r0, [r4, #392]	; 0x188
    966e:	uxth	r0, r0
    9670:	orr.w	r0, r0, #3840	; 0xf00
    9674:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9678:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    967c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9680:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9684:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9688:	ldrh.w	r0, [r3, #392]	; 0x188
    968c:	uxth	r0, r0
    968e:	orr.w	r0, r0, #240	; 0xf0
    9692:	strh.w	r0, [r3, #392]	; 0x188
    9696:	add.w	r0, r1, r1, lsl #1
    969a:	ldr	r3, [pc, #344]	; (97f4 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    969c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    969e:	movs	r5, #0
    96a0:	lsls	r0, r0, #5
    96a2:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    96a4:	cmp	r1, #4
    96a6:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    96a8:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    96aa:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    96ae:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    96b0:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    96b2:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    96b4:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    96b6:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    96b8:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    96ba:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    96bc:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    96be:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    96c0:	bne.n	9696 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    96c2:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    96c6:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    96ca:	ldr	r3, [pc, #300]	; (97f8 <pwm_init+0x2a8>)
    96cc:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    96d0:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    96d2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    96d4:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    96d8:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    96da:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    96de:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    96e2:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    96e6:	ldrh.w	r0, [r4, #392]	; 0x188
    96ea:	uxth	r0, r0
    96ec:	orr.w	r0, r0, #3840	; 0xf00
    96f0:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    96f4:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    96f8:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    96fc:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9700:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9704:	ldrh.w	r0, [r3, #392]	; 0x188
    9708:	uxth	r0, r0
    970a:	orr.w	r0, r0, #240	; 0xf0
    970e:	strh.w	r0, [r3, #392]	; 0x188
    9712:	add.w	r0, r1, r1, lsl #1
    9716:	ldr	r3, [pc, #224]	; (97f8 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    9718:	adds	r1, #1
    971a:	lsls	r0, r0, #5
    971c:	mov	r4, r3
    971e:	cmp	r1, #4
    9720:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9722:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9724:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9728:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    972a:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    972c:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    972e:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9730:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    9732:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9734:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9736:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9738:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    973a:	bne.n	9712 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    973c:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9740:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9742:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9744:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9748:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    974a:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    974e:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9750:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9754:	orrs	r3, r7
    9756:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    975a:	ldrh.w	r3, [r4, #392]	; 0x188
    975e:	uxth	r3, r3
    9760:	orr.w	r3, r3, #3840	; 0xf00
    9764:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9768:	lsls	r0, r2, #5
    976a:	ldr	r3, [pc, #144]	; (97fc <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    976c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    976e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9770:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    9772:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9774:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9776:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9778:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    977a:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    977e:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    9780:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9782:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9784:	bne.n	9768 <pwm_init+0x218>
    9786:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9788:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    978a:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    978e:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9792:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9794:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9798:	lsls	r0, r2, #5
    979a:	ldr	r3, [pc, #100]	; (9800 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    979c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    979e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    97a0:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    97a2:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    97a4:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    97a6:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    97a8:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    97aa:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    97ac:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    97ae:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    97b0:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    97b2:	bne.n	9798 <pwm_init+0x248>
    97b4:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    97b6:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    97b8:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    97bc:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    97c0:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    97c2:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    97c6:	lsls	r0, r2, #5
    97c8:	ldr	r3, [pc, #56]	; (9804 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    97ca:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    97cc:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    97ce:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    97d0:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    97d2:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    97d4:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    97d6:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    97d8:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    97da:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    97dc:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    97de:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    97e0:	bne.n	97c6 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    97e2:	pop	{r4, r5, r6, r7, pc}
    97e4:	.word	0x400fc000
    97e8:	.word	0x403dc000
    97ec:	.word	0xfc030000
    97f0:	.word	0x403e0000
    97f4:	.word	0x403e4000
    97f8:	.word	0x403e8000
    97fc:	.word	0x401dc000
    9800:	.word	0x401e0000
    9804:	.word	0x401e4000

00009808 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    9808:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    980c:	ldr	r6, [pc, #200]	; (98d8 <yield+0xd0>)
    980e:	ldrb	r3, [r6, #0]
    9810:	cbz	r3, 9838 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    9812:	ldr	r7, [pc, #200]	; (98dc <yield+0xd4>)
    9814:	ldrb	r2, [r7, #0]
    9816:	cbnz	r2, 9838 <yield+0x30>
	running = 1;
    9818:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    981a:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    981c:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    981e:	bmi.n	9890 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    9820:	lsls	r2, r3, #30
    9822:	bmi.n	9858 <yield+0x50>

	running = 0;
    9824:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    9826:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    9828:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    982a:	bpl.n	9838 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    982c:	ldr	r3, [pc, #176]	; (98e0 <yield+0xd8>)
    982e:	ldr	r2, [r3, #0]
    9830:	cbz	r2, 9838 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9832:	mrs	r2, IPSR
		if (ipsr != 0) return;
    9836:	cbz	r2, 983c <yield+0x34>
    9838:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    983c:	mrs	r0, PRIMASK
		__disable_irq();
    9840:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    9842:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    9844:	cbz	r2, 984e <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    9846:	ldr	r4, [pc, #156]	; (98e4 <yield+0xdc>)
    9848:	ldrb	r1, [r4, #0]
    984a:	cmp	r1, #0
    984c:	beq.n	98ae <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    984e:	cmp	r0, #0
    9850:	bne.n	9838 <yield+0x30>
    9852:	cpsie	i
    9854:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    9858:	ldr.w	r8, [pc, #148]	; 98f0 <yield+0xe8>
    985c:	ldrb.w	r2, [r8]
    9860:	cmp	r2, #0
    9862:	beq.n	9824 <yield+0x1c>
    9864:	movs	r4, #0
    9866:	ldr.w	r9, [pc, #140]	; 98f4 <yield+0xec>
    986a:	b.n	9878 <yield+0x70>
    986c:	adds	r4, #1
    986e:	ldrb.w	r3, [r8]
    9872:	uxtb	r4, r4
    9874:	cmp	r3, r4
    9876:	bls.n	98a0 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    9878:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    987c:	ldr	r3, [r5, #0]
    987e:	mov	r0, r5
    9880:	ldr	r3, [r3, #16]
    9882:	blx	r3
    9884:	cmp	r0, #0
    9886:	beq.n	986c <yield+0x64>
    9888:	ldr	r3, [r5, #20]
    988a:	ldr	r3, [r3, #8]
    988c:	blx	r3
    988e:	b.n	986c <yield+0x64>
{
public:
	constexpr usb_seremu_class() {}
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
    9890:	bl	8f94 <usb_seremu_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    9894:	cbnz	r0, 98cc <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    9896:	ldr	r3, [pc, #80]	; (98e8 <yield+0xe0>)
    9898:	ldrb	r3, [r3, #0]
    989a:	cbnz	r3, 98a4 <yield+0x9c>
    989c:	ldrb	r3, [r6, #0]
    989e:	b.n	9820 <yield+0x18>
    98a0:	ldrb	r3, [r6, #0]
    98a2:	b.n	9824 <yield+0x1c>
    98a4:	ldrb	r3, [r6, #0]
    98a6:	and.w	r3, r3, #254	; 0xfe
    98aa:	strb	r3, [r6, #0]
    98ac:	b.n	9820 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    98ae:	movs	r6, #1
		firstYield = first->_next;
    98b0:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    98b2:	strb	r6, [r4, #0]
		firstYield = first->_next;
    98b4:	str	r5, [r3, #0]
		if (firstYield) {
    98b6:	cbz	r5, 98d2 <yield+0xca>
			firstYield->_prev = nullptr;
    98b8:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    98ba:	cbnz	r0, 98be <yield+0xb6>
    98bc:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    98be:	movs	r5, #0
		(*(first->_function))(*first);
    98c0:	ldr	r3, [r2, #8]
    98c2:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    98c4:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    98c6:	blx	r3
		runningFromYield = false;
    98c8:	strb	r5, [r4, #0]
    98ca:	b.n	9838 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    98cc:	bl	a48c <serialEvent()>
    98d0:	b.n	9896 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    98d2:	ldr	r3, [pc, #24]	; (98ec <yield+0xe4>)
    98d4:	str	r5, [r3, #0]
    98d6:	b.n	98ba <yield+0xb2>
    98d8:	.word	0x20001068
    98dc:	.word	0x200024a0
    98e0:	.word	0x200024b0
    98e4:	.word	0x200024b4
    98e8:	.word	0x60002396
    98ec:	.word	0x200024ac
    98f0:	.word	0x200026f0
    98f4:	.word	0x200026d0

000098f8 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    98f8:	push	{r4, r5, r6, r7}
	uint32_t ch = 0;

	__disable_irq();
    98fa:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    98fc:	cbnz	r1, 9922 <DMAChannel::begin(bool)+0x2a>
    98fe:	ldr	r2, [r0, #0]
    9900:	cbz	r2, 9922 <DMAChannel::begin(bool)+0x2a>
    9902:	ldrb	r3, [r0, #4]
    9904:	cmp	r3, #15
    9906:	bhi.n	9922 <DMAChannel::begin(bool)+0x2a>
	  && (dma_channel_allocated_mask & (1 << channel))
    9908:	ldr	r4, [pc, #124]	; (9988 <DMAChannel::begin(bool)+0x90>)
    990a:	ldrh	r1, [r4, #0]
    990c:	asr.w	r5, r1, r3
    9910:	lsls	r5, r5, #31
    9912:	bpl.n	9926 <DMAChannel::begin(bool)+0x2e>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    9914:	ldr	r5, [pc, #116]	; (998c <DMAChannel::begin(bool)+0x94>)
    9916:	add	r5, r3
    9918:	cmp.w	r2, r5, lsl #5
    991c:	bne.n	9926 <DMAChannel::begin(bool)+0x2e>
		// DMA channel already allocated
		__enable_irq();
    991e:	cpsie	i
		return;
    9920:	b.n	9940 <DMAChannel::begin(bool)+0x48>
    9922:	ldr	r4, [pc, #100]	; (9988 <DMAChannel::begin(bool)+0x90>)
    9924:	ldrh	r1, [r4, #0]
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    9926:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    9928:	asr.w	r2, r1, r3
    992c:	ands.w	r2, r2, #1
    9930:	beq.n	9944 <DMAChannel::begin(bool)+0x4c>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    9932:	adds	r3, #1
    9934:	cmp	r3, #16
    9936:	bne.n	9928 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    9938:	cpsie	i
			TCD = (TCD_t *)0;
    993a:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    993c:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    993e:	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    9940:	pop	{r4, r5, r6, r7}
    9942:	bx	lr
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    9944:	movs	r5, #1
    9946:	lsls	r5, r3
    9948:	orrs	r1, r5
    994a:	strh	r1, [r4, #0]
			__enable_irq();
    994c:	cpsie	i
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    994e:	ldr	r6, [pc, #64]	; (9990 <DMAChannel::begin(bool)+0x98>)
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    9950:	uxtb	r4, r3
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    9952:	ldr	r1, [pc, #56]	; (998c <DMAChannel::begin(bool)+0x94>)
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    9954:	movw	r7, #1154	; 0x482
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    9958:	strb	r4, [r0, #4]
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    995a:	add	r1, r3
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    995c:	ldr	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    995e:	lsls	r3, r1, #5
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    9960:	orr.w	r5, r5, #192	; 0xc0
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    9964:	ldr	r1, [pc, #44]	; (9994 <DMAChannel::begin(bool)+0x9c>)
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    9966:	str	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    9968:	str	r7, [r1, #0]
	DMA_CERQ = ch;
    996a:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    996c:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    996e:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    9970:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    9972:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    9974:	str	r2, [r3, #0]
	*p++ = 0;
    9976:	str	r2, [r3, #4]
	*p++ = 0;
    9978:	str	r2, [r3, #8]
	*p++ = 0;
    997a:	str	r2, [r3, #12]
	*p++ = 0;
    997c:	str	r2, [r3, #16]
	*p++ = 0;
    997e:	str	r2, [r3, #20]
	*p++ = 0;
    9980:	str	r2, [r3, #24]
	*p++ = 0;
    9982:	str	r2, [r3, #28]
}
    9984:	pop	{r4, r5, r6, r7}
    9986:	bx	lr
    9988:	.word	0x200024a2
    998c:	.word	0x02007480
    9990:	.word	0x400fc000
    9994:	.word	0x400e8000

00009998 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    9998:	ldrb	r3, [r0, #4]
    999a:	cmp	r3, #15
    999c:	bhi.n	99c0 <DMAChannel::release()+0x28>
	DMA_CERQ = channel;
    999e:	ldr	r2, [pc, #36]	; (99c4 <DMAChannel::release()+0x2c>)
    99a0:	strb	r3, [r2, #26]
	__disable_irq();
    99a2:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    99a4:	ldr	r1, [pc, #32]	; (99c8 <DMAChannel::release()+0x30>)
    99a6:	movs	r3, #1
    99a8:	ldrb	r2, [r0, #4]
    99aa:	lsl.w	r2, r3, r2
    99ae:	ldrh	r3, [r1, #0]
    99b0:	bic.w	r3, r3, r2
    99b4:	strh	r3, [r1, #0]
	__enable_irq();
    99b6:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    99b8:	movs	r2, #16
	TCD = (TCD_t *)0;
    99ba:	movs	r3, #0
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    99bc:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    99be:	str	r3, [r0, #0]
    99c0:	bx	lr
    99c2:	nop
    99c4:	.word	0x400e8000
    99c8:	.word	0x200024a2

000099cc <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    99cc:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    99ce:	mrs	r2, PRIMASK
		__disable_irq();
    99d2:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    99d4:	ldrb	r3, [r0, #29]
    99d6:	cbnz	r3, 99e6 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    99d8:	ldrb	r1, [r0, #28]
    99da:	cmp	r1, #1
    99dc:	beq.n	99f0 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    99de:	cmp	r1, #3
    99e0:	beq.n	9a04 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    99e2:	movs	r3, #1
    99e4:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    99e6:	cbnz	r2, 99ea <EventResponder::triggerEventNotImmediate()+0x1e>
    99e8:	cpsie	i
	}
	enableInterrupts(irq);
}
    99ea:	ldr.w	r4, [sp], #4
    99ee:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    99f0:	ldr	r4, [pc, #68]	; (9a38 <EventResponder::triggerEventNotImmediate()+0x6c>)
    99f2:	ldr	r1, [r4, #0]
    99f4:	cbz	r1, 9a20 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    99f6:	ldr	r1, [pc, #68]	; (9a3c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    99f8:	str	r3, [r0, #20]
				_prev = lastYield;
    99fa:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    99fc:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    99fe:	str	r3, [r0, #24]
				_prev->_next = this;
    9a00:	str	r0, [r3, #20]
    9a02:	b.n	99e2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    9a04:	ldr	r4, [pc, #56]	; (9a40 <EventResponder::triggerEventNotImmediate()+0x74>)
    9a06:	ldr	r1, [r4, #0]
    9a08:	cbz	r1, 9a2c <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    9a0a:	ldr	r1, [pc, #56]	; (9a44 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    9a0c:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    9a0e:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    9a10:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    9a12:	str	r3, [r0, #24]
				_prev->_next = this;
    9a14:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    9a16:	ldr	r3, [pc, #48]	; (9a48 <EventResponder::triggerEventNotImmediate()+0x7c>)
    9a18:	mov.w	r1, #268435456	; 0x10000000
    9a1c:	str	r1, [r3, #0]
    9a1e:	b.n	99e2 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    9a20:	ldr	r3, [pc, #24]	; (9a3c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    9a22:	str	r1, [r0, #20]
				_prev = nullptr;
    9a24:	str	r1, [r0, #24]
				firstYield = this;
    9a26:	str	r0, [r4, #0]
				lastYield = this;
    9a28:	str	r0, [r3, #0]
    9a2a:	b.n	99e2 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    9a2c:	ldr	r3, [pc, #20]	; (9a44 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    9a2e:	str	r1, [r0, #20]
				_prev = nullptr;
    9a30:	str	r1, [r0, #24]
				firstInterrupt = this;
    9a32:	str	r0, [r4, #0]
				lastInterrupt = this;
    9a34:	str	r0, [r3, #0]
    9a36:	b.n	9a16 <EventResponder::triggerEventNotImmediate()+0x4a>
    9a38:	.word	0x200024b0
    9a3c:	.word	0x200024ac
    9a40:	.word	0x200024a4
    9a44:	.word	0x200024a8
    9a48:	.word	0xe000ed04

00009a4c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    9a4c:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9a4e:	mrs	r1, PRIMASK
		__disable_irq();
    9a52:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9a54:	ldr	r4, [pc, #48]	; (9a88 <EventResponder::runFromInterrupt()+0x3c>)
    9a56:	ldr	r3, [r4, #0]
		if (first) {
    9a58:	cbz	r3, 9a7e <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9a5a:	ldr	r6, [pc, #48]	; (9a8c <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    9a5c:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    9a5e:	ldr	r2, [r3, #20]
    9a60:	str	r2, [r4, #0]
			if (firstInterrupt) {
    9a62:	cbz	r2, 9a84 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    9a64:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9a66:	cbnz	r1, 9a6a <EventResponder::runFromInterrupt()+0x1e>
    9a68:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    9a6a:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    9a6c:	mov	r0, r3
    9a6e:	ldr	r3, [r3, #8]
    9a70:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9a72:	mrs	r1, PRIMASK
		__disable_irq();
    9a76:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9a78:	ldr	r3, [r4, #0]
		if (first) {
    9a7a:	cmp	r3, #0
    9a7c:	bne.n	9a5e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9a7e:	cbnz	r1, 9a82 <EventResponder::runFromInterrupt()+0x36>
    9a80:	cpsie	i
    9a82:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9a84:	str	r2, [r6, #0]
    9a86:	b.n	9a66 <EventResponder::runFromInterrupt()+0x1a>
    9a88:	.word	0x200024a4
    9a8c:	.word	0x200024a8

00009a90 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    9a90:	b.w	9a4c <EventResponder::runFromInterrupt()>

00009a94 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    9a94:	ldr	r2, [pc, #16]	; (9aa8 <systick_isr+0x14>)
    9a96:	ldr	r3, [pc, #20]	; (9aac <systick_isr+0x18>)
    9a98:	ldr	r1, [r2, #0]
	systick_millis_count++;
    9a9a:	ldr	r2, [pc, #20]	; (9ab0 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    9a9c:	str	r1, [r3, #0]
	systick_millis_count++;
    9a9e:	ldr	r3, [r2, #0]
    9aa0:	adds	r3, #1
    9aa2:	str	r3, [r2, #0]
    9aa4:	bx	lr
    9aa6:	nop
    9aa8:	.word	0xe0001004
    9aac:	.word	0x20002480
    9ab0:	.word	0x20002488

00009ab4 <usb_seremu_class::peek()>:
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
    9ab4:	b.w	8f50 <usb_seremu_peekchar>

00009ab8 <usb_seremu_class::read()>:
public:
	constexpr usb_seremu_class() {}
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
    9ab8:	b.w	8ee8 <usb_seremu_getchar>

00009abc <usb_seremu_class::available()>:
{
public:
	constexpr usb_seremu_class() {}
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
    9abc:	b.w	8f94 <usb_seremu_available>

00009ac0 <usb_seremu_class::flush()>:
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
    9ac0:	b.w	91d0 <usb_seremu_flush_output>

00009ac4 <usb_seremu_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
        size_t write(unsigned long n) { return write((uint8_t)n); }
        size_t write(long n) { return write((uint8_t)n); }
        size_t write(unsigned int n) { return write((uint8_t)n); }
        size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_seremu_write_buffer_free(); }
    9ac4:	b.w	91cc <usb_seremu_write_buffer_free>

00009ac8 <usb_seremu_class::write(unsigned char const*, unsigned int)>:
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
    9ac8:	mov	r0, r1
    9aca:	mov	r1, r2
    9acc:	b.w	91b4 <usb_seremu_write>

00009ad0 <usb_seremu_class::write(unsigned char)>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
    9ad0:	mov	r0, r1
    9ad2:	b.w	9188 <usb_seremu_putchar>
    9ad6:	nop

00009ad8 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    9ad8:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    9ada:	mov	r6, r1
    9adc:	cbz	r1, 9afc <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    9ade:	cbz	r2, 9b00 <Print::write(unsigned char const*, unsigned int)+0x28>
    9ae0:	mov	r7, r0
    9ae2:	mov	r4, r2
    9ae4:	movs	r5, #0
    9ae6:	ldr	r3, [r7, #0]
    9ae8:	mov	r0, r7
    9aea:	ldrb.w	r1, [r6], #1
    9aee:	ldr	r3, [r3, #0]
    9af0:	blx	r3
    9af2:	subs	r4, #1
    9af4:	add	r5, r0
    9af6:	bne.n	9ae6 <Print::write(unsigned char const*, unsigned int)+0xe>
    9af8:	mov	r0, r5
    9afa:	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    9afc:	mov	r0, r1
    9afe:	pop	{r3, r4, r5, r6, r7, pc}
    9b00:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    9b02:	pop	{r3, r4, r5, r6, r7, pc}

00009b04 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    9b04:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    9b06:	ldr	r4, [pc, #24]	; (9b20 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    9b08:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    9b0a:	ldr	r3, [r0, #0]
    9b0c:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    9b0e:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    9b10:	add	r1, sp, #4
    9b12:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    9b14:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    9b18:	blx	r3
}
    9b1a:	add	sp, #8
    9b1c:	pop	{r4, pc}
    9b1e:	nop
    9b20:	.word	0x20000c74

00009b24 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    9b24:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    9b26:	push	{r4, lr}
    9b28:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    9b2a:	ldr	r3, [r3, #4]
    9b2c:	blx	r3
	return len;
}
    9b2e:	mov	r0, r4
    9b30:	pop	{r4, pc}
    9b32:	nop

00009b34 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    9b34:	push	{r1, r2, r3}
    9b36:	push	{lr}
    9b38:	sub	sp, #8
    9b3a:	add	r3, sp, #12
    9b3c:	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    9b40:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    9b42:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    9b44:	bl	b528 <vdprintf>
#endif
}
    9b48:	add	sp, #8
    9b4a:	ldr.w	lr, [sp], #4
    9b4e:	add	sp, #12
    9b50:	bx	lr
    9b52:	nop

00009b54 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>:
	update_responsibility = false;
}

static void copy_to_buffers(const uint32_t *src, int16_t *left, int16_t *right, unsigned int len)
{
	uint32_t *target = (uint32_t*) src + len; 
    9b54:	add.w	r3, r0, r3, lsl #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    9b58:	cmp	r0, r3
	// means we no longer get receive callbacks from usb.c
	update_responsibility = false;
}

static void copy_to_buffers(const uint32_t *src, int16_t *left, int16_t *right, unsigned int len)
{
    9b5a:	push	{r4, r5, r6, r7, lr}
	uint32_t *target = (uint32_t*) src + len; 
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    9b5c:	bcc.n	9b72 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x1e>
    9b5e:	b.n	9bba <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x66>
		uint32_t n = *src++;
    9b60:	ldr.w	r4, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    9b64:	lsrs	r5, r4, #16
}

static void copy_to_buffers(const uint32_t *src, int16_t *left, int16_t *right, unsigned int len)
{
	uint32_t *target = (uint32_t*) src + len; 
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    9b66:	cmp	r3, r0
		uint32_t n = *src++;
		*left++ = n & 0xFFFF;
    9b68:	strh.w	r4, [r1], #2
		*right++ = n >> 16;
    9b6c:	strh.w	r5, [r2], #2
}

static void copy_to_buffers(const uint32_t *src, int16_t *left, int16_t *right, unsigned int len)
{
	uint32_t *target = (uint32_t*) src + len; 
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    9b70:	bls.n	9bba <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x66>
    9b72:	lsls	r4, r1, #30
    9b74:	bmi.n	9b60 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0xc>
		uint32_t n = *src++;
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
	}

	while ((src < target - 2)) {
    9b76:	sub.w	lr, r3, #8
    9b7a:	cmp	r0, lr
    9b7c:	bcs.n	9ba6 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x52>
		uint32_t n1 = *src++;
    9b7e:	ldr.w	r6, [r0], #8
		uint32_t n = *src++;
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
		left+=2;
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    9b82:	ldr	r4, [pc, #68]	; (9bc8 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x74>)
		*right++ = n >> 16;
	}

	while ((src < target - 2)) {
		uint32_t n1 = *src++;
		uint32_t n = *src++;
    9b84:	ldr.w	r7, [r0, #-4]
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    9b88:	uxth	r5, r6
		uint32_t n = *src++;
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
	}

	while ((src < target - 2)) {
    9b8a:	cmp	r0, lr
		uint32_t n1 = *src++;
		uint32_t n = *src++;
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
		left+=2;
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    9b8c:	and.w	r4, r4, r7
	}

	while ((src < target - 2)) {
		uint32_t n1 = *src++;
		uint32_t n = *src++;
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    9b90:	orr.w	r5, r5, r7, lsl #16
		left+=2;
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    9b94:	orr.w	r4, r4, r6, lsr #16
	}

	while ((src < target - 2)) {
		uint32_t n1 = *src++;
		uint32_t n = *src++;
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    9b98:	str.w	r5, [r1], #4
		left+=2;
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    9b9c:	str.w	r4, [r2], #4
		uint32_t n = *src++;
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
	}

	while ((src < target - 2)) {
    9ba0:	bcc.n	9b7e <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x2a>
		left+=2;
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
		right+=2;
	}

	while ((src < target)) {
    9ba2:	cmp	r3, r0
    9ba4:	bls.n	9bc4 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x70>
		uint32_t n = *src++;
    9ba6:	ldr.w	r4, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    9baa:	lsrs	r5, r4, #16
		left+=2;
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
		right+=2;
	}

	while ((src < target)) {
    9bac:	cmp	r3, r0
		uint32_t n = *src++;
		*left++ = n & 0xFFFF;
    9bae:	strh.w	r4, [r1], #2
		*right++ = n >> 16;
    9bb2:	strh.w	r5, [r2], #2
		left+=2;
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
		right+=2;
	}

	while ((src < target)) {
    9bb6:	bhi.n	9ba6 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x52>
    9bb8:	pop	{r4, r5, r6, r7, pc}
		uint32_t n = *src++;
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
	}

	while ((src < target - 2)) {
    9bba:	sub.w	lr, r3, #8
    9bbe:	cmp	r0, lr
    9bc0:	bcc.n	9b7e <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x2a>
    9bc2:	pop	{r4, r5, r6, r7, pc}
    9bc4:	pop	{r4, r5, r6, r7, pc}
    9bc6:	nop
    9bc8:	.word	0xffff0000

00009bcc <sync_event(transfer_struct*)>:

static void sync_event(transfer_t *t)
{
	// USB 2.0 Specification, 5.12.4.2 Feedback, pages 73-75
	//printf("sync %x\n", sync_transfer.status); // too slow, can't print this much
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9bcc:	ldr	r1, [pc, #72]	; (9c18 <sync_event(transfer_struct*)+0x4c>)
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    9bce:	movs	r3, #0

static void sync_event(transfer_t *t)
{
	// USB 2.0 Specification, 5.12.4.2 Feedback, pages 73-75
	//printf("sync %x\n", sync_transfer.status); // too slow, can't print this much
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9bd0:	ldr	r2, [pc, #72]	; (9c1c <sync_event(transfer_struct*)+0x50>)
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    9bd2:	ldr	r0, [pc, #76]	; (9c20 <sync_event(transfer_struct*)+0x54>)

static void sync_event(transfer_t *t)
{
	// USB 2.0 Specification, 5.12.4.2 Feedback, pages 73-75
	//printf("sync %x\n", sync_transfer.status); // too slow, can't print this much
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9bd4:	ldr	r2, [r2, #0]
	arm_dcache_delete(&rx_buffer, AUDIO_RX_SIZE);
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
}

static void sync_event(transfer_t *t)
{
    9bd6:	push	{r4, r5, r6, lr}
	// USB 2.0 Specification, 5.12.4.2 Feedback, pages 73-75
	//printf("sync %x\n", sync_transfer.status); // too slow, can't print this much
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9bd8:	ldrb	r5, [r1, #0]
    9bda:	ldr	r4, [pc, #72]	; (9c24 <sync_event(transfer_struct*)+0x58>)
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    9bdc:	ldr	r6, [pc, #72]	; (9c28 <sync_event(transfer_struct*)+0x5c>)

static void sync_event(transfer_t *t)
{
	// USB 2.0 Specification, 5.12.4.2 Feedback, pages 73-75
	//printf("sync %x\n", sync_transfer.status); // too slow, can't print this much
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9bde:	lsr.w	r5, r2, r5
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    9be2:	mov	r1, r4
    9be4:	ldrb	r2, [r6, #0]

static void sync_event(transfer_t *t)
{
	// USB 2.0 Specification, 5.12.4.2 Feedback, pages 73-75
	//printf("sync %x\n", sync_transfer.status); // too slow, can't print this much
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9be6:	str	r5, [r4, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    9be8:	bl	8cf8 <usb_prepare_transfer>
// in the future.  For data transmission, use arm_dcache_flush_delete().
__attribute__((always_inline, unused))
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    9bec:	ldrb	r1, [r6, #0]
// typically used with special fields you will want to quickly access
// in the future.  For data transmission, use arm_dcache_flush_delete().
__attribute__((always_inline, unused))
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9bee:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    9bf2:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    9bf4:	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
    9bf8:	ldr	r2, [pc, #48]	; (9c2c <sync_event(transfer_struct*)+0x60>)
    9bfa:	str	r3, [r2, #0]
		location += 32;
    9bfc:	adds	r3, #32
	} while (location < end_addr);
    9bfe:	cmp	r1, r3
    9c00:	bhi.n	9bfa <sync_event(transfer_struct*)+0x2e>
	asm("dsb");
    9c02:	dsb	sy
	asm("isb");
    9c06:	isb	sy
	arm_dcache_flush(&usb_audio_sync_feedback, usb_audio_sync_nbytes);
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    9c0a:	ldr	r1, [pc, #20]	; (9c20 <sync_event(transfer_struct*)+0x54>)
    9c0c:	movs	r0, #4
}
    9c0e:	ldmia.w	sp!, {r4, r5, r6, lr}
	// USB 2.0 Specification, 5.12.4.2 Feedback, pages 73-75
	//printf("sync %x\n", sync_transfer.status); // too slow, can't print this much
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
	arm_dcache_flush(&usb_audio_sync_feedback, usb_audio_sync_nbytes);
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    9c12:	b.w	8d28 <usb_transmit>
    9c16:	nop
    9c18:	.word	0x20002604
    9c1c:	.word	0x200024d4
    9c20:	.word	0x200024e0
    9c24:	.word	0x20201d60
    9c28:	.word	0x200024cc
    9c2c:	.word	0xe000ef68

00009c30 <AudioInputUSB::update()>:
	AudioInputUSB::incoming_count = count;
}
#endif

void AudioInputUSB::update(void)
{
    9c30:	push	{r3, r4, r5, r6, r7, lr}
    9c32:	mov	r6, r0
	audio_block_t *left, *right;

	__disable_irq();
    9c34:	cpsid	i
	left = ready_left;
	ready_left = NULL;
    9c36:	movs	r3, #0
void AudioInputUSB::update(void)
{
	audio_block_t *left, *right;

	__disable_irq();
	left = ready_left;
    9c38:	ldr	r0, [pc, #116]	; (9cb0 <AudioInputUSB::update()+0x80>)
	ready_left = NULL;
	right = ready_right;
    9c3a:	ldr	r1, [pc, #120]	; (9cb4 <AudioInputUSB::update()+0x84>)
	ready_right = NULL;
	uint16_t c = incoming_count;
	uint8_t f = receive_flag;
    9c3c:	ldr	r2, [pc, #120]	; (9cb8 <AudioInputUSB::update()+0x88>)
	__disable_irq();
	left = ready_left;
	ready_left = NULL;
	right = ready_right;
	ready_right = NULL;
	uint16_t c = incoming_count;
    9c3e:	ldr	r4, [pc, #124]	; (9cbc <AudioInputUSB::update()+0x8c>)
void AudioInputUSB::update(void)
{
	audio_block_t *left, *right;

	__disable_irq();
	left = ready_left;
    9c40:	ldr	r5, [r0, #0]
	ready_left = NULL;
	right = ready_right;
	ready_right = NULL;
	uint16_t c = incoming_count;
    9c42:	ldrh	r7, [r4, #0]
{
	audio_block_t *left, *right;

	__disable_irq();
	left = ready_left;
	ready_left = NULL;
    9c44:	str	r3, [r0, #0]
	right = ready_right;
    9c46:	ldr	r4, [r1, #0]
	ready_right = NULL;
    9c48:	str	r3, [r1, #0]
	uint16_t c = incoming_count;
	uint8_t f = receive_flag;
    9c4a:	ldrb	r1, [r2, #0]
	receive_flag = 0;
    9c4c:	strb	r3, [r2, #0]
	__enable_irq();
    9c4e:	cpsie	i
	if (f) {
    9c50:	cbz	r1, 9c88 <AudioInputUSB::update()+0x58>
		int diff = AUDIO_BLOCK_SAMPLES/2 - (int)c;
		feedback_accumulator += diff * 1;
    9c52:	ldr	r2, [pc, #108]	; (9cc0 <AudioInputUSB::update()+0x90>)
    9c54:	rsb	r7, r7, #64	; 0x40
    9c58:	ldr	r3, [r2, #0]
    9c5a:	add	r3, r7
    9c5c:	str	r3, [r2, #0]

		//printf(diff >= 0 ? "." : "^");
	}
	//serial_phex(c);
	//serial_print(".");
	if (!left || !right) {
    9c5e:	cbz	r5, 9c62 <AudioInputUSB::update()+0x32>
    9c60:	cbnz	r4, 9c8c <AudioInputUSB::update()+0x5c>
		usb_audio_underrun_count++;
    9c62:	ldr	r0, [pc, #96]	; (9cc4 <AudioInputUSB::update()+0x94>)
		//printf("#"); // buffer underrun - PC sending too slow
		if (f) feedback_accumulator += 3500;
    9c64:	addw	r3, r3, #3500	; 0xdac
		//printf(diff >= 0 ? "." : "^");
	}
	//serial_phex(c);
	//serial_print(".");
	if (!left || !right) {
		usb_audio_underrun_count++;
    9c68:	ldr	r1, [r0, #0]
		//printf("#"); // buffer underrun - PC sending too slow
		if (f) feedback_accumulator += 3500;
    9c6a:	str	r3, [r2, #0]
		//printf(diff >= 0 ? "." : "^");
	}
	//serial_phex(c);
	//serial_print(".");
	if (!left || !right) {
		usb_audio_underrun_count++;
    9c6c:	adds	r3, r1, #1
    9c6e:	str	r3, [r0, #0]
		//printf("#"); // buffer underrun - PC sending too slow
		if (f) feedback_accumulator += 3500;
	}
	if (left) {
    9c70:	cbnz	r5, 9c8c <AudioInputUSB::update()+0x5c>
		transmit(left, 0);
		release(left);
	}
	if (right) {
    9c72:	cbz	r4, 9ca0 <AudioInputUSB::update()+0x70>
		transmit(right, 1);
    9c74:	mov	r0, r6
    9c76:	mov	r1, r4
    9c78:	movs	r2, #1
    9c7a:	bl	a31c <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(right);
    9c7e:	mov	r0, r4
	}
}
    9c80:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		transmit(left, 0);
		release(left);
	}
	if (right) {
		transmit(right, 1);
		release(right);
    9c84:	b.w	a2c8 <AudioStream::release(audio_block_struct*)>

		//printf(diff >= 0 ? "." : "^");
	}
	//serial_phex(c);
	//serial_print(".");
	if (!left || !right) {
    9c88:	cbz	r5, 9ca2 <AudioInputUSB::update()+0x72>
    9c8a:	cbz	r4, 9ca2 <AudioInputUSB::update()+0x72>
		usb_audio_underrun_count++;
		//printf("#"); // buffer underrun - PC sending too slow
		if (f) feedback_accumulator += 3500;
	}
	if (left) {
		transmit(left, 0);
    9c8c:	mov	r0, r6
    9c8e:	movs	r2, #0
    9c90:	mov	r1, r5
    9c92:	bl	a31c <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(left);
    9c96:	mov	r0, r5
    9c98:	bl	a2c8 <AudioStream::release(audio_block_struct*)>
	}
	if (right) {
    9c9c:	cmp	r4, #0
    9c9e:	bne.n	9c74 <AudioInputUSB::update()+0x44>
    9ca0:	pop	{r3, r4, r5, r6, r7, pc}
		//printf(diff >= 0 ? "." : "^");
	}
	//serial_phex(c);
	//serial_print(".");
	if (!left || !right) {
		usb_audio_underrun_count++;
    9ca2:	ldr	r2, [pc, #32]	; (9cc4 <AudioInputUSB::update()+0x94>)
    9ca4:	ldr	r3, [r2, #0]
    9ca6:	adds	r3, #1
    9ca8:	str	r3, [r2, #0]
		//printf("#"); // buffer underrun - PC sending too slow
		if (f) feedback_accumulator += 3500;
	}
	if (left) {
    9caa:	cmp	r5, #0
    9cac:	beq.n	9c72 <AudioInputUSB::update()+0x42>
    9cae:	b.n	9c8c <AudioInputUSB::update()+0x5c>
    9cb0:	.word	0x2000260c
    9cb4:	.word	0x200024c4
    9cb8:	.word	0x200025d4
    9cbc:	.word	0x20002648
    9cc0:	.word	0x200024d4
    9cc4:	.word	0x200024c8

00009cc8 <AudioInputUSB::begin()>:
	usb_config_tx_iso(AUDIO_TX_ENDPOINT, AUDIO_TX_SIZE, 1, tx_event);
	tx_event(NULL);
}

void AudioInputUSB::begin(void)
{
    9cc8:	push	{r4, r5, r6, r7}
	incoming_count = 0;
    9cca:	movs	r3, #0
    9ccc:	ldr	r7, [pc, #28]	; (9cec <AudioInputUSB::begin()+0x24>)
	incoming_left = NULL;
    9cce:	ldr	r6, [pc, #32]	; (9cf0 <AudioInputUSB::begin()+0x28>)
	incoming_right = NULL;
    9cd0:	ldr	r5, [pc, #32]	; (9cf4 <AudioInputUSB::begin()+0x2c>)
	ready_left = NULL;
    9cd2:	ldr	r4, [pc, #36]	; (9cf8 <AudioInputUSB::begin()+0x30>)
	ready_right = NULL;
    9cd4:	ldr	r0, [pc, #36]	; (9cfc <AudioInputUSB::begin()+0x34>)
	receive_flag = 0;
    9cd6:	ldr	r1, [pc, #40]	; (9d00 <AudioInputUSB::begin()+0x38>)
	// update_responsibility = update_setup();
	// TODO: update responsibility is tough, partly because the USB
	// interrupts aren't sychronous to the audio library block size,
	// but also because the PC may stop transmitting data, which
	// means we no longer get receive callbacks from usb.c
	update_responsibility = false;
    9cd8:	ldr	r2, [pc, #40]	; (9d04 <AudioInputUSB::begin()+0x3c>)
	tx_event(NULL);
}

void AudioInputUSB::begin(void)
{
	incoming_count = 0;
    9cda:	strh	r3, [r7, #0]
	incoming_left = NULL;
    9cdc:	str	r3, [r6, #0]
	incoming_right = NULL;
    9cde:	str	r3, [r5, #0]
	ready_left = NULL;
    9ce0:	str	r3, [r4, #0]
	ready_right = NULL;
	receive_flag = 0;
    9ce2:	strb	r3, [r1, #0]
{
	incoming_count = 0;
	incoming_left = NULL;
	incoming_right = NULL;
	ready_left = NULL;
	ready_right = NULL;
    9ce4:	str	r3, [r0, #0]
	// update_responsibility = update_setup();
	// TODO: update responsibility is tough, partly because the USB
	// interrupts aren't sychronous to the audio library block size,
	// but also because the PC may stop transmitting data, which
	// means we no longer get receive callbacks from usb.c
	update_responsibility = false;
    9ce6:	strb	r3, [r2, #0]
}
    9ce8:	pop	{r4, r5, r6, r7}
    9cea:	bx	lr
    9cec:	.word	0x20002648
    9cf0:	.word	0x20002608
    9cf4:	.word	0x20002600
    9cf8:	.word	0x2000260c
    9cfc:	.word	0x200024c4
    9d00:	.word	0x200025d4
    9d04:	.word	0x20002641

00009d08 <usb_audio_receive_callback>:

	AudioInputUSB::receive_flag = 1;
	len >>= 2; // 1 sample = 4 bytes: 2 left, 2 right
	data = (const uint32_t *)rx_buffer;

	count = AudioInputUSB::incoming_count;
    9d08:	ldr	r3, [pc, #336]	; (9e5c <usb_audio_receive_callback+0x154>)
{
	unsigned int count, avail;
	audio_block_t *left, *right;
	const uint32_t *data;

	AudioInputUSB::receive_flag = 1;
    9d0a:	movs	r2, #1
// Called from the USB interrupt when an isochronous packet arrives
// we must completely remove it from the receive buffer before returning
//
#if 1
void usb_audio_receive_callback(unsigned int len)
{
    9d0c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	AudioInputUSB::receive_flag = 1;
	len >>= 2; // 1 sample = 4 bytes: 2 left, 2 right
	data = (const uint32_t *)rx_buffer;

	count = AudioInputUSB::incoming_count;
    9d10:	ldrh.w	r8, [r3]
// Called from the USB interrupt when an isochronous packet arrives
// we must completely remove it from the receive buffer before returning
//
#if 1
void usb_audio_receive_callback(unsigned int len)
{
    9d14:	sub	sp, #12
	unsigned int count, avail;
	audio_block_t *left, *right;
	const uint32_t *data;

	AudioInputUSB::receive_flag = 1;
    9d16:	ldr	r3, [pc, #328]	; (9e60 <usb_audio_receive_callback+0x158>)
	len >>= 2; // 1 sample = 4 bytes: 2 left, 2 right
    9d18:	lsrs	r6, r0, #2
	data = (const uint32_t *)rx_buffer;

	count = AudioInputUSB::incoming_count;
	left = AudioInputUSB::incoming_left;
    9d1a:	ldr.w	fp, [pc, #344]	; 9e74 <usb_audio_receive_callback+0x16c>

	AudioInputUSB::receive_flag = 1;
	len >>= 2; // 1 sample = 4 bytes: 2 left, 2 right
	data = (const uint32_t *)rx_buffer;

	count = AudioInputUSB::incoming_count;
    9d1e:	mov	sl, r8
{
	unsigned int count, avail;
	audio_block_t *left, *right;
	const uint32_t *data;

	AudioInputUSB::receive_flag = 1;
    9d20:	strb	r2, [r3, #0]
	len >>= 2; // 1 sample = 4 bytes: 2 left, 2 right
	data = (const uint32_t *)rx_buffer;

	count = AudioInputUSB::incoming_count;
	left = AudioInputUSB::incoming_left;
    9d22:	ldr.w	r4, [fp]
	right = AudioInputUSB::incoming_right;
    9d26:	ldr	r3, [pc, #316]	; (9e64 <usb_audio_receive_callback+0x15c>)
    9d28:	ldr	r5, [r3, #0]
	if (left == NULL) {
    9d2a:	cmp	r4, #0
    9d2c:	beq.n	9dd6 <usb_audio_receive_callback+0xce>
		left = AudioStream::allocate();
		if (left == NULL) return;
		AudioInputUSB::incoming_left = left;
	}
	if (right == NULL) {
    9d2e:	cmp	r5, #0
    9d30:	beq.n	9de8 <usb_audio_receive_callback+0xe0>
		right = AudioStream::allocate();
		if (right == NULL) return;
		AudioInputUSB::incoming_right = right;
	}
	while (len > 0) {
    9d32:	cmp	r6, #0
    9d34:	beq.n	9dfa <usb_audio_receive_callback+0xf2>
		avail = AUDIO_BLOCK_SAMPLES - count;
    9d36:	rsb	r7, r8, #128	; 0x80
		if (len < avail) {
    9d3a:	cmp	r6, r7
    9d3c:	bcc.w	9e50 <usb_audio_receive_callback+0x148>
    9d40:	ldr	r3, [pc, #292]	; (9e68 <usb_audio_receive_callback+0x160>)
    9d42:	ldr.w	r8, [pc, #308]	; 9e78 <usb_audio_receive_callback+0x170>
    9d46:	str	r3, [sp, #4]
			}
			AudioInputUSB::incoming_left = left;
			AudioInputUSB::incoming_right = right;
			count = 0;
		} else {
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    9d48:	ldr.w	r9, [pc, #288]	; 9e6c <usb_audio_receive_callback+0x164>
		avail = AUDIO_BLOCK_SAMPLES - count;
		if (len < avail) {
			copy_to_buffers(data, left->data + count, right->data + count, len);
			AudioInputUSB::incoming_count = count + len;
			return;
		} else if (avail > 0) {
    9d4c:	cbnz	r7, 9d92 <usb_audio_receive_callback+0x8a>
			}
			AudioInputUSB::incoming_left = left;
			AudioInputUSB::incoming_right = right;
			count = 0;
		} else {
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    9d4e:	ldr.w	r3, [r8]
    9d52:	cmp	r3, #0
    9d54:	bne.n	9dd0 <usb_audio_receive_callback+0xc8>
    9d56:	ldr.w	r2, [r9]
    9d5a:	mov	r3, r9
    9d5c:	cmp	r2, #0
    9d5e:	bne.n	9dd0 <usb_audio_receive_callback+0xc8>
					//serial_phex(len);
				}
				return;
			}
			send:
			AudioInputUSB::ready_left = left;
    9d60:	str.w	r4, [r8]
			AudioInputUSB::ready_right = right;
    9d64:	str	r5, [r3, #0]
			//if (AudioInputUSB::update_responsibility) AudioStream::update_all();
			left = AudioStream::allocate();
    9d66:	bl	a220 <AudioStream::allocate()>
			if (left == NULL) {
    9d6a:	mov	r4, r0
    9d6c:	cmp	r0, #0
    9d6e:	beq.n	9e06 <usb_audio_receive_callback+0xfe>
				AudioInputUSB::incoming_left = NULL;
				AudioInputUSB::incoming_right = NULL;
				AudioInputUSB::incoming_count = 0;
				return;
			}
			right = AudioStream::allocate();
    9d70:	bl	a220 <AudioStream::allocate()>
			if (right == NULL) {
    9d74:	mov	r5, r0
    9d76:	cmp	r0, #0
    9d78:	beq.n	9e18 <usb_audio_receive_callback+0x110>
				AudioInputUSB::incoming_right = NULL;
				AudioInputUSB::incoming_count = 0;
				return;
			}
			AudioInputUSB::incoming_left = left;
			AudioInputUSB::incoming_right = right;
    9d7a:	ldr	r3, [pc, #232]	; (9e64 <usb_audio_receive_callback+0x15c>)
				AudioInputUSB::incoming_left = NULL;
				AudioInputUSB::incoming_right = NULL;
				AudioInputUSB::incoming_count = 0;
				return;
			}
			AudioInputUSB::incoming_left = left;
    9d7c:	str.w	r4, [fp]
			AudioInputUSB::incoming_right = right;
    9d80:	str	r0, [r3, #0]
	if (right == NULL) {
		right = AudioStream::allocate();
		if (right == NULL) return;
		AudioInputUSB::incoming_right = right;
	}
	while (len > 0) {
    9d82:	cmp	r6, #0
    9d84:	beq.n	9df8 <usb_audio_receive_callback+0xf0>
		avail = AUDIO_BLOCK_SAMPLES - count;
		if (len < avail) {
    9d86:	cmp	r6, #127	; 0x7f
				AudioInputUSB::incoming_count = 0;
				return;
			}
			AudioInputUSB::incoming_left = left;
			AudioInputUSB::incoming_right = right;
			count = 0;
    9d88:	mov.w	sl, #0
		right = AudioStream::allocate();
		if (right == NULL) return;
		AudioInputUSB::incoming_right = right;
	}
	while (len > 0) {
		avail = AUDIO_BLOCK_SAMPLES - count;
    9d8c:	mov.w	r7, #128	; 0x80
		if (len < avail) {
    9d90:	bls.n	9e30 <usb_audio_receive_callback+0x128>
			copy_to_buffers(data, left->data + count, right->data + count, len);
			AudioInputUSB::incoming_count = count + len;
			return;
		} else if (avail > 0) {
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    9d92:	mov.w	lr, sl, lsl #1
    9d96:	adds	r2, r5, #4
    9d98:	adds	r1, r4, #4
    9d9a:	mov	r3, r7
    9d9c:	add	r2, lr
    9d9e:	ldr	r0, [sp, #4]
    9da0:	add	r1, lr
			data += avail;
			len -= avail;
    9da2:	subs	r6, r6, r7
		if (len < avail) {
			copy_to_buffers(data, left->data + count, right->data + count, len);
			AudioInputUSB::incoming_count = count + len;
			return;
		} else if (avail > 0) {
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    9da4:	bl	9b54 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			data += avail;
    9da8:	ldr	r2, [sp, #4]
			len -= avail;
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) {
    9daa:	ldr.w	r3, [r8]
			copy_to_buffers(data, left->data + count, right->data + count, len);
			AudioInputUSB::incoming_count = count + len;
			return;
		} else if (avail > 0) {
			copy_to_buffers(data, left->data + count, right->data + count, avail);
			data += avail;
    9dae:	add.w	r2, r2, r7, lsl #2
    9db2:	str	r2, [sp, #4]
			len -= avail;
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) {
    9db4:	cbnz	r3, 9dc0 <usb_audio_receive_callback+0xb8>
    9db6:	ldr.w	r2, [r9]
    9dba:	ldr	r3, [pc, #176]	; (9e6c <usb_audio_receive_callback+0x164>)
    9dbc:	cmp	r2, #0
    9dbe:	beq.n	9d60 <usb_audio_receive_callback+0x58>
				// buffer overrun, PC sending too fast
				AudioInputUSB::incoming_count = count + avail;
    9dc0:	add	r7, sl
    9dc2:	ldr	r3, [pc, #152]	; (9e5c <usb_audio_receive_callback+0x154>)
    9dc4:	strh	r7, [r3, #0]
				if (len > 0) {
    9dc6:	cbz	r6, 9dd0 <usb_audio_receive_callback+0xc8>
					usb_audio_overrun_count++;
    9dc8:	ldr	r2, [pc, #164]	; (9e70 <usb_audio_receive_callback+0x168>)
    9dca:	ldr	r3, [r2, #0]
    9dcc:	adds	r3, #1
    9dce:	str	r3, [r2, #0]
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
			goto send; // recover from buffer overrun
		}
	}
	AudioInputUSB::incoming_count = count;
}
    9dd0:	add	sp, #12
    9dd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	count = AudioInputUSB::incoming_count;
	left = AudioInputUSB::incoming_left;
	right = AudioInputUSB::incoming_right;
	if (left == NULL) {
		left = AudioStream::allocate();
    9dd6:	bl	a220 <AudioStream::allocate()>
		if (left == NULL) return;
    9dda:	mov	r4, r0
    9ddc:	cmp	r0, #0
    9dde:	beq.n	9dd0 <usb_audio_receive_callback+0xc8>
		AudioInputUSB::incoming_left = left;
    9de0:	str.w	r0, [fp]
	}
	if (right == NULL) {
    9de4:	cmp	r5, #0
    9de6:	bne.n	9d32 <usb_audio_receive_callback+0x2a>
		right = AudioStream::allocate();
    9de8:	bl	a220 <AudioStream::allocate()>
		if (right == NULL) return;
    9dec:	mov	r5, r0
    9dee:	cmp	r0, #0
    9df0:	beq.n	9dd0 <usb_audio_receive_callback+0xc8>
		AudioInputUSB::incoming_right = right;
    9df2:	ldr	r3, [pc, #112]	; (9e64 <usb_audio_receive_callback+0x15c>)
    9df4:	str	r0, [r3, #0]
    9df6:	b.n	9d32 <usb_audio_receive_callback+0x2a>
    9df8:	mov	r8, r6
		} else {
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
			goto send; // recover from buffer overrun
		}
	}
	AudioInputUSB::incoming_count = count;
    9dfa:	ldr	r3, [pc, #96]	; (9e5c <usb_audio_receive_callback+0x154>)
    9dfc:	strh.w	r8, [r3]
}
    9e00:	add	sp, #12
    9e02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			AudioInputUSB::ready_right = right;
			//if (AudioInputUSB::update_responsibility) AudioStream::update_all();
			left = AudioStream::allocate();
			if (left == NULL) {
				AudioInputUSB::incoming_left = NULL;
				AudioInputUSB::incoming_right = NULL;
    9e06:	ldr	r3, [pc, #92]	; (9e64 <usb_audio_receive_callback+0x15c>)
			AudioInputUSB::ready_left = left;
			AudioInputUSB::ready_right = right;
			//if (AudioInputUSB::update_responsibility) AudioStream::update_all();
			left = AudioStream::allocate();
			if (left == NULL) {
				AudioInputUSB::incoming_left = NULL;
    9e08:	str.w	r0, [fp]
				AudioInputUSB::incoming_right = NULL;
    9e0c:	str	r0, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    9e0e:	ldr	r3, [pc, #76]	; (9e5c <usb_audio_receive_callback+0x154>)
    9e10:	strh	r0, [r3, #0]
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
			goto send; // recover from buffer overrun
		}
	}
	AudioInputUSB::incoming_count = count;
}
    9e12:	add	sp, #12
    9e14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioInputUSB::incoming_count = 0;
				return;
			}
			right = AudioStream::allocate();
			if (right == NULL) {
				AudioStream::release(left);
    9e18:	mov	r0, r4
    9e1a:	bl	a2c8 <AudioStream::release(audio_block_struct*)>
				AudioInputUSB::incoming_left = NULL;
				AudioInputUSB::incoming_right = NULL;
    9e1e:	ldr	r3, [pc, #68]	; (9e64 <usb_audio_receive_callback+0x15c>)
				return;
			}
			right = AudioStream::allocate();
			if (right == NULL) {
				AudioStream::release(left);
				AudioInputUSB::incoming_left = NULL;
    9e20:	str.w	r5, [fp]
				AudioInputUSB::incoming_right = NULL;
    9e24:	str	r5, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    9e26:	ldr	r3, [pc, #52]	; (9e5c <usb_audio_receive_callback+0x154>)
    9e28:	strh	r5, [r3, #0]
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
			goto send; // recover from buffer overrun
		}
	}
	AudioInputUSB::incoming_count = count;
}
    9e2a:	add	sp, #12
    9e2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e30:	mov	r8, sl
    9e32:	mov	r7, sl
		AudioInputUSB::incoming_right = right;
	}
	while (len > 0) {
		avail = AUDIO_BLOCK_SAMPLES - count;
		if (len < avail) {
			copy_to_buffers(data, left->data + count, right->data + count, len);
    9e34:	adds	r2, r5, #4
    9e36:	adds	r1, r4, #4
    9e38:	mov	r3, r6
    9e3a:	ldr	r0, [sp, #4]
    9e3c:	add	r2, r7
    9e3e:	add	r1, r7
    9e40:	bl	9b54 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			AudioInputUSB::incoming_count = count + len;
    9e44:	add	r6, r8
    9e46:	ldr	r3, [pc, #20]	; (9e5c <usb_audio_receive_callback+0x154>)
    9e48:	strh	r6, [r3, #0]
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
			goto send; // recover from buffer overrun
		}
	}
	AudioInputUSB::incoming_count = count;
}
    9e4a:	add	sp, #12
    9e4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (right == NULL) return;
		AudioInputUSB::incoming_right = right;
	}
	while (len > 0) {
		avail = AUDIO_BLOCK_SAMPLES - count;
		if (len < avail) {
    9e50:	ldr	r3, [pc, #20]	; (9e68 <usb_audio_receive_callback+0x160>)
    9e52:	mov.w	r7, r8, lsl #1
    9e56:	str	r3, [sp, #4]
    9e58:	b.n	9e34 <usb_audio_receive_callback+0x12c>
    9e5a:	nop
    9e5c:	.word	0x20002648
    9e60:	.word	0x200025d4
    9e64:	.word	0x20002600
    9e68:	.word	0x20201d80
    9e6c:	.word	0x200024c4
    9e70:	.word	0x20002644
    9e74:	.word	0x20002608
    9e78:	.word	0x2000260c

00009e7c <rx_event(transfer_struct*)>:
volatile uint32_t usb_audio_underrun_count;
volatile uint32_t usb_audio_overrun_count;


static void rx_event(transfer_t *t)
{
    9e7c:	push	{r4, lr}
	if (t) {
    9e7e:	cbz	r0, 9e90 <rx_event(transfer_struct*)+0x14>
		int len = AUDIO_RX_SIZE - ((rx_transfer.status >> 16) & 0x7FFF);
    9e80:	ldr	r3, [pc, #68]	; (9ec8 <rx_event(transfer_struct*)+0x4c>)
    9e82:	ldr	r0, [r3, #4]
		printf("rx %u\n", len);
		usb_audio_receive_callback(len);
    9e84:	ubfx	r0, r0, #16, #15
    9e88:	rsb	r0, r0, #180	; 0xb4
    9e8c:	bl	9d08 <usb_audio_receive_callback>
	}
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    9e90:	ldr	r4, [pc, #56]	; (9ecc <rx_event(transfer_struct*)+0x50>)
    9e92:	movs	r3, #0
    9e94:	movs	r2, #180	; 0xb4
    9e96:	ldr	r0, [pc, #48]	; (9ec8 <rx_event(transfer_struct*)+0x4c>)
    9e98:	mov	r1, r4
    9e9a:	bl	8cf8 <usb_prepare_transfer>
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9e9e:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    9ea2:	add.w	r1, r4, #180	; 0xb4
	asm volatile("": : :"memory");
	asm("dsb");
    9ea6:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    9eaa:	ldr	r2, [pc, #36]	; (9ed0 <rx_event(transfer_struct*)+0x54>)
    9eac:	str	r3, [r2, #0]
		location += 32;
    9eae:	adds	r3, #32
	} while (location < end_addr);
    9eb0:	cmp	r1, r3
    9eb2:	bhi.n	9eac <rx_event(transfer_struct*)+0x30>
	asm("dsb");
    9eb4:	dsb	sy
	asm("isb");
    9eb8:	isb	sy
	arm_dcache_delete(&rx_buffer, AUDIO_RX_SIZE);
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    9ebc:	ldr	r1, [pc, #8]	; (9ec8 <rx_event(transfer_struct*)+0x4c>)
    9ebe:	movs	r0, #3
}
    9ec0:	ldmia.w	sp!, {r4, lr}
		printf("rx %u\n", len);
		usb_audio_receive_callback(len);
	}
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
	arm_dcache_delete(&rx_buffer, AUDIO_RX_SIZE);
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    9ec4:	b.w	8d50 <usb_receive>
    9ec8:	.word	0x200025e0
    9ecc:	.word	0x20201d80
    9ed0:	.word	0xe000ef5c

00009ed4 <usb_audio_transmit_callback>:
{
	static uint32_t count=5;
	uint32_t avail, num, target, offset, len=0;
	audio_block_t *left, *right;

	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    9ed4:	ldr	r2, [pc, #220]	; (9fb4 <usb_audio_transmit_callback+0xe0>)
    9ed6:	ldr	r3, [r2, #0]
    9ed8:	adds	r3, #1
    9eda:	cmp	r3, #9
// Called from the USB interrupt when ready to transmit another
// isochronous packet.  If we place data into the transmit buffer,
// the return is the number of bytes.  Otherwise, return 0 means
// no data to transmit
unsigned int usb_audio_transmit_callback(void)
{
    9edc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ee0:	sub	sp, #12
	static uint32_t count=5;
	uint32_t avail, num, target, offset, len=0;
	audio_block_t *left, *right;

	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    9ee2:	bhi.n	9f8e <usb_audio_transmit_callback+0xba>
    9ee4:	str	r3, [r2, #0]
		target = 44;
    9ee6:	mov.w	sl, #44	; 0x2c
{
	static uint32_t count=5;
	uint32_t avail, num, target, offset, len=0;
	audio_block_t *left, *right;

	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    9eea:	movs	r3, #176	; 0xb0
    9eec:	str	r3, [sp, #4]
		target = 44;
    9eee:	mov.w	r8, #0
    9ef2:	ldr	r1, [pc, #196]	; (9fb8 <usb_audio_transmit_callback+0xe4>)
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
			//serial_print("%");
			break;
		}
		right = AudioOutputUSB::right_1st;
		offset = AudioOutputUSB::offset_1st;
    9ef4:	ldr.w	fp, [pc, #212]	; 9fcc <usb_audio_transmit_callback+0xf8>
		count = 0;
		target = 45;
	}
	while (len < target) {
		num = target - len;
		left = AudioOutputUSB::left_1st;
    9ef8:	ldr.w	ip, [r1]
	} else {
		count = 0;
		target = 45;
	}
	while (len < target) {
		num = target - len;
    9efc:	rsb	r3, r8, sl
		left = AudioOutputUSB::left_1st;
		if (left == NULL) {
    9f00:	cmp.w	ip, #0
    9f04:	beq.n	9f9c <usb_audio_transmit_callback+0xc8>
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
			//serial_print("%");
			break;
		}
		right = AudioOutputUSB::right_1st;
		offset = AudioOutputUSB::offset_1st;
    9f06:	ldrh.w	lr, [fp]

		avail = AUDIO_BLOCK_SAMPLES - offset;
		if (num > avail) num = avail;

		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    9f0a:	add.w	r5, ip, #4
			// buffer underrun - PC is consuming too quickly
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
			//serial_print("%");
			break;
		}
		right = AudioOutputUSB::right_1st;
    9f0e:	ldr	r2, [pc, #172]	; (9fbc <usb_audio_transmit_callback+0xe8>)
		offset = AudioOutputUSB::offset_1st;

		avail = AUDIO_BLOCK_SAMPLES - offset;
		if (num > avail) num = avail;

		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    9f10:	mov.w	r6, r8, lsl #2
			break;
		}
		right = AudioOutputUSB::right_1st;
		offset = AudioOutputUSB::offset_1st;

		avail = AUDIO_BLOCK_SAMPLES - offset;
    9f14:	rsb	r0, lr, #128	; 0x80
			// buffer underrun - PC is consuming too quickly
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
			//serial_print("%");
			break;
		}
		right = AudioOutputUSB::right_1st;
    9f18:	ldr	r4, [r2, #0]
		offset = AudioOutputUSB::offset_1st;

		avail = AUDIO_BLOCK_SAMPLES - offset;
		if (num > avail) num = avail;

		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    9f1a:	mov.w	r2, lr, lsl #1
    9f1e:	cmp	r0, r3
    9f20:	add.w	r7, r4, #4
    9f24:	add	r5, r2
    9f26:	it	cs
    9f28:	movcs	r0, r3
    9f2a:	add	r7, r2
}

static void copy_from_buffers(uint32_t *dst, int16_t *left, int16_t *right, unsigned int len)
{
	// TODO: optimize...
	while (len > 0) {
    9f2c:	cbz	r0, 9f4a <usb_audio_transmit_callback+0x76>
    9f2e:	subs	r6, #4
    9f30:	ldr	r3, [pc, #140]	; (9fc0 <usb_audio_transmit_callback+0xec>)
    9f32:	mov	r2, r0
    9f34:	add	r6, r3
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    9f36:	ldrsh.w	r9, [r7], #2
}

static void copy_from_buffers(uint32_t *dst, int16_t *left, int16_t *right, unsigned int len)
{
	// TODO: optimize...
	while (len > 0) {
    9f3a:	subs	r2, #1
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    9f3c:	ldrh.w	r3, [r5], #2
    9f40:	orr.w	r3, r3, r9, lsl #16
    9f44:	str.w	r3, [r6, #4]!
}

static void copy_from_buffers(uint32_t *dst, int16_t *left, int16_t *right, unsigned int len)
{
	// TODO: optimize...
	while (len > 0) {
    9f48:	bne.n	9f36 <usb_audio_transmit_callback+0x62>
		if (num > avail) num = avail;

		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
			left->data + offset, right->data + offset, num);
		len += num;
		offset += num;
    9f4a:	add	lr, r0
		avail = AUDIO_BLOCK_SAMPLES - offset;
		if (num > avail) num = avail;

		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
			left->data + offset, right->data + offset, num);
		len += num;
    9f4c:	add	r8, r0
		offset += num;
		if (offset >= AUDIO_BLOCK_SAMPLES) {
    9f4e:	cmp.w	lr, #127	; 0x7f
    9f52:	bhi.n	9f64 <usb_audio_transmit_callback+0x90>
			AudioOutputUSB::left_2nd = NULL;
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
			AudioOutputUSB::right_2nd = NULL;
			AudioOutputUSB::offset_1st = 0;
		} else {
			AudioOutputUSB::offset_1st = offset;
    9f54:	strh.w	lr, [fp]
		target = 44;
	} else {
		count = 0;
		target = 45;
	}
	while (len < target) {
    9f58:	cmp	sl, r8
    9f5a:	bhi.n	9ef8 <usb_audio_transmit_callback+0x24>
		} else {
			AudioOutputUSB::offset_1st = offset;
		}
	}
	return target * 4;
}
    9f5c:	ldr	r0, [sp, #4]
    9f5e:	add	sp, #12
    9f60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
			left->data + offset, right->data + offset, num);
		len += num;
		offset += num;
		if (offset >= AUDIO_BLOCK_SAMPLES) {
			AudioStream::release(left);
    9f64:	mov	r0, ip
    9f66:	str	r1, [sp, #0]
    9f68:	bl	a2c8 <AudioStream::release(audio_block_struct*)>
			AudioStream::release(right);
    9f6c:	mov	r0, r4
    9f6e:	bl	a2c8 <AudioStream::release(audio_block_struct*)>
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
			AudioOutputUSB::left_2nd = NULL;
    9f72:	movs	r3, #0
		len += num;
		offset += num;
		if (offset >= AUDIO_BLOCK_SAMPLES) {
			AudioStream::release(left);
			AudioStream::release(right);
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    9f74:	ldr	r0, [pc, #76]	; (9fc4 <usb_audio_transmit_callback+0xf0>)
			AudioOutputUSB::left_2nd = NULL;
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    9f76:	ldr	r2, [pc, #80]	; (9fc8 <usb_audio_transmit_callback+0xf4>)
		len += num;
		offset += num;
		if (offset >= AUDIO_BLOCK_SAMPLES) {
			AudioStream::release(left);
			AudioStream::release(right);
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    9f78:	ldr	r5, [r0, #0]
			AudioOutputUSB::left_2nd = NULL;
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    9f7a:	ldr	r4, [r2, #0]
		len += num;
		offset += num;
		if (offset >= AUDIO_BLOCK_SAMPLES) {
			AudioStream::release(left);
			AudioStream::release(right);
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    9f7c:	ldr	r1, [sp, #0]
			AudioOutputUSB::left_2nd = NULL;
    9f7e:	str	r3, [r0, #0]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
			AudioOutputUSB::right_2nd = NULL;
			AudioOutputUSB::offset_1st = 0;
    9f80:	strh.w	r3, [fp]
			AudioStream::release(left);
			AudioStream::release(right);
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
			AudioOutputUSB::left_2nd = NULL;
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
			AudioOutputUSB::right_2nd = NULL;
    9f84:	str	r3, [r2, #0]
		if (offset >= AUDIO_BLOCK_SAMPLES) {
			AudioStream::release(left);
			AudioStream::release(right);
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
			AudioOutputUSB::left_2nd = NULL;
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    9f86:	ldr	r3, [pc, #52]	; (9fbc <usb_audio_transmit_callback+0xe8>)
		len += num;
		offset += num;
		if (offset >= AUDIO_BLOCK_SAMPLES) {
			AudioStream::release(left);
			AudioStream::release(right);
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    9f88:	str	r5, [r1, #0]
			AudioOutputUSB::left_2nd = NULL;
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    9f8a:	str	r4, [r3, #0]
    9f8c:	b.n	9f58 <usb_audio_transmit_callback+0x84>
	audio_block_t *left, *right;

	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
		target = 44;
	} else {
		count = 0;
    9f8e:	movs	r3, #0
    9f90:	movs	r1, #180	; 0xb4
		target = 45;
    9f92:	mov.w	sl, #45	; 0x2d
	audio_block_t *left, *right;

	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
		target = 44;
	} else {
		count = 0;
    9f96:	str	r1, [sp, #4]
    9f98:	str	r3, [r2, #0]
    9f9a:	b.n	9eee <usb_audio_transmit_callback+0x1a>
    9f9c:	mov	r4, r3
	while (len < target) {
		num = target - len;
		left = AudioOutputUSB::left_1st;
		if (left == NULL) {
			// buffer underrun - PC is consuming too quickly
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
    9f9e:	ldr	r3, [pc, #32]	; (9fc0 <usb_audio_transmit_callback+0xec>)
    9fa0:	mov	r1, ip
    9fa2:	lsls	r2, r4, #2
    9fa4:	add.w	r0, r3, r8, lsl #1
    9fa8:	bl	af48 <memset>
		} else {
			AudioOutputUSB::offset_1st = offset;
		}
	}
	return target * 4;
}
    9fac:	ldr	r0, [sp, #4]
    9fae:	add	sp, #12
    9fb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9fb4:	.word	0x2000107c
    9fb8:	.word	0x200024b8
    9fbc:	.word	0x200024bc
    9fc0:	.word	0x20002520
    9fc4:	.word	0x200024d0
    9fc8:	.word	0x200024c0
    9fcc:	.word	0x20002500

00009fd0 <tx_event(transfer_struct*)>:

/*DMAMEM*/ uint16_t usb_audio_transmit_buffer[AUDIO_TX_SIZE/2] __attribute__ ((used, aligned(32)));


static void tx_event(transfer_t *t)
{
    9fd0:	push	{r3, r4, r5, r6, r7, lr}
	int len = usb_audio_transmit_callback();
    9fd2:	bl	9ed4 <usb_audio_transmit_callback>
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9fd6:	ldr	r1, [pc, #72]	; (a020 <tx_event(transfer_struct*)+0x50>)
/*DMAMEM*/ uint16_t usb_audio_transmit_buffer[AUDIO_TX_SIZE/2] __attribute__ ((used, aligned(32)));


static void tx_event(transfer_t *t)
{
	int len = usb_audio_transmit_callback();
    9fd8:	mov	r5, r0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9fda:	ldr	r0, [pc, #72]	; (a024 <tx_event(transfer_struct*)+0x54>)
    9fdc:	ldr	r1, [r1, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    9fde:	movs	r3, #0


static void tx_event(transfer_t *t)
{
	int len = usb_audio_transmit_callback();
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9fe0:	ldrb	r6, [r0, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    9fe2:	mov	r2, r5
    9fe4:	ldr	r4, [pc, #64]	; (a028 <tx_event(transfer_struct*)+0x58>)


static void tx_event(transfer_t *t)
{
	int len = usb_audio_transmit_callback();
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9fe6:	lsr.w	r6, r1, r6
    9fea:	ldr	r7, [pc, #64]	; (a02c <tx_event(transfer_struct*)+0x5c>)
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    9fec:	mov	r1, r4
    9fee:	ldr	r0, [pc, #64]	; (a030 <tx_event(transfer_struct*)+0x60>)


static void tx_event(transfer_t *t)
{
	int len = usb_audio_transmit_callback();
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9ff0:	str	r6, [r7, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    9ff2:	bl	8cf8 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    9ff6:	adds	r0, r5, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9ff8:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    9ffc:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a000:	ldr	r3, [pc, #48]	; (a034 <tx_event(transfer_struct*)+0x64>)
    a002:	str	r1, [r3, #0]
		location += 32;
    a004:	adds	r1, #32
	} while (location < end_addr);
    a006:	cmp	r0, r1
    a008:	bhi.n	a002 <tx_event(transfer_struct*)+0x32>
	asm("dsb");
    a00a:	dsb	sy
	asm("isb");
    a00e:	isb	sy
	arm_dcache_flush_delete(usb_audio_transmit_buffer, len);
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    a012:	ldr	r1, [pc, #28]	; (a030 <tx_event(transfer_struct*)+0x60>)
    a014:	movs	r0, #3
}
    a016:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
{
	int len = usb_audio_transmit_callback();
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
	arm_dcache_flush_delete(usb_audio_transmit_buffer, len);
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    a01a:	b.w	8d28 <usb_transmit>
    a01e:	nop
    a020:	.word	0x200024d4
    a024:	.word	0x20002604
    a028:	.word	0x20002520
    a02c:	.word	0x20201d60
    a030:	.word	0x20002620
    a034:	.word	0xe000ef70

0000a038 <usb_audio_configure>:
}

void usb_audio_configure(void)
{
	printf("usb_audio_configure\n");
	usb_audio_underrun_count = 0;
    a038:	movs	r3, #0
    a03a:	ldr	r2, [pc, #132]	; (a0c0 <usb_audio_configure+0x88>)
	usb_audio_overrun_count = 0;
    a03c:	ldr	r1, [pc, #132]	; (a0c4 <usb_audio_configure+0x8c>)
	feedback_accumulator = 739875226; // 44.1 * 2^24
	if (usb_high_speed) {
    a03e:	ldr	r0, [pc, #136]	; (a0c8 <usb_audio_configure+0x90>)
	arm_dcache_flush(&usb_audio_sync_feedback, usb_audio_sync_nbytes);
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
}

void usb_audio_configure(void)
{
    a040:	push	{r4, lr}
	printf("usb_audio_configure\n");
	usb_audio_underrun_count = 0;
    a042:	str	r3, [r2, #0]
	usb_audio_overrun_count = 0;
    a044:	str	r3, [r1, #0]
	feedback_accumulator = 739875226; // 44.1 * 2^24
    a046:	ldr	r2, [pc, #132]	; (a0cc <usb_audio_configure+0x94>)
    a048:	ldr	r1, [pc, #132]	; (a0d0 <usb_audio_configure+0x98>)
	if (usb_high_speed) {
    a04a:	ldrb	r3, [r0, #0]
void usb_audio_configure(void)
{
	printf("usb_audio_configure\n");
	usb_audio_underrun_count = 0;
	usb_audio_overrun_count = 0;
	feedback_accumulator = 739875226; // 44.1 * 2^24
    a04c:	str	r1, [r2, #0]
	if (usb_high_speed) {
		usb_audio_sync_nbytes = 4;
    a04e:	ldr	r4, [pc, #132]	; (a0d4 <usb_audio_configure+0x9c>)
{
	printf("usb_audio_configure\n");
	usb_audio_underrun_count = 0;
	usb_audio_overrun_count = 0;
	feedback_accumulator = 739875226; // 44.1 * 2^24
	if (usb_high_speed) {
    a050:	cbnz	r3, a0b4 <usb_audio_configure+0x7c>
		usb_audio_sync_nbytes = 4;
		usb_audio_sync_rshift = 8;
	} else {
		usb_audio_sync_nbytes = 3;
    a052:	movs	r1, #3
		usb_audio_sync_rshift = 10;
    a054:	ldr	r3, [pc, #128]	; (a0d8 <usb_audio_configure+0xa0>)
    a056:	movs	r2, #10
	feedback_accumulator = 739875226; // 44.1 * 2^24
	if (usb_high_speed) {
		usb_audio_sync_nbytes = 4;
		usb_audio_sync_rshift = 8;
	} else {
		usb_audio_sync_nbytes = 3;
    a058:	strb	r1, [r4, #0]
		usb_audio_sync_rshift = 10;
    a05a:	strb	r2, [r3, #0]
	}
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    a05c:	movs	r2, #32
    a05e:	movs	r1, #0
    a060:	ldr	r0, [pc, #120]	; (a0dc <usb_audio_configure+0xa4>)
    a062:	bl	af48 <memset>
	usb_config_rx_iso(AUDIO_RX_ENDPOINT, AUDIO_RX_SIZE, 1, rx_event);
    a066:	ldr	r3, [pc, #120]	; (a0e0 <usb_audio_configure+0xa8>)
    a068:	movs	r2, #1
    a06a:	movs	r1, #180	; 0xb4
    a06c:	movs	r0, #3
    a06e:	bl	8c30 <usb_config_rx_iso>
	rx_event(NULL);
    a072:	movs	r0, #0
    a074:	bl	9e7c <rx_event(transfer_struct*)>
	memset(&sync_transfer, 0, sizeof(sync_transfer));
    a078:	movs	r2, #32
    a07a:	movs	r1, #0
    a07c:	ldr	r0, [pc, #100]	; (a0e4 <usb_audio_configure+0xac>)
    a07e:	bl	af48 <memset>
	usb_config_tx_iso(AUDIO_SYNC_ENDPOINT, usb_audio_sync_nbytes, 1, sync_event);
    a082:	ldrb	r1, [r4, #0]
    a084:	ldr	r3, [pc, #96]	; (a0e8 <usb_audio_configure+0xb0>)
    a086:	movs	r2, #1
    a088:	movs	r0, #4
    a08a:	bl	8c90 <usb_config_tx_iso>
	sync_event(NULL);
    a08e:	movs	r0, #0
    a090:	bl	9bcc <sync_event(transfer_struct*)>
	memset(&tx_transfer, 0, sizeof(tx_transfer));
    a094:	movs	r2, #32
    a096:	movs	r1, #0
    a098:	ldr	r0, [pc, #80]	; (a0ec <usb_audio_configure+0xb4>)
    a09a:	bl	af48 <memset>
	usb_config_tx_iso(AUDIO_TX_ENDPOINT, AUDIO_TX_SIZE, 1, tx_event);
    a09e:	movs	r0, #3
    a0a0:	ldr	r3, [pc, #76]	; (a0f0 <usb_audio_configure+0xb8>)
    a0a2:	movs	r2, #1
    a0a4:	movs	r1, #180	; 0xb4
    a0a6:	bl	8c90 <usb_config_tx_iso>
	tx_event(NULL);
    a0aa:	movs	r0, #0
}
    a0ac:	ldmia.w	sp!, {r4, lr}
	memset(&sync_transfer, 0, sizeof(sync_transfer));
	usb_config_tx_iso(AUDIO_SYNC_ENDPOINT, usb_audio_sync_nbytes, 1, sync_event);
	sync_event(NULL);
	memset(&tx_transfer, 0, sizeof(tx_transfer));
	usb_config_tx_iso(AUDIO_TX_ENDPOINT, AUDIO_TX_SIZE, 1, tx_event);
	tx_event(NULL);
    a0b0:	b.w	9fd0 <tx_event(transfer_struct*)>
	printf("usb_audio_configure\n");
	usb_audio_underrun_count = 0;
	usb_audio_overrun_count = 0;
	feedback_accumulator = 739875226; // 44.1 * 2^24
	if (usb_high_speed) {
		usb_audio_sync_nbytes = 4;
    a0b4:	movs	r1, #4
		usb_audio_sync_rshift = 8;
    a0b6:	ldr	r3, [pc, #32]	; (a0d8 <usb_audio_configure+0xa0>)
    a0b8:	movs	r2, #8
	printf("usb_audio_configure\n");
	usb_audio_underrun_count = 0;
	usb_audio_overrun_count = 0;
	feedback_accumulator = 739875226; // 44.1 * 2^24
	if (usb_high_speed) {
		usb_audio_sync_nbytes = 4;
    a0ba:	strb	r1, [r4, #0]
		usb_audio_sync_rshift = 8;
    a0bc:	strb	r2, [r3, #0]
    a0be:	b.n	a05c <usb_audio_configure+0x24>
    a0c0:	.word	0x200024c8
    a0c4:	.word	0x20002644
    a0c8:	.word	0x20002194
    a0cc:	.word	0x200024d4
    a0d0:	.word	0x2c19999a
    a0d4:	.word	0x200024cc
    a0d8:	.word	0x20002604
    a0dc:	.word	0x200025e0
    a0e0:	.word	0x00009e7d
    a0e4:	.word	0x200024e0
    a0e8:	.word	0x00009bcd
    a0ec:	.word	0x20002620
    a0f0:	.word	0x00009fd1

0000a0f4 <usb_audio_get_feature>:
};

int usb_audio_get_feature(void *stp, uint8_t *data, uint32_t *datalen)
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0xA1) { // should check bRequest, bChannel, and UnitID
    a0f4:	ldrb	r3, [r0, #0]
    a0f6:	cmp	r3, #161	; 0xa1
    a0f8:	beq.n	a0fe <usb_audio_get_feature+0xa>
				}
				*datalen = 2;
				return 1;
			}
	}
	return 0;
    a0fa:	movs	r0, #0
    a0fc:	bx	lr
  };
};

int usb_audio_get_feature(void *stp, uint8_t *data, uint32_t *datalen)
{
	struct setup_struct setup = *((struct setup_struct *)stp);
    a0fe:	ldrb	r3, [r0, #3]
	if (setup.bmRequestType==0xA1) { // should check bRequest, bChannel, and UnitID
			if (setup.bCS==0x01) { // mute
    a100:	cmp	r3, #1
    a102:	beq.n	a12a <usb_audio_get_feature+0x36>
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
				*datalen = 1;
				return 1;
			}
			else if (setup.bCS==0x02) { // volume
    a104:	cmp	r3, #2
    a106:	bne.n	a0fa <usb_audio_get_feature+0x6>
  };
};

int usb_audio_get_feature(void *stp, uint8_t *data, uint32_t *datalen)
{
	struct setup_struct setup = *((struct setup_struct *)stp);
    a108:	ldrb	r3, [r0, #1]
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
				*datalen = 1;
				return 1;
			}
			else if (setup.bCS==0x02) { // volume
				if (setup.bRequest==0x81) { // GET_CURR
    a10a:	cmp	r3, #129	; 0x81
    a10c:	beq.n	a146 <usb_audio_get_feature+0x52>
					data[0] = AudioInputUSB::features.volume & 0xFF;
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
				}
				else if (setup.bRequest==0x82) { // GET_MIN
    a10e:	cmp	r3, #130	; 0x82
    a110:	beq.n	a154 <usb_audio_get_feature+0x60>
					//serial_print("vol get_min\n");
					data[0] = 0;     // min level is 0
					data[1] = 0;
				}
				else if (setup.bRequest==0x83) { // GET_MAX
    a112:	cmp	r3, #131	; 0x83
    a114:	beq.n	a13c <usb_audio_get_feature+0x48>
					data[0] = FEATURE_MAX_VOLUME & 0xFF;  // max level, for range of 0 to MAX
					data[1] = (FEATURE_MAX_VOLUME>>8) & 0x0F;
				}
				else if (setup.bRequest==0x84) { // GET_RES
    a116:	cmp	r3, #132	; 0x84
    a118:	bne.n	a0fa <usb_audio_get_feature+0x6>
					data[0] = 1; // increment vol by by 1
    a11a:	movs	r0, #1
					data[1] = 0;
    a11c:	movs	r3, #0
				else if (setup.bRequest==0x83) { // GET_MAX
					data[0] = FEATURE_MAX_VOLUME & 0xFF;  // max level, for range of 0 to MAX
					data[1] = (FEATURE_MAX_VOLUME>>8) & 0x0F;
				}
				else if (setup.bRequest==0x84) { // GET_RES
					data[0] = 1; // increment vol by by 1
    a11e:	strb	r0, [r1, #0]
					data[1] = 0;
    a120:	strb	r3, [r1, #1]
				}
				else { // pass over SET_MEM, etc.
					return 0;
				}
				*datalen = 2;
    a122:	movs	r3, #2
				return 1;
    a124:	movs	r0, #1
					data[1] = 0;
				}
				else { // pass over SET_MEM, etc.
					return 0;
				}
				*datalen = 2;
    a126:	str	r3, [r2, #0]
				return 1;
    a128:	bx	lr
    };
  };
};

int usb_audio_get_feature(void *stp, uint8_t *data, uint32_t *datalen)
{
    a12a:	push	{r4}
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0xA1) { // should check bRequest, bChannel, and UnitID
			if (setup.bCS==0x01) { // mute
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    a12c:	ldr	r4, [pc, #44]	; (a15c <usb_audio_get_feature+0x68>)
				*datalen = 1;
				return 1;
    a12e:	mov	r0, r3
int usb_audio_get_feature(void *stp, uint8_t *data, uint32_t *datalen)
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0xA1) { // should check bRequest, bChannel, and UnitID
			if (setup.bCS==0x01) { // mute
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    a130:	ldr	r4, [r4, #4]
    a132:	strb	r4, [r1, #0]
				*datalen = 1;
    a134:	str	r3, [r2, #0]
				*datalen = 2;
				return 1;
			}
	}
	return 0;
}
    a136:	ldr.w	r4, [sp], #4
    a13a:	bx	lr
					//serial_print("vol get_min\n");
					data[0] = 0;     // min level is 0
					data[1] = 0;
				}
				else if (setup.bRequest==0x83) { // GET_MAX
					data[0] = FEATURE_MAX_VOLUME & 0xFF;  // max level, for range of 0 to MAX
    a13c:	movs	r0, #255	; 0xff
					data[1] = (FEATURE_MAX_VOLUME>>8) & 0x0F;
    a13e:	movs	r3, #15
					//serial_print("vol get_min\n");
					data[0] = 0;     // min level is 0
					data[1] = 0;
				}
				else if (setup.bRequest==0x83) { // GET_MAX
					data[0] = FEATURE_MAX_VOLUME & 0xFF;  // max level, for range of 0 to MAX
    a140:	strb	r0, [r1, #0]
					data[1] = (FEATURE_MAX_VOLUME>>8) & 0x0F;
    a142:	strb	r3, [r1, #1]
    a144:	b.n	a122 <usb_audio_get_feature+0x2e>
				*datalen = 1;
				return 1;
			}
			else if (setup.bCS==0x02) { // volume
				if (setup.bRequest==0x81) { // GET_CURR
					data[0] = AudioInputUSB::features.volume & 0xFF;
    a146:	ldr	r3, [pc, #20]	; (a15c <usb_audio_get_feature+0x68>)
    a148:	ldr	r0, [r3, #8]
    a14a:	strb	r0, [r1, #0]
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    a14c:	ldr	r3, [r3, #8]
    a14e:	asrs	r3, r3, #8
    a150:	strb	r3, [r1, #1]
    a152:	b.n	a122 <usb_audio_get_feature+0x2e>
				}
				else if (setup.bRequest==0x82) { // GET_MIN
					//serial_print("vol get_min\n");
					data[0] = 0;     // min level is 0
    a154:	movs	r3, #0
    a156:	strb	r3, [r1, #0]
					data[1] = 0;
    a158:	strb	r3, [r1, #1]
    a15a:	b.n	a122 <usb_audio_get_feature+0x2e>
    a15c:	.word	0x20001080

0000a160 <usb_audio_set_feature>:
}

int usb_audio_set_feature(void *stp, uint8_t *buf) 
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0x21) { // should check bRequest, bChannel and UnitID
    a160:	ldrb	r3, [r0, #0]
    a162:	cmp	r3, #33	; 0x21
    a164:	beq.n	a16a <usb_audio_set_feature+0xa>
					AudioInputUSB::features.change = 1;
					return 1;
				}
			}
	}
	return 0;
    a166:	movs	r0, #0
    a168:	bx	lr
	return 0;
}

int usb_audio_set_feature(void *stp, uint8_t *buf) 
{
	struct setup_struct setup = *((struct setup_struct *)stp);
    a16a:	ldrb	r3, [r0, #3]
    a16c:	ldrb	r2, [r0, #1]
	if (setup.bmRequestType==0x21) { // should check bRequest, bChannel and UnitID
			if (setup.bCS==0x01) { // mute
    a16e:	cmp	r3, #1
    a170:	beq.n	a192 <usb_audio_set_feature+0x32>
					AudioInputUSB::features.change = 1;
					return 1;
				}
			}
			else if (setup.bCS==0x02) { // volume
				if (setup.bRequest==0x01) { // SET_CUR
    a172:	cmp	r2, #1
    a174:	bne.n	a166 <usb_audio_set_feature+0x6>
    a176:	cmp	r3, #2
    a178:	bne.n	a166 <usb_audio_set_feature+0x6>
					AudioInputUSB::features.volume = buf[0] + (buf[1]<<8);
    a17a:	ldr	r2, [pc, #40]	; (a1a4 <usb_audio_set_feature+0x44>)
	}
	return 0;
}

int usb_audio_set_feature(void *stp, uint8_t *buf) 
{
    a17c:	push	{r4, r5}
					return 1;
				}
			}
			else if (setup.bCS==0x02) { // volume
				if (setup.bRequest==0x01) { // SET_CUR
					AudioInputUSB::features.volume = buf[0] + (buf[1]<<8);
    a17e:	ldrb	r5, [r1, #1]
					AudioInputUSB::features.change = 1;
    a180:	movs	r4, #1
					return 1;
				}
			}
			else if (setup.bCS==0x02) { // volume
				if (setup.bRequest==0x01) { // SET_CUR
					AudioInputUSB::features.volume = buf[0] + (buf[1]<<8);
    a182:	ldrb	r3, [r1, #0]
					AudioInputUSB::features.change = 1;
					return 1;
    a184:	mov	r0, r4
				}
			}
			else if (setup.bCS==0x02) { // volume
				if (setup.bRequest==0x01) { // SET_CUR
					AudioInputUSB::features.volume = buf[0] + (buf[1]<<8);
					AudioInputUSB::features.change = 1;
    a186:	str	r4, [r2, #0]
					return 1;
				}
			}
			else if (setup.bCS==0x02) { // volume
				if (setup.bRequest==0x01) { // SET_CUR
					AudioInputUSB::features.volume = buf[0] + (buf[1]<<8);
    a188:	add.w	r3, r3, r5, lsl #8
    a18c:	str	r3, [r2, #8]
					return 1;
				}
			}
	}
	return 0;
}
    a18e:	pop	{r4, r5}
    a190:	bx	lr
int usb_audio_set_feature(void *stp, uint8_t *buf) 
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0x21) { // should check bRequest, bChannel and UnitID
			if (setup.bCS==0x01) { // mute
				if (setup.bRequest==0x01) { // SET_CUR
    a192:	cmp	r2, #1
    a194:	bne.n	a166 <usb_audio_set_feature+0x6>
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    a196:	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
					return 1;
    a198:	mov	r0, r2
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0x21) { // should check bRequest, bChannel and UnitID
			if (setup.bCS==0x01) { // mute
				if (setup.bRequest==0x01) { // SET_CUR
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    a19a:	ldr	r3, [pc, #8]	; (a1a4 <usb_audio_set_feature+0x44>)
    a19c:	str	r1, [r3, #4]
					AudioInputUSB::features.change = 1;
    a19e:	str	r2, [r3, #0]
					return 1;
    a1a0:	bx	lr
    a1a2:	nop
    a1a4:	.word	0x20001080

0000a1a8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    a1a8:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    a1aa:	bl	378 <setup>
	while (1) {
		loop();
    a1ae:	bl	3b0 <loop>
		yield();
    a1b2:	bl	9808 <yield>
    a1b6:	b.n	a1ae <main+0x6>

0000a1b8 <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    a1b8:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a1ba:	ldr	r3, [pc, #84]	; (a210 <software_isr()+0x58>)

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
    a1bc:	ldr	r5, [pc, #84]	; (a214 <software_isr()+0x5c>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a1be:	ldr	r4, [r3, #0]

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
    a1c0:	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a1c2:	cbnz	r4, a1ca <software_isr()+0x12>
    a1c4:	b.n	a1f2 <software_isr()+0x3a>
    a1c6:	ldr	r4, [r4, #20]
    a1c8:	cbz	r4, a1f2 <software_isr()+0x3a>
		if (p->active) {
    a1ca:	ldrb	r3, [r4, #8]
    a1cc:	cmp	r3, #0
    a1ce:	beq.n	a1c6 <software_isr()+0xe>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    a1d0:	ldr	r3, [r4, #0]
    a1d2:	mov	r0, r4

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    a1d4:	ldr	r7, [r5, #0]
			p->update();
    a1d6:	ldr	r3, [r3, #0]
    a1d8:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    a1da:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a1dc:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    a1de:	subs	r3, r3, r7
    a1e0:	lsrs	r3, r3, #6
			p->cpu_cycles = cycles;
    a1e2:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a1e4:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
			p->cpu_cycles = cycles;
    a1e6:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a1e8:	it	hi
    a1ea:	strhhi	r2, [r4, #6]
{
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a1ec:	ldr	r4, [r4, #20]
    a1ee:	cmp	r4, #0
    a1f0:	bne.n	a1ca <software_isr()+0x12>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    a1f2:	ldr	r3, [pc, #32]	; (a214 <software_isr()+0x5c>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a1f4:	ldr	r2, [pc, #32]	; (a218 <software_isr()+0x60>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    a1f6:	ldr	r3, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a1f8:	ldrh	r0, [r2, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    a1fa:	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
    a1fc:	ldr	r4, [pc, #28]	; (a21c <software_isr()+0x64>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    a1fe:	lsrs	r3, r3, #6
	AudioStream::cpu_cycles_total = totalcycles;
    a200:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a202:	cmp	r3, r0
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
	AudioStream::cpu_cycles_total = totalcycles;
    a204:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a206:	bls.n	a20a <software_isr()+0x52>
		AudioStream::cpu_cycles_total_max = totalcycles;
    a208:	strh	r1, [r2, #0]

	asm("DSB");
    a20a:	dsb	sy
    a20e:	pop	{r3, r4, r5, r6, r7, pc}
    a210:	.word	0x20002650
    a214:	.word	0xe0001004
    a218:	.word	0x2000264c
    a21c:	.word	0x200026ce

0000a220 <AudioStream::allocate()>:
}

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
    a220:	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
    a222:	cpsid	i
	index = memory_pool_first_mask;
    a224:	ldr	r7, [pc, #140]	; (a2b4 <AudioStream::allocate()+0x94>)
	p += index;
    a226:	ldr	r6, [pc, #144]	; (a2b8 <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
    a228:	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
    a22a:	add.w	r3, r6, #112	; 0x70

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
    a22e:	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
    a232:	cmp	r0, r3
    a234:	bcs.n	a25e <AudioStream::allocate()+0x3e>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    a236:	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
    a23a:	cbnz	r1, a266 <AudioStream::allocate()+0x46>
    a23c:	adds	r2, r0, #4
    a23e:	add.w	r5, r6, #115	; 0x73
    a242:	adds	r3, r4, #1
    a244:	subs	r5, r5, r2
    a246:	add.w	r5, r3, r5, lsr #2
    a24a:	b.n	a252 <AudioStream::allocate()+0x32>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    a24c:	ldr.w	r1, [r2], #4
		if (avail) break;
    a250:	cbnz	r1, a266 <AudioStream::allocate()+0x46>
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    a252:	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
    a254:	mov	r4, r3
		p++;
    a256:	mov	r0, r2
    a258:	add.w	r3, r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    a25c:	bne.n	a24c <AudioStream::allocate()+0x2c>
			__enable_irq();
    a25e:	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
    a260:	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    a262:	pop	{r4, r5, r6, r7}
    a264:	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
    a266:	clz	r2, r1
	avail &= ~(0x80000000 >> n);
    a26a:	mov.w	r3, #2147483648	; 0x80000000
    a26e:	lsrs	r3, r2
    a270:	bic.w	r1, r1, r3
	*p = avail;
    a274:	str	r1, [r0, #0]
	if (!avail) index++;
    a276:	cbnz	r1, a27a <AudioStream::allocate()+0x5a>
    a278:	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
    a27a:	ldr	r3, [pc, #64]	; (a2bc <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
    a27c:	strh	r4, [r7, #0]
	used = memory_used + 1;
    a27e:	ldrh	r1, [r3, #0]
    a280:	adds	r1, #1
	memory_used = used;
    a282:	uxth	r5, r1
    a284:	strh	r5, [r3, #0]
	__enable_irq();
    a286:	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a288:	subs	r0, r0, r6
    a28a:	movw	r3, #8060	; 0x1f7c
    a28e:	ldr	r4, [pc, #48]	; (a2c0 <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
    a290:	movs	r7, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a292:	asrs	r0, r0, #2
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    a294:	ldr	r6, [pc, #44]	; (a2c4 <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a296:	ldr	r4, [r4, #0]
    a298:	rsb	r2, r2, r0, lsl #5
    a29c:	add.w	r2, r2, r2, lsl #6
    a2a0:	lsls	r2, r2, #2
    a2a2:	add	r3, r2
	block->ref_count = 1;
    a2a4:	strb	r7, [r4, r3]
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a2a6:	adds	r0, r4, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    a2a8:	ldrh	r3, [r6, #0]
    a2aa:	cmp	r1, r3
    a2ac:	it	hi
    a2ae:	strhhi	r5, [r6, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    a2b0:	pop	{r4, r5, r6, r7}
    a2b2:	bx	lr
    a2b4:	.word	0x200026ca
    a2b8:	.word	0x20002654
    a2bc:	.word	0x200026cc
    a2c0:	.word	0x200026c4
    a2c4:	.word	0x2000264a

0000a2c8 <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    a2c8:	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
    a2ca:	cpsid	i
	if (block->ref_count > 1) {
    a2cc:	ldrb	r3, [r0, #0]
    a2ce:	cmp	r3, #1
    a2d0:	bls.n	a2da <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    a2d2:	subs	r3, #1
    a2d4:	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
    a2d6:	cpsie	i
    a2d8:	bx	lr
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a2da:	mvns	r1, r2
    a2dc:	mov.w	r0, #2147483648	; 0x80000000
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
    a2e0:	asrs	r2, r2, #5
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a2e2:	and.w	r1, r1, #31

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
    a2e6:	push	{r4, r5}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a2e8:	ldr	r4, [pc, #36]	; (a310 <AudioStream::release(audio_block_struct*)+0x48>)
    a2ea:	lsr.w	r1, r0, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    a2ee:	ldr	r5, [pc, #36]	; (a314 <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a2f0:	ldr.w	r3, [r4, r2, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    a2f4:	ldrh	r0, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a2f6:	orrs	r3, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    a2f8:	cmp	r2, r0
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a2fa:	str.w	r3, [r4, r2, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    a2fe:	it	cc
    a300:	strhcc	r2, [r5, #0]
		memory_used--;
    a302:	ldr	r2, [pc, #20]	; (a318 <AudioStream::release(audio_block_struct*)+0x50>)
    a304:	ldrh	r3, [r2, #0]
    a306:	subs	r3, #1
    a308:	strh	r3, [r2, #0]
	}
	__enable_irq();
    a30a:	cpsie	i
}
    a30c:	pop	{r4, r5}
    a30e:	bx	lr
    a310:	.word	0x20002654
    a314:	.word	0x200026ca
    a318:	.word	0x200026cc

0000a31c <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    a31c:	ldr	r3, [r0, #12]
    a31e:	cbz	r3, a34e <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
    a320:	push	{r4, r5}
    a322:	b.n	a328 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    a324:	ldr	r3, [r3, #12]
    a326:	cbz	r3, a34c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    a328:	ldrb	r0, [r3, #8]
    a32a:	cmp	r0, r2
    a32c:	bne.n	a324 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
    a32e:	ldr	r0, [r3, #4]
    a330:	ldrb	r4, [r3, #9]
    a332:	ldr	r0, [r0, #16]
    a334:	ldr.w	r5, [r0, r4, lsl #2]
    a338:	cmp	r5, #0
    a33a:	bne.n	a324 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
    a33c:	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
    a340:	ldrb	r0, [r1, #0]
    a342:	adds	r0, #1
    a344:	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    a346:	ldr	r3, [r3, #12]
    a348:	cmp	r3, #0
    a34a:	bne.n	a328 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
    a34c:	pop	{r4, r5}
    a34e:	bx	lr

0000a350 <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    a350:	ldrb	r3, [r0, #9]
    a352:	cmp	r3, r1
    a354:	bls.n	a364 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    a356:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    a358:	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
    a35a:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    a35e:	str.w	r2, [r3, r1, lsl #2]
	return in;
    a362:	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    a364:	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
    a366:	bx	lr

0000a368 <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
    a368:	ldrb	r3, [r0, #16]
    a36a:	cbnz	r3, a3b6 <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
    a36c:	ldr	r3, [r0, #4]
    a36e:	ldrb	r2, [r0, #9]
    a370:	ldrb	r3, [r3, #9]
    a372:	cmp	r2, r3
    a374:	bhi.n	a3b6 <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
    a376:	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
    a378:	cpsid	i
	p = src.destination_list;
    a37a:	ldr	r4, [r0, #0]
    a37c:	ldr	r3, [r4, #12]
	if (p == NULL) {
    a37e:	cbz	r3, a3cc <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    a380:	ldr	r2, [r3, #12]
    a382:	cbz	r2, a392 <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
    a384:	ldr	r1, [r3, #0]
    a386:	cmp	r4, r1
    a388:	beq.n	a3b8 <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
    a38a:	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    a38c:	ldr	r2, [r3, #12]
    a38e:	cmp	r2, #0
    a390:	bne.n	a384 <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
    a392:	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
    a394:	movs	r2, #0
	src.numConnections++;
	src.active = true;
    a396:	movs	r3, #1
			}
			p = p->next_dest;
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
    a398:	str	r2, [r0, #12]
	src.numConnections++;
    a39a:	ldrb	r2, [r4, #10]
    a39c:	add	r2, r3
    a39e:	strb	r2, [r4, #10]
	src.active = true;
    a3a0:	ldr	r2, [r0, #0]

	dst.numConnections++;
    a3a2:	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
    a3a4:	strb	r3, [r2, #8]

	dst.numConnections++;
    a3a6:	ldrb	r2, [r1, #10]
    a3a8:	add	r2, r3
    a3aa:	strb	r2, [r1, #10]
	dst.active = true;
    a3ac:	ldr	r2, [r0, #4]
    a3ae:	strb	r3, [r2, #8]

	isConnected = true;
    a3b0:	strb	r3, [r0, #16]

	__enable_irq();
    a3b2:	cpsie	i
}
    a3b4:	pop	{r4, r5}
    a3b6:	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
    a3b8:	ldr	r5, [r3, #4]
    a3ba:	ldr	r1, [r0, #4]
    a3bc:	cmp	r5, r1
    a3be:	bne.n	a38a <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
    a3c0:	ldrh	r1, [r3, #8]
    a3c2:	ldrh	r3, [r0, #8]
    a3c4:	cmp	r1, r3
    a3c6:	beq.n	a3b2 <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
    a3c8:	mov	r3, r2
    a3ca:	b.n	a38c <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
    a3cc:	str	r0, [r4, #12]
    a3ce:	b.n	a394 <AudioConnection::connect()+0x2c>

0000a3d0 <AudioConnection::disconnect()>:

void AudioConnection::disconnect(void)
{
	AudioConnection *p;

	if (!isConnected) return;
    a3d0:	ldrb	r3, [r0, #16]

	__enable_irq();
}

void AudioConnection::disconnect(void)
{
    a3d2:	push	{r4, lr}
	AudioConnection *p;

	if (!isConnected) return;
    a3d4:	cmp	r3, #0
    a3d6:	beq.n	a43e <AudioConnection::disconnect()+0x6e>
	if (dest_index > dst.num_inputs) return;
    a3d8:	ldr	r3, [r0, #4]
    a3da:	ldrb	r2, [r0, #9]
    a3dc:	ldrb	r3, [r3, #9]
    a3de:	cmp	r2, r3
    a3e0:	bhi.n	a43e <AudioConnection::disconnect()+0x6e>
	__disable_irq();
    a3e2:	cpsid	i
	// Remove destination from source list
	p = src.destination_list;
    a3e4:	ldr	r2, [r0, #0]
    a3e6:	ldr	r3, [r2, #12]
	if (p == NULL) {
    a3e8:	cbz	r3, a43c <AudioConnection::disconnect()+0x6c>
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
    a3ea:	cmp	r0, r3
    a3ec:	bne.n	a3f4 <AudioConnection::disconnect()+0x24>
    a3ee:	b.n	a444 <AudioConnection::disconnect()+0x74>
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
			if (p == this) {
    a3f0:	cmp	r0, r3
    a3f2:	beq.n	a3fa <AudioConnection::disconnect()+0x2a>
				} else {
					p = NULL;
					break;
				}
			}
			p = p->next_dest;
    a3f4:	ldr	r3, [r3, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
    a3f6:	cmp	r3, #0
    a3f8:	bne.n	a3f0 <AudioConnection::disconnect()+0x20>
			p = p->next_dest;
		}
	}
//>>> PAH release the audio buffer properly
	//Remove possible pending src block from destination
	if(dst.inputQueue[dest_index] != NULL) {
    a3fa:	ldr	r3, [r0, #4]
    a3fc:	mov	r4, r0
    a3fe:	ldrb	r1, [r0, #9]
    a400:	ldr	r3, [r3, #16]
    a402:	ldr.w	r0, [r3, r1, lsl #2]
    a406:	cbz	r0, a41c <AudioConnection::disconnect()+0x4c>
		AudioStream::release(dst.inputQueue[dest_index]);
    a408:	bl	a2c8 <AudioStream::release(audio_block_struct*)>
		// release() re-enables the IRQ. Need it to be disabled a little longer
		__disable_irq();
    a40c:	cpsid	i
		dst.inputQueue[dest_index] = NULL;
    a40e:	ldr	r3, [r4, #4]
    a410:	movs	r1, #0
    a412:	ldrb	r2, [r4, #9]
    a414:	ldr	r3, [r3, #16]
    a416:	str.w	r1, [r3, r2, lsl #2]
    a41a:	ldr	r2, [r4, #0]
	}

	//Check if the disconnected AudioStream objects should still be active
	src.numConnections--;
    a41c:	ldrb	r3, [r2, #10]
    a41e:	subs	r3, #1
    a420:	strb	r3, [r2, #10]
	if (src.numConnections == 0) {
    a422:	ldr	r3, [r4, #0]
    a424:	ldrb	r2, [r3, #10]
    a426:	cbnz	r2, a42a <AudioConnection::disconnect()+0x5a>
		src.active = false;
    a428:	strb	r2, [r3, #8]
	}

	dst.numConnections--;
    a42a:	ldr	r2, [r4, #4]
    a42c:	ldrb	r3, [r2, #10]
    a42e:	subs	r3, #1
    a430:	strb	r3, [r2, #10]
	if (dst.numConnections == 0) {
    a432:	ldr	r3, [r4, #4]
    a434:	ldrb	r2, [r3, #10]
    a436:	cbz	r2, a440 <AudioConnection::disconnect()+0x70>
		dst.active = false;
	}

	isConnected = false;
    a438:	movs	r3, #0
    a43a:	strb	r3, [r4, #16]

	__enable_irq();
    a43c:	cpsie	i
    a43e:	pop	{r4, pc}
		src.active = false;
	}

	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
    a440:	strb	r2, [r3, #8]
    a442:	b.n	a438 <AudioConnection::disconnect()+0x68>
	if (p == NULL) {
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
		if (p->next_dest) {
    a444:	ldr	r3, [r0, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
    a446:	str	r3, [r2, #12]
    a448:	b.n	a3fa <AudioConnection::disconnect()+0x2a>
    a44a:	nop

0000a44c <AudioStream::update_setup()>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    a44c:	ldr	r3, [pc, #40]	; (a478 <AudioStream::update_setup()+0x2c>)
    a44e:	ldrb	r2, [r3, #0]
    a450:	cbnz	r2, a472 <AudioStream::update_setup()+0x26>
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    a452:	ldr	r2, [pc, #40]	; (a47c <AudioStream::update_setup()+0x30>)
    a454:	ldr	r1, [pc, #40]	; (a480 <AudioStream::update_setup()+0x34>)
// input and output based on interrupts, must check this variable in
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
    a456:	push	{r4, r5}
    a458:	str.w	r1, [r2, #344]	; 0x158
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    a45c:	ldr	r4, [pc, #36]	; (a484 <AudioStream::update_setup()+0x38>)
    a45e:	movs	r5, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a460:	movs	r0, #64	; 0x40
	update_scheduled = true;
    a462:	movs	r2, #1
bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a464:	ldr	r1, [pc, #32]	; (a488 <AudioStream::update_setup()+0x3c>)

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    a466:	strb	r5, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a468:	str	r0, [r1, #0]
	update_scheduled = true;
	return true;
    a46a:	mov	r0, r2
{
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
	update_scheduled = true;
    a46c:	strb	r2, [r3, #0]
	return true;
}
    a46e:	pop	{r4, r5}
    a470:	bx	lr
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    a472:	movs	r0, #0
    a474:	bx	lr
    a476:	nop
    a478:	.word	0x200026c8
    a47c:	.word	0x20004400
    a480:	.word	0x0000a1b9
    a484:	.word	0xe000e446
    a488:	.word	0xe000e108

0000a48c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    a48c:	bx	lr
    a48e:	nop

0000a490 <operator new(unsigned int)>:
    a490:	b.w	a8c4 <malloc>

0000a494 <operator new[](unsigned int)>:
	return malloc(size);
}

void * operator new[](size_t size)
{
	return malloc(size);
    a494:	b.w	a8c4 <malloc>

0000a498 <operator delete(void*, unsigned int)>:
    a498:	b.w	a8d4 <free>

0000a49c <arm_scale_f32>:
    a49c:	push	{r4, r5, r6}
    a49e:	lsrs	r6, r2, #2
    a4a0:	beq.n	a4ee <arm_scale_f32+0x52>
    a4a2:	add.w	r4, r0, #16
    a4a6:	add.w	r3, r1, #16
    a4aa:	mov	r5, r6
    a4ac:	vldr	s12, [r4, #-16]
    a4b0:	subs	r5, #1
    a4b2:	vldr	s13, [r4, #-12]
    a4b6:	add.w	r3, r3, #16
    a4ba:	vldr	s14, [r4, #-8]
    a4be:	vmul.f32	s12, s12, s0
    a4c2:	vldr	s15, [r4, #-4]
    a4c6:	vmul.f32	s13, s13, s0
    a4ca:	vmul.f32	s14, s0, s14
    a4ce:	add.w	r4, r4, #16
    a4d2:	vmul.f32	s15, s0, s15
    a4d6:	vstr	s12, [r3, #-32]	; 0xffffffe0
    a4da:	vstr	s13, [r3, #-28]	; 0xffffffe4
    a4de:	vstr	s14, [r3, #-24]	; 0xffffffe8
    a4e2:	vstr	s15, [r3, #-20]	; 0xffffffec
    a4e6:	bne.n	a4ac <arm_scale_f32+0x10>
    a4e8:	lsls	r6, r6, #4
    a4ea:	add	r0, r6
    a4ec:	add	r1, r6
    a4ee:	ands.w	r2, r2, #3
    a4f2:	beq.n	a504 <arm_scale_f32+0x68>
    a4f4:	vldmia	r0!, {s15}
    a4f8:	subs	r2, #1
    a4fa:	vmul.f32	s15, s15, s0
    a4fe:	vstmia	r1!, {s15}
    a502:	bne.n	a4f4 <arm_scale_f32+0x58>
    a504:	pop	{r4, r5, r6}
    a506:	bx	lr

0000a508 <__aeabi_atexit>:
    a508:	mov	r3, r1
    a50a:	mov	r1, r0
    a50c:	mov	r0, r3
    a50e:	b.w	a85c <__cxa_atexit>
    a512:	nop

0000a514 <__udivmoddi4>:
    a514:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a518:	mov	ip, r1
    a51a:	mov	r6, r1
    a51c:	mov	r4, r0
    a51e:	ldr	r5, [sp, #32]
    a520:	cmp	r3, #0
    a522:	bne.n	a5c6 <__udivmoddi4+0xb2>
    a524:	cmp	r2, r1
    a526:	mov	r7, r2
    a528:	bls.n	a604 <__udivmoddi4+0xf0>
    a52a:	clz	lr, r2
    a52e:	cmp.w	lr, #0
    a532:	beq.n	a54c <__udivmoddi4+0x38>
    a534:	rsb	r4, lr, #32
    a538:	lsr.w	r4, r0, r4
    a53c:	lsl.w	r6, r1, lr
    a540:	orr.w	ip, r4, r6
    a544:	lsl.w	r7, r2, lr
    a548:	lsl.w	r4, r0, lr
    a54c:	mov.w	r9, r7, lsr #16
    a550:	lsrs	r2, r4, #16
    a552:	udiv	r0, ip, r9
    a556:	uxth.w	r8, r7
    a55a:	mls	r6, r9, r0, ip
    a55e:	orr.w	r6, r2, r6, lsl #16
    a562:	mul.w	r3, r0, r8
    a566:	cmp	r3, r6
    a568:	bls.n	a57e <__udivmoddi4+0x6a>
    a56a:	adds	r6, r6, r7
    a56c:	add.w	r2, r0, #4294967295
    a570:	bcs.w	a7b8 <__udivmoddi4+0x2a4>
    a574:	cmp	r3, r6
    a576:	bls.w	a7b8 <__udivmoddi4+0x2a4>
    a57a:	subs	r0, #2
    a57c:	add	r6, r7
    a57e:	subs	r6, r6, r3
    a580:	uxth	r2, r4
    a582:	udiv	r3, r6, r9
    a586:	mls	r6, r9, r3, r6
    a58a:	orr.w	r4, r2, r6, lsl #16
    a58e:	mul.w	r8, r3, r8
    a592:	cmp	r8, r4
    a594:	bls.n	a5aa <__udivmoddi4+0x96>
    a596:	adds	r4, r4, r7
    a598:	add.w	r2, r3, #4294967295
    a59c:	bcs.w	a7b4 <__udivmoddi4+0x2a0>
    a5a0:	cmp	r8, r4
    a5a2:	bls.w	a7b4 <__udivmoddi4+0x2a0>
    a5a6:	subs	r3, #2
    a5a8:	add	r4, r7
    a5aa:	rsb	r4, r8, r4
    a5ae:	orr.w	r0, r3, r0, lsl #16
    a5b2:	movs	r1, #0
    a5b4:	cmp	r5, #0
    a5b6:	beq.n	a67e <__udivmoddi4+0x16a>
    a5b8:	lsr.w	r4, r4, lr
    a5bc:	movs	r3, #0
    a5be:	str	r4, [r5, #0]
    a5c0:	str	r3, [r5, #4]
    a5c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a5c6:	cmp	r3, r1
    a5c8:	bls.n	a5da <__udivmoddi4+0xc6>
    a5ca:	cmp	r5, #0
    a5cc:	beq.n	a67a <__udivmoddi4+0x166>
    a5ce:	movs	r1, #0
    a5d0:	stmia.w	r5, {r0, r6}
    a5d4:	mov	r0, r1
    a5d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a5da:	clz	r1, r3
    a5de:	cmp	r1, #0
    a5e0:	bne.w	a704 <__udivmoddi4+0x1f0>
    a5e4:	cmp	r3, r6
    a5e6:	bcc.n	a5ee <__udivmoddi4+0xda>
    a5e8:	cmp	r2, r0
    a5ea:	bhi.w	a7de <__udivmoddi4+0x2ca>
    a5ee:	subs	r4, r0, r2
    a5f0:	sbc.w	r6, r6, r3
    a5f4:	movs	r0, #1
    a5f6:	mov	ip, r6
    a5f8:	cmp	r5, #0
    a5fa:	beq.n	a67e <__udivmoddi4+0x16a>
    a5fc:	stmia.w	r5, {r4, ip}
    a600:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a604:	cbnz	r2, a60c <__udivmoddi4+0xf8>
    a606:	movs	r7, #1
    a608:	udiv	r7, r7, r2
    a60c:	clz	lr, r7
    a610:	cmp.w	lr, #0
    a614:	bne.n	a682 <__udivmoddi4+0x16e>
    a616:	subs	r3, r6, r7
    a618:	mov.w	r8, r7, lsr #16
    a61c:	uxth.w	ip, r7
    a620:	movs	r1, #1
    a622:	udiv	r0, r3, r8
    a626:	lsrs	r2, r4, #16
    a628:	mls	r6, r8, r0, r3
    a62c:	orr.w	r6, r2, r6, lsl #16
    a630:	mul.w	r3, ip, r0
    a634:	cmp	r3, r6
    a636:	bls.n	a648 <__udivmoddi4+0x134>
    a638:	adds	r6, r6, r7
    a63a:	add.w	r2, r0, #4294967295
    a63e:	bcs.n	a646 <__udivmoddi4+0x132>
    a640:	cmp	r3, r6
    a642:	bhi.w	a7e2 <__udivmoddi4+0x2ce>
    a646:	mov	r0, r2
    a648:	subs	r6, r6, r3
    a64a:	uxth	r2, r4
    a64c:	udiv	r3, r6, r8
    a650:	mls	r6, r8, r3, r6
    a654:	orr.w	r4, r2, r6, lsl #16
    a658:	mul.w	ip, ip, r3
    a65c:	cmp	ip, r4
    a65e:	bls.n	a670 <__udivmoddi4+0x15c>
    a660:	adds	r4, r4, r7
    a662:	add.w	r2, r3, #4294967295
    a666:	bcs.n	a66e <__udivmoddi4+0x15a>
    a668:	cmp	ip, r4
    a66a:	bhi.w	a7d8 <__udivmoddi4+0x2c4>
    a66e:	mov	r3, r2
    a670:	rsb	r4, ip, r4
    a674:	orr.w	r0, r3, r0, lsl #16
    a678:	b.n	a5b4 <__udivmoddi4+0xa0>
    a67a:	mov	r1, r5
    a67c:	mov	r0, r5
    a67e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a682:	rsb	r1, lr, #32
    a686:	lsl.w	r3, r6, lr
    a68a:	lsl.w	r7, r7, lr
    a68e:	lsr.w	r9, r0, r1
    a692:	mov.w	r8, r7, lsr #16
    a696:	lsrs	r6, r1
    a698:	orr.w	r9, r9, r3
    a69c:	udiv	sl, r6, r8
    a6a0:	mov.w	r4, r9, lsr #16
    a6a4:	mls	r6, r8, sl, r6
    a6a8:	uxth.w	ip, r7
    a6ac:	orr.w	r3, r4, r6, lsl #16
    a6b0:	mul.w	r2, sl, ip
    a6b4:	cmp	r2, r3
    a6b6:	lsl.w	r4, r0, lr
    a6ba:	bls.n	a6d2 <__udivmoddi4+0x1be>
    a6bc:	adds	r3, r3, r7
    a6be:	add.w	r1, sl, #4294967295
    a6c2:	bcs.w	a7d4 <__udivmoddi4+0x2c0>
    a6c6:	cmp	r2, r3
    a6c8:	bls.w	a7d4 <__udivmoddi4+0x2c0>
    a6cc:	sub.w	sl, sl, #2
    a6d0:	add	r3, r7
    a6d2:	subs	r3, r3, r2
    a6d4:	uxth.w	r9, r9
    a6d8:	udiv	r1, r3, r8
    a6dc:	mls	r3, r8, r1, r3
    a6e0:	orr.w	r3, r9, r3, lsl #16
    a6e4:	mul.w	r6, r1, ip
    a6e8:	cmp	r6, r3
    a6ea:	bls.n	a6fc <__udivmoddi4+0x1e8>
    a6ec:	adds	r3, r3, r7
    a6ee:	add.w	r2, r1, #4294967295
    a6f2:	bcs.n	a7cc <__udivmoddi4+0x2b8>
    a6f4:	cmp	r6, r3
    a6f6:	bls.n	a7cc <__udivmoddi4+0x2b8>
    a6f8:	subs	r1, #2
    a6fa:	add	r3, r7
    a6fc:	subs	r3, r3, r6
    a6fe:	orr.w	r1, r1, sl, lsl #16
    a702:	b.n	a622 <__udivmoddi4+0x10e>
    a704:	rsb	lr, r1, #32
    a708:	lsr.w	r4, r2, lr
    a70c:	lsls	r3, r1
    a70e:	orrs	r3, r4
    a710:	lsr.w	r7, r0, lr
    a714:	lsl.w	r4, r6, r1
    a718:	mov.w	ip, r3, lsr #16
    a71c:	lsr.w	r6, r6, lr
    a720:	orrs	r4, r7
    a722:	udiv	r9, r6, ip
    a726:	lsrs	r7, r4, #16
    a728:	mls	r6, ip, r9, r6
    a72c:	uxth.w	r8, r3
    a730:	orr.w	r6, r7, r6, lsl #16
    a734:	mul.w	r7, r9, r8
    a738:	cmp	r7, r6
    a73a:	lsl.w	r2, r2, r1
    a73e:	lsl.w	sl, r0, r1
    a742:	bls.n	a756 <__udivmoddi4+0x242>
    a744:	adds	r6, r6, r3
    a746:	add.w	r0, r9, #4294967295
    a74a:	bcs.n	a7d0 <__udivmoddi4+0x2bc>
    a74c:	cmp	r7, r6
    a74e:	bls.n	a7d0 <__udivmoddi4+0x2bc>
    a750:	sub.w	r9, r9, #2
    a754:	add	r6, r3
    a756:	subs	r6, r6, r7
    a758:	uxth	r0, r4
    a75a:	udiv	r4, r6, ip
    a75e:	mls	r6, ip, r4, r6
    a762:	orr.w	r7, r0, r6, lsl #16
    a766:	mul.w	r8, r4, r8
    a76a:	cmp	r8, r7
    a76c:	bls.n	a77e <__udivmoddi4+0x26a>
    a76e:	adds	r7, r7, r3
    a770:	add.w	r0, r4, #4294967295
    a774:	bcs.n	a7c8 <__udivmoddi4+0x2b4>
    a776:	cmp	r8, r7
    a778:	bls.n	a7c8 <__udivmoddi4+0x2b4>
    a77a:	subs	r4, #2
    a77c:	add	r7, r3
    a77e:	orr.w	r0, r4, r9, lsl #16
    a782:	rsb	r7, r8, r7
    a786:	umull	r8, r9, r0, r2
    a78a:	cmp	r7, r9
    a78c:	mov	r4, r8
    a78e:	mov	r6, r9
    a790:	bcc.n	a7bc <__udivmoddi4+0x2a8>
    a792:	beq.n	a7e8 <__udivmoddi4+0x2d4>
    a794:	cbz	r5, a7f0 <__udivmoddi4+0x2dc>
    a796:	subs.w	r3, sl, r4
    a79a:	sbc.w	r7, r7, r6
    a79e:	lsl.w	lr, r7, lr
    a7a2:	lsrs	r3, r1
    a7a4:	lsrs	r7, r1
    a7a6:	orr.w	r3, lr, r3
    a7aa:	stmia.w	r5, {r3, r7}
    a7ae:	movs	r1, #0
    a7b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a7b4:	mov	r3, r2
    a7b6:	b.n	a5aa <__udivmoddi4+0x96>
    a7b8:	mov	r0, r2
    a7ba:	b.n	a57e <__udivmoddi4+0x6a>
    a7bc:	subs.w	r4, r8, r2
    a7c0:	sbc.w	r6, r9, r3
    a7c4:	subs	r0, #1
    a7c6:	b.n	a794 <__udivmoddi4+0x280>
    a7c8:	mov	r4, r0
    a7ca:	b.n	a77e <__udivmoddi4+0x26a>
    a7cc:	mov	r1, r2
    a7ce:	b.n	a6fc <__udivmoddi4+0x1e8>
    a7d0:	mov	r9, r0
    a7d2:	b.n	a756 <__udivmoddi4+0x242>
    a7d4:	mov	sl, r1
    a7d6:	b.n	a6d2 <__udivmoddi4+0x1be>
    a7d8:	subs	r3, #2
    a7da:	add	r4, r7
    a7dc:	b.n	a670 <__udivmoddi4+0x15c>
    a7de:	mov	r0, r1
    a7e0:	b.n	a5f8 <__udivmoddi4+0xe4>
    a7e2:	subs	r0, #2
    a7e4:	add	r6, r7
    a7e6:	b.n	a648 <__udivmoddi4+0x134>
    a7e8:	cmp	sl, r8
    a7ea:	bcc.n	a7bc <__udivmoddi4+0x2a8>
    a7ec:	mov	r6, r7
    a7ee:	b.n	a794 <__udivmoddi4+0x280>
    a7f0:	mov	r1, r5
    a7f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a7f6:	nop

0000a7f8 <__aeabi_idiv0>:
    a7f8:	bx	lr
    a7fa:	nop

0000a7fc <_calloc_r>:
    a7fc:	push	{r4, lr}
    a7fe:	mul.w	r1, r2, r1
    a802:	bl	a8e4 <_malloc_r>
    a806:	mov	r4, r0
    a808:	cbz	r0, a842 <_calloc_r+0x46>
    a80a:	ldr.w	r2, [r0, #-4]
    a80e:	bic.w	r2, r2, #3
    a812:	subs	r2, #4
    a814:	cmp	r2, #36	; 0x24
    a816:	bhi.n	a84a <_calloc_r+0x4e>
    a818:	cmp	r2, #19
    a81a:	bls.n	a846 <_calloc_r+0x4a>
    a81c:	movs	r3, #0
    a81e:	cmp	r2, #27
    a820:	str	r3, [r0, #0]
    a822:	str	r3, [r0, #4]
    a824:	bls.n	a854 <_calloc_r+0x58>
    a826:	cmp	r2, #36	; 0x24
    a828:	str	r3, [r0, #8]
    a82a:	str	r3, [r0, #12]
    a82c:	iteee	ne
    a82e:	addne.w	r2, r0, #16
    a832:	streq	r3, [r0, #16]
    a834:	streq	r3, [r0, #20]
    a836:	addeq.w	r2, r0, #24
    a83a:	movs	r3, #0
    a83c:	str	r3, [r2, #0]
    a83e:	str	r3, [r2, #4]
    a840:	str	r3, [r2, #8]
    a842:	mov	r0, r4
    a844:	pop	{r4, pc}
    a846:	mov	r2, r0
    a848:	b.n	a83a <_calloc_r+0x3e>
    a84a:	movs	r1, #0
    a84c:	bl	af48 <memset>
    a850:	mov	r0, r4
    a852:	pop	{r4, pc}
    a854:	add.w	r2, r0, #8
    a858:	b.n	a83a <_calloc_r+0x3e>
    a85a:	nop

0000a85c <__cxa_atexit>:
    a85c:	mov	r3, r2
    a85e:	mov	r2, r1
    a860:	mov	r1, r0
    a862:	movs	r0, #2
    a864:	b.w	b588 <__register_exitproc>

0000a868 <__errno>:
    a868:	ldr	r3, [pc, #4]	; (a870 <__errno+0x8>)
    a86a:	ldr	r0, [r3, #0]
    a86c:	bx	lr
    a86e:	nop
    a870:	.word	0x200014b8

0000a874 <__libc_init_array>:
    a874:	push	{r4, r5, r6, lr}
    a876:	ldr	r6, [pc, #60]	; (a8b4 <__libc_init_array+0x40>)
    a878:	ldr	r5, [pc, #60]	; (a8b8 <__libc_init_array+0x44>)
    a87a:	subs	r6, r6, r5
    a87c:	asrs	r6, r6, #2
    a87e:	it	ne
    a880:	movne	r4, #0
    a882:	beq.n	a890 <__libc_init_array+0x1c>
    a884:	adds	r4, #1
    a886:	ldr.w	r3, [r5], #4
    a88a:	blx	r3
    a88c:	cmp	r6, r4
    a88e:	bne.n	a884 <__libc_init_array+0x10>
    a890:	ldr	r6, [pc, #40]	; (a8bc <__libc_init_array+0x48>)
    a892:	ldr	r5, [pc, #44]	; (a8c0 <__libc_init_array+0x4c>)
    a894:	subs	r6, r6, r5
    a896:	bl	e438 <___init_veneer>
    a89a:	asrs	r6, r6, #2
    a89c:	it	ne
    a89e:	movne	r4, #0
    a8a0:	beq.n	a8b0 <__libc_init_array+0x3c>
    a8a2:	adds	r4, #1
    a8a4:	ldr.w	r3, [r5], #4
    a8a8:	blx	r3
    a8aa:	cmp	r6, r4
    a8ac:	bne.n	a8a2 <__libc_init_array+0x2e>
    a8ae:	pop	{r4, r5, r6, pc}
    a8b0:	pop	{r4, r5, r6, pc}
    a8b2:	nop
    a8b4:	.word	0x60002470
    a8b8:	.word	0x60002470
    a8bc:	.word	0x600024dc
    a8c0:	.word	0x60002470

0000a8c4 <malloc>:
    a8c4:	ldr	r3, [pc, #8]	; (a8d0 <malloc+0xc>)
    a8c6:	mov	r1, r0
    a8c8:	ldr	r0, [r3, #0]
    a8ca:	b.w	a8e4 <_malloc_r>
    a8ce:	nop
    a8d0:	.word	0x200014b8

0000a8d4 <free>:
    a8d4:	ldr	r3, [pc, #8]	; (a8e0 <free+0xc>)
    a8d6:	mov	r1, r0
    a8d8:	ldr	r0, [r3, #0]
    a8da:	b.w	b6c8 <_free_r>
    a8de:	nop
    a8e0:	.word	0x200014b8

0000a8e4 <_malloc_r>:
    a8e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8e8:	add.w	r5, r1, #11
    a8ec:	cmp	r5, #22
    a8ee:	sub	sp, #12
    a8f0:	mov	r6, r0
    a8f2:	bls.w	aa34 <_malloc_r+0x150>
    a8f6:	bics.w	r5, r5, #7
    a8fa:	bmi.w	aa7c <_malloc_r+0x198>
    a8fe:	cmp	r1, r5
    a900:	bhi.w	aa7c <_malloc_r+0x198>
    a904:	bl	afe4 <__malloc_lock>
    a908:	cmp.w	r5, #504	; 0x1f8
    a90c:	bcc.w	ae48 <_malloc_r+0x564>
    a910:	lsrs	r3, r5, #9
    a912:	beq.w	aa8a <_malloc_r+0x1a6>
    a916:	cmp	r3, #4
    a918:	bhi.w	ac22 <_malloc_r+0x33e>
    a91c:	lsrs	r0, r5, #6
    a91e:	add.w	lr, r0, #57	; 0x39
    a922:	mov.w	r3, lr, lsl #1
    a926:	adds	r0, #56	; 0x38
    a928:	ldr	r7, [pc, #784]	; (ac3c <_malloc_r+0x358>)
    a92a:	add.w	r3, r7, r3, lsl #2
    a92e:	sub.w	r1, r3, #8
    a932:	ldr	r4, [r3, #4]
    a934:	cmp	r1, r4
    a936:	bne.n	a948 <_malloc_r+0x64>
    a938:	b.n	aa94 <_malloc_r+0x1b0>
    a93a:	cmp	r2, #0
    a93c:	bge.w	aa98 <_malloc_r+0x1b4>
    a940:	ldr	r4, [r4, #12]
    a942:	cmp	r1, r4
    a944:	beq.w	aa94 <_malloc_r+0x1b0>
    a948:	ldr	r3, [r4, #4]
    a94a:	bic.w	r3, r3, #3
    a94e:	subs	r2, r3, r5
    a950:	cmp	r2, #15
    a952:	ble.n	a93a <_malloc_r+0x56>
    a954:	ldr	r1, [pc, #740]	; (ac3c <_malloc_r+0x358>)
    a956:	ldr	r4, [r7, #16]
    a958:	add.w	lr, r1, #8
    a95c:	cmp	r4, lr
    a95e:	beq.w	acc8 <_malloc_r+0x3e4>
    a962:	ldr	r3, [r4, #4]
    a964:	bic.w	r3, r3, #3
    a968:	subs	r2, r3, r5
    a96a:	cmp	r2, #15
    a96c:	bgt.w	aca2 <_malloc_r+0x3be>
    a970:	cmp	r2, #0
    a972:	str.w	lr, [r1, #20]
    a976:	str.w	lr, [r1, #16]
    a97a:	bge.w	aaba <_malloc_r+0x1d6>
    a97e:	cmp.w	r3, #512	; 0x200
    a982:	bcs.w	ac54 <_malloc_r+0x370>
    a986:	lsrs	r3, r3, #3
    a988:	add.w	ip, r3, #1
    a98c:	movs	r2, #1
    a98e:	asrs	r3, r3, #2
    a990:	lsl.w	r3, r2, r3
    a994:	ldr	r2, [r1, #4]
    a996:	ldr.w	r8, [r1, ip, lsl #3]
    a99a:	str.w	r8, [r4, #8]
    a99e:	add.w	r9, r1, ip, lsl #3
    a9a2:	orrs	r2, r3
    a9a4:	sub.w	r3, r9, #8
    a9a8:	str	r3, [r4, #12]
    a9aa:	str	r2, [r1, #4]
    a9ac:	str.w	r4, [r1, ip, lsl #3]
    a9b0:	str.w	r4, [r8, #12]
    a9b4:	asrs	r3, r0, #2
    a9b6:	movs	r4, #1
    a9b8:	lsls	r4, r3
    a9ba:	cmp	r4, r2
    a9bc:	bhi.w	aad4 <_malloc_r+0x1f0>
    a9c0:	tst	r4, r2
    a9c2:	bne.n	a9d2 <_malloc_r+0xee>
    a9c4:	bic.w	r0, r0, #3
    a9c8:	lsls	r4, r4, #1
    a9ca:	tst	r4, r2
    a9cc:	add.w	r0, r0, #4
    a9d0:	beq.n	a9c8 <_malloc_r+0xe4>
    a9d2:	add.w	r9, r7, r0, lsl #3
    a9d6:	mov	ip, r9
    a9d8:	mov	r8, r0
    a9da:	ldr.w	r1, [ip, #12]
    a9de:	cmp	ip, r1
    a9e0:	bne.n	a9f2 <_malloc_r+0x10e>
    a9e2:	b.n	accc <_malloc_r+0x3e8>
    a9e4:	cmp	r2, #0
    a9e6:	bge.w	acec <_malloc_r+0x408>
    a9ea:	ldr	r1, [r1, #12]
    a9ec:	cmp	ip, r1
    a9ee:	beq.w	accc <_malloc_r+0x3e8>
    a9f2:	ldr	r3, [r1, #4]
    a9f4:	bic.w	r3, r3, #3
    a9f8:	subs	r2, r3, r5
    a9fa:	cmp	r2, #15
    a9fc:	ble.n	a9e4 <_malloc_r+0x100>
    a9fe:	mov	r4, r1
    aa00:	ldr.w	ip, [r1, #12]
    aa04:	ldr.w	r8, [r4, #8]!
    aa08:	adds	r3, r1, r5
    aa0a:	orr.w	r5, r5, #1
    aa0e:	str	r5, [r1, #4]
    aa10:	orr.w	r1, r2, #1
    aa14:	str.w	ip, [r8, #12]
    aa18:	mov	r0, r6
    aa1a:	str.w	r8, [ip, #8]
    aa1e:	str	r3, [r7, #20]
    aa20:	str	r3, [r7, #16]
    aa22:	str.w	lr, [r3, #12]
    aa26:	str.w	lr, [r3, #8]
    aa2a:	str	r1, [r3, #4]
    aa2c:	str	r2, [r3, r2]
    aa2e:	bl	afe8 <__malloc_unlock>
    aa32:	b.n	aa74 <_malloc_r+0x190>
    aa34:	cmp	r1, #16
    aa36:	bhi.n	aa7c <_malloc_r+0x198>
    aa38:	bl	afe4 <__malloc_lock>
    aa3c:	movs	r5, #16
    aa3e:	movs	r3, #6
    aa40:	movs	r0, #2
    aa42:	ldr	r7, [pc, #504]	; (ac3c <_malloc_r+0x358>)
    aa44:	add.w	r3, r7, r3, lsl #2
    aa48:	sub.w	r2, r3, #8
    aa4c:	ldr	r4, [r3, #4]
    aa4e:	cmp	r4, r2
    aa50:	beq.w	acde <_malloc_r+0x3fa>
    aa54:	ldr	r3, [r4, #4]
    aa56:	ldr	r1, [r4, #12]
    aa58:	ldr	r5, [r4, #8]
    aa5a:	bic.w	r3, r3, #3
    aa5e:	add	r3, r4
    aa60:	mov	r0, r6
    aa62:	ldr	r2, [r3, #4]
    aa64:	str	r1, [r5, #12]
    aa66:	orr.w	r2, r2, #1
    aa6a:	str	r5, [r1, #8]
    aa6c:	str	r2, [r3, #4]
    aa6e:	bl	afe8 <__malloc_unlock>
    aa72:	adds	r4, #8
    aa74:	mov	r0, r4
    aa76:	add	sp, #12
    aa78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa7c:	movs	r4, #0
    aa7e:	movs	r3, #12
    aa80:	mov	r0, r4
    aa82:	str	r3, [r6, #0]
    aa84:	add	sp, #12
    aa86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa8a:	movs	r3, #128	; 0x80
    aa8c:	mov.w	lr, #64	; 0x40
    aa90:	movs	r0, #63	; 0x3f
    aa92:	b.n	a928 <_malloc_r+0x44>
    aa94:	mov	r0, lr
    aa96:	b.n	a954 <_malloc_r+0x70>
    aa98:	add	r3, r4
    aa9a:	ldr	r1, [r4, #12]
    aa9c:	ldr	r2, [r3, #4]
    aa9e:	ldr	r5, [r4, #8]
    aaa0:	orr.w	r2, r2, #1
    aaa4:	str	r1, [r5, #12]
    aaa6:	mov	r0, r6
    aaa8:	str	r5, [r1, #8]
    aaaa:	str	r2, [r3, #4]
    aaac:	bl	afe8 <__malloc_unlock>
    aab0:	adds	r4, #8
    aab2:	mov	r0, r4
    aab4:	add	sp, #12
    aab6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aaba:	add	r3, r4
    aabc:	mov	r0, r6
    aabe:	ldr	r2, [r3, #4]
    aac0:	orr.w	r2, r2, #1
    aac4:	str	r2, [r3, #4]
    aac6:	bl	afe8 <__malloc_unlock>
    aaca:	adds	r4, #8
    aacc:	mov	r0, r4
    aace:	add	sp, #12
    aad0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aad4:	ldr	r4, [r7, #8]
    aad6:	ldr	r3, [r4, #4]
    aad8:	bic.w	r8, r3, #3
    aadc:	cmp	r8, r5
    aade:	bcc.n	aaea <_malloc_r+0x206>
    aae0:	rsb	r3, r5, r8
    aae4:	cmp	r3, #15
    aae6:	bgt.w	ac02 <_malloc_r+0x31e>
    aaea:	ldr	r3, [pc, #340]	; (ac40 <_malloc_r+0x35c>)
    aaec:	ldr.w	r9, [pc, #352]	; ac50 <_malloc_r+0x36c>
    aaf0:	ldr	r2, [r3, #0]
    aaf2:	ldr.w	r3, [r9]
    aaf6:	adds	r3, #1
    aaf8:	add	r2, r5
    aafa:	add.w	sl, r4, r8
    aafe:	beq.w	adc2 <_malloc_r+0x4de>
    ab02:	add.w	r2, r2, #4096	; 0x1000
    ab06:	adds	r2, #15
    ab08:	bic.w	r2, r2, #4080	; 0xff0
    ab0c:	bic.w	r2, r2, #15
    ab10:	mov	r1, r2
    ab12:	mov	r0, r6
    ab14:	str	r2, [sp, #4]
    ab16:	bl	b3cc <_sbrk_r>
    ab1a:	cmp.w	r0, #4294967295
    ab1e:	mov	fp, r0
    ab20:	ldr	r2, [sp, #4]
    ab22:	beq.w	add6 <_malloc_r+0x4f2>
    ab26:	cmp	sl, r0
    ab28:	bhi.w	ad24 <_malloc_r+0x440>
    ab2c:	ldr	r3, [pc, #276]	; (ac44 <_malloc_r+0x360>)
    ab2e:	ldr	r1, [r3, #0]
    ab30:	cmp	sl, fp
    ab32:	add	r1, r2
    ab34:	str	r1, [r3, #0]
    ab36:	beq.w	ade0 <_malloc_r+0x4fc>
    ab3a:	ldr.w	r0, [r9]
    ab3e:	ldr.w	lr, [pc, #272]	; ac50 <_malloc_r+0x36c>
    ab42:	adds	r0, #1
    ab44:	ittet	ne
    ab46:	rsbne	sl, sl, fp
    ab4a:	addne	r1, sl
    ab4c:	streq.w	fp, [lr]
    ab50:	strne	r1, [r3, #0]
    ab52:	ands.w	r1, fp, #7
    ab56:	beq.w	ad88 <_malloc_r+0x4a4>
    ab5a:	rsb	r0, r1, #8
    ab5e:	rsb	r1, r1, #4096	; 0x1000
    ab62:	add	fp, r0
    ab64:	adds	r1, #8
    ab66:	add	r2, fp
    ab68:	ubfx	r2, r2, #0, #12
    ab6c:	rsb	r9, r2, r1
    ab70:	mov	r1, r9
    ab72:	mov	r0, r6
    ab74:	str	r3, [sp, #4]
    ab76:	bl	b3cc <_sbrk_r>
    ab7a:	adds	r3, r0, #1
    ab7c:	ldr	r3, [sp, #4]
    ab7e:	beq.w	ae00 <_malloc_r+0x51c>
    ab82:	rsb	r2, fp, r0
    ab86:	add	r2, r9
    ab88:	orr.w	r2, r2, #1
    ab8c:	ldr	r1, [r3, #0]
    ab8e:	str.w	fp, [r7, #8]
    ab92:	add	r1, r9
    ab94:	cmp	r4, r7
    ab96:	str.w	r2, [fp, #4]
    ab9a:	str	r1, [r3, #0]
    ab9c:	ldr.w	r9, [pc, #164]	; ac44 <_malloc_r+0x360>
    aba0:	beq.n	abd0 <_malloc_r+0x2ec>
    aba2:	cmp.w	r8, #15
    aba6:	bls.w	ada4 <_malloc_r+0x4c0>
    abaa:	ldr	r2, [r4, #4]
    abac:	sub.w	r3, r8, #12
    abb0:	bic.w	r3, r3, #7
    abb4:	adds	r0, r4, r3
    abb6:	and.w	r2, r2, #1
    abba:	mov.w	lr, #5
    abbe:	orrs	r2, r3
    abc0:	cmp	r3, #15
    abc2:	str	r2, [r4, #4]
    abc4:	str.w	lr, [r0, #4]
    abc8:	str.w	lr, [r0, #8]
    abcc:	bhi.w	ae08 <_malloc_r+0x524>
    abd0:	ldr	r3, [pc, #116]	; (ac48 <_malloc_r+0x364>)
    abd2:	ldr	r4, [r7, #8]
    abd4:	ldr	r2, [r3, #0]
    abd6:	cmp	r1, r2
    abd8:	it	hi
    abda:	strhi	r1, [r3, #0]
    abdc:	ldr	r3, [pc, #108]	; (ac4c <_malloc_r+0x368>)
    abde:	ldr	r2, [r3, #0]
    abe0:	cmp	r1, r2
    abe2:	ldr	r2, [r4, #4]
    abe4:	it	hi
    abe6:	strhi	r1, [r3, #0]
    abe8:	bic.w	r2, r2, #3
    abec:	cmp	r5, r2
    abee:	sub.w	r3, r2, r5
    abf2:	bhi.n	abf8 <_malloc_r+0x314>
    abf4:	cmp	r3, #15
    abf6:	bgt.n	ac02 <_malloc_r+0x31e>
    abf8:	mov	r0, r6
    abfa:	bl	afe8 <__malloc_unlock>
    abfe:	movs	r4, #0
    ac00:	b.n	aa74 <_malloc_r+0x190>
    ac02:	adds	r2, r4, r5
    ac04:	orr.w	r3, r3, #1
    ac08:	orr.w	r5, r5, #1
    ac0c:	str	r5, [r4, #4]
    ac0e:	mov	r0, r6
    ac10:	str	r2, [r7, #8]
    ac12:	str	r3, [r2, #4]
    ac14:	bl	afe8 <__malloc_unlock>
    ac18:	adds	r4, #8
    ac1a:	mov	r0, r4
    ac1c:	add	sp, #12
    ac1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac22:	cmp	r3, #20
    ac24:	bls.n	ad0a <_malloc_r+0x426>
    ac26:	cmp	r3, #84	; 0x54
    ac28:	bhi.w	ad74 <_malloc_r+0x490>
    ac2c:	lsrs	r0, r5, #12
    ac2e:	add.w	lr, r0, #111	; 0x6f
    ac32:	mov.w	r3, lr, lsl #1
    ac36:	adds	r0, #110	; 0x6e
    ac38:	b.n	a928 <_malloc_r+0x44>
    ac3a:	nop
    ac3c:	.word	0x20001628
    ac40:	.word	0x200026fc
    ac44:	.word	0x20002700
    ac48:	.word	0x200026f8
    ac4c:	.word	0x200026f4
    ac50:	.word	0x20001a34
    ac54:	lsrs	r2, r3, #9
    ac56:	cmp	r2, #4
    ac58:	bls.n	ad18 <_malloc_r+0x434>
    ac5a:	cmp	r2, #20
    ac5c:	bhi.w	adc6 <_malloc_r+0x4e2>
    ac60:	add.w	r1, r2, #92	; 0x5c
    ac64:	lsls	r1, r1, #1
    ac66:	adds	r2, #91	; 0x5b
    ac68:	add.w	ip, r7, r1, lsl #2
    ac6c:	ldr.w	r1, [r7, r1, lsl #2]
    ac70:	ldr.w	r8, [pc, #476]	; ae50 <_malloc_r+0x56c>
    ac74:	sub.w	ip, ip, #8
    ac78:	cmp	ip, r1
    ac7a:	beq.w	ad8e <_malloc_r+0x4aa>
    ac7e:	ldr	r2, [r1, #4]
    ac80:	bic.w	r2, r2, #3
    ac84:	cmp	r3, r2
    ac86:	bcs.n	ac8e <_malloc_r+0x3aa>
    ac88:	ldr	r1, [r1, #8]
    ac8a:	cmp	ip, r1
    ac8c:	bne.n	ac7e <_malloc_r+0x39a>
    ac8e:	ldr.w	ip, [r1, #12]
    ac92:	ldr	r2, [r7, #4]
    ac94:	str.w	ip, [r4, #12]
    ac98:	str	r1, [r4, #8]
    ac9a:	str.w	r4, [ip, #8]
    ac9e:	str	r4, [r1, #12]
    aca0:	b.n	a9b4 <_malloc_r+0xd0>
    aca2:	adds	r3, r4, r5
    aca4:	orr.w	r7, r2, #1
    aca8:	orr.w	r5, r5, #1
    acac:	str	r5, [r4, #4]
    acae:	mov	r0, r6
    acb0:	str	r3, [r1, #20]
    acb2:	str	r3, [r1, #16]
    acb4:	str.w	lr, [r3, #12]
    acb8:	str.w	lr, [r3, #8]
    acbc:	str	r7, [r3, #4]
    acbe:	str	r2, [r3, r2]
    acc0:	adds	r4, #8
    acc2:	bl	afe8 <__malloc_unlock>
    acc6:	b.n	aa74 <_malloc_r+0x190>
    acc8:	ldr	r2, [r1, #4]
    acca:	b.n	a9b4 <_malloc_r+0xd0>
    accc:	add.w	r8, r8, #1
    acd0:	tst.w	r8, #3
    acd4:	add.w	ip, ip, #8
    acd8:	bne.w	a9da <_malloc_r+0xf6>
    acdc:	b.n	ad40 <_malloc_r+0x45c>
    acde:	ldr	r4, [r3, #12]
    ace0:	cmp	r3, r4
    ace2:	it	eq
    ace4:	addeq	r0, #2
    ace6:	beq.w	a954 <_malloc_r+0x70>
    acea:	b.n	aa54 <_malloc_r+0x170>
    acec:	add	r3, r1
    acee:	mov	r4, r1
    acf0:	ldr	r2, [r3, #4]
    acf2:	ldr	r1, [r1, #12]
    acf4:	ldr.w	r5, [r4, #8]!
    acf8:	orr.w	r2, r2, #1
    acfc:	str	r2, [r3, #4]
    acfe:	mov	r0, r6
    ad00:	str	r1, [r5, #12]
    ad02:	str	r5, [r1, #8]
    ad04:	bl	afe8 <__malloc_unlock>
    ad08:	b.n	aa74 <_malloc_r+0x190>
    ad0a:	add.w	lr, r3, #92	; 0x5c
    ad0e:	add.w	r0, r3, #91	; 0x5b
    ad12:	mov.w	r3, lr, lsl #1
    ad16:	b.n	a928 <_malloc_r+0x44>
    ad18:	lsrs	r2, r3, #6
    ad1a:	add.w	r1, r2, #57	; 0x39
    ad1e:	lsls	r1, r1, #1
    ad20:	adds	r2, #56	; 0x38
    ad22:	b.n	ac68 <_malloc_r+0x384>
    ad24:	cmp	r4, r7
    ad26:	ldr	r3, [pc, #296]	; (ae50 <_malloc_r+0x56c>)
    ad28:	beq.w	ab2c <_malloc_r+0x248>
    ad2c:	ldr	r4, [r3, #8]
    ad2e:	ldr	r2, [r4, #4]
    ad30:	bic.w	r2, r2, #3
    ad34:	b.n	abec <_malloc_r+0x308>
    ad36:	ldr.w	r3, [r9], #-8
    ad3a:	cmp	r9, r3
    ad3c:	bne.w	ae44 <_malloc_r+0x560>
    ad40:	tst.w	r0, #3
    ad44:	add.w	r0, r0, #4294967295
    ad48:	bne.n	ad36 <_malloc_r+0x452>
    ad4a:	ldr	r3, [r7, #4]
    ad4c:	bic.w	r3, r3, r4
    ad50:	str	r3, [r7, #4]
    ad52:	lsls	r4, r4, #1
    ad54:	cmp	r4, r3
    ad56:	bhi.w	aad4 <_malloc_r+0x1f0>
    ad5a:	cmp	r4, #0
    ad5c:	beq.w	aad4 <_malloc_r+0x1f0>
    ad60:	tst	r4, r3
    ad62:	mov	r0, r8
    ad64:	bne.w	a9d2 <_malloc_r+0xee>
    ad68:	lsls	r4, r4, #1
    ad6a:	tst	r4, r3
    ad6c:	add.w	r0, r0, #4
    ad70:	beq.n	ad68 <_malloc_r+0x484>
    ad72:	b.n	a9d2 <_malloc_r+0xee>
    ad74:	cmp.w	r3, #340	; 0x154
    ad78:	bhi.n	adac <_malloc_r+0x4c8>
    ad7a:	lsrs	r0, r5, #15
    ad7c:	add.w	lr, r0, #120	; 0x78
    ad80:	mov.w	r3, lr, lsl #1
    ad84:	adds	r0, #119	; 0x77
    ad86:	b.n	a928 <_malloc_r+0x44>
    ad88:	mov.w	r1, #4096	; 0x1000
    ad8c:	b.n	ab66 <_malloc_r+0x282>
    ad8e:	movs	r1, #1
    ad90:	ldr.w	r3, [r8, #4]
    ad94:	asrs	r2, r2, #2
    ad96:	lsl.w	r2, r1, r2
    ad9a:	orrs	r2, r3
    ad9c:	str.w	r2, [r8, #4]
    ada0:	mov	r1, ip
    ada2:	b.n	ac94 <_malloc_r+0x3b0>
    ada4:	movs	r3, #1
    ada6:	str.w	r3, [fp, #4]
    adaa:	b.n	abf8 <_malloc_r+0x314>
    adac:	movw	r2, #1364	; 0x554
    adb0:	cmp	r3, r2
    adb2:	bhi.n	adf6 <_malloc_r+0x512>
    adb4:	lsrs	r0, r5, #18
    adb6:	add.w	lr, r0, #125	; 0x7d
    adba:	mov.w	r3, lr, lsl #1
    adbe:	adds	r0, #124	; 0x7c
    adc0:	b.n	a928 <_malloc_r+0x44>
    adc2:	adds	r2, #16
    adc4:	b.n	ab10 <_malloc_r+0x22c>
    adc6:	cmp	r2, #84	; 0x54
    adc8:	bhi.n	ae18 <_malloc_r+0x534>
    adca:	lsrs	r2, r3, #12
    adcc:	add.w	r1, r2, #111	; 0x6f
    add0:	lsls	r1, r1, #1
    add2:	adds	r2, #110	; 0x6e
    add4:	b.n	ac68 <_malloc_r+0x384>
    add6:	ldr	r4, [r7, #8]
    add8:	ldr	r2, [r4, #4]
    adda:	bic.w	r2, r2, #3
    adde:	b.n	abec <_malloc_r+0x308>
    ade0:	ubfx	r0, sl, #0, #12
    ade4:	cmp	r0, #0
    ade6:	bne.w	ab3a <_malloc_r+0x256>
    adea:	add	r2, r8
    adec:	ldr	r3, [r7, #8]
    adee:	orr.w	r2, r2, #1
    adf2:	str	r2, [r3, #4]
    adf4:	b.n	abd0 <_malloc_r+0x2ec>
    adf6:	movs	r3, #254	; 0xfe
    adf8:	mov.w	lr, #127	; 0x7f
    adfc:	movs	r0, #126	; 0x7e
    adfe:	b.n	a928 <_malloc_r+0x44>
    ae00:	movs	r2, #1
    ae02:	mov.w	r9, #0
    ae06:	b.n	ab8c <_malloc_r+0x2a8>
    ae08:	add.w	r1, r4, #8
    ae0c:	mov	r0, r6
    ae0e:	bl	b6c8 <_free_r>
    ae12:	ldr.w	r1, [r9]
    ae16:	b.n	abd0 <_malloc_r+0x2ec>
    ae18:	cmp.w	r2, #340	; 0x154
    ae1c:	bhi.n	ae2a <_malloc_r+0x546>
    ae1e:	lsrs	r2, r3, #15
    ae20:	add.w	r1, r2, #120	; 0x78
    ae24:	lsls	r1, r1, #1
    ae26:	adds	r2, #119	; 0x77
    ae28:	b.n	ac68 <_malloc_r+0x384>
    ae2a:	movw	r1, #1364	; 0x554
    ae2e:	cmp	r2, r1
    ae30:	bhi.n	ae3e <_malloc_r+0x55a>
    ae32:	lsrs	r2, r3, #18
    ae34:	add.w	r1, r2, #125	; 0x7d
    ae38:	lsls	r1, r1, #1
    ae3a:	adds	r2, #124	; 0x7c
    ae3c:	b.n	ac68 <_malloc_r+0x384>
    ae3e:	movs	r1, #254	; 0xfe
    ae40:	movs	r2, #126	; 0x7e
    ae42:	b.n	ac68 <_malloc_r+0x384>
    ae44:	ldr	r3, [r7, #4]
    ae46:	b.n	ad52 <_malloc_r+0x46e>
    ae48:	lsrs	r0, r5, #3
    ae4a:	adds	r3, r0, #1
    ae4c:	lsls	r3, r3, #1
    ae4e:	b.n	aa42 <_malloc_r+0x15e>
    ae50:	.word	0x20001628

0000ae54 <__ascii_mbtowc>:
    ae54:	sub	sp, #8
    ae56:	cbz	r1, ae6c <__ascii_mbtowc+0x18>
    ae58:	cbz	r2, ae72 <__ascii_mbtowc+0x1e>
    ae5a:	cbz	r3, ae78 <__ascii_mbtowc+0x24>
    ae5c:	ldrb	r3, [r2, #0]
    ae5e:	str	r3, [r1, #0]
    ae60:	ldrb	r2, [r2, #0]
    ae62:	adds	r0, r2, #0
    ae64:	it	ne
    ae66:	movne	r0, #1
    ae68:	add	sp, #8
    ae6a:	bx	lr
    ae6c:	add	r1, sp, #4
    ae6e:	cmp	r2, #0
    ae70:	bne.n	ae5a <__ascii_mbtowc+0x6>
    ae72:	mov	r0, r2
    ae74:	add	sp, #8
    ae76:	bx	lr
    ae78:	mvn.w	r0, #1
    ae7c:	b.n	ae68 <__ascii_mbtowc+0x14>
    ae7e:	nop

0000ae80 <memmove>:
    ae80:	cmp	r0, r1
    ae82:	push	{r4, r5, r6, r7, lr}
    ae84:	bls.n	aea2 <memmove+0x22>
    ae86:	adds	r3, r1, r2
    ae88:	cmp	r0, r3
    ae8a:	bcs.n	aea2 <memmove+0x22>
    ae8c:	adds	r1, r0, r2
    ae8e:	cmp	r2, #0
    ae90:	beq.n	af36 <memmove+0xb6>
    ae92:	subs	r2, r3, r2
    ae94:	ldrb.w	r4, [r3, #-1]!
    ae98:	strb.w	r4, [r1, #-1]!
    ae9c:	cmp	r3, r2
    ae9e:	bne.n	ae94 <memmove+0x14>
    aea0:	pop	{r4, r5, r6, r7, pc}
    aea2:	cmp	r2, #15
    aea4:	bls.n	af38 <memmove+0xb8>
    aea6:	orr.w	r3, r1, r0
    aeaa:	lsls	r3, r3, #30
    aeac:	bne.n	af3c <memmove+0xbc>
    aeae:	add.w	r4, r0, #16
    aeb2:	add.w	r3, r1, #16
    aeb6:	mov	r5, r2
    aeb8:	ldr.w	r6, [r3, #-16]
    aebc:	str.w	r6, [r4, #-16]
    aec0:	ldr.w	r6, [r3, #-12]
    aec4:	str.w	r6, [r4, #-12]
    aec8:	ldr.w	r6, [r3, #-8]
    aecc:	str.w	r6, [r4, #-8]
    aed0:	subs	r5, #16
    aed2:	ldr.w	r6, [r3, #-4]
    aed6:	str.w	r6, [r4, #-4]
    aeda:	cmp	r5, #15
    aedc:	add.w	r3, r3, #16
    aee0:	add.w	r4, r4, #16
    aee4:	bhi.n	aeb8 <memmove+0x38>
    aee6:	sub.w	r3, r2, #16
    aeea:	bic.w	r3, r3, #15
    aeee:	and.w	lr, r2, #15
    aef2:	adds	r3, #16
    aef4:	cmp.w	lr, #3
    aef8:	add	r1, r3
    aefa:	add	r3, r0
    aefc:	bls.n	af42 <memmove+0xc2>
    aefe:	subs	r6, r3, #4
    af00:	mov	r5, r1
    af02:	mov	r4, lr
    af04:	subs	r4, #4
    af06:	ldr.w	r7, [r5], #4
    af0a:	str.w	r7, [r6, #4]!
    af0e:	cmp	r4, #3
    af10:	bhi.n	af04 <memmove+0x84>
    af12:	sub.w	r4, lr, #4
    af16:	bic.w	r4, r4, #3
    af1a:	adds	r4, #4
    af1c:	add	r3, r4
    af1e:	add	r1, r4
    af20:	and.w	r2, r2, #3
    af24:	cbz	r2, af40 <memmove+0xc0>
    af26:	subs	r3, #1
    af28:	add	r2, r1
    af2a:	ldrb.w	r4, [r1], #1
    af2e:	strb.w	r4, [r3, #1]!
    af32:	cmp	r2, r1
    af34:	bne.n	af2a <memmove+0xaa>
    af36:	pop	{r4, r5, r6, r7, pc}
    af38:	mov	r3, r0
    af3a:	b.n	af24 <memmove+0xa4>
    af3c:	mov	r3, r0
    af3e:	b.n	af26 <memmove+0xa6>
    af40:	pop	{r4, r5, r6, r7, pc}
    af42:	mov	r2, lr
    af44:	b.n	af24 <memmove+0xa4>
    af46:	nop

0000af48 <memset>:
    af48:	push	{r4, r5, r6}
    af4a:	lsls	r4, r0, #30
    af4c:	beq.n	afdc <memset+0x94>
    af4e:	subs	r4, r2, #1
    af50:	cmp	r2, #0
    af52:	beq.n	afd8 <memset+0x90>
    af54:	uxtb	r5, r1
    af56:	mov	r3, r0
    af58:	b.n	af60 <memset+0x18>
    af5a:	subs	r2, r4, #1
    af5c:	cbz	r4, afd8 <memset+0x90>
    af5e:	mov	r4, r2
    af60:	strb.w	r5, [r3], #1
    af64:	lsls	r2, r3, #30
    af66:	bne.n	af5a <memset+0x12>
    af68:	cmp	r4, #3
    af6a:	bls.n	afca <memset+0x82>
    af6c:	uxtb	r5, r1
    af6e:	orr.w	r5, r5, r5, lsl #8
    af72:	cmp	r4, #15
    af74:	orr.w	r5, r5, r5, lsl #16
    af78:	bls.n	afae <memset+0x66>
    af7a:	add.w	r2, r3, #16
    af7e:	mov	r6, r4
    af80:	subs	r6, #16
    af82:	cmp	r6, #15
    af84:	str.w	r5, [r2, #-16]
    af88:	str.w	r5, [r2, #-12]
    af8c:	str.w	r5, [r2, #-8]
    af90:	str.w	r5, [r2, #-4]
    af94:	add.w	r2, r2, #16
    af98:	bhi.n	af80 <memset+0x38>
    af9a:	sub.w	r2, r4, #16
    af9e:	bic.w	r2, r2, #15
    afa2:	and.w	r4, r4, #15
    afa6:	adds	r2, #16
    afa8:	cmp	r4, #3
    afaa:	add	r3, r2
    afac:	bls.n	afca <memset+0x82>
    afae:	mov	r6, r3
    afb0:	mov	r2, r4
    afb2:	subs	r2, #4
    afb4:	cmp	r2, #3
    afb6:	str.w	r5, [r6], #4
    afba:	bhi.n	afb2 <memset+0x6a>
    afbc:	subs	r2, r4, #4
    afbe:	bic.w	r2, r2, #3
    afc2:	adds	r2, #4
    afc4:	add	r3, r2
    afc6:	and.w	r4, r4, #3
    afca:	cbz	r4, afd8 <memset+0x90>
    afcc:	uxtb	r1, r1
    afce:	add	r4, r3
    afd0:	strb.w	r1, [r3], #1
    afd4:	cmp	r3, r4
    afd6:	bne.n	afd0 <memset+0x88>
    afd8:	pop	{r4, r5, r6}
    afda:	bx	lr
    afdc:	mov	r4, r2
    afde:	mov	r3, r0
    afe0:	b.n	af68 <memset+0x20>
    afe2:	nop

0000afe4 <__malloc_lock>:
    afe4:	bx	lr
    afe6:	nop

0000afe8 <__malloc_unlock>:
    afe8:	bx	lr
    afea:	nop

0000afec <_realloc_r>:
    afec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aff0:	mov	r7, r2
    aff2:	sub	sp, #12
    aff4:	cmp	r1, #0
    aff6:	beq.w	b17c <_realloc_r+0x190>
    affa:	mov	r6, r1
    affc:	mov	r9, r0
    affe:	add.w	r5, r7, #11
    b002:	bl	afe4 <__malloc_lock>
    b006:	ldr.w	lr, [r6, #-4]
    b00a:	cmp	r5, #22
    b00c:	bic.w	r4, lr, #3
    b010:	sub.w	r8, r6, #8
    b014:	bhi.n	b098 <_realloc_r+0xac>
    b016:	movs	r2, #16
    b018:	mov	r5, r2
    b01a:	cmp	r7, r5
    b01c:	bhi.n	b0a2 <_realloc_r+0xb6>
    b01e:	cmp	r4, r2
    b020:	bge.n	b10e <_realloc_r+0x122>
    b022:	ldr	r3, [pc, #804]	; (b348 <_realloc_r+0x35c>)
    b024:	ldr	r1, [r3, #8]
    b026:	add.w	r0, r8, r4
    b02a:	cmp	r0, r1
    b02c:	ldr	r1, [r0, #4]
    b02e:	beq.w	b1e4 <_realloc_r+0x1f8>
    b032:	bic.w	r3, r1, #1
    b036:	add	r3, r0
    b038:	ldr	r3, [r3, #4]
    b03a:	lsls	r3, r3, #31
    b03c:	bpl.n	b13a <_realloc_r+0x14e>
    b03e:	tst.w	lr, #1
    b042:	beq.n	b0b0 <_realloc_r+0xc4>
    b044:	mov	r1, r7
    b046:	mov	r0, r9
    b048:	bl	a8e4 <_malloc_r>
    b04c:	mov	r7, r0
    b04e:	cbz	r0, b08a <_realloc_r+0x9e>
    b050:	ldr.w	r3, [r6, #-4]
    b054:	bic.w	r3, r3, #1
    b058:	add	r3, r8
    b05a:	sub.w	r2, r0, #8
    b05e:	cmp	r2, r3
    b060:	beq.w	b2ec <_realloc_r+0x300>
    b064:	subs	r2, r4, #4
    b066:	cmp	r2, #36	; 0x24
    b068:	bhi.w	b2ce <_realloc_r+0x2e2>
    b06c:	cmp	r2, #19
    b06e:	bhi.w	b27a <_realloc_r+0x28e>
    b072:	mov	r3, r0
    b074:	mov	r2, r6
    b076:	ldr	r1, [r2, #0]
    b078:	str	r1, [r3, #0]
    b07a:	ldr	r1, [r2, #4]
    b07c:	str	r1, [r3, #4]
    b07e:	ldr	r2, [r2, #8]
    b080:	str	r2, [r3, #8]
    b082:	mov	r1, r6
    b084:	mov	r0, r9
    b086:	bl	b6c8 <_free_r>
    b08a:	mov	r0, r9
    b08c:	bl	afe8 <__malloc_unlock>
    b090:	mov	r0, r7
    b092:	add	sp, #12
    b094:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b098:	bic.w	r5, r5, #7
    b09c:	cmp	r5, #0
    b09e:	mov	r2, r5
    b0a0:	bge.n	b01a <_realloc_r+0x2e>
    b0a2:	movs	r3, #12
    b0a4:	movs	r0, #0
    b0a6:	str.w	r3, [r9]
    b0aa:	add	sp, #12
    b0ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0b0:	ldr.w	r3, [r6, #-8]
    b0b4:	rsb	sl, r3, r8
    b0b8:	ldr.w	r3, [sl, #4]
    b0bc:	bic.w	ip, r3, #3
    b0c0:	add.w	r3, r4, ip
    b0c4:	cmp	r3, r2
    b0c6:	blt.n	b044 <_realloc_r+0x58>
    b0c8:	mov	r7, sl
    b0ca:	ldr.w	r1, [sl, #12]
    b0ce:	ldr.w	r0, [r7, #8]!
    b0d2:	subs	r2, r4, #4
    b0d4:	cmp	r2, #36	; 0x24
    b0d6:	str	r1, [r0, #12]
    b0d8:	str	r0, [r1, #8]
    b0da:	bhi.w	b30c <_realloc_r+0x320>
    b0de:	cmp	r2, #19
    b0e0:	bls.w	b308 <_realloc_r+0x31c>
    b0e4:	ldr	r1, [r6, #0]
    b0e6:	str.w	r1, [sl, #8]
    b0ea:	ldr	r1, [r6, #4]
    b0ec:	str.w	r1, [sl, #12]
    b0f0:	cmp	r2, #27
    b0f2:	bhi.w	b34c <_realloc_r+0x360>
    b0f6:	adds	r6, #8
    b0f8:	add.w	r2, sl, #16
    b0fc:	ldr	r1, [r6, #0]
    b0fe:	str	r1, [r2, #0]
    b100:	ldr	r1, [r6, #4]
    b102:	str	r1, [r2, #4]
    b104:	ldr	r1, [r6, #8]
    b106:	str	r1, [r2, #8]
    b108:	mov	r6, r7
    b10a:	mov	r4, r3
    b10c:	mov	r8, sl
    b10e:	subs	r3, r4, r5
    b110:	cmp	r3, #15
    b112:	bhi.n	b150 <_realloc_r+0x164>
    b114:	ldr.w	r3, [r8, #4]
    b118:	and.w	r3, r3, #1
    b11c:	orrs	r3, r4
    b11e:	add	r4, r8
    b120:	str.w	r3, [r8, #4]
    b124:	ldr	r3, [r4, #4]
    b126:	orr.w	r3, r3, #1
    b12a:	str	r3, [r4, #4]
    b12c:	mov	r0, r9
    b12e:	bl	afe8 <__malloc_unlock>
    b132:	mov	r0, r6
    b134:	add	sp, #12
    b136:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b13a:	bic.w	r1, r1, #3
    b13e:	add	r1, r4
    b140:	cmp	r1, r2
    b142:	blt.n	b188 <_realloc_r+0x19c>
    b144:	ldr	r3, [r0, #12]
    b146:	ldr	r2, [r0, #8]
    b148:	mov	r4, r1
    b14a:	str	r3, [r2, #12]
    b14c:	str	r2, [r3, #8]
    b14e:	b.n	b10e <_realloc_r+0x122>
    b150:	ldr.w	r2, [r8, #4]
    b154:	add.w	r1, r8, r5
    b158:	and.w	r2, r2, #1
    b15c:	orrs	r5, r2
    b15e:	orr.w	r2, r3, #1
    b162:	add	r3, r1
    b164:	str.w	r5, [r8, #4]
    b168:	str	r2, [r1, #4]
    b16a:	ldr	r2, [r3, #4]
    b16c:	orr.w	r2, r2, #1
    b170:	adds	r1, #8
    b172:	str	r2, [r3, #4]
    b174:	mov	r0, r9
    b176:	bl	b6c8 <_free_r>
    b17a:	b.n	b12c <_realloc_r+0x140>
    b17c:	mov	r1, r2
    b17e:	add	sp, #12
    b180:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b184:	b.w	a8e4 <_malloc_r>
    b188:	tst.w	lr, #1
    b18c:	bne.w	b044 <_realloc_r+0x58>
    b190:	ldr.w	r3, [r6, #-8]
    b194:	rsb	sl, r3, r8
    b198:	ldr.w	r3, [sl, #4]
    b19c:	bic.w	ip, r3, #3
    b1a0:	add.w	lr, r1, ip
    b1a4:	cmp	lr, r2
    b1a6:	blt.n	b0c0 <_realloc_r+0xd4>
    b1a8:	ldr	r3, [r0, #12]
    b1aa:	ldr	r2, [r0, #8]
    b1ac:	mov	r7, sl
    b1ae:	str	r3, [r2, #12]
    b1b0:	str	r2, [r3, #8]
    b1b2:	ldr.w	r1, [r7, #8]!
    b1b6:	ldr.w	r3, [sl, #12]
    b1ba:	str	r3, [r1, #12]
    b1bc:	subs	r2, r4, #4
    b1be:	cmp	r2, #36	; 0x24
    b1c0:	str	r1, [r3, #8]
    b1c2:	bhi.w	b2f8 <_realloc_r+0x30c>
    b1c6:	cmp	r2, #19
    b1c8:	bls.n	b290 <_realloc_r+0x2a4>
    b1ca:	ldr	r3, [r6, #0]
    b1cc:	str.w	r3, [sl, #8]
    b1d0:	ldr	r3, [r6, #4]
    b1d2:	str.w	r3, [sl, #12]
    b1d6:	cmp	r2, #27
    b1d8:	bhi.w	b31c <_realloc_r+0x330>
    b1dc:	adds	r6, #8
    b1de:	add.w	r3, sl, #16
    b1e2:	b.n	b292 <_realloc_r+0x2a6>
    b1e4:	bic.w	fp, r1, #3
    b1e8:	add	fp, r4
    b1ea:	add.w	r0, r5, #16
    b1ee:	cmp	fp, r0
    b1f0:	bge.n	b2a6 <_realloc_r+0x2ba>
    b1f2:	tst.w	lr, #1
    b1f6:	bne.w	b044 <_realloc_r+0x58>
    b1fa:	ldr.w	r1, [r6, #-8]
    b1fe:	rsb	sl, r1, r8
    b202:	ldr.w	r1, [sl, #4]
    b206:	bic.w	ip, r1, #3
    b20a:	add	fp, ip
    b20c:	cmp	r0, fp
    b20e:	bgt.w	b0c0 <_realloc_r+0xd4>
    b212:	mov	r7, sl
    b214:	ldr.w	r1, [sl, #12]
    b218:	ldr.w	r0, [r7, #8]!
    b21c:	subs	r2, r4, #4
    b21e:	cmp	r2, #36	; 0x24
    b220:	str	r1, [r0, #12]
    b222:	str	r0, [r1, #8]
    b224:	bhi.w	b390 <_realloc_r+0x3a4>
    b228:	cmp	r2, #19
    b22a:	bls.w	b378 <_realloc_r+0x38c>
    b22e:	ldr	r1, [r6, #0]
    b230:	str.w	r1, [sl, #8]
    b234:	ldr	r1, [r6, #4]
    b236:	str.w	r1, [sl, #12]
    b23a:	cmp	r2, #27
    b23c:	bhi.w	b39e <_realloc_r+0x3b2>
    b240:	adds	r6, #8
    b242:	add.w	r2, sl, #16
    b246:	ldr	r1, [r6, #0]
    b248:	str	r1, [r2, #0]
    b24a:	ldr	r1, [r6, #4]
    b24c:	str	r1, [r2, #4]
    b24e:	ldr	r1, [r6, #8]
    b250:	str	r1, [r2, #8]
    b252:	add.w	r1, sl, r5
    b256:	rsb	r2, r5, fp
    b25a:	orr.w	r2, r2, #1
    b25e:	str	r1, [r3, #8]
    b260:	str	r2, [r1, #4]
    b262:	ldr.w	r3, [sl, #4]
    b266:	and.w	r3, r3, #1
    b26a:	orrs	r5, r3
    b26c:	mov	r0, r9
    b26e:	str.w	r5, [sl, #4]
    b272:	bl	afe8 <__malloc_unlock>
    b276:	mov	r0, r7
    b278:	b.n	b134 <_realloc_r+0x148>
    b27a:	ldr	r3, [r6, #0]
    b27c:	str	r3, [r0, #0]
    b27e:	ldr	r3, [r6, #4]
    b280:	str	r3, [r0, #4]
    b282:	cmp	r2, #27
    b284:	bhi.n	b2d6 <_realloc_r+0x2ea>
    b286:	add.w	r3, r0, #8
    b28a:	add.w	r2, r6, #8
    b28e:	b.n	b076 <_realloc_r+0x8a>
    b290:	mov	r3, r7
    b292:	ldr	r2, [r6, #0]
    b294:	str	r2, [r3, #0]
    b296:	ldr	r2, [r6, #4]
    b298:	str	r2, [r3, #4]
    b29a:	ldr	r2, [r6, #8]
    b29c:	str	r2, [r3, #8]
    b29e:	mov	r6, r7
    b2a0:	mov	r4, lr
    b2a2:	mov	r8, sl
    b2a4:	b.n	b10e <_realloc_r+0x122>
    b2a6:	add.w	r1, r8, r5
    b2aa:	rsb	fp, r5, fp
    b2ae:	orr.w	r2, fp, #1
    b2b2:	str	r1, [r3, #8]
    b2b4:	str	r2, [r1, #4]
    b2b6:	ldr.w	r3, [r6, #-4]
    b2ba:	and.w	r3, r3, #1
    b2be:	orrs	r5, r3
    b2c0:	mov	r0, r9
    b2c2:	str.w	r5, [r6, #-4]
    b2c6:	bl	afe8 <__malloc_unlock>
    b2ca:	mov	r0, r6
    b2cc:	b.n	b134 <_realloc_r+0x148>
    b2ce:	mov	r1, r6
    b2d0:	bl	ae80 <memmove>
    b2d4:	b.n	b082 <_realloc_r+0x96>
    b2d6:	ldr	r3, [r6, #8]
    b2d8:	str	r3, [r0, #8]
    b2da:	ldr	r3, [r6, #12]
    b2dc:	str	r3, [r0, #12]
    b2de:	cmp	r2, #36	; 0x24
    b2e0:	beq.n	b334 <_realloc_r+0x348>
    b2e2:	add.w	r3, r0, #16
    b2e6:	add.w	r2, r6, #16
    b2ea:	b.n	b076 <_realloc_r+0x8a>
    b2ec:	ldr.w	r3, [r0, #-4]
    b2f0:	bic.w	r3, r3, #3
    b2f4:	add	r4, r3
    b2f6:	b.n	b10e <_realloc_r+0x122>
    b2f8:	mov	r1, r6
    b2fa:	mov	r0, r7
    b2fc:	mov	r4, lr
    b2fe:	mov	r8, sl
    b300:	bl	ae80 <memmove>
    b304:	mov	r6, r7
    b306:	b.n	b10e <_realloc_r+0x122>
    b308:	mov	r2, r7
    b30a:	b.n	b0fc <_realloc_r+0x110>
    b30c:	mov	r1, r6
    b30e:	mov	r0, r7
    b310:	mov	r4, r3
    b312:	mov	r8, sl
    b314:	bl	ae80 <memmove>
    b318:	mov	r6, r7
    b31a:	b.n	b10e <_realloc_r+0x122>
    b31c:	ldr	r3, [r6, #8]
    b31e:	str.w	r3, [sl, #16]
    b322:	ldr	r3, [r6, #12]
    b324:	str.w	r3, [sl, #20]
    b328:	cmp	r2, #36	; 0x24
    b32a:	beq.n	b364 <_realloc_r+0x378>
    b32c:	adds	r6, #16
    b32e:	add.w	r3, sl, #24
    b332:	b.n	b292 <_realloc_r+0x2a6>
    b334:	ldr	r3, [r6, #16]
    b336:	str	r3, [r0, #16]
    b338:	ldr	r3, [r6, #20]
    b33a:	str	r3, [r0, #20]
    b33c:	add.w	r2, r6, #24
    b340:	add.w	r3, r0, #24
    b344:	b.n	b076 <_realloc_r+0x8a>
    b346:	nop
    b348:	.word	0x20001628
    b34c:	ldr	r1, [r6, #8]
    b34e:	str.w	r1, [sl, #16]
    b352:	ldr	r1, [r6, #12]
    b354:	str.w	r1, [sl, #20]
    b358:	cmp	r2, #36	; 0x24
    b35a:	beq.n	b37c <_realloc_r+0x390>
    b35c:	adds	r6, #16
    b35e:	add.w	r2, sl, #24
    b362:	b.n	b0fc <_realloc_r+0x110>
    b364:	ldr	r3, [r6, #16]
    b366:	str.w	r3, [sl, #24]
    b36a:	ldr	r3, [r6, #20]
    b36c:	str.w	r3, [sl, #28]
    b370:	adds	r6, #24
    b372:	add.w	r3, sl, #32
    b376:	b.n	b292 <_realloc_r+0x2a6>
    b378:	mov	r2, r7
    b37a:	b.n	b246 <_realloc_r+0x25a>
    b37c:	ldr	r2, [r6, #16]
    b37e:	str.w	r2, [sl, #24]
    b382:	ldr	r2, [r6, #20]
    b384:	str.w	r2, [sl, #28]
    b388:	adds	r6, #24
    b38a:	add.w	r2, sl, #32
    b38e:	b.n	b0fc <_realloc_r+0x110>
    b390:	mov	r1, r6
    b392:	mov	r0, r7
    b394:	str	r3, [sp, #4]
    b396:	bl	ae80 <memmove>
    b39a:	ldr	r3, [sp, #4]
    b39c:	b.n	b252 <_realloc_r+0x266>
    b39e:	ldr	r1, [r6, #8]
    b3a0:	str.w	r1, [sl, #16]
    b3a4:	ldr	r1, [r6, #12]
    b3a6:	str.w	r1, [sl, #20]
    b3aa:	cmp	r2, #36	; 0x24
    b3ac:	beq.n	b3b6 <_realloc_r+0x3ca>
    b3ae:	adds	r6, #16
    b3b0:	add.w	r2, sl, #24
    b3b4:	b.n	b246 <_realloc_r+0x25a>
    b3b6:	ldr	r2, [r6, #16]
    b3b8:	str.w	r2, [sl, #24]
    b3bc:	ldr	r2, [r6, #20]
    b3be:	str.w	r2, [sl, #28]
    b3c2:	adds	r6, #24
    b3c4:	add.w	r2, sl, #32
    b3c8:	b.n	b246 <_realloc_r+0x25a>
    b3ca:	nop

0000b3cc <_sbrk_r>:
    b3cc:	push	{r3, r4, r5, lr}
    b3ce:	ldr	r4, [pc, #28]	; (b3ec <_sbrk_r+0x20>)
    b3d0:	movs	r3, #0
    b3d2:	mov	r5, r0
    b3d4:	mov	r0, r1
    b3d6:	str	r3, [r4, #0]
    b3d8:	bl	93d0 <_sbrk>
    b3dc:	adds	r3, r0, #1
    b3de:	beq.n	b3e2 <_sbrk_r+0x16>
    b3e0:	pop	{r3, r4, r5, pc}
    b3e2:	ldr	r3, [r4, #0]
    b3e4:	cmp	r3, #0
    b3e6:	beq.n	b3e0 <_sbrk_r+0x14>
    b3e8:	str	r3, [r5, #0]
    b3ea:	pop	{r3, r4, r5, pc}
    b3ec:	.word	0x200046c0
	...

0000b400 <strlen>:
    b400:	pld	[r0]
    b404:	strd	r4, r5, [sp, #-8]!
    b408:	bic.w	r1, r0, #7
    b40c:	mvn.w	ip, #0
    b410:	ands.w	r4, r0, #7
    b414:	pld	[r1, #32]
    b418:	bne.w	b4ae <strlen+0xae>
    b41c:	mov.w	r4, #0
    b420:	mvn.w	r0, #7
    b424:	ldrd	r2, r3, [r1]
    b428:	pld	[r1, #64]	; 0x40
    b42c:	add.w	r0, r0, #8
    b430:	uadd8	r2, r2, ip
    b434:	sel	r2, r4, ip
    b438:	uadd8	r3, r3, ip
    b43c:	sel	r3, r2, ip
    b440:	cbnz	r3, b496 <strlen+0x96>
    b442:	ldrd	r2, r3, [r1, #8]
    b446:	uadd8	r2, r2, ip
    b44a:	add.w	r0, r0, #8
    b44e:	sel	r2, r4, ip
    b452:	uadd8	r3, r3, ip
    b456:	sel	r3, r2, ip
    b45a:	cbnz	r3, b496 <strlen+0x96>
    b45c:	ldrd	r2, r3, [r1, #16]
    b460:	uadd8	r2, r2, ip
    b464:	add.w	r0, r0, #8
    b468:	sel	r2, r4, ip
    b46c:	uadd8	r3, r3, ip
    b470:	sel	r3, r2, ip
    b474:	cbnz	r3, b496 <strlen+0x96>
    b476:	ldrd	r2, r3, [r1, #24]
    b47a:	add.w	r1, r1, #32
    b47e:	uadd8	r2, r2, ip
    b482:	add.w	r0, r0, #8
    b486:	sel	r2, r4, ip
    b48a:	uadd8	r3, r3, ip
    b48e:	sel	r3, r2, ip
    b492:	cmp	r3, #0
    b494:	beq.n	b424 <strlen+0x24>
    b496:	cmp	r2, #0
    b498:	itt	eq
    b49a:	addeq	r0, #4
    b49c:	moveq	r2, r3
    b49e:	rev	r2, r2
    b4a0:	clz	r2, r2
    b4a4:	ldrd	r4, r5, [sp], #8
    b4a8:	add.w	r0, r0, r2, lsr #3
    b4ac:	bx	lr
    b4ae:	ldrd	r2, r3, [r1]
    b4b2:	and.w	r5, r4, #3
    b4b6:	rsb	r0, r4, #0
    b4ba:	mov.w	r5, r5, lsl #3
    b4be:	tst.w	r4, #4
    b4c2:	pld	[r1, #64]	; 0x40
    b4c6:	lsl.w	r5, ip, r5
    b4ca:	orn	r2, r2, r5
    b4ce:	itt	ne
    b4d0:	ornne	r3, r3, r5
    b4d4:	movne	r2, ip
    b4d6:	mov.w	r4, #0
    b4da:	b.n	b430 <strlen+0x30>

0000b4dc <_vdprintf_r>:
    b4dc:	push	{r4, r5, r6, r7, lr}
    b4de:	sub.w	sp, sp, #532	; 0x214
    b4e2:	add	r5, sp, #16
    b4e4:	str	r3, [sp, #0]
    b4e6:	mov	r7, r1
    b4e8:	mov	r3, r2
    b4ea:	mov.w	r4, #512	; 0x200
    b4ee:	add	r2, sp, #12
    b4f0:	mov	r1, r5
    b4f2:	str	r4, [sp, #12]
    b4f4:	mov	r6, r0
    b4f6:	bl	bf84 <_vasnprintf_r>
    b4fa:	cbz	r0, b520 <_vdprintf_r+0x44>
    b4fc:	mov	r4, r0
    b4fe:	mov	r2, r0
    b500:	mov	r1, r7
    b502:	ldr	r3, [sp, #12]
    b504:	mov	r0, r6
    b506:	bl	b55c <_write_r>
    b50a:	cmp	r4, r5
    b50c:	str	r0, [sp, #12]
    b50e:	beq.n	b51a <_vdprintf_r+0x3e>
    b510:	mov	r0, r6
    b512:	mov	r1, r4
    b514:	bl	b6c8 <_free_r>
    b518:	ldr	r0, [sp, #12]
    b51a:	add.w	sp, sp, #532	; 0x214
    b51e:	pop	{r4, r5, r6, r7, pc}
    b520:	mov.w	r0, #4294967295
    b524:	b.n	b51a <_vdprintf_r+0x3e>
    b526:	nop

0000b528 <vdprintf>:
    b528:	push	{r4}
    b52a:	ldr	r4, [pc, #16]	; (b53c <vdprintf+0x14>)
    b52c:	mov	r3, r2
    b52e:	mov	r2, r1
    b530:	mov	r1, r0
    b532:	ldr	r0, [r4, #0]
    b534:	ldr.w	r4, [sp], #4
    b538:	b.w	b4dc <_vdprintf_r>
    b53c:	.word	0x200014b8

0000b540 <__ascii_wctomb>:
    b540:	cbz	r1, b54c <__ascii_wctomb+0xc>
    b542:	cmp	r2, #255	; 0xff
    b544:	bhi.n	b550 <__ascii_wctomb+0x10>
    b546:	strb	r2, [r1, #0]
    b548:	movs	r0, #1
    b54a:	bx	lr
    b54c:	mov	r0, r1
    b54e:	bx	lr
    b550:	movs	r3, #138	; 0x8a
    b552:	str	r3, [r0, #0]
    b554:	mov.w	r0, #4294967295
    b558:	bx	lr
    b55a:	nop

0000b55c <_write_r>:
    b55c:	push	{r4, r5, r6, lr}
    b55e:	mov	r5, r1
    b560:	ldr	r4, [pc, #32]	; (b584 <_write_r+0x28>)
    b562:	mov	r1, r2
    b564:	mov	r6, r0
    b566:	mov	r2, r3
    b568:	mov	r0, r5
    b56a:	movs	r3, #0
    b56c:	str	r3, [r4, #0]
    b56e:	bl	9b24 <_write>
    b572:	adds	r3, r0, #1
    b574:	beq.n	b578 <_write_r+0x1c>
    b576:	pop	{r4, r5, r6, pc}
    b578:	ldr	r3, [r4, #0]
    b57a:	cmp	r3, #0
    b57c:	beq.n	b576 <_write_r+0x1a>
    b57e:	str	r3, [r6, #0]
    b580:	pop	{r4, r5, r6, pc}
    b582:	nop
    b584:	.word	0x200046c0

0000b588 <__register_exitproc>:
    b588:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b58c:	ldr	r4, [pc, #148]	; (b624 <__register_exitproc+0x9c>)
    b58e:	ldr	r5, [r4, #0]
    b590:	ldr.w	r4, [r5, #328]	; 0x148
    b594:	mov	r6, r0
    b596:	mov	r8, r1
    b598:	mov	sl, r2
    b59a:	mov	r9, r3
    b59c:	cbz	r4, b610 <__register_exitproc+0x88>
    b59e:	ldr	r0, [r4, #4]
    b5a0:	cmp	r0, #31
    b5a2:	bgt.n	b5d4 <__register_exitproc+0x4c>
    b5a4:	adds	r3, r0, #1
    b5a6:	cbz	r6, b5c6 <__register_exitproc+0x3e>
    b5a8:	add.w	r5, r4, r0, lsl #2
    b5ac:	movs	r2, #1
    b5ae:	str.w	sl, [r5, #136]	; 0x88
    b5b2:	ldr.w	r1, [r4, #392]	; 0x188
    b5b6:	lsls	r2, r0
    b5b8:	orrs	r1, r2
    b5ba:	cmp	r6, #2
    b5bc:	str.w	r1, [r4, #392]	; 0x188
    b5c0:	str.w	r9, [r5, #264]	; 0x108
    b5c4:	beq.n	b604 <__register_exitproc+0x7c>
    b5c6:	adds	r0, #2
    b5c8:	str	r3, [r4, #4]
    b5ca:	str.w	r8, [r4, r0, lsl #2]
    b5ce:	movs	r0, #0
    b5d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b5d4:	ldr	r3, [pc, #80]	; (b628 <__register_exitproc+0xa0>)
    b5d6:	cbz	r3, b61a <__register_exitproc+0x92>
    b5d8:	mov.w	r0, #400	; 0x190
    b5dc:	bl	a8c4 <malloc>
    b5e0:	mov	r4, r0
    b5e2:	cbz	r0, b61a <__register_exitproc+0x92>
    b5e4:	ldr.w	r3, [r5, #328]	; 0x148
    b5e8:	movs	r7, #0
    b5ea:	stmia.w	r0, {r3, r7}
    b5ee:	str.w	r4, [r5, #328]	; 0x148
    b5f2:	mov	r0, r7
    b5f4:	movs	r3, #1
    b5f6:	str.w	r7, [r4, #392]	; 0x188
    b5fa:	str.w	r7, [r4, #396]	; 0x18c
    b5fe:	cmp	r6, #0
    b600:	beq.n	b5c6 <__register_exitproc+0x3e>
    b602:	b.n	b5a8 <__register_exitproc+0x20>
    b604:	ldr.w	r1, [r4, #396]	; 0x18c
    b608:	orrs	r2, r1
    b60a:	str.w	r2, [r4, #396]	; 0x18c
    b60e:	b.n	b5c6 <__register_exitproc+0x3e>
    b610:	add.w	r4, r5, #332	; 0x14c
    b614:	str.w	r4, [r5, #328]	; 0x148
    b618:	b.n	b59e <__register_exitproc+0x16>
    b61a:	mov.w	r0, #4294967295
    b61e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b622:	nop
    b624:	.word	0x20000c84
    b628:	.word	0x0000a8c5

0000b62c <_malloc_trim_r>:
    b62c:	push	{r3, r4, r5, r6, r7, lr}
    b62e:	ldr	r7, [pc, #140]	; (b6bc <_malloc_trim_r+0x90>)
    b630:	mov	r4, r1
    b632:	mov	r6, r0
    b634:	bl	afe4 <__malloc_lock>
    b638:	ldr	r3, [r7, #8]
    b63a:	ldr	r5, [r3, #4]
    b63c:	bic.w	r5, r5, #3
    b640:	subs	r1, r5, r4
    b642:	addw	r1, r1, #4079	; 0xfef
    b646:	bic.w	r1, r1, #4080	; 0xff0
    b64a:	bic.w	r1, r1, #15
    b64e:	sub.w	r4, r1, #4096	; 0x1000
    b652:	cmp.w	r4, #4096	; 0x1000
    b656:	blt.n	b668 <_malloc_trim_r+0x3c>
    b658:	movs	r1, #0
    b65a:	mov	r0, r6
    b65c:	bl	b3cc <_sbrk_r>
    b660:	ldr	r3, [r7, #8]
    b662:	add	r3, r5
    b664:	cmp	r0, r3
    b666:	beq.n	b672 <_malloc_trim_r+0x46>
    b668:	mov	r0, r6
    b66a:	bl	afe8 <__malloc_unlock>
    b66e:	movs	r0, #0
    b670:	pop	{r3, r4, r5, r6, r7, pc}
    b672:	negs	r1, r4
    b674:	mov	r0, r6
    b676:	bl	b3cc <_sbrk_r>
    b67a:	adds	r0, #1
    b67c:	beq.n	b69a <_malloc_trim_r+0x6e>
    b67e:	ldr	r3, [pc, #64]	; (b6c0 <_malloc_trim_r+0x94>)
    b680:	ldr	r2, [r7, #8]
    b682:	ldr	r1, [r3, #0]
    b684:	subs	r5, r5, r4
    b686:	orr.w	r5, r5, #1
    b68a:	mov	r0, r6
    b68c:	subs	r1, r1, r4
    b68e:	str	r5, [r2, #4]
    b690:	str	r1, [r3, #0]
    b692:	bl	afe8 <__malloc_unlock>
    b696:	movs	r0, #1
    b698:	pop	{r3, r4, r5, r6, r7, pc}
    b69a:	movs	r1, #0
    b69c:	mov	r0, r6
    b69e:	bl	b3cc <_sbrk_r>
    b6a2:	ldr	r2, [r7, #8]
    b6a4:	subs	r3, r0, r2
    b6a6:	cmp	r3, #15
    b6a8:	ble.n	b668 <_malloc_trim_r+0x3c>
    b6aa:	ldr	r4, [pc, #24]	; (b6c4 <_malloc_trim_r+0x98>)
    b6ac:	ldr	r1, [pc, #16]	; (b6c0 <_malloc_trim_r+0x94>)
    b6ae:	ldr	r4, [r4, #0]
    b6b0:	orr.w	r3, r3, #1
    b6b4:	subs	r0, r0, r4
    b6b6:	str	r3, [r2, #4]
    b6b8:	str	r0, [r1, #0]
    b6ba:	b.n	b668 <_malloc_trim_r+0x3c>
    b6bc:	.word	0x20001628
    b6c0:	.word	0x20002700
    b6c4:	.word	0x20001a34

0000b6c8 <_free_r>:
    b6c8:	cmp	r1, #0
    b6ca:	beq.n	b758 <_free_r+0x90>
    b6cc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6d0:	mov	r5, r1
    b6d2:	mov	r8, r0
    b6d4:	bl	afe4 <__malloc_lock>
    b6d8:	ldr.w	r7, [r5, #-4]
    b6dc:	ldr	r1, [pc, #424]	; (b888 <_free_r+0x1c0>)
    b6de:	bic.w	r3, r7, #1
    b6e2:	sub.w	r4, r5, #8
    b6e6:	adds	r2, r4, r3
    b6e8:	ldr	r6, [r1, #8]
    b6ea:	ldr	r0, [r2, #4]
    b6ec:	cmp	r2, r6
    b6ee:	bic.w	r0, r0, #3
    b6f2:	beq.n	b7ba <_free_r+0xf2>
    b6f4:	lsls	r6, r7, #31
    b6f6:	str	r0, [r2, #4]
    b6f8:	bmi.n	b712 <_free_r+0x4a>
    b6fa:	ldr.w	r7, [r5, #-8]
    b6fe:	subs	r4, r4, r7
    b700:	add.w	lr, r1, #8
    b704:	ldr	r5, [r4, #8]
    b706:	cmp	r5, lr
    b708:	add	r3, r7
    b70a:	beq.n	b7ec <_free_r+0x124>
    b70c:	ldr	r7, [r4, #12]
    b70e:	str	r7, [r5, #12]
    b710:	str	r5, [r7, #8]
    b712:	adds	r5, r2, r0
    b714:	ldr	r5, [r5, #4]
    b716:	lsls	r5, r5, #31
    b718:	bpl.n	b7a0 <_free_r+0xd8>
    b71a:	orr.w	r2, r3, #1
    b71e:	str	r2, [r4, #4]
    b720:	str	r3, [r4, r3]
    b722:	cmp.w	r3, #512	; 0x200
    b726:	bcs.n	b75a <_free_r+0x92>
    b728:	lsrs	r3, r3, #3
    b72a:	adds	r2, r3, #1
    b72c:	ldr	r5, [r1, #4]
    b72e:	ldr.w	r7, [r1, r2, lsl #3]
    b732:	str	r7, [r4, #8]
    b734:	movs	r0, #1
    b736:	asrs	r3, r3, #2
    b738:	lsl.w	r3, r0, r3
    b73c:	add.w	r0, r1, r2, lsl #3
    b740:	orrs	r5, r3
    b742:	subs	r0, #8
    b744:	str	r0, [r4, #12]
    b746:	str	r5, [r1, #4]
    b748:	str.w	r4, [r1, r2, lsl #3]
    b74c:	str	r4, [r7, #12]
    b74e:	mov	r0, r8
    b750:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b754:	b.w	afe8 <__malloc_unlock>
    b758:	bx	lr
    b75a:	lsrs	r2, r3, #9
    b75c:	cmp	r2, #4
    b75e:	bhi.n	b808 <_free_r+0x140>
    b760:	lsrs	r2, r3, #6
    b762:	add.w	r7, r2, #57	; 0x39
    b766:	lsls	r7, r7, #1
    b768:	add.w	r5, r2, #56	; 0x38
    b76c:	add.w	r0, r1, r7, lsl #2
    b770:	ldr.w	r2, [r1, r7, lsl #2]
    b774:	ldr	r1, [pc, #272]	; (b888 <_free_r+0x1c0>)
    b776:	subs	r0, #8
    b778:	cmp	r0, r2
    b77a:	beq.n	b818 <_free_r+0x150>
    b77c:	ldr	r1, [r2, #4]
    b77e:	bic.w	r1, r1, #3
    b782:	cmp	r3, r1
    b784:	bcs.n	b78c <_free_r+0xc4>
    b786:	ldr	r2, [r2, #8]
    b788:	cmp	r0, r2
    b78a:	bne.n	b77c <_free_r+0xb4>
    b78c:	ldr	r0, [r2, #12]
    b78e:	str	r0, [r4, #12]
    b790:	str	r2, [r4, #8]
    b792:	str	r4, [r0, #8]
    b794:	str	r4, [r2, #12]
    b796:	mov	r0, r8
    b798:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b79c:	b.w	afe8 <__malloc_unlock>
    b7a0:	ldr	r5, [r2, #8]
    b7a2:	ldr	r7, [pc, #232]	; (b88c <_free_r+0x1c4>)
    b7a4:	cmp	r5, r7
    b7a6:	add	r3, r0
    b7a8:	beq.n	b82a <_free_r+0x162>
    b7aa:	ldr	r0, [r2, #12]
    b7ac:	str	r0, [r5, #12]
    b7ae:	orr.w	r2, r3, #1
    b7b2:	str	r5, [r0, #8]
    b7b4:	str	r2, [r4, #4]
    b7b6:	str	r3, [r4, r3]
    b7b8:	b.n	b722 <_free_r+0x5a>
    b7ba:	lsls	r7, r7, #31
    b7bc:	add	r3, r0
    b7be:	bmi.n	b7d0 <_free_r+0x108>
    b7c0:	ldr.w	r2, [r5, #-8]
    b7c4:	subs	r4, r4, r2
    b7c6:	add	r3, r2
    b7c8:	ldr	r0, [r4, #8]
    b7ca:	ldr	r2, [r4, #12]
    b7cc:	str	r2, [r0, #12]
    b7ce:	str	r0, [r2, #8]
    b7d0:	ldr	r2, [pc, #188]	; (b890 <_free_r+0x1c8>)
    b7d2:	ldr	r2, [r2, #0]
    b7d4:	orr.w	r0, r3, #1
    b7d8:	cmp	r3, r2
    b7da:	str	r0, [r4, #4]
    b7dc:	str	r4, [r1, #8]
    b7de:	bcc.n	b74e <_free_r+0x86>
    b7e0:	ldr	r3, [pc, #176]	; (b894 <_free_r+0x1cc>)
    b7e2:	mov	r0, r8
    b7e4:	ldr	r1, [r3, #0]
    b7e6:	bl	b62c <_malloc_trim_r>
    b7ea:	b.n	b74e <_free_r+0x86>
    b7ec:	adds	r1, r2, r0
    b7ee:	ldr	r1, [r1, #4]
    b7f0:	lsls	r1, r1, #31
    b7f2:	bmi.n	b87e <_free_r+0x1b6>
    b7f4:	ldr	r1, [r2, #8]
    b7f6:	ldr	r2, [r2, #12]
    b7f8:	str	r2, [r1, #12]
    b7fa:	add	r3, r0
    b7fc:	orr.w	r0, r3, #1
    b800:	str	r1, [r2, #8]
    b802:	str	r0, [r4, #4]
    b804:	str	r3, [r4, r3]
    b806:	b.n	b74e <_free_r+0x86>
    b808:	cmp	r2, #20
    b80a:	bhi.n	b83c <_free_r+0x174>
    b80c:	add.w	r7, r2, #92	; 0x5c
    b810:	lsls	r7, r7, #1
    b812:	add.w	r5, r2, #91	; 0x5b
    b816:	b.n	b76c <_free_r+0xa4>
    b818:	asrs	r2, r5, #2
    b81a:	ldr	r3, [r1, #4]
    b81c:	movs	r5, #1
    b81e:	lsl.w	r2, r5, r2
    b822:	orrs	r3, r2
    b824:	str	r3, [r1, #4]
    b826:	mov	r2, r0
    b828:	b.n	b78e <_free_r+0xc6>
    b82a:	orr.w	r2, r3, #1
    b82e:	str	r4, [r1, #20]
    b830:	str	r4, [r1, #16]
    b832:	str	r5, [r4, #12]
    b834:	str	r5, [r4, #8]
    b836:	str	r2, [r4, #4]
    b838:	str	r3, [r4, r3]
    b83a:	b.n	b74e <_free_r+0x86>
    b83c:	cmp	r2, #84	; 0x54
    b83e:	bhi.n	b84e <_free_r+0x186>
    b840:	lsrs	r2, r3, #12
    b842:	add.w	r7, r2, #111	; 0x6f
    b846:	lsls	r7, r7, #1
    b848:	add.w	r5, r2, #110	; 0x6e
    b84c:	b.n	b76c <_free_r+0xa4>
    b84e:	cmp.w	r2, #340	; 0x154
    b852:	bhi.n	b862 <_free_r+0x19a>
    b854:	lsrs	r2, r3, #15
    b856:	add.w	r7, r2, #120	; 0x78
    b85a:	lsls	r7, r7, #1
    b85c:	add.w	r5, r2, #119	; 0x77
    b860:	b.n	b76c <_free_r+0xa4>
    b862:	movw	r0, #1364	; 0x554
    b866:	cmp	r2, r0
    b868:	bhi.n	b878 <_free_r+0x1b0>
    b86a:	lsrs	r2, r3, #18
    b86c:	add.w	r7, r2, #125	; 0x7d
    b870:	lsls	r7, r7, #1
    b872:	add.w	r5, r2, #124	; 0x7c
    b876:	b.n	b76c <_free_r+0xa4>
    b878:	movs	r7, #254	; 0xfe
    b87a:	movs	r5, #126	; 0x7e
    b87c:	b.n	b76c <_free_r+0xa4>
    b87e:	orr.w	r2, r3, #1
    b882:	str	r2, [r4, #4]
    b884:	str	r3, [r4, r3]
    b886:	b.n	b74e <_free_r+0x86>
    b888:	.word	0x20001628
    b88c:	.word	0x20001630
    b890:	.word	0x20001a30
    b894:	.word	0x200026fc

0000b898 <_localeconv_r>:
    b898:	ldr	r2, [pc, #16]	; (b8ac <_localeconv_r+0x14>)
    b89a:	ldr	r3, [pc, #20]	; (b8b0 <_localeconv_r+0x18>)
    b89c:	ldr	r2, [r2, #0]
    b89e:	ldr	r0, [r2, #52]	; 0x34
    b8a0:	cmp	r0, #0
    b8a2:	it	eq
    b8a4:	moveq	r0, r3
    b8a6:	adds	r0, #240	; 0xf0
    b8a8:	bx	lr
    b8aa:	nop
    b8ac:	.word	0x200014b8
    b8b0:	.word	0x200014bc
	...

0000b8c0 <memchr>:
    b8c0:	and.w	r1, r1, #255	; 0xff
    b8c4:	cmp	r2, #16
    b8c6:	blt.n	b920 <memchr+0x60>
    b8c8:	tst.w	r0, #7
    b8cc:	beq.n	b8e0 <memchr+0x20>
    b8ce:	ldrb.w	r3, [r0], #1
    b8d2:	subs	r2, #1
    b8d4:	cmp	r3, r1
    b8d6:	beq.n	b934 <memchr+0x74>
    b8d8:	tst.w	r0, #7
    b8dc:	cbz	r2, b930 <memchr+0x70>
    b8de:	bne.n	b8ce <memchr+0xe>
    b8e0:	push	{r4, r5, r6, r7}
    b8e2:	orr.w	r1, r1, r1, lsl #8
    b8e6:	orr.w	r1, r1, r1, lsl #16
    b8ea:	bic.w	r4, r2, #7
    b8ee:	mvns.w	r7, #0
    b8f2:	movs	r3, #0
    b8f4:	ldrd	r5, r6, [r0], #8
    b8f8:	subs	r4, #8
    b8fa:	eor.w	r5, r5, r1
    b8fe:	eor.w	r6, r6, r1
    b902:	uadd8	r5, r5, r7
    b906:	sel	r5, r3, r7
    b90a:	uadd8	r6, r6, r7
    b90e:	sel	r6, r5, r7
    b912:	cbnz	r6, b938 <memchr+0x78>
    b914:	bne.n	b8f4 <memchr+0x34>
    b916:	pop	{r4, r5, r6, r7}
    b918:	and.w	r1, r1, #255	; 0xff
    b91c:	and.w	r2, r2, #7
    b920:	cbz	r2, b930 <memchr+0x70>
    b922:	ldrb.w	r3, [r0], #1
    b926:	subs	r2, #1
    b928:	eor.w	r3, r3, r1
    b92c:	cbz	r3, b934 <memchr+0x74>
    b92e:	bne.n	b922 <memchr+0x62>
    b930:	movs	r0, #0
    b932:	bx	lr
    b934:	subs	r0, #1
    b936:	bx	lr
    b938:	cmp	r5, #0
    b93a:	itte	eq
    b93c:	moveq	r5, r6
    b93e:	subeq	r0, #3
    b940:	subne	r0, #7
    b942:	tst.w	r5, #1
    b946:	bne.n	b958 <memchr+0x98>
    b948:	adds	r0, #1
    b94a:	tst.w	r5, #256	; 0x100
    b94e:	ittt	eq
    b950:	addeq	r0, #1
    b952:	tsteq.w	r5, #98304	; 0x18000
    b956:	addeq	r0, #1
    b958:	pop	{r4, r5, r6, r7}
    b95a:	subs	r0, #1
    b95c:	bx	lr
    b95e:	nop

0000b960 <_Balloc>:
    b960:	ldr	r3, [r0, #76]	; 0x4c
    b962:	push	{r4, r5, r6, lr}
    b964:	mov	r5, r0
    b966:	mov	r4, r1
    b968:	cbz	r3, b97e <_Balloc+0x1e>
    b96a:	ldr.w	r0, [r3, r4, lsl #2]
    b96e:	cbz	r0, b992 <_Balloc+0x32>
    b970:	ldr	r2, [r0, #0]
    b972:	str.w	r2, [r3, r4, lsl #2]
    b976:	movs	r3, #0
    b978:	str	r3, [r0, #16]
    b97a:	str	r3, [r0, #12]
    b97c:	pop	{r4, r5, r6, pc}
    b97e:	movs	r2, #33	; 0x21
    b980:	movs	r1, #4
    b982:	bl	a7fc <_calloc_r>
    b986:	str	r0, [r5, #76]	; 0x4c
    b988:	mov	r3, r0
    b98a:	cmp	r0, #0
    b98c:	bne.n	b96a <_Balloc+0xa>
    b98e:	movs	r0, #0
    b990:	pop	{r4, r5, r6, pc}
    b992:	movs	r1, #1
    b994:	lsl.w	r6, r1, r4
    b998:	adds	r2, r6, #5
    b99a:	mov	r0, r5
    b99c:	lsls	r2, r2, #2
    b99e:	bl	a7fc <_calloc_r>
    b9a2:	cmp	r0, #0
    b9a4:	beq.n	b98e <_Balloc+0x2e>
    b9a6:	str	r4, [r0, #4]
    b9a8:	str	r6, [r0, #8]
    b9aa:	b.n	b976 <_Balloc+0x16>

0000b9ac <_Bfree>:
    b9ac:	cbz	r1, b9bc <_Bfree+0x10>
    b9ae:	ldr	r3, [r0, #76]	; 0x4c
    b9b0:	ldr	r2, [r1, #4]
    b9b2:	ldr.w	r0, [r3, r2, lsl #2]
    b9b6:	str	r0, [r1, #0]
    b9b8:	str.w	r1, [r3, r2, lsl #2]
    b9bc:	bx	lr
    b9be:	nop

0000b9c0 <__multadd>:
    b9c0:	push	{r4, r5, r6, r7, lr}
    b9c2:	ldr	r4, [r1, #16]
    b9c4:	sub	sp, #12
    b9c6:	mov	r5, r1
    b9c8:	mov	r6, r0
    b9ca:	add.w	lr, r1, #20
    b9ce:	movs	r7, #0
    b9d0:	ldr.w	r0, [lr]
    b9d4:	uxth	r1, r0
    b9d6:	mla	r1, r2, r1, r3
    b9da:	lsrs	r3, r1, #16
    b9dc:	lsrs	r0, r0, #16
    b9de:	mla	r3, r2, r0, r3
    b9e2:	uxth	r1, r1
    b9e4:	adds	r7, #1
    b9e6:	add.w	r1, r1, r3, lsl #16
    b9ea:	cmp	r4, r7
    b9ec:	str.w	r1, [lr], #4
    b9f0:	mov.w	r3, r3, lsr #16
    b9f4:	bgt.n	b9d0 <__multadd+0x10>
    b9f6:	cbz	r3, ba08 <__multadd+0x48>
    b9f8:	ldr	r2, [r5, #8]
    b9fa:	cmp	r4, r2
    b9fc:	bge.n	ba0e <__multadd+0x4e>
    b9fe:	add.w	r2, r5, r4, lsl #2
    ba02:	adds	r4, #1
    ba04:	str	r3, [r2, #20]
    ba06:	str	r4, [r5, #16]
    ba08:	mov	r0, r5
    ba0a:	add	sp, #12
    ba0c:	pop	{r4, r5, r6, r7, pc}
    ba0e:	ldr	r1, [r5, #4]
    ba10:	str	r3, [sp, #4]
    ba12:	adds	r1, #1
    ba14:	mov	r0, r6
    ba16:	bl	b960 <_Balloc>
    ba1a:	ldr	r2, [r5, #16]
    ba1c:	adds	r2, #2
    ba1e:	add.w	r1, r5, #12
    ba22:	mov	r7, r0
    ba24:	lsls	r2, r2, #2
    ba26:	adds	r0, #12
    ba28:	bl	7dfc <memcpy>
    ba2c:	ldr	r2, [r6, #76]	; 0x4c
    ba2e:	ldr	r1, [r5, #4]
    ba30:	ldr	r3, [sp, #4]
    ba32:	ldr.w	r0, [r2, r1, lsl #2]
    ba36:	str	r0, [r5, #0]
    ba38:	str.w	r5, [r2, r1, lsl #2]
    ba3c:	mov	r5, r7
    ba3e:	b.n	b9fe <__multadd+0x3e>

0000ba40 <__hi0bits>:
    ba40:	lsrs	r3, r0, #16
    ba42:	lsls	r3, r3, #16
    ba44:	cbnz	r3, ba74 <__hi0bits+0x34>
    ba46:	lsls	r0, r0, #16
    ba48:	movs	r3, #16
    ba4a:	tst.w	r0, #4278190080	; 0xff000000
    ba4e:	itt	eq
    ba50:	lsleq	r0, r0, #8
    ba52:	addeq	r3, #8
    ba54:	tst.w	r0, #4026531840	; 0xf0000000
    ba58:	itt	eq
    ba5a:	lsleq	r0, r0, #4
    ba5c:	addeq	r3, #4
    ba5e:	tst.w	r0, #3221225472	; 0xc0000000
    ba62:	itt	eq
    ba64:	lsleq	r0, r0, #2
    ba66:	addeq	r3, #2
    ba68:	cmp	r0, #0
    ba6a:	blt.n	ba7c <__hi0bits+0x3c>
    ba6c:	lsls	r2, r0, #1
    ba6e:	bmi.n	ba78 <__hi0bits+0x38>
    ba70:	movs	r0, #32
    ba72:	bx	lr
    ba74:	movs	r3, #0
    ba76:	b.n	ba4a <__hi0bits+0xa>
    ba78:	adds	r0, r3, #1
    ba7a:	bx	lr
    ba7c:	mov	r0, r3
    ba7e:	bx	lr

0000ba80 <__lo0bits>:
    ba80:	ldr	r3, [r0, #0]
    ba82:	ands.w	r2, r3, #7
    ba86:	beq.n	ba98 <__lo0bits+0x18>
    ba88:	lsls	r1, r3, #31
    ba8a:	bmi.n	bace <__lo0bits+0x4e>
    ba8c:	lsls	r2, r3, #30
    ba8e:	bmi.n	bad2 <__lo0bits+0x52>
    ba90:	lsrs	r3, r3, #2
    ba92:	str	r3, [r0, #0]
    ba94:	movs	r0, #2
    ba96:	bx	lr
    ba98:	uxth	r1, r3
    ba9a:	cbnz	r1, baa0 <__lo0bits+0x20>
    ba9c:	lsrs	r3, r3, #16
    ba9e:	movs	r2, #16
    baa0:	tst.w	r3, #255	; 0xff
    baa4:	itt	eq
    baa6:	lsreq	r3, r3, #8
    baa8:	addeq	r2, #8
    baaa:	lsls	r1, r3, #28
    baac:	itt	eq
    baae:	lsreq	r3, r3, #4
    bab0:	addeq	r2, #4
    bab2:	lsls	r1, r3, #30
    bab4:	itt	eq
    bab6:	lsreq	r3, r3, #2
    bab8:	addeq	r2, #2
    baba:	lsls	r1, r3, #31
    babc:	bmi.n	bac8 <__lo0bits+0x48>
    babe:	lsrs	r3, r3, #1
    bac0:	bne.n	bac6 <__lo0bits+0x46>
    bac2:	movs	r0, #32
    bac4:	bx	lr
    bac6:	adds	r2, #1
    bac8:	str	r3, [r0, #0]
    baca:	mov	r0, r2
    bacc:	bx	lr
    bace:	movs	r0, #0
    bad0:	bx	lr
    bad2:	lsrs	r3, r3, #1
    bad4:	str	r3, [r0, #0]
    bad6:	movs	r0, #1
    bad8:	bx	lr
    bada:	nop

0000badc <__i2b>:
    badc:	push	{r4, lr}
    bade:	mov	r4, r1
    bae0:	movs	r1, #1
    bae2:	bl	b960 <_Balloc>
    bae6:	movs	r2, #1
    bae8:	str	r4, [r0, #20]
    baea:	str	r2, [r0, #16]
    baec:	pop	{r4, pc}
    baee:	nop

0000baf0 <__multiply>:
    baf0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    baf4:	ldr	r5, [r1, #16]
    baf6:	ldr	r7, [r2, #16]
    baf8:	cmp	r5, r7
    bafa:	sub	sp, #12
    bafc:	mov	r4, r1
    bafe:	mov	r6, r2
    bb00:	bge.n	bb0c <__multiply+0x1c>
    bb02:	mov	r2, r5
    bb04:	mov	r4, r6
    bb06:	mov	r5, r7
    bb08:	mov	r6, r1
    bb0a:	mov	r7, r2
    bb0c:	ldr	r3, [r4, #8]
    bb0e:	ldr	r1, [r4, #4]
    bb10:	add.w	r8, r5, r7
    bb14:	cmp	r8, r3
    bb16:	it	gt
    bb18:	addgt	r1, #1
    bb1a:	bl	b960 <_Balloc>
    bb1e:	add.w	ip, r0, #20
    bb22:	add.w	r9, ip, r8, lsl #2
    bb26:	cmp	ip, r9
    bb28:	str	r0, [sp, #0]
    bb2a:	bcs.n	bb38 <__multiply+0x48>
    bb2c:	mov	r3, ip
    bb2e:	movs	r1, #0
    bb30:	str.w	r1, [r3], #4
    bb34:	cmp	r9, r3
    bb36:	bhi.n	bb30 <__multiply+0x40>
    bb38:	add.w	r2, r6, #20
    bb3c:	add.w	sl, r2, r7, lsl #2
    bb40:	add.w	r3, r4, #20
    bb44:	cmp	r2, sl
    bb46:	add.w	lr, r3, r5, lsl #2
    bb4a:	bcs.n	bbf6 <__multiply+0x106>
    bb4c:	str.w	r9, [sp, #4]
    bb50:	mov	r9, r3
    bb52:	ldr.w	r3, [r2], #4
    bb56:	uxth.w	fp, r3
    bb5a:	cmp.w	fp, #0
    bb5e:	beq.n	bba2 <__multiply+0xb2>
    bb60:	movs	r0, #0
    bb62:	mov	r7, r9
    bb64:	mov	r6, ip
    bb66:	mov	r5, r0
    bb68:	b.n	bb6c <__multiply+0x7c>
    bb6a:	mov	r6, r3
    bb6c:	ldr.w	r4, [r7], #4
    bb70:	ldr	r0, [r6, #0]
    bb72:	uxth	r1, r4
    bb74:	uxth	r3, r0
    bb76:	mla	r1, fp, r1, r3
    bb7a:	lsrs	r4, r4, #16
    bb7c:	lsrs	r0, r0, #16
    bb7e:	adds	r3, r1, r5
    bb80:	mla	r0, fp, r4, r0
    bb84:	add.w	r0, r0, r3, lsr #16
    bb88:	uxth	r1, r3
    bb8a:	mov	r3, r6
    bb8c:	orr.w	r1, r1, r0, lsl #16
    bb90:	cmp	lr, r7
    bb92:	mov.w	r5, r0, lsr #16
    bb96:	str.w	r1, [r3], #4
    bb9a:	bhi.n	bb6a <__multiply+0x7a>
    bb9c:	str	r5, [r6, #4]
    bb9e:	ldr.w	r3, [r2, #-4]
    bba2:	movs.w	fp, r3, lsr #16
    bba6:	beq.n	bbea <__multiply+0xfa>
    bba8:	ldr.w	r3, [ip]
    bbac:	mov	r7, ip
    bbae:	mov	r0, r3
    bbb0:	mov	r5, r9
    bbb2:	movs	r1, #0
    bbb4:	b.n	bbb8 <__multiply+0xc8>
    bbb6:	mov	r7, r6
    bbb8:	ldrh	r4, [r5, #0]
    bbba:	lsrs	r0, r0, #16
    bbbc:	mla	r0, fp, r4, r0
    bbc0:	add	r1, r0
    bbc2:	uxth	r4, r3
    bbc4:	mov	r6, r7
    bbc6:	orr.w	r3, r4, r1, lsl #16
    bbca:	str.w	r3, [r6], #4
    bbce:	ldr	r0, [r7, #4]
    bbd0:	ldr.w	r4, [r5], #4
    bbd4:	uxth	r3, r0
    bbd6:	lsrs	r4, r4, #16
    bbd8:	mla	r4, fp, r4, r3
    bbdc:	add.w	r3, r4, r1, lsr #16
    bbe0:	cmp	lr, r5
    bbe2:	mov.w	r1, r3, lsr #16
    bbe6:	bhi.n	bbb6 <__multiply+0xc6>
    bbe8:	str	r3, [r7, #4]
    bbea:	cmp	sl, r2
    bbec:	add.w	ip, ip, #4
    bbf0:	bhi.n	bb52 <__multiply+0x62>
    bbf2:	ldr.w	r9, [sp, #4]
    bbf6:	cmp.w	r8, #0
    bbfa:	ble.n	bc14 <__multiply+0x124>
    bbfc:	ldr.w	r3, [r9, #-4]
    bc00:	sub.w	r9, r9, #4
    bc04:	cbz	r3, bc0e <__multiply+0x11e>
    bc06:	b.n	bc14 <__multiply+0x124>
    bc08:	ldr.w	r3, [r9, #-4]!
    bc0c:	cbnz	r3, bc14 <__multiply+0x124>
    bc0e:	subs.w	r8, r8, #1
    bc12:	bne.n	bc08 <__multiply+0x118>
    bc14:	ldr	r0, [sp, #0]
    bc16:	str.w	r8, [r0, #16]
    bc1a:	add	sp, #12
    bc1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bc20 <__pow5mult>:
    bc20:	ands.w	r3, r2, #3
    bc24:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc28:	mov	r4, r2
    bc2a:	mov	r7, r0
    bc2c:	bne.n	bc8c <__pow5mult+0x6c>
    bc2e:	mov	r6, r1
    bc30:	asrs	r4, r4, #2
    bc32:	beq.n	bc6e <__pow5mult+0x4e>
    bc34:	ldr	r5, [r7, #72]	; 0x48
    bc36:	cbz	r5, bc9e <__pow5mult+0x7e>
    bc38:	lsls	r3, r4, #31
    bc3a:	mov.w	r8, #0
    bc3e:	bmi.n	bc4e <__pow5mult+0x2e>
    bc40:	asrs	r4, r4, #1
    bc42:	beq.n	bc6e <__pow5mult+0x4e>
    bc44:	ldr	r0, [r5, #0]
    bc46:	cbz	r0, bc74 <__pow5mult+0x54>
    bc48:	mov	r5, r0
    bc4a:	lsls	r3, r4, #31
    bc4c:	bpl.n	bc40 <__pow5mult+0x20>
    bc4e:	mov	r2, r5
    bc50:	mov	r1, r6
    bc52:	mov	r0, r7
    bc54:	bl	baf0 <__multiply>
    bc58:	cbz	r6, bc88 <__pow5mult+0x68>
    bc5a:	ldr	r2, [r6, #4]
    bc5c:	ldr	r3, [r7, #76]	; 0x4c
    bc5e:	asrs	r4, r4, #1
    bc60:	ldr.w	r1, [r3, r2, lsl #2]
    bc64:	str	r1, [r6, #0]
    bc66:	str.w	r6, [r3, r2, lsl #2]
    bc6a:	mov	r6, r0
    bc6c:	bne.n	bc44 <__pow5mult+0x24>
    bc6e:	mov	r0, r6
    bc70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc74:	mov	r2, r5
    bc76:	mov	r1, r5
    bc78:	mov	r0, r7
    bc7a:	bl	baf0 <__multiply>
    bc7e:	str	r0, [r5, #0]
    bc80:	str.w	r8, [r0]
    bc84:	mov	r5, r0
    bc86:	b.n	bc4a <__pow5mult+0x2a>
    bc88:	mov	r6, r0
    bc8a:	b.n	bc40 <__pow5mult+0x20>
    bc8c:	subs	r2, r3, #1
    bc8e:	ldr	r5, [pc, #44]	; (bcbc <__pow5mult+0x9c>)
    bc90:	movs	r3, #0
    bc92:	ldr.w	r2, [r5, r2, lsl #2]
    bc96:	bl	b9c0 <__multadd>
    bc9a:	mov	r6, r0
    bc9c:	b.n	bc30 <__pow5mult+0x10>
    bc9e:	movs	r1, #1
    bca0:	mov	r0, r7
    bca2:	bl	b960 <_Balloc>
    bca6:	movw	r1, #625	; 0x271
    bcaa:	movs	r2, #1
    bcac:	movs	r3, #0
    bcae:	str	r1, [r0, #20]
    bcb0:	str	r2, [r0, #16]
    bcb2:	mov	r5, r0
    bcb4:	str	r0, [r7, #72]	; 0x48
    bcb6:	str	r3, [r0, #0]
    bcb8:	b.n	bc38 <__pow5mult+0x18>
    bcba:	nop
    bcbc:	.word	0x20000e90

0000bcc0 <__lshift>:
    bcc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bcc4:	mov	r9, r2
    bcc6:	ldr	r2, [r1, #16]
    bcc8:	ldr	r3, [r1, #8]
    bcca:	mov.w	r4, r9, asr #5
    bcce:	add.w	r8, r4, r2
    bcd2:	add.w	r5, r8, #1
    bcd6:	cmp	r5, r3
    bcd8:	mov	r6, r1
    bcda:	mov	sl, r0
    bcdc:	ldr	r1, [r1, #4]
    bcde:	ble.n	bcea <__lshift+0x2a>
    bce0:	lsls	r3, r3, #1
    bce2:	cmp	r5, r3
    bce4:	add.w	r1, r1, #1
    bce8:	bgt.n	bce0 <__lshift+0x20>
    bcea:	mov	r0, sl
    bcec:	bl	b960 <_Balloc>
    bcf0:	cmp	r4, #0
    bcf2:	add.w	r2, r0, #20
    bcf6:	ble.n	bd6a <__lshift+0xaa>
    bcf8:	add.w	r3, r2, r4, lsl #2
    bcfc:	movs	r1, #0
    bcfe:	str.w	r1, [r2], #4
    bd02:	cmp	r3, r2
    bd04:	bne.n	bcfe <__lshift+0x3e>
    bd06:	ldr	r4, [r6, #16]
    bd08:	add.w	r1, r6, #20
    bd0c:	ands.w	r9, r9, #31
    bd10:	add.w	lr, r1, r4, lsl #2
    bd14:	beq.n	bd5a <__lshift+0x9a>
    bd16:	rsb	r2, r9, #32
    bd1a:	movs	r4, #0
    bd1c:	ldr	r7, [r1, #0]
    bd1e:	lsl.w	ip, r7, r9
    bd22:	orr.w	r4, ip, r4
    bd26:	mov	ip, r3
    bd28:	str.w	r4, [r3], #4
    bd2c:	ldr.w	r4, [r1], #4
    bd30:	cmp	lr, r1
    bd32:	lsr.w	r4, r4, r2
    bd36:	bhi.n	bd1c <__lshift+0x5c>
    bd38:	str.w	r4, [ip, #4]
    bd3c:	cbz	r4, bd42 <__lshift+0x82>
    bd3e:	add.w	r5, r8, #2
    bd42:	ldr.w	r3, [sl, #76]	; 0x4c
    bd46:	ldr	r2, [r6, #4]
    bd48:	subs	r5, #1
    bd4a:	ldr.w	r1, [r3, r2, lsl #2]
    bd4e:	str	r5, [r0, #16]
    bd50:	str	r1, [r6, #0]
    bd52:	str.w	r6, [r3, r2, lsl #2]
    bd56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bd5a:	subs	r3, #4
    bd5c:	ldr.w	r2, [r1], #4
    bd60:	str.w	r2, [r3, #4]!
    bd64:	cmp	lr, r1
    bd66:	bhi.n	bd5c <__lshift+0x9c>
    bd68:	b.n	bd42 <__lshift+0x82>
    bd6a:	mov	r3, r2
    bd6c:	b.n	bd06 <__lshift+0x46>
    bd6e:	nop

0000bd70 <__mcmp>:
    bd70:	ldr	r2, [r0, #16]
    bd72:	ldr	r3, [r1, #16]
    bd74:	subs	r2, r2, r3
    bd76:	bne.n	bda0 <__mcmp+0x30>
    bd78:	lsls	r3, r3, #2
    bd7a:	adds	r0, #20
    bd7c:	adds	r1, #20
    bd7e:	add	r1, r3
    bd80:	push	{r4}
    bd82:	add	r3, r0
    bd84:	b.n	bd8a <__mcmp+0x1a>
    bd86:	cmp	r0, r3
    bd88:	bcs.n	bda4 <__mcmp+0x34>
    bd8a:	ldr.w	r4, [r3, #-4]!
    bd8e:	ldr.w	r2, [r1, #-4]!
    bd92:	cmp	r4, r2
    bd94:	beq.n	bd86 <__mcmp+0x16>
    bd96:	bcc.n	bdac <__mcmp+0x3c>
    bd98:	movs	r0, #1
    bd9a:	ldr.w	r4, [sp], #4
    bd9e:	bx	lr
    bda0:	mov	r0, r2
    bda2:	bx	lr
    bda4:	movs	r0, #0
    bda6:	ldr.w	r4, [sp], #4
    bdaa:	bx	lr
    bdac:	mov.w	r0, #4294967295
    bdb0:	b.n	bd9a <__mcmp+0x2a>
    bdb2:	nop

0000bdb4 <__mdiff>:
    bdb4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bdb8:	ldr	r3, [r1, #16]
    bdba:	mov	r7, r1
    bdbc:	ldr	r1, [r2, #16]
    bdbe:	subs	r3, r3, r1
    bdc0:	cmp	r3, #0
    bdc2:	mov	r8, r2
    bdc4:	bne.n	bdf6 <__mdiff+0x42>
    bdc6:	lsls	r1, r1, #2
    bdc8:	add.w	r2, r7, #20
    bdcc:	add.w	r5, r8, #20
    bdd0:	adds	r3, r2, r1
    bdd2:	add	r1, r5
    bdd4:	b.n	bdda <__mdiff+0x26>
    bdd6:	cmp	r2, r3
    bdd8:	bcs.n	be98 <__mdiff+0xe4>
    bdda:	ldr.w	r6, [r3, #-4]!
    bdde:	ldr.w	r4, [r1, #-4]!
    bde2:	cmp	r6, r4
    bde4:	beq.n	bdd6 <__mdiff+0x22>
    bde6:	bcs.n	beaa <__mdiff+0xf6>
    bde8:	mov	r3, r7
    bdea:	mov	r4, r2
    bdec:	mov	r7, r8
    bdee:	mov.w	r9, #1
    bdf2:	mov	r8, r3
    bdf4:	b.n	be04 <__mdiff+0x50>
    bdf6:	blt.n	beb4 <__mdiff+0x100>
    bdf8:	add.w	r5, r7, #20
    bdfc:	add.w	r4, r2, #20
    be00:	mov.w	r9, #0
    be04:	ldr	r1, [r7, #4]
    be06:	bl	b960 <_Balloc>
    be0a:	ldr.w	r3, [r8, #16]
    be0e:	ldr	r6, [r7, #16]
    be10:	str.w	r9, [r0, #12]
    be14:	add.w	ip, r4, r3, lsl #2
    be18:	mov	lr, r4
    be1a:	add.w	r7, r5, r6, lsl #2
    be1e:	add.w	r4, r0, #20
    be22:	movs	r3, #0
    be24:	ldr.w	r1, [lr], #4
    be28:	ldr.w	r8, [r5], #4
    be2c:	uxth	r2, r1
    be2e:	uxtah	r3, r3, r8
    be32:	lsrs	r1, r1, #16
    be34:	subs	r2, r3, r2
    be36:	rsb	r3, r1, r8, lsr #16
    be3a:	add.w	r3, r3, r2, asr #16
    be3e:	uxth	r2, r2
    be40:	orr.w	r2, r2, r3, lsl #16
    be44:	cmp	ip, lr
    be46:	str.w	r2, [r4], #4
    be4a:	mov.w	r3, r3, asr #16
    be4e:	bhi.n	be24 <__mdiff+0x70>
    be50:	cmp	r7, r5
    be52:	bls.n	be84 <__mdiff+0xd0>
    be54:	mov	ip, r4
    be56:	mov	r1, r5
    be58:	ldr.w	lr, [r1], #4
    be5c:	uxtah	r2, r3, lr
    be60:	asrs	r3, r2, #16
    be62:	add.w	r3, r3, lr, lsr #16
    be66:	uxth	r2, r2
    be68:	orr.w	r2, r2, r3, lsl #16
    be6c:	cmp	r7, r1
    be6e:	str.w	r2, [ip], #4
    be72:	mov.w	r3, r3, asr #16
    be76:	bhi.n	be58 <__mdiff+0xa4>
    be78:	mvns	r5, r5
    be7a:	add	r5, r7
    be7c:	bic.w	r5, r5, #3
    be80:	adds	r5, #4
    be82:	add	r4, r5
    be84:	subs	r4, #4
    be86:	cbnz	r2, be92 <__mdiff+0xde>
    be88:	ldr.w	r3, [r4, #-4]!
    be8c:	subs	r6, #1
    be8e:	cmp	r3, #0
    be90:	beq.n	be88 <__mdiff+0xd4>
    be92:	str	r6, [r0, #16]
    be94:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    be98:	movs	r1, #0
    be9a:	bl	b960 <_Balloc>
    be9e:	movs	r2, #1
    bea0:	movs	r3, #0
    bea2:	str	r2, [r0, #16]
    bea4:	str	r3, [r0, #20]
    bea6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    beaa:	mov	r4, r5
    beac:	mov.w	r9, #0
    beb0:	mov	r5, r2
    beb2:	b.n	be04 <__mdiff+0x50>
    beb4:	mov	r3, r7
    beb6:	add.w	r4, r7, #20
    beba:	add.w	r5, r8, #20
    bebe:	mov	r7, r8
    bec0:	mov.w	r9, #1
    bec4:	mov	r8, r3
    bec6:	b.n	be04 <__mdiff+0x50>

0000bec8 <__d2b>:
    bec8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    becc:	vmov	r6, r7, d0
    bed0:	sub	sp, #12
    bed2:	mov	r8, r1
    bed4:	movs	r1, #1
    bed6:	mov	r4, r7
    bed8:	ubfx	r5, r7, #20, #11
    bedc:	mov	r7, r2
    bede:	bl	b960 <_Balloc>
    bee2:	ubfx	r4, r4, #0, #20
    bee6:	mov	r9, r0
    bee8:	cbz	r5, beee <__d2b+0x26>
    beea:	orr.w	r4, r4, #1048576	; 0x100000
    beee:	str	r4, [sp, #4]
    bef0:	cbz	r6, bf3a <__d2b+0x72>
    bef2:	add	r0, sp, #8
    bef4:	str.w	r6, [r0, #-8]!
    bef8:	bl	ba80 <__lo0bits>
    befc:	cmp	r0, #0
    befe:	bne.n	bf6a <__d2b+0xa2>
    bf00:	ldmia.w	sp, {r2, r3}
    bf04:	str.w	r2, [r9, #20]
    bf08:	cmp	r3, #0
    bf0a:	ite	eq
    bf0c:	moveq	r1, #1
    bf0e:	movne	r1, #2
    bf10:	str.w	r3, [r9, #24]
    bf14:	str.w	r1, [r9, #16]
    bf18:	cbnz	r5, bf52 <__d2b+0x8a>
    bf1a:	add.w	r3, r9, r1, lsl #2
    bf1e:	subw	r0, r0, #1074	; 0x432
    bf22:	str.w	r0, [r8]
    bf26:	ldr	r0, [r3, #16]
    bf28:	bl	ba40 <__hi0bits>
    bf2c:	rsb	r0, r0, r1, lsl #5
    bf30:	str	r0, [r7, #0]
    bf32:	mov	r0, r9
    bf34:	add	sp, #12
    bf36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bf3a:	add	r0, sp, #4
    bf3c:	bl	ba80 <__lo0bits>
    bf40:	ldr	r3, [sp, #4]
    bf42:	str.w	r3, [r9, #20]
    bf46:	movs	r1, #1
    bf48:	adds	r0, #32
    bf4a:	str.w	r1, [r9, #16]
    bf4e:	cmp	r5, #0
    bf50:	beq.n	bf1a <__d2b+0x52>
    bf52:	subw	r5, r5, #1075	; 0x433
    bf56:	add	r5, r0
    bf58:	rsb	r0, r0, #53	; 0x35
    bf5c:	str.w	r5, [r8]
    bf60:	str	r0, [r7, #0]
    bf62:	mov	r0, r9
    bf64:	add	sp, #12
    bf66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bf6a:	ldmia.w	sp, {r2, r3}
    bf6e:	rsb	r1, r0, #32
    bf72:	lsl.w	r1, r3, r1
    bf76:	orrs	r2, r1
    bf78:	lsrs	r3, r0
    bf7a:	str	r3, [sp, #4]
    bf7c:	str.w	r2, [r9, #20]
    bf80:	b.n	bf08 <__d2b+0x40>
    bf82:	nop

0000bf84 <_vasnprintf_r>:
    bf84:	push	{r4, r5, r6, lr}
    bf86:	mov	r5, r2
    bf88:	sub	sp, #104	; 0x68
    bf8a:	ldr	r4, [r2, #0]
    bf8c:	cbz	r1, bf92 <_vasnprintf_r+0xe>
    bf8e:	cmp	r4, #0
    bf90:	bne.n	bfc8 <_vasnprintf_r+0x44>
    bf92:	movs	r4, #0
    bf94:	mov.w	r2, #648	; 0x288
    bf98:	strh.w	r2, [sp, #12]
    bf9c:	str	r4, [sp, #0]
    bf9e:	str	r4, [sp, #16]
    bfa0:	mov	r2, r3
    bfa2:	movw	r6, #65535	; 0xffff
    bfa6:	ldr	r3, [sp, #120]	; 0x78
    bfa8:	str	r4, [sp, #8]
    bfaa:	mov	r1, sp
    bfac:	str	r4, [sp, #20]
    bfae:	strh.w	r6, [sp, #14]
    bfb2:	bl	cd98 <_svfprintf_r>
    bfb6:	cmp	r0, #0
    bfb8:	blt.n	bfde <_vasnprintf_r+0x5a>
    bfba:	ldr	r3, [sp, #0]
    bfbc:	str	r0, [r5, #0]
    bfbe:	movs	r2, #0
    bfc0:	strb	r2, [r3, #0]
    bfc2:	ldr	r0, [sp, #16]
    bfc4:	add	sp, #104	; 0x68
    bfc6:	pop	{r4, r5, r6, pc}
    bfc8:	mov.w	r2, #1544	; 0x608
    bfcc:	str	r1, [sp, #0]
    bfce:	str	r1, [sp, #16]
    bfd0:	strh.w	r2, [sp, #12]
    bfd4:	bge.n	bfa0 <_vasnprintf_r+0x1c>
    bfd6:	movs	r3, #139	; 0x8b
    bfd8:	str	r3, [r0, #0]
    bfda:	movs	r0, #0
    bfdc:	b.n	bfc4 <_vasnprintf_r+0x40>
    bfde:	movs	r0, #0
    bfe0:	b.n	bfc4 <_vasnprintf_r+0x40>
    bfe2:	nop

0000bfe4 <quorem>:
    bfe4:	ldr	r2, [r0, #16]
    bfe6:	ldr	r3, [r1, #16]
    bfe8:	cmp	r3, r2
    bfea:	bgt.w	c108 <quorem+0x124>
    bfee:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bff2:	add.w	r8, r3, #4294967295
    bff6:	add.w	r7, r1, #20
    bffa:	add.w	fp, r0, #20
    bffe:	ldr.w	r2, [r7, r8, lsl #2]
    c002:	ldr.w	r3, [fp, r8, lsl #2]
    c006:	mov.w	r4, r8, lsl #2
    c00a:	sub	sp, #12
    c00c:	adds	r2, #1
    c00e:	udiv	r9, r3, r2
    c012:	add.w	r3, fp, r4
    c016:	str	r4, [sp, #0]
    c018:	add.w	sl, r7, r4
    c01c:	str	r3, [sp, #4]
    c01e:	cmp.w	r9, #0
    c022:	beq.n	c098 <quorem+0xb4>
    c024:	movs	r5, #0
    c026:	mov	ip, r7
    c028:	mov	lr, fp
    c02a:	mov	r3, r5
    c02c:	ldr.w	r6, [ip], #4
    c030:	ldr.w	r2, [lr]
    c034:	uxth	r4, r6
    c036:	mla	r5, r9, r4, r5
    c03a:	lsrs	r6, r6, #16
    c03c:	lsrs	r4, r5, #16
    c03e:	mla	r4, r9, r6, r4
    c042:	uxth	r5, r5
    c044:	subs	r3, r3, r5
    c046:	uxth	r6, r4
    c048:	uxtah	r3, r3, r2
    c04c:	rsb	r6, r6, r2, lsr #16
    c050:	add.w	r6, r6, r3, asr #16
    c054:	uxth	r3, r3
    c056:	orr.w	r3, r3, r6, lsl #16
    c05a:	cmp	sl, ip
    c05c:	str.w	r3, [lr], #4
    c060:	mov.w	r5, r4, lsr #16
    c064:	mov.w	r3, r6, asr #16
    c068:	bcs.n	c02c <quorem+0x48>
    c06a:	ldr	r3, [sp, #0]
    c06c:	ldr.w	r3, [fp, r3]
    c070:	cbnz	r3, c098 <quorem+0xb4>
    c072:	ldr	r4, [sp, #4]
    c074:	subs	r3, r4, #4
    c076:	cmp	fp, r3
    c078:	bcs.n	c094 <quorem+0xb0>
    c07a:	ldr.w	r3, [r4, #-4]
    c07e:	cbnz	r3, c094 <quorem+0xb0>
    c080:	sub.w	r3, r4, #8
    c084:	b.n	c08c <quorem+0xa8>
    c086:	ldr	r2, [r3, #0]
    c088:	subs	r3, #4
    c08a:	cbnz	r2, c094 <quorem+0xb0>
    c08c:	cmp	fp, r3
    c08e:	add.w	r8, r8, #4294967295
    c092:	bcc.n	c086 <quorem+0xa2>
    c094:	str.w	r8, [r0, #16]
    c098:	mov	r4, r0
    c09a:	bl	bd70 <__mcmp>
    c09e:	cmp	r0, #0
    c0a0:	blt.n	c100 <quorem+0x11c>
    c0a2:	add.w	r9, r9, #1
    c0a6:	mov	r5, fp
    c0a8:	movs	r3, #0
    c0aa:	ldr.w	r1, [r7], #4
    c0ae:	ldr	r0, [r5, #0]
    c0b0:	uxth	r2, r1
    c0b2:	subs	r2, r3, r2
    c0b4:	lsrs	r1, r1, #16
    c0b6:	uxtah	r2, r2, r0
    c0ba:	rsb	r3, r1, r0, lsr #16
    c0be:	add.w	r3, r3, r2, asr #16
    c0c2:	uxth	r1, r2
    c0c4:	orr.w	r1, r1, r3, lsl #16
    c0c8:	cmp	sl, r7
    c0ca:	str.w	r1, [r5], #4
    c0ce:	mov.w	r3, r3, asr #16
    c0d2:	bcs.n	c0aa <quorem+0xc6>
    c0d4:	ldr.w	r2, [fp, r8, lsl #2]
    c0d8:	add.w	r3, fp, r8, lsl #2
    c0dc:	cbnz	r2, c100 <quorem+0x11c>
    c0de:	subs	r2, r3, #4
    c0e0:	cmp	fp, r2
    c0e2:	bcs.n	c0fc <quorem+0x118>
    c0e4:	ldr.w	r2, [r3, #-4]
    c0e8:	cbnz	r2, c0fc <quorem+0x118>
    c0ea:	subs	r3, #8
    c0ec:	b.n	c0f4 <quorem+0x110>
    c0ee:	ldr	r2, [r3, #0]
    c0f0:	subs	r3, #4
    c0f2:	cbnz	r2, c0fc <quorem+0x118>
    c0f4:	cmp	fp, r3
    c0f6:	add.w	r8, r8, #4294967295
    c0fa:	bcc.n	c0ee <quorem+0x10a>
    c0fc:	str.w	r8, [r4, #16]
    c100:	mov	r0, r9
    c102:	add	sp, #12
    c104:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c108:	movs	r0, #0
    c10a:	bx	lr
    c10c:	movs	r0, r0
	...

0000c110 <_dtoa_r>:
    c110:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c114:	vmov	r6, r7, d0
    c118:	sub	sp, #76	; 0x4c
    c11a:	ldr	r5, [r0, #64]	; 0x40
    c11c:	str	r1, [sp, #4]
    c11e:	mov	r4, r0
    c120:	mov	r8, r2
    c122:	str	r3, [sp, #16]
    c124:	vmov	sl, s0
    c128:	mov	fp, r7
    c12a:	cbz	r5, c140 <_dtoa_r+0x30>
    c12c:	ldr	r2, [r0, #68]	; 0x44
    c12e:	str	r2, [r5, #4]
    c130:	movs	r3, #1
    c132:	lsls	r3, r2
    c134:	str	r3, [r5, #8]
    c136:	mov	r1, r5
    c138:	bl	b9ac <_Bfree>
    c13c:	movs	r3, #0
    c13e:	str	r3, [r4, #64]	; 0x40
    c140:	cmp.w	fp, #0
    c144:	mov	r6, fp
    c146:	blt.n	c1b2 <_dtoa_r+0xa2>
    c148:	ldr	r2, [sp, #112]	; 0x70
    c14a:	movs	r3, #0
    c14c:	str	r3, [r2, #0]
    c14e:	ldr	r3, [pc, #784]	; (c460 <_dtoa_r+0x350>)
    c150:	mov	r2, r3
    c152:	ands	r3, r6
    c154:	cmp	r3, r2
    c156:	beq.n	c184 <_dtoa_r+0x74>
    c158:	vmov	d7, sl, fp
    c15c:	vcmp.f64	d7, #0.0
    c160:	vmrs	APSR_nzcv, fpscr
    c164:	strd	sl, fp, [sp, #8]
    c168:	bne.n	c1c0 <_dtoa_r+0xb0>
    c16a:	ldr	r2, [sp, #16]
    c16c:	movs	r3, #1
    c16e:	str	r3, [r2, #0]
    c170:	ldr	r3, [sp, #116]	; 0x74
    c172:	cmp	r3, #0
    c174:	beq.w	c2e6 <_dtoa_r+0x1d6>
    c178:	ldr	r0, [pc, #744]	; (c464 <_dtoa_r+0x354>)
    c17a:	str	r0, [r3, #0]
    c17c:	subs	r0, #1
    c17e:	add	sp, #76	; 0x4c
    c180:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c184:	ldr	r2, [sp, #16]
    c186:	movw	r3, #9999	; 0x270f
    c18a:	str	r3, [r2, #0]
    c18c:	cmp.w	sl, #0
    c190:	beq.w	c2b8 <_dtoa_r+0x1a8>
    c194:	ldr	r0, [pc, #720]	; (c468 <_dtoa_r+0x358>)
    c196:	ldr	r3, [sp, #116]	; 0x74
    c198:	cmp	r3, #0
    c19a:	beq.n	c17e <_dtoa_r+0x6e>
    c19c:	ldrb	r3, [r0, #3]
    c19e:	cmp	r3, #0
    c1a0:	beq.w	c2ea <_dtoa_r+0x1da>
    c1a4:	add.w	r3, r0, #8
    c1a8:	ldr	r2, [sp, #116]	; 0x74
    c1aa:	str	r3, [r2, #0]
    c1ac:	add	sp, #76	; 0x4c
    c1ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1b2:	ldr	r2, [sp, #112]	; 0x70
    c1b4:	movs	r3, #1
    c1b6:	bic.w	r6, fp, #2147483648	; 0x80000000
    c1ba:	str	r3, [r2, #0]
    c1bc:	mov	fp, r6
    c1be:	b.n	c14e <_dtoa_r+0x3e>
    c1c0:	add	r1, sp, #68	; 0x44
    c1c2:	add	r2, sp, #64	; 0x40
    c1c4:	vldr	d0, [sp, #8]
    c1c8:	mov	r0, r4
    c1ca:	bl	bec8 <__d2b>
    c1ce:	lsrs	r1, r6, #20
    c1d0:	str	r0, [sp, #28]
    c1d2:	bne.n	c2ca <_dtoa_r+0x1ba>
    c1d4:	ldr	r0, [sp, #64]	; 0x40
    c1d6:	ldr	r1, [sp, #68]	; 0x44
    c1d8:	add	r1, r0
    c1da:	addw	r3, r1, #1074	; 0x432
    c1de:	cmp	r3, #32
    c1e0:	ble.w	c666 <_dtoa_r+0x556>
    c1e4:	rsb	r3, r3, #64	; 0x40
    c1e8:	addw	r2, r1, #1042	; 0x412
    c1ec:	lsls	r6, r3
    c1ee:	lsr.w	r3, sl, r2
    c1f2:	orrs	r3, r6
    c1f4:	vmov	s15, r3
    c1f8:	vcvt.f64.u32	d7, s15
    c1fc:	movs	r5, #1
    c1fe:	vmov	r2, r3, d7
    c202:	subs	r1, #1
    c204:	sub.w	r3, r3, #32505856	; 0x1f00000
    c208:	str	r5, [sp, #40]	; 0x28
    c20a:	vmov	d7, r2, r3
    c20e:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    c212:	vldr	d4, [pc, #564]	; c448 <_dtoa_r+0x338>
    c216:	vsub.f64	d6, d7, d6
    c21a:	vldr	d7, [pc, #564]	; c450 <_dtoa_r+0x340>
    c21e:	vldr	d5, [pc, #568]	; c458 <_dtoa_r+0x348>
    c222:	vfma.f64	d7, d6, d4
    c226:	vmov	s13, r1
    c22a:	vcvt.f64.s32	d6, s13
    c22e:	vfma.f64	d7, d6, d5
    c232:	vcvt.s32.f64	s13, d7
    c236:	vcmpe.f64	d7, #0.0
    c23a:	vmrs	APSR_nzcv, fpscr
    c23e:	vstr	s13, [sp, #8]
    c242:	bmi.w	c47e <_dtoa_r+0x36e>
    c246:	ldr	r5, [sp, #8]
    c248:	cmp	r5, #22
    c24a:	bhi.w	c478 <_dtoa_r+0x368>
    c24e:	ldr	r3, [pc, #540]	; (c46c <_dtoa_r+0x35c>)
    c250:	add.w	r3, r3, r5, lsl #3
    c254:	vldr	d7, [r3]
    c258:	vmov	d6, sl, fp
    c25c:	vcmpe.f64	d7, d6
    c260:	vmrs	APSR_nzcv, fpscr
    c264:	ble.w	c674 <_dtoa_r+0x564>
    c268:	subs	r3, r5, #1
    c26a:	str	r3, [sp, #8]
    c26c:	movs	r3, #0
    c26e:	str	r3, [sp, #48]	; 0x30
    c270:	subs	r1, r0, r1
    c272:	subs.w	r9, r1, #1
    c276:	bmi.w	c4a8 <_dtoa_r+0x398>
    c27a:	movs	r3, #0
    c27c:	str	r3, [sp, #24]
    c27e:	ldr	r3, [sp, #8]
    c280:	cmp	r3, #0
    c282:	blt.w	c496 <_dtoa_r+0x386>
    c286:	add	r9, r3
    c288:	str	r3, [sp, #44]	; 0x2c
    c28a:	movs	r3, #0
    c28c:	str	r3, [sp, #20]
    c28e:	ldr	r3, [sp, #4]
    c290:	cmp	r3, #9
    c292:	bhi.n	c2ee <_dtoa_r+0x1de>
    c294:	cmp	r3, #5
    c296:	ble.w	cd58 <_dtoa_r+0xc48>
    c29a:	subs	r3, #4
    c29c:	str	r3, [sp, #4]
    c29e:	movs	r3, #0
    c2a0:	str	r3, [sp, #56]	; 0x38
    c2a2:	ldr	r3, [sp, #4]
    c2a4:	subs	r3, #2
    c2a6:	cmp	r3, #3
    c2a8:	bhi.w	cd6a <_dtoa_r+0xc5a>
    c2ac:	tbh	[pc, r3, lsl #1]
    c2b0:	.word	0x01e502a9
    c2b4:	.word	0x03c802b5
    c2b8:	ldr	r3, [pc, #428]	; (c468 <_dtoa_r+0x358>)
    c2ba:	ldr	r2, [pc, #436]	; (c470 <_dtoa_r+0x360>)
    c2bc:	ubfx	r0, r6, #0, #20
    c2c0:	cmp	r0, #0
    c2c2:	ite	ne
    c2c4:	movne	r0, r3
    c2c6:	moveq	r0, r2
    c2c8:	b.n	c196 <_dtoa_r+0x86>
    c2ca:	ldrd	r2, r3, [sp, #8]
    c2ce:	ubfx	r0, r3, #0, #20
    c2d2:	orr.w	r3, r0, #1069547520	; 0x3fc00000
    c2d6:	movs	r5, #0
    c2d8:	subw	r1, r1, #1023	; 0x3ff
    c2dc:	orr.w	r3, r3, #3145728	; 0x300000
    c2e0:	ldr	r0, [sp, #64]	; 0x40
    c2e2:	str	r5, [sp, #40]	; 0x28
    c2e4:	b.n	c20a <_dtoa_r+0xfa>
    c2e6:	ldr	r0, [pc, #396]	; (c474 <_dtoa_r+0x364>)
    c2e8:	b.n	c17e <_dtoa_r+0x6e>
    c2ea:	adds	r3, r0, #3
    c2ec:	b.n	c1a8 <_dtoa_r+0x98>
    c2ee:	movs	r1, #0
    c2f0:	str	r1, [r4, #68]	; 0x44
    c2f2:	mov	r0, r4
    c2f4:	mov	r8, r1
    c2f6:	str	r1, [sp, #4]
    c2f8:	bl	b960 <_Balloc>
    c2fc:	mov.w	r7, #4294967295
    c300:	movs	r3, #1
    c302:	str	r0, [sp, #32]
    c304:	str	r0, [r4, #64]	; 0x40
    c306:	str	r7, [sp, #52]	; 0x34
    c308:	str	r3, [sp, #36]	; 0x24
    c30a:	ldr	r3, [sp, #68]	; 0x44
    c30c:	cmp	r3, #0
    c30e:	blt.n	c406 <_dtoa_r+0x2f6>
    c310:	ldr	r2, [sp, #8]
    c312:	cmp	r2, #14
    c314:	bgt.n	c406 <_dtoa_r+0x2f6>
    c316:	ldr	r3, [pc, #340]	; (c46c <_dtoa_r+0x35c>)
    c318:	cmp.w	r8, #0
    c31c:	add.w	r3, r3, r2, lsl #3
    c320:	vldr	d4, [r3]
    c324:	blt.w	c830 <_dtoa_r+0x720>
    c328:	vneg.f64	d2, d4
    c32c:	vmov	d7, sl, fp
    c330:	vdiv.f64	d6, d7, d4
    c334:	vcvt.s32.f64	s12, d6
    c338:	ldr	r2, [sp, #32]
    c33a:	vmov	r3, s12
    c33e:	cmp	r7, #1
    c340:	add.w	r3, r3, #48	; 0x30
    c344:	vcvt.f64.s32	d5, s12
    c348:	add.w	fp, r2, #1
    c34c:	strb	r3, [r2, #0]
    c34e:	vfma.f64	d7, d2, d5
    c352:	beq.n	c39a <_dtoa_r+0x28a>
    c354:	vmov.f64	d3, #36	; 0x41200000  10.0
    c358:	vmul.f64	d7, d7, d3
    c35c:	vcmp.f64	d7, #0.0
    c360:	vmrs	APSR_nzcv, fpscr
    c364:	beq.n	c3dc <_dtoa_r+0x2cc>
    c366:	ldr	r2, [sp, #32]
    c368:	b.n	c378 <_dtoa_r+0x268>
    c36a:	vmul.f64	d7, d7, d3
    c36e:	vcmp.f64	d7, #0.0
    c372:	vmrs	APSR_nzcv, fpscr
    c376:	beq.n	c3dc <_dtoa_r+0x2cc>
    c378:	vdiv.f64	d6, d7, d4
    c37c:	vcvt.s32.f64	s12, d6
    c380:	vmov	r3, s12
    c384:	adds	r3, #48	; 0x30
    c386:	strb.w	r3, [fp], #1
    c38a:	rsb	r3, r2, fp
    c38e:	cmp	r3, r7
    c390:	vcvt.f64.s32	d5, s12
    c394:	vfma.f64	d7, d2, d5
    c398:	bne.n	c36a <_dtoa_r+0x25a>
    c39a:	vadd.f64	d7, d7, d7
    c39e:	vcmpe.f64	d4, d7
    c3a2:	vmrs	APSR_nzcv, fpscr
    c3a6:	bmi.n	c3ba <_dtoa_r+0x2aa>
    c3a8:	vcmp.f64	d4, d7
    c3ac:	vmrs	APSR_nzcv, fpscr
    c3b0:	bne.n	c3dc <_dtoa_r+0x2cc>
    c3b2:	vmov	r3, s12
    c3b6:	lsls	r3, r3, #31
    c3b8:	bpl.n	c3dc <_dtoa_r+0x2cc>
    c3ba:	ldrb.w	r0, [fp, #-1]
    c3be:	ldr	r2, [sp, #32]
    c3c0:	add.w	r3, fp, #4294967295
    c3c4:	b.n	c3d0 <_dtoa_r+0x2c0>
    c3c6:	cmp	r2, r3
    c3c8:	beq.w	cb96 <_dtoa_r+0xa86>
    c3cc:	ldrb.w	r0, [r3, #-1]!
    c3d0:	cmp	r0, #57	; 0x39
    c3d2:	add.w	fp, r3, #1
    c3d6:	beq.n	c3c6 <_dtoa_r+0x2b6>
    c3d8:	adds	r0, #1
    c3da:	strb	r0, [r3, #0]
    c3dc:	ldr	r1, [sp, #28]
    c3de:	mov	r0, r4
    c3e0:	bl	b9ac <_Bfree>
    c3e4:	movs	r2, #0
    c3e6:	ldr	r3, [sp, #8]
    c3e8:	strb.w	r2, [fp]
    c3ec:	ldr	r2, [sp, #16]
    c3ee:	adds	r3, #1
    c3f0:	str	r3, [r2, #0]
    c3f2:	ldr	r3, [sp, #116]	; 0x74
    c3f4:	cmp	r3, #0
    c3f6:	beq.w	cac6 <_dtoa_r+0x9b6>
    c3fa:	ldr	r0, [sp, #32]
    c3fc:	str.w	fp, [r3]
    c400:	add	sp, #76	; 0x4c
    c402:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c406:	ldr	r2, [sp, #36]	; 0x24
    c408:	cmp	r2, #0
    c40a:	beq.n	c4b4 <_dtoa_r+0x3a4>
    c40c:	ldr	r2, [sp, #4]
    c40e:	cmp	r2, #1
    c410:	ble.w	c870 <_dtoa_r+0x760>
    c414:	ldr	r1, [sp, #20]
    c416:	subs	r2, r7, #1
    c418:	cmp	r1, r2
    c41a:	blt.w	cacc <_dtoa_r+0x9bc>
    c41e:	subs	r3, r1, r2
    c420:	str	r3, [sp, #56]	; 0x38
    c422:	cmp	r7, #0
    c424:	ldr	r3, [sp, #24]
    c426:	blt.w	cc72 <_dtoa_r+0xb62>
    c42a:	str	r3, [sp, #40]	; 0x28
    c42c:	mov	r3, r7
    c42e:	ldr	r2, [sp, #24]
    c430:	movs	r1, #1
    c432:	add	r2, r3
    c434:	mov	r0, r4
    c436:	str	r2, [sp, #24]
    c438:	add	r9, r3
    c43a:	bl	badc <__i2b>
    c43e:	mov	r6, r0
    c440:	b.n	c4be <_dtoa_r+0x3ae>
    c442:	nop
    c444:	nop.w
    c448:	.word	0x636f4361
    c44c:	.word	0x3fd287a7
    c450:	.word	0x8b60c8b3
    c454:	.word	0x3fc68a28
    c458:	.word	0x509f79fb
    c45c:	.word	0x3fd34413
    c460:	.word	0x7ff00000
    c464:	.word	0x20000ead
    c468:	.word	0x20000ea8
    c46c:	.word	0x20000da0
    c470:	.word	0x20000e9c
    c474:	.word	0x20000eac
    c478:	movs	r3, #1
    c47a:	str	r3, [sp, #48]	; 0x30
    c47c:	b.n	c270 <_dtoa_r+0x160>
    c47e:	vcvt.f64.s32	d6, s13
    c482:	vcmp.f64	d7, d6
    c486:	vmrs	APSR_nzcv, fpscr
    c48a:	beq.w	c246 <_dtoa_r+0x136>
    c48e:	ldr	r3, [sp, #8]
    c490:	subs	r3, #1
    c492:	str	r3, [sp, #8]
    c494:	b.n	c246 <_dtoa_r+0x136>
    c496:	ldr	r2, [sp, #24]
    c498:	ldr	r3, [sp, #8]
    c49a:	subs	r2, r2, r3
    c49c:	negs	r3, r3
    c49e:	str	r3, [sp, #20]
    c4a0:	movs	r3, #0
    c4a2:	str	r2, [sp, #24]
    c4a4:	str	r3, [sp, #44]	; 0x2c
    c4a6:	b.n	c28e <_dtoa_r+0x17e>
    c4a8:	rsb	r3, r9, #0
    c4ac:	str	r3, [sp, #24]
    c4ae:	mov.w	r9, #0
    c4b2:	b.n	c27e <_dtoa_r+0x16e>
    c4b4:	ldr	r3, [sp, #20]
    c4b6:	str	r3, [sp, #56]	; 0x38
    c4b8:	ldr	r6, [sp, #36]	; 0x24
    c4ba:	ldr	r3, [sp, #24]
    c4bc:	str	r3, [sp, #40]	; 0x28
    c4be:	ldr	r1, [sp, #40]	; 0x28
    c4c0:	mov	r3, r1
    c4c2:	cbz	r1, c4de <_dtoa_r+0x3ce>
    c4c4:	cmp.w	r9, #0
    c4c8:	ble.n	c4de <_dtoa_r+0x3ce>
    c4ca:	cmp	r1, r9
    c4cc:	ldr	r2, [sp, #24]
    c4ce:	it	ge
    c4d0:	movge	r3, r9
    c4d2:	subs	r2, r2, r3
    c4d4:	str	r2, [sp, #24]
    c4d6:	subs	r2, r1, r3
    c4d8:	str	r2, [sp, #40]	; 0x28
    c4da:	rsb	r9, r3, r9
    c4de:	ldr	r3, [sp, #20]
    c4e0:	cmp	r3, #0
    c4e2:	ble.w	c9e6 <_dtoa_r+0x8d6>
    c4e6:	ldr	r2, [sp, #36]	; 0x24
    c4e8:	cmp	r2, #0
    c4ea:	beq.w	c822 <_dtoa_r+0x712>
    c4ee:	ldr	r2, [sp, #56]	; 0x38
    c4f0:	cmp	r2, #0
    c4f2:	beq.w	c822 <_dtoa_r+0x712>
    c4f6:	mov	r1, r6
    c4f8:	mov	r0, r4
    c4fa:	bl	bc20 <__pow5mult>
    c4fe:	ldr	r2, [sp, #28]
    c500:	mov	r1, r0
    c502:	mov	r6, r0
    c504:	mov	r0, r4
    c506:	bl	baf0 <__multiply>
    c50a:	ldr	r1, [sp, #28]
    c50c:	mov	r5, r0
    c50e:	mov	r0, r4
    c510:	bl	b9ac <_Bfree>
    c514:	ldr	r3, [sp, #20]
    c516:	ldr	r2, [sp, #56]	; 0x38
    c518:	subs	r3, r3, r2
    c51a:	str	r3, [sp, #20]
    c51c:	bne.w	c820 <_dtoa_r+0x710>
    c520:	movs	r1, #1
    c522:	mov	r0, r4
    c524:	bl	badc <__i2b>
    c528:	ldr	r3, [sp, #44]	; 0x2c
    c52a:	str	r0, [sp, #20]
    c52c:	cmp	r3, #0
    c52e:	beq.w	c88a <_dtoa_r+0x77a>
    c532:	mov	r1, r0
    c534:	mov	r2, r3
    c536:	mov	r0, r4
    c538:	bl	bc20 <__pow5mult>
    c53c:	ldr	r3, [sp, #4]
    c53e:	str	r0, [sp, #20]
    c540:	cmp	r3, #1
    c542:	ble.w	ca46 <_dtoa_r+0x936>
    c546:	movs	r3, #0
    c548:	str	r3, [sp, #28]
    c54a:	ldr	r2, [sp, #20]
    c54c:	ldr	r3, [r2, #16]
    c54e:	add.w	r3, r2, r3, lsl #2
    c552:	ldr	r0, [r3, #16]
    c554:	bl	ba40 <__hi0bits>
    c558:	rsb	r0, r0, #32
    c55c:	add	r0, r9
    c55e:	ands.w	r0, r0, #31
    c562:	beq.w	c886 <_dtoa_r+0x776>
    c566:	rsb	r3, r0, #32
    c56a:	cmp	r3, #4
    c56c:	ble.w	cd60 <_dtoa_r+0xc50>
    c570:	rsb	r0, r0, #28
    c574:	ldr	r3, [sp, #24]
    c576:	add	r3, r0
    c578:	str	r3, [sp, #24]
    c57a:	ldr	r3, [sp, #40]	; 0x28
    c57c:	add	r3, r0
    c57e:	str	r3, [sp, #40]	; 0x28
    c580:	add	r9, r0
    c582:	ldr	r3, [sp, #24]
    c584:	cmp	r3, #0
    c586:	ble.n	c594 <_dtoa_r+0x484>
    c588:	mov	r1, r5
    c58a:	mov	r2, r3
    c58c:	mov	r0, r4
    c58e:	bl	bcc0 <__lshift>
    c592:	mov	r5, r0
    c594:	cmp.w	r9, #0
    c598:	ble.n	c5a6 <_dtoa_r+0x496>
    c59a:	mov	r2, r9
    c59c:	ldr	r1, [sp, #20]
    c59e:	mov	r0, r4
    c5a0:	bl	bcc0 <__lshift>
    c5a4:	str	r0, [sp, #20]
    c5a6:	ldr	r3, [sp, #48]	; 0x30
    c5a8:	cmp	r3, #0
    c5aa:	bne.w	c9b0 <_dtoa_r+0x8a0>
    c5ae:	cmp	r7, #0
    c5b0:	ble.w	c9f4 <_dtoa_r+0x8e4>
    c5b4:	ldr	r3, [sp, #36]	; 0x24
    c5b6:	cmp	r3, #0
    c5b8:	bne.w	c8b2 <_dtoa_r+0x7a2>
    c5bc:	ldr.w	fp, [sp, #32]
    c5c0:	ldr.w	sl, [sp, #20]
    c5c4:	mov	r8, fp
    c5c6:	b.n	c5ce <_dtoa_r+0x4be>
    c5c8:	bl	b9c0 <__multadd>
    c5cc:	mov	r5, r0
    c5ce:	mov	r1, sl
    c5d0:	mov	r0, r5
    c5d2:	bl	bfe4 <quorem>
    c5d6:	add.w	r9, r0, #48	; 0x30
    c5da:	strb.w	r9, [r8], #1
    c5de:	rsb	r3, fp, r8
    c5e2:	cmp	r3, r7
    c5e4:	mov.w	r2, #10
    c5e8:	mov.w	r3, #0
    c5ec:	mov	r1, r5
    c5ee:	mov	r0, r4
    c5f0:	blt.n	c5c8 <_dtoa_r+0x4b8>
    c5f2:	ldr	r3, [sp, #32]
    c5f4:	cmp	r7, #1
    c5f6:	ite	ge
    c5f8:	addge	r3, r3, r7
    c5fa:	addlt	r3, #1
    c5fc:	mov	fp, r3
    c5fe:	mov.w	sl, #0
    c602:	mov	r1, r5
    c604:	movs	r2, #1
    c606:	mov	r0, r4
    c608:	bl	bcc0 <__lshift>
    c60c:	ldr	r1, [sp, #20]
    c60e:	str	r0, [sp, #28]
    c610:	bl	bd70 <__mcmp>
    c614:	cmp	r0, #0
    c616:	ble.w	cb32 <_dtoa_r+0xa22>
    c61a:	ldrb.w	r2, [fp, #-1]
    c61e:	ldr	r1, [sp, #32]
    c620:	add.w	r3, fp, #4294967295
    c624:	b.n	c630 <_dtoa_r+0x520>
    c626:	cmp	r3, r1
    c628:	beq.w	ca32 <_dtoa_r+0x922>
    c62c:	ldrb.w	r2, [r3, #-1]!
    c630:	cmp	r2, #57	; 0x39
    c632:	add.w	fp, r3, #1
    c636:	beq.n	c626 <_dtoa_r+0x516>
    c638:	adds	r2, #1
    c63a:	strb	r2, [r3, #0]
    c63c:	ldr	r1, [sp, #20]
    c63e:	mov	r0, r4
    c640:	bl	b9ac <_Bfree>
    c644:	cmp	r6, #0
    c646:	beq.w	c3dc <_dtoa_r+0x2cc>
    c64a:	cmp.w	sl, #0
    c64e:	beq.n	c65c <_dtoa_r+0x54c>
    c650:	cmp	sl, r6
    c652:	beq.n	c65c <_dtoa_r+0x54c>
    c654:	mov	r1, sl
    c656:	mov	r0, r4
    c658:	bl	b9ac <_Bfree>
    c65c:	mov	r1, r6
    c65e:	mov	r0, r4
    c660:	bl	b9ac <_Bfree>
    c664:	b.n	c3dc <_dtoa_r+0x2cc>
    c666:	rsb	r3, r3, #32
    c66a:	lsl.w	r3, sl, r3
    c66e:	vmov	s15, r3
    c672:	b.n	c1f8 <_dtoa_r+0xe8>
    c674:	movs	r3, #0
    c676:	str	r3, [sp, #48]	; 0x30
    c678:	b.n	c270 <_dtoa_r+0x160>
    c67a:	movs	r3, #0
    c67c:	str	r3, [sp, #36]	; 0x24
    c67e:	ldr	r3, [sp, #8]
    c680:	add	r3, r8
    c682:	adds	r7, r3, #1
    c684:	cmp	r7, #0
    c686:	str	r3, [sp, #52]	; 0x34
    c688:	ble.w	cae6 <_dtoa_r+0x9d6>
    c68c:	mov	r6, r7
    c68e:	mov	r5, r7
    c690:	movs	r1, #0
    c692:	cmp	r6, #23
    c694:	str	r1, [r4, #68]	; 0x44
    c696:	bls.n	c6ae <_dtoa_r+0x59e>
    c698:	movs	r2, #1
    c69a:	movs	r3, #4
    c69c:	lsls	r3, r3, #1
    c69e:	add.w	r0, r3, #20
    c6a2:	cmp	r0, r6
    c6a4:	mov	r1, r2
    c6a6:	add.w	r2, r2, #1
    c6aa:	bls.n	c69c <_dtoa_r+0x58c>
    c6ac:	str	r1, [r4, #68]	; 0x44
    c6ae:	mov	r0, r4
    c6b0:	bl	b960 <_Balloc>
    c6b4:	cmp	r5, #14
    c6b6:	str	r0, [sp, #32]
    c6b8:	str	r0, [r4, #64]	; 0x40
    c6ba:	bhi.w	c30a <_dtoa_r+0x1fa>
    c6be:	ldr	r3, [sp, #56]	; 0x38
    c6c0:	cmp	r3, #0
    c6c2:	beq.w	c30a <_dtoa_r+0x1fa>
    c6c6:	ldr	r1, [sp, #8]
    c6c8:	cmp	r1, #0
    c6ca:	strd	sl, fp, [sp, #56]	; 0x38
    c6ce:	ble.w	cb54 <_dtoa_r+0xa44>
    c6d2:	ldr	r3, [pc, #792]	; (c9ec <_dtoa_r+0x8dc>)
    c6d4:	and.w	r2, r1, #15
    c6d8:	add.w	r2, r3, r2, lsl #3
    c6dc:	asrs	r3, r1, #4
    c6de:	lsls	r6, r3, #27
    c6e0:	vldr	d6, [r2]
    c6e4:	bpl.w	cade <_dtoa_r+0x9ce>
    c6e8:	ldr	r2, [pc, #772]	; (c9f0 <_dtoa_r+0x8e0>)
    c6ea:	vldr	d7, [r2, #32]
    c6ee:	vmov	d4, sl, fp
    c6f2:	and.w	r3, r3, #15
    c6f6:	movs	r1, #3
    c6f8:	vdiv.f64	d5, d4, d7
    c6fc:	cbz	r3, c716 <_dtoa_r+0x606>
    c6fe:	ldr	r2, [pc, #752]	; (c9f0 <_dtoa_r+0x8e0>)
    c700:	lsls	r5, r3, #31
    c702:	bpl.n	c70e <_dtoa_r+0x5fe>
    c704:	vldr	d7, [r2]
    c708:	adds	r1, #1
    c70a:	vmul.f64	d6, d6, d7
    c70e:	asrs	r3, r3, #1
    c710:	add.w	r2, r2, #8
    c714:	bne.n	c700 <_dtoa_r+0x5f0>
    c716:	vdiv.f64	d4, d5, d6
    c71a:	ldr	r3, [sp, #48]	; 0x30
    c71c:	cbz	r3, c72e <_dtoa_r+0x61e>
    c71e:	vmov.f64	d7, #112	; 0x3f800000  1.0
    c722:	vcmpe.f64	d4, d7
    c726:	vmrs	APSR_nzcv, fpscr
    c72a:	bmi.w	cc9c <_dtoa_r+0xb8c>
    c72e:	vmov	s15, r1
    c732:	vcvt.f64.s32	d6, s15
    c736:	vmov.f64	d7, #28	; 0x40e00000  7.0
    c73a:	vfma.f64	d7, d6, d4
    c73e:	vmov	r2, r3, d7
    c742:	sub.w	r3, r3, #54525952	; 0x3400000
    c746:	cmp	r7, #0
    c748:	beq.w	ca98 <_dtoa_r+0x988>
    c74c:	ldr	r6, [sp, #8]
    c74e:	mov	r1, r7
    c750:	ldr	r0, [sp, #36]	; 0x24
    c752:	cmp	r0, #0
    c754:	beq.w	cbf2 <_dtoa_r+0xae2>
    c758:	vmov.f64	d3, #96	; 0x3f000000  0.5
    c75c:	ldr	r0, [pc, #652]	; (c9ec <_dtoa_r+0x8dc>)
    c75e:	ldr	r5, [sp, #32]
    c760:	add.w	r0, r0, r1, lsl #3
    c764:	vldr	d6, [r0, #-8]
    c768:	vcvt.s32.f64	s14, d4
    c76c:	vdiv.f64	d5, d3, d6
    c770:	vmov	r0, s14
    c774:	vmov	d6, r2, r3
    c778:	adds	r0, #48	; 0x30
    c77a:	uxtb	r0, r0
    c77c:	vsub.f64	d5, d5, d6
    c780:	vcvt.f64.s32	d7, s14
    c784:	vsub.f64	d7, d4, d7
    c788:	vcmpe.f64	d5, d7
    c78c:	vmrs	APSR_nzcv, fpscr
    c790:	strb	r0, [r5, #0]
    c792:	add.w	fp, r5, #1
    c796:	bgt.n	c7fe <_dtoa_r+0x6ee>
    c798:	vmov.f64	d3, #112	; 0x3f800000  1.0
    c79c:	vsub.f64	d6, d3, d7
    c7a0:	vcmpe.f64	d5, d6
    c7a4:	vmrs	APSR_nzcv, fpscr
    c7a8:	bgt.w	cd08 <_dtoa_r+0xbf8>
    c7ac:	cmp	r1, #1
    c7ae:	ble.w	cb4c <_dtoa_r+0xa3c>
    c7b2:	vmov.f64	d4, #36	; 0x41200000  10.0
    c7b6:	ldr	r3, [sp, #32]
    c7b8:	add	r1, r3
    c7ba:	b.n	c7d2 <_dtoa_r+0x6c2>
    c7bc:	vsub.f64	d6, d3, d7
    c7c0:	vcmpe.f64	d6, d5
    c7c4:	vmrs	APSR_nzcv, fpscr
    c7c8:	bmi.w	cd08 <_dtoa_r+0xbf8>
    c7cc:	cmp	fp, r1
    c7ce:	beq.w	cb4c <_dtoa_r+0xa3c>
    c7d2:	vmul.f64	d7, d7, d4
    c7d6:	vmul.f64	d5, d5, d4
    c7da:	vcvt.s32.f64	s12, d7
    c7de:	vmov	r3, s12
    c7e2:	add.w	r0, r3, #48	; 0x30
    c7e6:	uxtb	r0, r0
    c7e8:	vcvt.f64.s32	d6, s12
    c7ec:	vsub.f64	d7, d7, d6
    c7f0:	vcmpe.f64	d7, d5
    c7f4:	vmrs	APSR_nzcv, fpscr
    c7f8:	strb.w	r0, [fp], #1
    c7fc:	bpl.n	c7bc <_dtoa_r+0x6ac>
    c7fe:	str	r6, [sp, #8]
    c800:	b.n	c3dc <_dtoa_r+0x2cc>
    c802:	movs	r3, #0
    c804:	str	r3, [sp, #36]	; 0x24
    c806:	cmp.w	r8, #0
    c80a:	ble.w	caee <_dtoa_r+0x9de>
    c80e:	mov	r6, r8
    c810:	mov	r5, r8
    c812:	str.w	r8, [sp, #52]	; 0x34
    c816:	mov	r7, r8
    c818:	b.n	c690 <_dtoa_r+0x580>
    c81a:	movs	r3, #1
    c81c:	str	r3, [sp, #36]	; 0x24
    c81e:	b.n	c806 <_dtoa_r+0x6f6>
    c820:	str	r5, [sp, #28]
    c822:	ldr	r2, [sp, #20]
    c824:	ldr	r1, [sp, #28]
    c826:	mov	r0, r4
    c828:	bl	bc20 <__pow5mult>
    c82c:	mov	r5, r0
    c82e:	b.n	c520 <_dtoa_r+0x410>
    c830:	cmp	r7, #0
    c832:	bgt.w	c328 <_dtoa_r+0x218>
    c836:	bne.w	cabe <_dtoa_r+0x9ae>
    c83a:	vmov.f64	d7, #20	; 0x40a00000  5.0
    c83e:	vmul.f64	d4, d4, d7
    c842:	vmov	d7, sl, fp
    c846:	vcmpe.f64	d4, d7
    c84a:	vmrs	APSR_nzcv, fpscr
    c84e:	mov	r6, r7
    c850:	str	r7, [sp, #20]
    c852:	blt.w	ca20 <_dtoa_r+0x910>
    c856:	mvn.w	r3, r8
    c85a:	ldr.w	fp, [sp, #32]
    c85e:	str	r3, [sp, #8]
    c860:	ldr	r1, [sp, #20]
    c862:	mov	r0, r4
    c864:	bl	b9ac <_Bfree>
    c868:	cmp	r6, #0
    c86a:	beq.w	c3dc <_dtoa_r+0x2cc>
    c86e:	b.n	c65c <_dtoa_r+0x54c>
    c870:	ldr	r2, [sp, #40]	; 0x28
    c872:	cmp	r2, #0
    c874:	beq.w	cc7c <_dtoa_r+0xb6c>
    c878:	ldr	r2, [sp, #20]
    c87a:	str	r2, [sp, #56]	; 0x38
    c87c:	ldr	r2, [sp, #24]
    c87e:	str	r2, [sp, #40]	; 0x28
    c880:	addw	r3, r3, #1075	; 0x433
    c884:	b.n	c42e <_dtoa_r+0x31e>
    c886:	movs	r0, #28
    c888:	b.n	c574 <_dtoa_r+0x464>
    c88a:	ldr	r3, [sp, #4]
    c88c:	cmp	r3, #1
    c88e:	ble.w	cd12 <_dtoa_r+0xc02>
    c892:	ldr	r3, [sp, #44]	; 0x2c
    c894:	str	r3, [sp, #28]
    c896:	movs	r0, #1
    c898:	b.n	c55c <_dtoa_r+0x44c>
    c89a:	mov	r1, r6
    c89c:	movs	r3, #0
    c89e:	movs	r2, #10
    c8a0:	mov	r0, r4
    c8a2:	bl	b9c0 <__multadd>
    c8a6:	ldr	r3, [sp, #52]	; 0x34
    c8a8:	cmp	r3, #0
    c8aa:	mov	r6, r0
    c8ac:	ble.w	cd4a <_dtoa_r+0xc3a>
    c8b0:	mov	r7, r3
    c8b2:	ldr	r3, [sp, #40]	; 0x28
    c8b4:	cmp	r3, #0
    c8b6:	ble.n	c8c4 <_dtoa_r+0x7b4>
    c8b8:	mov	r1, r6
    c8ba:	mov	r2, r3
    c8bc:	mov	r0, r4
    c8be:	bl	bcc0 <__lshift>
    c8c2:	mov	r6, r0
    c8c4:	ldr	r3, [sp, #28]
    c8c6:	cmp	r3, #0
    c8c8:	bne.w	cba8 <_dtoa_r+0xa98>
    c8cc:	mov	r8, r6
    c8ce:	ldr	r3, [sp, #32]
    c8d0:	subs	r7, #1
    c8d2:	adds	r2, r3, r7
    c8d4:	str	r2, [sp, #36]	; 0x24
    c8d6:	and.w	r2, sl, #1
    c8da:	str	r2, [sp, #40]	; 0x28
    c8dc:	mov	r7, r3
    c8de:	ldr.w	fp, [sp, #20]
    c8e2:	mov	r0, r5
    c8e4:	mov	r1, fp
    c8e6:	bl	bfe4 <quorem>
    c8ea:	mov	r1, r6
    c8ec:	mov	sl, r0
    c8ee:	mov	r0, r5
    c8f0:	bl	bd70 <__mcmp>
    c8f4:	mov	r2, r8
    c8f6:	mov	r1, fp
    c8f8:	mov	r9, r0
    c8fa:	mov	r0, r4
    c8fc:	bl	bdb4 <__mdiff>
    c900:	ldr	r3, [r0, #12]
    c902:	mov	fp, r0
    c904:	add.w	r2, sl, #48	; 0x30
    c908:	cmp	r3, #0
    c90a:	bne.n	c9a0 <_dtoa_r+0x890>
    c90c:	mov	r1, r0
    c90e:	mov	r0, r5
    c910:	str	r2, [sp, #28]
    c912:	bl	bd70 <__mcmp>
    c916:	mov	r1, fp
    c918:	str	r0, [sp, #24]
    c91a:	mov	r0, r4
    c91c:	bl	b9ac <_Bfree>
    c920:	ldr	r3, [sp, #24]
    c922:	ldr	r2, [sp, #28]
    c924:	cbnz	r3, c932 <_dtoa_r+0x822>
    c926:	ldr	r1, [sp, #4]
    c928:	cbnz	r1, c932 <_dtoa_r+0x822>
    c92a:	ldr	r1, [sp, #40]	; 0x28
    c92c:	cmp	r1, #0
    c92e:	beq.w	cd1c <_dtoa_r+0xc0c>
    c932:	cmp.w	r9, #0
    c936:	blt.w	caf8 <_dtoa_r+0x9e8>
    c93a:	bne.n	c948 <_dtoa_r+0x838>
    c93c:	ldr	r1, [sp, #4]
    c93e:	cbnz	r1, c948 <_dtoa_r+0x838>
    c940:	ldr	r1, [sp, #40]	; 0x28
    c942:	cmp	r1, #0
    c944:	beq.w	caf8 <_dtoa_r+0x9e8>
    c948:	cmp	r3, #0
    c94a:	bgt.w	cbd0 <_dtoa_r+0xac0>
    c94e:	ldr	r3, [sp, #36]	; 0x24
    c950:	strb	r2, [r7, #0]
    c952:	add.w	r9, r7, #1
    c956:	cmp	r7, r3
    c958:	mov	fp, r9
    c95a:	beq.w	cbea <_dtoa_r+0xada>
    c95e:	mov	r1, r5
    c960:	movs	r3, #0
    c962:	movs	r2, #10
    c964:	mov	r0, r4
    c966:	bl	b9c0 <__multadd>
    c96a:	cmp	r6, r8
    c96c:	mov	r5, r0
    c96e:	mov	r1, r6
    c970:	mov.w	r3, #0
    c974:	mov.w	r2, #10
    c978:	mov	r0, r4
    c97a:	beq.n	c994 <_dtoa_r+0x884>
    c97c:	bl	b9c0 <__multadd>
    c980:	mov	r1, r8
    c982:	mov	r6, r0
    c984:	movs	r3, #0
    c986:	movs	r2, #10
    c988:	mov	r0, r4
    c98a:	bl	b9c0 <__multadd>
    c98e:	mov	r7, r9
    c990:	mov	r8, r0
    c992:	b.n	c8de <_dtoa_r+0x7ce>
    c994:	bl	b9c0 <__multadd>
    c998:	mov	r7, r9
    c99a:	mov	r6, r0
    c99c:	mov	r8, r0
    c99e:	b.n	c8de <_dtoa_r+0x7ce>
    c9a0:	mov	r1, r0
    c9a2:	mov	r0, r4
    c9a4:	str	r2, [sp, #24]
    c9a6:	bl	b9ac <_Bfree>
    c9aa:	movs	r3, #1
    c9ac:	ldr	r2, [sp, #24]
    c9ae:	b.n	c932 <_dtoa_r+0x822>
    c9b0:	ldr	r1, [sp, #20]
    c9b2:	mov	r0, r5
    c9b4:	bl	bd70 <__mcmp>
    c9b8:	cmp	r0, #0
    c9ba:	bge.w	c5ae <_dtoa_r+0x49e>
    c9be:	mov	r1, r5
    c9c0:	ldr	r5, [sp, #8]
    c9c2:	movs	r3, #0
    c9c4:	subs	r5, #1
    c9c6:	movs	r2, #10
    c9c8:	mov	r0, r4
    c9ca:	str	r5, [sp, #8]
    c9cc:	bl	b9c0 <__multadd>
    c9d0:	ldr	r3, [sp, #36]	; 0x24
    c9d2:	mov	r5, r0
    c9d4:	cmp	r3, #0
    c9d6:	bne.w	c89a <_dtoa_r+0x78a>
    c9da:	ldr	r3, [sp, #52]	; 0x34
    c9dc:	cmp	r3, #0
    c9de:	ble.w	cd3c <_dtoa_r+0xc2c>
    c9e2:	mov	r7, r3
    c9e4:	b.n	c5bc <_dtoa_r+0x4ac>
    c9e6:	ldr	r5, [sp, #28]
    c9e8:	b.n	c520 <_dtoa_r+0x410>
    c9ea:	nop
    c9ec:	.word	0x20000da0
    c9f0:	.word	0x20000e68
    c9f4:	ldr	r3, [sp, #4]
    c9f6:	cmp	r3, #2
    c9f8:	ble.w	c5b4 <_dtoa_r+0x4a4>
    c9fc:	cmp	r7, #0
    c9fe:	bne.w	ccd4 <_dtoa_r+0xbc4>
    ca02:	mov	r3, r7
    ca04:	ldr	r1, [sp, #20]
    ca06:	movs	r2, #5
    ca08:	mov	r0, r4
    ca0a:	bl	b9c0 <__multadd>
    ca0e:	mov	r1, r0
    ca10:	str	r0, [sp, #20]
    ca12:	mov	r0, r5
    ca14:	bl	bd70 <__mcmp>
    ca18:	cmp	r0, #0
    ca1a:	str	r5, [sp, #28]
    ca1c:	ble.w	c856 <_dtoa_r+0x746>
    ca20:	ldr	r2, [sp, #8]
    ca22:	ldr	r1, [sp, #32]
    ca24:	movs	r3, #49	; 0x31
    ca26:	adds	r2, #1
    ca28:	str	r2, [sp, #8]
    ca2a:	strb	r3, [r1, #0]
    ca2c:	add.w	fp, r1, #1
    ca30:	b.n	c860 <_dtoa_r+0x750>
    ca32:	ldr	r2, [sp, #8]
    ca34:	adds	r2, #1
    ca36:	str	r2, [sp, #8]
    ca38:	ldr	r2, [sp, #32]
    ca3a:	movs	r3, #49	; 0x31
    ca3c:	strb	r3, [r2, #0]
    ca3e:	b.n	c63c <_dtoa_r+0x52c>
    ca40:	movs	r3, #1
    ca42:	str	r3, [sp, #36]	; 0x24
    ca44:	b.n	c67e <_dtoa_r+0x56e>
    ca46:	cmp.w	sl, #0
    ca4a:	bne.w	c546 <_dtoa_r+0x436>
    ca4e:	ubfx	r3, fp, #0, #20
    ca52:	cmp	r3, #0
    ca54:	bne.w	cc8e <_dtoa_r+0xb7e>
    ca58:	bic.w	r3, fp, #2147483648	; 0x80000000
    ca5c:	lsrs	r3, r3, #20
    ca5e:	lsls	r3, r3, #20
    ca60:	cmp	r3, #0
    ca62:	beq.w	cd0e <_dtoa_r+0xbfe>
    ca66:	ldr	r3, [sp, #24]
    ca68:	adds	r3, #1
    ca6a:	str	r3, [sp, #24]
    ca6c:	movs	r3, #1
    ca6e:	add.w	r9, r9, #1
    ca72:	str	r3, [sp, #28]
    ca74:	ldr	r3, [sp, #44]	; 0x2c
    ca76:	movs	r0, #1
    ca78:	cmp	r3, #0
    ca7a:	beq.w	c55c <_dtoa_r+0x44c>
    ca7e:	b.n	c54a <_dtoa_r+0x43a>
    ca80:	vmov	s15, r1
    ca84:	vcvt.f64.s32	d6, s15
    ca88:	vmov.f64	d7, #28	; 0x40e00000  7.0
    ca8c:	vfma.f64	d7, d4, d6
    ca90:	vmov	r2, r3, d7
    ca94:	sub.w	r3, r3, #54525952	; 0x3400000
    ca98:	vmov	d6, r2, r3
    ca9c:	vmov.f64	d7, #20	; 0x40a00000  5.0
    caa0:	vsub.f64	d7, d4, d7
    caa4:	vcmpe.f64	d7, d6
    caa8:	vmrs	APSR_nzcv, fpscr
    caac:	bgt.w	cc6a <_dtoa_r+0xb5a>
    cab0:	vneg.f64	d6, d6
    cab4:	vcmpe.f64	d7, d6
    cab8:	vmrs	APSR_nzcv, fpscr
    cabc:	bpl.n	cb4c <_dtoa_r+0xa3c>
    cabe:	movs	r3, #0
    cac0:	str	r3, [sp, #20]
    cac2:	mov	r6, r3
    cac4:	b.n	c856 <_dtoa_r+0x746>
    cac6:	ldr	r0, [sp, #32]
    cac8:	b.w	c17e <_dtoa_r+0x6e>
    cacc:	ldr	r3, [sp, #20]
    cace:	ldr	r1, [sp, #44]	; 0x2c
    cad0:	str	r2, [sp, #20]
    cad2:	subs	r3, r2, r3
    cad4:	add	r1, r3
    cad6:	movs	r3, #0
    cad8:	str	r1, [sp, #44]	; 0x2c
    cada:	str	r3, [sp, #56]	; 0x38
    cadc:	b.n	c422 <_dtoa_r+0x312>
    cade:	vldr	d5, [sp, #56]	; 0x38
    cae2:	movs	r1, #2
    cae4:	b.n	c6fc <_dtoa_r+0x5ec>
    cae6:	mov	r5, r7
    cae8:	movs	r1, #0
    caea:	str	r1, [r4, #68]	; 0x44
    caec:	b.n	c6ae <_dtoa_r+0x59e>
    caee:	movs	r5, #1
    caf0:	str	r5, [sp, #52]	; 0x34
    caf2:	mov	r7, r5
    caf4:	mov	r8, r5
    caf6:	b.n	cae8 <_dtoa_r+0x9d8>
    caf8:	cmp	r3, #0
    cafa:	mov	r9, r2
    cafc:	ble.n	cb22 <_dtoa_r+0xa12>
    cafe:	mov	r1, r5
    cb00:	movs	r2, #1
    cb02:	mov	r0, r4
    cb04:	bl	bcc0 <__lshift>
    cb08:	ldr	r1, [sp, #20]
    cb0a:	mov	r5, r0
    cb0c:	bl	bd70 <__mcmp>
    cb10:	cmp	r0, #0
    cb12:	ble.w	cd2e <_dtoa_r+0xc1e>
    cb16:	cmp.w	r9, #57	; 0x39
    cb1a:	beq.w	ccd8 <_dtoa_r+0xbc8>
    cb1e:	add.w	r9, sl, #49	; 0x31
    cb22:	mov	sl, r6
    cb24:	strb.w	r9, [r7]
    cb28:	add.w	fp, r7, #1
    cb2c:	mov	r6, r8
    cb2e:	str	r5, [sp, #28]
    cb30:	b.n	c63c <_dtoa_r+0x52c>
    cb32:	bne.n	cb3e <_dtoa_r+0xa2e>
    cb34:	tst.w	r9, #1
    cb38:	beq.n	cb3e <_dtoa_r+0xa2e>
    cb3a:	b.n	c61a <_dtoa_r+0x50a>
    cb3c:	mov	fp, r2
    cb3e:	ldrb.w	r3, [fp, #-1]
    cb42:	cmp	r3, #48	; 0x30
    cb44:	add.w	r2, fp, #4294967295
    cb48:	beq.n	cb3c <_dtoa_r+0xa2c>
    cb4a:	b.n	c63c <_dtoa_r+0x52c>
    cb4c:	ldrd	sl, fp, [sp, #56]	; 0x38
    cb50:	b.w	c30a <_dtoa_r+0x1fa>
    cb54:	ldr	r3, [sp, #8]
    cb56:	negs	r3, r3
    cb58:	cmp	r3, #0
    cb5a:	beq.w	cc94 <_dtoa_r+0xb84>
    cb5e:	ldr	r2, [pc, #556]	; (cd8c <_dtoa_r+0xc7c>)
    cb60:	and.w	r1, r3, #15
    cb64:	add.w	r2, r2, r1, lsl #3
    cb68:	vldr	d7, [r2]
    cb6c:	vldr	d6, [sp, #56]	; 0x38
    cb70:	asrs	r3, r3, #4
    cb72:	vmul.f64	d4, d6, d7
    cb76:	beq.w	cd46 <_dtoa_r+0xc36>
    cb7a:	ldr	r2, [pc, #532]	; (cd90 <_dtoa_r+0xc80>)
    cb7c:	movs	r1, #2
    cb7e:	lsls	r0, r3, #31
    cb80:	bpl.n	cb8c <_dtoa_r+0xa7c>
    cb82:	vldr	d7, [r2]
    cb86:	adds	r1, #1
    cb88:	vmul.f64	d4, d4, d7
    cb8c:	asrs	r3, r3, #1
    cb8e:	add.w	r2, r2, #8
    cb92:	bne.n	cb7e <_dtoa_r+0xa6e>
    cb94:	b.n	c71a <_dtoa_r+0x60a>
    cb96:	ldr	r1, [sp, #32]
    cb98:	movs	r2, #48	; 0x30
    cb9a:	strb	r2, [r1, #0]
    cb9c:	ldr	r2, [sp, #8]
    cb9e:	ldrb.w	r0, [fp, #-1]
    cba2:	adds	r2, #1
    cba4:	str	r2, [sp, #8]
    cba6:	b.n	c3d8 <_dtoa_r+0x2c8>
    cba8:	ldr	r1, [r6, #4]
    cbaa:	mov	r0, r4
    cbac:	bl	b960 <_Balloc>
    cbb0:	ldr	r3, [r6, #16]
    cbb2:	adds	r2, r3, #2
    cbb4:	mov	r8, r0
    cbb6:	lsls	r2, r2, #2
    cbb8:	add.w	r1, r6, #12
    cbbc:	adds	r0, #12
    cbbe:	bl	7dfc <memcpy>
    cbc2:	mov	r1, r8
    cbc4:	movs	r2, #1
    cbc6:	mov	r0, r4
    cbc8:	bl	bcc0 <__lshift>
    cbcc:	mov	r8, r0
    cbce:	b.n	c8ce <_dtoa_r+0x7be>
    cbd0:	cmp	r2, #57	; 0x39
    cbd2:	beq.w	ccd8 <_dtoa_r+0xbc8>
    cbd6:	add.w	r9, r2, #1
    cbda:	mov	sl, r6
    cbdc:	strb.w	r9, [r7]
    cbe0:	add.w	fp, r7, #1
    cbe4:	mov	r6, r8
    cbe6:	str	r5, [sp, #28]
    cbe8:	b.n	c63c <_dtoa_r+0x52c>
    cbea:	mov	sl, r6
    cbec:	mov	r9, r2
    cbee:	mov	r6, r8
    cbf0:	b.n	c602 <_dtoa_r+0x4f2>
    cbf2:	ldr	r0, [pc, #408]	; (cd8c <_dtoa_r+0xc7c>)
    cbf4:	vcvt.s32.f64	s12, d4
    cbf8:	subs	r5, r1, #1
    cbfa:	add.w	r0, r0, r5, lsl #3
    cbfe:	vmov	d7, r2, r3
    cc02:	vldr	d3, [r0]
    cc06:	vmov	r3, s12
    cc0a:	vmul.f64	d3, d3, d7
    cc0e:	ldr	r0, [sp, #32]
    cc10:	adds	r3, #48	; 0x30
    cc12:	cmp	r1, #1
    cc14:	vcvt.f64.s32	d6, s12
    cc18:	strb	r3, [r0, #0]
    cc1a:	add.w	fp, r0, #1
    cc1e:	vsub.f64	d7, d4, d6
    cc22:	beq.n	cc4e <_dtoa_r+0xb3e>
    cc24:	vmov.f64	d5, #36	; 0x41200000  10.0
    cc28:	ldr	r3, [sp, #32]
    cc2a:	add	r1, r3
    cc2c:	mov	r3, fp
    cc2e:	vmul.f64	d7, d7, d5
    cc32:	vcvt.s32.f64	s12, d7
    cc36:	vmov	r2, s12
    cc3a:	adds	r2, #48	; 0x30
    cc3c:	strb.w	r2, [r3], #1
    cc40:	cmp	r1, r3
    cc42:	vcvt.f64.s32	d6, s12
    cc46:	vsub.f64	d7, d7, d6
    cc4a:	bne.n	cc2e <_dtoa_r+0xb1e>
    cc4c:	add	fp, r5
    cc4e:	vmov.f64	d6, #96	; 0x3f000000  0.5
    cc52:	vadd.f64	d5, d3, d6
    cc56:	vcmpe.f64	d5, d7
    cc5a:	vmrs	APSR_nzcv, fpscr
    cc5e:	bpl.n	cce8 <_dtoa_r+0xbd8>
    cc60:	str	r6, [sp, #8]
    cc62:	ldrb.w	r0, [fp, #-1]
    cc66:	b.w	c3be <_dtoa_r+0x2ae>
    cc6a:	movs	r3, #0
    cc6c:	str	r3, [sp, #20]
    cc6e:	mov	r6, r3
    cc70:	b.n	ca20 <_dtoa_r+0x910>
    cc72:	subs	r3, r3, r7
    cc74:	str	r3, [sp, #40]	; 0x28
    cc76:	movs	r3, #0
    cc78:	b.w	c42e <_dtoa_r+0x31e>
    cc7c:	ldr	r2, [sp, #20]
    cc7e:	ldr	r3, [sp, #64]	; 0x40
    cc80:	str	r2, [sp, #56]	; 0x38
    cc82:	ldr	r2, [sp, #24]
    cc84:	str	r2, [sp, #40]	; 0x28
    cc86:	rsb	r3, r3, #54	; 0x36
    cc8a:	b.w	c42e <_dtoa_r+0x31e>
    cc8e:	movs	r3, #0
    cc90:	str	r3, [sp, #28]
    cc92:	b.n	ca74 <_dtoa_r+0x964>
    cc94:	vldr	d4, [sp, #56]	; 0x38
    cc98:	movs	r1, #2
    cc9a:	b.n	c71a <_dtoa_r+0x60a>
    cc9c:	cmp	r7, #0
    cc9e:	beq.w	ca80 <_dtoa_r+0x970>
    cca2:	ldr	r0, [sp, #52]	; 0x34
    cca4:	cmp	r0, #0
    cca6:	ble.w	cb4c <_dtoa_r+0xa3c>
    ccaa:	vmov.f64	d5, #36	; 0x41200000  10.0
    ccae:	vmov.f64	d7, #28	; 0x40e00000  7.0
    ccb2:	adds	r1, #1
    ccb4:	vmov	s13, r1
    ccb8:	vmul.f64	d4, d4, d5
    ccbc:	ldr	r3, [sp, #8]
    ccbe:	vcvt.f64.s32	d6, s13
    ccc2:	subs	r6, r3, #1
    ccc4:	vfma.f64	d7, d4, d6
    ccc8:	vmov	r2, r3, d7
    cccc:	mov	r1, r0
    ccce:	sub.w	r3, r3, #54525952	; 0x3400000
    ccd2:	b.n	c750 <_dtoa_r+0x640>
    ccd4:	str	r5, [sp, #28]
    ccd6:	b.n	c856 <_dtoa_r+0x746>
    ccd8:	movs	r2, #57	; 0x39
    ccda:	mov	sl, r6
    ccdc:	str	r5, [sp, #28]
    ccde:	mov	r6, r8
    cce0:	strb	r2, [r7, #0]
    cce2:	add.w	fp, r7, #1
    cce6:	b.n	c61e <_dtoa_r+0x50e>
    cce8:	vsub.f64	d6, d6, d3
    ccec:	vcmpe.f64	d6, d7
    ccf0:	vmrs	APSR_nzcv, fpscr
    ccf4:	bgt.n	ccfa <_dtoa_r+0xbea>
    ccf6:	b.n	cb4c <_dtoa_r+0xa3c>
    ccf8:	mov	fp, r2
    ccfa:	ldrb.w	r3, [fp, #-1]
    ccfe:	cmp	r3, #48	; 0x30
    cd00:	add.w	r2, fp, #4294967295
    cd04:	beq.n	ccf8 <_dtoa_r+0xbe8>
    cd06:	b.n	c7fe <_dtoa_r+0x6ee>
    cd08:	str	r6, [sp, #8]
    cd0a:	b.w	c3be <_dtoa_r+0x2ae>
    cd0e:	str	r3, [sp, #28]
    cd10:	b.n	ca74 <_dtoa_r+0x964>
    cd12:	cmp.w	sl, #0
    cd16:	bne.w	c892 <_dtoa_r+0x782>
    cd1a:	b.n	ca4e <_dtoa_r+0x93e>
    cd1c:	cmp	r2, #57	; 0x39
    cd1e:	mov	fp, r9
    cd20:	mov	r9, r2
    cd22:	beq.n	ccd8 <_dtoa_r+0xbc8>
    cd24:	cmp.w	fp, #0
    cd28:	bgt.w	cb1e <_dtoa_r+0xa0e>
    cd2c:	b.n	cb22 <_dtoa_r+0xa12>
    cd2e:	bne.w	cb22 <_dtoa_r+0xa12>
    cd32:	tst.w	r9, #1
    cd36:	beq.w	cb22 <_dtoa_r+0xa12>
    cd3a:	b.n	cb16 <_dtoa_r+0xa06>
    cd3c:	ldr	r3, [sp, #4]
    cd3e:	cmp	r3, #2
    cd40:	bgt.n	cd54 <_dtoa_r+0xc44>
    cd42:	ldr	r7, [sp, #52]	; 0x34
    cd44:	b.n	c5bc <_dtoa_r+0x4ac>
    cd46:	movs	r1, #2
    cd48:	b.n	c71a <_dtoa_r+0x60a>
    cd4a:	ldr	r3, [sp, #4]
    cd4c:	cmp	r3, #2
    cd4e:	bgt.n	cd54 <_dtoa_r+0xc44>
    cd50:	ldr	r7, [sp, #52]	; 0x34
    cd52:	b.n	c8b2 <_dtoa_r+0x7a2>
    cd54:	ldr	r7, [sp, #52]	; 0x34
    cd56:	b.n	c9fc <_dtoa_r+0x8ec>
    cd58:	movs	r3, #1
    cd5a:	str	r3, [sp, #56]	; 0x38
    cd5c:	b.w	c2a2 <_dtoa_r+0x192>
    cd60:	beq.w	c582 <_dtoa_r+0x472>
    cd64:	rsb	r0, r0, #60	; 0x3c
    cd68:	b.n	c574 <_dtoa_r+0x464>
    cd6a:	movs	r5, #0
    cd6c:	str	r5, [r4, #68]	; 0x44
    cd6e:	mov	r1, r5
    cd70:	mov	r0, r4
    cd72:	bl	b960 <_Balloc>
    cd76:	mov.w	r7, #4294967295
    cd7a:	movs	r3, #1
    cd7c:	str	r0, [sp, #32]
    cd7e:	mov	r8, r5
    cd80:	str	r0, [r4, #64]	; 0x40
    cd82:	str	r7, [sp, #52]	; 0x34
    cd84:	str	r3, [sp, #36]	; 0x24
    cd86:	b.w	c30a <_dtoa_r+0x1fa>
    cd8a:	nop
    cd8c:	.word	0x20000da0
    cd90:	.word	0x20000e68
    cd94:	.word	0x00000000

0000cd98 <_svfprintf_r>:
    cd98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd9c:	vpush	{d8-d10}
    cda0:	sub	sp, #228	; 0xe4
    cda2:	mov	r4, r1
    cda4:	str	r1, [sp, #12]
    cda6:	mov	sl, r2
    cda8:	str	r3, [sp, #36]	; 0x24
    cdaa:	str	r0, [sp, #20]
    cdac:	bl	b898 <_localeconv_r>
    cdb0:	ldr	r3, [r0, #0]
    cdb2:	str	r3, [sp, #64]	; 0x40
    cdb4:	mov	r0, r3
    cdb6:	bl	b400 <strlen>
    cdba:	ldrh	r3, [r4, #12]
    cdbc:	str	r0, [sp, #60]	; 0x3c
    cdbe:	lsls	r1, r3, #24
    cdc0:	bpl.n	cdca <_svfprintf_r+0x32>
    cdc2:	ldr	r3, [r4, #16]
    cdc4:	cmp	r3, #0
    cdc6:	beq.w	dec4 <_svfprintf_r+0x112c>
    cdca:	movs	r3, #0
    cdcc:	vldr	d8, [pc, #656]	; d060 <_svfprintf_r+0x2c8>
    cdd0:	vldr	d9, [pc, #660]	; d068 <_svfprintf_r+0x2d0>
    cdd4:	str	r3, [sp, #52]	; 0x34
    cdd6:	str	r3, [sp, #116]	; 0x74
    cdd8:	str	r3, [sp, #112]	; 0x70
    cdda:	str	r3, [sp, #68]	; 0x44
    cddc:	str	r3, [sp, #24]
    cdde:	add	r3, sp, #160	; 0xa0
    cde0:	str	r3, [sp, #108]	; 0x6c
    cde2:	mov	r9, r3
    cde4:	ldrb.w	r3, [sl]
    cde8:	mov	r4, sl
    cdea:	cbz	r3, ce28 <_svfprintf_r+0x90>
    cdec:	cmp	r3, #37	; 0x25
    cdee:	bne.n	cdf6 <_svfprintf_r+0x5e>
    cdf0:	b.n	ce28 <_svfprintf_r+0x90>
    cdf2:	cmp	r3, #37	; 0x25
    cdf4:	beq.n	cdfe <_svfprintf_r+0x66>
    cdf6:	ldrb.w	r3, [r4, #1]!
    cdfa:	cmp	r3, #0
    cdfc:	bne.n	cdf2 <_svfprintf_r+0x5a>
    cdfe:	rsb	r5, sl, r4
    ce02:	cbz	r5, ce28 <_svfprintf_r+0x90>
    ce04:	ldr	r3, [sp, #112]	; 0x70
    ce06:	ldr	r2, [sp, #116]	; 0x74
    ce08:	str.w	sl, [r9]
    ce0c:	adds	r3, #1
    ce0e:	add	r2, r5
    ce10:	cmp	r3, #7
    ce12:	str.w	r5, [r9, #4]
    ce16:	str	r2, [sp, #116]	; 0x74
    ce18:	str	r3, [sp, #112]	; 0x70
    ce1a:	bgt.w	cf64 <_svfprintf_r+0x1cc>
    ce1e:	add.w	r9, r9, #8
    ce22:	ldr	r3, [sp, #24]
    ce24:	add	r3, r5
    ce26:	str	r3, [sp, #24]
    ce28:	ldrb	r3, [r4, #0]
    ce2a:	cmp	r3, #0
    ce2c:	beq.w	cf76 <_svfprintf_r+0x1de>
    ce30:	movs	r3, #0
    ce32:	mov	r2, r3
    ce34:	strb.w	r3, [sp, #79]	; 0x4f
    ce38:	mov	r1, r3
    ce3a:	str	r3, [sp, #28]
    ce3c:	mov	fp, r3
    ce3e:	mov.w	r8, #4294967295
    ce42:	ldrb	r3, [r4, #1]
    ce44:	add.w	sl, r4, #1
    ce48:	mov	r5, r8
    ce4a:	add.w	sl, sl, #1
    ce4e:	sub.w	r0, r3, #32
    ce52:	cmp	r0, #88	; 0x58
    ce54:	bhi.w	d648 <_svfprintf_r+0x8b0>
    ce58:	tbh	[pc, r0, lsl #1]
    ce5c:	.word	0x03f60363
    ce60:	.word	0x036b03f6
    ce64:	.word	0x03f603f6
    ce68:	.word	0x03f603f6
    ce6c:	.word	0x03f603f6
    ce70:	.word	0x037e0370
    ce74:	.word	0x005d03f6
    ce78:	.word	0x03f600df
    ce7c:	.word	0x010c00fb
    ce80:	.word	0x010c010c
    ce84:	.word	0x010c010c
    ce88:	.word	0x010c010c
    ce8c:	.word	0x010c010c
    ce90:	.word	0x03f603f6
    ce94:	.word	0x03f603f6
    ce98:	.word	0x03f603f6
    ce9c:	.word	0x03f603f6
    cea0:	.word	0x03f603f6
    cea4:	.word	0x015e011c
    cea8:	.word	0x015e03f6
    ceac:	.word	0x03f603f6
    ceb0:	.word	0x03f603f6
    ceb4:	.word	0x03f602a1
    ceb8:	.word	0x02a603f6
    cebc:	.word	0x03f603f6
    cec0:	.word	0x03f603f6
    cec4:	.word	0x02d803f6
    cec8:	.word	0x03f603f6
    cecc:	.word	0x03f60305
    ced0:	.word	0x03f603f6
    ced4:	.word	0x03f603f6
    ced8:	.word	0x03f603f6
    cedc:	.word	0x03f603f6
    cee0:	.word	0x034303f6
    cee4:	.word	0x015e0356
    cee8:	.word	0x015e015e
    ceec:	.word	0x0356035e
    cef0:	.word	0x03f603f6
    cef4:	.word	0x03f603a4
    cef8:	.word	0x00a203b1
    cefc:	.word	0x03c30062
    cf00:	.word	0x03c803f6
    cf04:	.word	0x038303f6
    cf08:	.word	0x03f603f6
    cf0c:	.short	0x038b
    cf0e:	ldr	r0, [sp, #28]
    cf10:	str	r3, [sp, #36]	; 0x24
    cf12:	negs	r0, r0
    cf14:	str	r0, [sp, #28]
    cf16:	orr.w	fp, fp, #4
    cf1a:	ldrb.w	r3, [sl]
    cf1e:	b.n	ce4a <_svfprintf_r+0xb2>
    cf20:	mov	r8, r5
    cf22:	ldr	r0, [sp, #36]	; 0x24
    cf24:	movs	r1, #0
    cf26:	movs	r3, #48	; 0x30
    cf28:	movs	r2, #120	; 0x78
    cf2a:	cmp	r8, r1
    cf2c:	strb.w	r3, [sp, #80]	; 0x50
    cf30:	ldr	r4, [r0, #0]
    cf32:	strb.w	r2, [sp, #81]	; 0x51
    cf36:	add.w	r7, r0, #4
    cf3a:	mov.w	r5, #0
    cf3e:	strb.w	r1, [sp, #79]	; 0x4f
    cf42:	orr.w	r3, fp, #2
    cf46:	blt.w	d682 <_svfprintf_r+0x8ea>
    cf4a:	bic.w	r3, fp, #128	; 0x80
    cf4e:	orr.w	fp, r3, #2
    cf52:	orrs.w	r3, r4, r5
    cf56:	str	r7, [sp, #36]	; 0x24
    cf58:	beq.w	d62e <_svfprintf_r+0x896>
    cf5c:	mov	r7, r1
    cf5e:	str	r2, [sp, #48]	; 0x30
    cf60:	ldr	r0, [pc, #268]	; (d070 <_svfprintf_r+0x2d8>)
    cf62:	b.n	d4c2 <_svfprintf_r+0x72a>
    cf64:	add	r2, sp, #108	; 0x6c
    cf66:	ldr	r1, [sp, #12]
    cf68:	ldr	r0, [sp, #20]
    cf6a:	bl	e308 <__ssprint_r>
    cf6e:	cbnz	r0, cf84 <_svfprintf_r+0x1ec>
    cf70:	add.w	r9, sp, #160	; 0xa0
    cf74:	b.n	ce22 <_svfprintf_r+0x8a>
    cf76:	ldr	r3, [sp, #116]	; 0x74
    cf78:	cbz	r3, cf84 <_svfprintf_r+0x1ec>
    cf7a:	ldr	r0, [sp, #20]
    cf7c:	ldr	r1, [sp, #12]
    cf7e:	add	r2, sp, #108	; 0x6c
    cf80:	bl	e308 <__ssprint_r>
    cf84:	ldr	r3, [sp, #12]
    cf86:	ldrh	r3, [r3, #12]
    cf88:	tst.w	r3, #64	; 0x40
    cf8c:	ldr	r3, [sp, #24]
    cf8e:	it	ne
    cf90:	movne.w	r3, #4294967295
    cf94:	mov	r0, r3
    cf96:	add	sp, #228	; 0xe4
    cf98:	vpop	{d8-d10}
    cf9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfa0:	str	r3, [sp, #48]	; 0x30
    cfa2:	mov	r8, r5
    cfa4:	cmp	r2, #0
    cfa6:	bne.w	e2de <_svfprintf_r+0x1546>
    cfaa:	ands.w	r3, fp, #32
    cfae:	beq.w	d3be <_svfprintf_r+0x626>
    cfb2:	ldr	r7, [sp, #36]	; 0x24
    cfb4:	adds	r7, #7
    cfb6:	bic.w	r3, r7, #7
    cfba:	movs	r7, #0
    cfbc:	add.w	r2, r3, #8
    cfc0:	cmp	r8, r7
    cfc2:	str	r2, [sp, #36]	; 0x24
    cfc4:	ldrd	r4, r5, [r3]
    cfc8:	strb.w	r7, [sp, #79]	; 0x4f
    cfcc:	blt.w	dc8c <_svfprintf_r+0xef4>
    cfd0:	orrs.w	r3, r4, r5
    cfd4:	bic.w	fp, fp, #128	; 0x80
    cfd8:	beq.w	d672 <_svfprintf_r+0x8da>
    cfdc:	add	r6, sp, #160	; 0xa0
    cfde:	lsrs	r2, r4, #3
    cfe0:	orr.w	r2, r2, r5, lsl #29
    cfe4:	lsrs	r1, r5, #3
    cfe6:	and.w	r3, r4, #7
    cfea:	mov	r5, r1
    cfec:	mov	r4, r2
    cfee:	adds	r3, #48	; 0x30
    cff0:	orrs.w	r2, r4, r5
    cff4:	strb.w	r3, [r6, #-1]!
    cff8:	bne.n	cfde <_svfprintf_r+0x246>
    cffa:	tst.w	fp, #1
    cffe:	beq.w	d450 <_svfprintf_r+0x6b8>
    d002:	cmp	r3, #48	; 0x30
    d004:	beq.w	d450 <_svfprintf_r+0x6b8>
    d008:	movs	r2, #48	; 0x30
    d00a:	subs	r3, r6, #1
    d00c:	strb.w	r2, [r6, #-1]
    d010:	add	r2, sp, #160	; 0xa0
    d012:	subs	r2, r2, r3
    d014:	str	r2, [sp, #32]
    d016:	mov	r6, r3
    d018:	b.n	d456 <_svfprintf_r+0x6be>
    d01a:	ldrb.w	r3, [sl]
    d01e:	cmp	r3, #42	; 0x2a
    d020:	add.w	r4, sl, #1
    d024:	beq.w	e286 <_svfprintf_r+0x14ee>
    d028:	sub.w	r0, r3, #48	; 0x30
    d02c:	cmp	r0, #9
    d02e:	it	ls
    d030:	movls	r5, #0
    d032:	bhi.w	e1e0 <_svfprintf_r+0x1448>
    d036:	ldrb.w	r3, [r4], #1
    d03a:	add.w	r5, r5, r5, lsl #2
    d03e:	add.w	r5, r0, r5, lsl #1
    d042:	sub.w	r0, r3, #48	; 0x30
    d046:	cmp	r0, #9
    d048:	bls.n	d036 <_svfprintf_r+0x29e>
    d04a:	orr.w	r5, r5, r5, asr #31
    d04e:	mov	sl, r4
    d050:	b.n	ce4e <_svfprintf_r+0xb6>
    d052:	orr.w	fp, fp, #128	; 0x80
    d056:	ldrb.w	r3, [sl]
    d05a:	b.n	ce4a <_svfprintf_r+0xb2>
    d05c:	nop.w
	...
    d068:	.word	0xffffffff
    d06c:	.word	0x7fefffff
    d070:	.word	0x20000ee4
    d074:	sub.w	r0, r3, #48	; 0x30
    d078:	movs	r3, #0
    d07a:	mov	r4, r3
    d07c:	ldrb.w	r3, [sl], #1
    d080:	add.w	r4, r4, r4, lsl #2
    d084:	add.w	r4, r0, r4, lsl #1
    d088:	sub.w	r0, r3, #48	; 0x30
    d08c:	cmp	r0, #9
    d08e:	bls.n	d07c <_svfprintf_r+0x2e4>
    d090:	str	r4, [sp, #28]
    d092:	b.n	ce4e <_svfprintf_r+0xb6>
    d094:	str	r3, [sp, #48]	; 0x30
    d096:	mov	r8, r5
    d098:	cmp	r2, #0
    d09a:	bne.w	e2f6 <_svfprintf_r+0x155e>
    d09e:	orr.w	fp, fp, #16
    d0a2:	tst.w	fp, #32
    d0a6:	beq.w	dab0 <_svfprintf_r+0xd18>
    d0aa:	ldr	r7, [sp, #36]	; 0x24
    d0ac:	adds	r7, #7
    d0ae:	bic.w	r7, r7, #7
    d0b2:	ldrd	r2, r3, [r7]
    d0b6:	add.w	r1, r7, #8
    d0ba:	str	r1, [sp, #36]	; 0x24
    d0bc:	mov	r4, r2
    d0be:	mov	r5, r3
    d0c0:	cmp	r2, #0
    d0c2:	sbcs.w	r3, r3, #0
    d0c6:	blt.w	db38 <_svfprintf_r+0xda0>
    d0ca:	cmp.w	r8, #0
    d0ce:	ldrb.w	r7, [sp, #79]	; 0x4f
    d0d2:	blt.w	d440 <_svfprintf_r+0x6a8>
    d0d6:	orrs.w	r3, r4, r5
    d0da:	bic.w	fp, fp, #128	; 0x80
    d0de:	beq.w	d8ce <_svfprintf_r+0xb36>
    d0e2:	cmp	r5, #0
    d0e4:	it	eq
    d0e6:	cmpeq	r4, #10
    d0e8:	bcc.w	d448 <_svfprintf_r+0x6b0>
    d0ec:	add	r6, sp, #160	; 0xa0
    d0ee:	mov	r0, r4
    d0f0:	mov	r1, r5
    d0f2:	movs	r2, #10
    d0f4:	movs	r3, #0
    d0f6:	bl	e408 <__aeabi_uldivmod>
    d0fa:	adds	r2, #48	; 0x30
    d0fc:	strb.w	r2, [r6, #-1]!
    d100:	mov	r0, r4
    d102:	mov	r1, r5
    d104:	movs	r3, #0
    d106:	movs	r2, #10
    d108:	bl	e408 <__aeabi_uldivmod>
    d10c:	mov	r4, r0
    d10e:	mov	r5, r1
    d110:	orrs.w	r3, r4, r5
    d114:	bne.n	d0ee <_svfprintf_r+0x356>
    d116:	b.n	d450 <_svfprintf_r+0x6b8>
    d118:	str	r3, [sp, #48]	; 0x30
    d11a:	mov	r8, r5
    d11c:	cmp	r2, #0
    d11e:	bne.w	e2ee <_svfprintf_r+0x1556>
    d122:	ldr	r7, [sp, #36]	; 0x24
    d124:	tst.w	fp, #8
    d128:	add.w	r7, r7, #7
    d12c:	beq.w	ddb0 <_svfprintf_r+0x1018>
    d130:	bic.w	r3, r7, #7
    d134:	vldr	d8, [r3]
    d138:	add.w	r2, r3, #8
    d13c:	str	r2, [sp, #36]	; 0x24
    d13e:	vabs.f64	d7, d8
    d142:	vcmp.f64	d7, d9
    d146:	vmrs	APSR_nzcv, fpscr
    d14a:	ble.w	dcc6 <_svfprintf_r+0xf2e>
    d14e:	vcmpe.f64	d8, #0.0
    d152:	vmrs	APSR_nzcv, fpscr
    d156:	bmi.w	e0ee <_svfprintf_r+0x1356>
    d15a:	ldrb.w	r7, [sp, #79]	; 0x4f
    d15e:	ldr	r6, [pc, #668]	; (d3fc <_svfprintf_r+0x664>)
    d160:	ldr	r3, [pc, #668]	; (d400 <_svfprintf_r+0x668>)
    d162:	ldr	r1, [sp, #48]	; 0x30
    d164:	movs	r2, #3
    d166:	mov.w	r8, #0
    d16a:	str	r2, [sp, #16]
    d16c:	bic.w	fp, fp, #128	; 0x80
    d170:	cmp	r1, #71	; 0x47
    d172:	it	le
    d174:	movle	r6, r3
    d176:	str	r2, [sp, #32]
    d178:	str.w	r8, [sp, #56]	; 0x38
    d17c:	cbz	r7, d184 <_svfprintf_r+0x3ec>
    d17e:	ldr	r3, [sp, #16]
    d180:	adds	r3, #1
    d182:	str	r3, [sp, #16]
    d184:	ands.w	r3, fp, #2
    d188:	str	r3, [sp, #40]	; 0x28
    d18a:	beq.n	d192 <_svfprintf_r+0x3fa>
    d18c:	ldr	r3, [sp, #16]
    d18e:	adds	r3, #2
    d190:	str	r3, [sp, #16]
    d192:	ands.w	r3, fp, #132	; 0x84
    d196:	str	r3, [sp, #44]	; 0x2c
    d198:	bne.w	d69c <_svfprintf_r+0x904>
    d19c:	ldr	r3, [sp, #28]
    d19e:	ldr	r2, [sp, #16]
    d1a0:	subs	r4, r3, r2
    d1a2:	cmp	r4, #0
    d1a4:	ble.w	d69c <_svfprintf_r+0x904>
    d1a8:	cmp	r4, #16
    d1aa:	ldr	r1, [sp, #116]	; 0x74
    d1ac:	ldr	r2, [sp, #112]	; 0x70
    d1ae:	ldr	r7, [pc, #596]	; (d404 <_svfprintf_r+0x66c>)
    d1b0:	ble.n	d1fa <_svfprintf_r+0x462>
    d1b2:	mov	r0, r9
    d1b4:	movs	r5, #16
    d1b6:	mov	r9, r8
    d1b8:	mov	r8, r6
    d1ba:	ldr	r6, [sp, #20]
    d1bc:	b.n	d1c8 <_svfprintf_r+0x430>
    d1be:	subs	r4, #16
    d1c0:	cmp	r4, #16
    d1c2:	add.w	r0, r0, #8
    d1c6:	ble.n	d1f4 <_svfprintf_r+0x45c>
    d1c8:	adds	r2, #1
    d1ca:	adds	r1, #16
    d1cc:	cmp	r2, #7
    d1ce:	str	r1, [sp, #116]	; 0x74
    d1d0:	str	r2, [sp, #112]	; 0x70
    d1d2:	str	r7, [r0, #0]
    d1d4:	str	r5, [r0, #4]
    d1d6:	ble.n	d1be <_svfprintf_r+0x426>
    d1d8:	add	r2, sp, #108	; 0x6c
    d1da:	ldr	r1, [sp, #12]
    d1dc:	mov	r0, r6
    d1de:	bl	e308 <__ssprint_r>
    d1e2:	cmp	r0, #0
    d1e4:	bne.w	cf84 <_svfprintf_r+0x1ec>
    d1e8:	subs	r4, #16
    d1ea:	cmp	r4, #16
    d1ec:	ldr	r1, [sp, #116]	; 0x74
    d1ee:	ldr	r2, [sp, #112]	; 0x70
    d1f0:	add	r0, sp, #160	; 0xa0
    d1f2:	bgt.n	d1c8 <_svfprintf_r+0x430>
    d1f4:	mov	r6, r8
    d1f6:	mov	r8, r9
    d1f8:	mov	r9, r0
    d1fa:	adds	r2, #1
    d1fc:	adds	r3, r4, r1
    d1fe:	cmp	r2, #7
    d200:	str	r3, [sp, #116]	; 0x74
    d202:	str	r2, [sp, #112]	; 0x70
    d204:	str.w	r7, [r9]
    d208:	str.w	r4, [r9, #4]
    d20c:	bgt.w	d9d4 <_svfprintf_r+0xc3c>
    d210:	ldrb.w	r7, [sp, #79]	; 0x4f
    d214:	add.w	r9, r9, #8
    d218:	cbz	r7, d238 <_svfprintf_r+0x4a0>
    d21a:	ldr	r2, [sp, #112]	; 0x70
    d21c:	adds	r2, #1
    d21e:	adds	r3, #1
    d220:	add.w	r0, sp, #79	; 0x4f
    d224:	movs	r1, #1
    d226:	cmp	r2, #7
    d228:	str	r3, [sp, #116]	; 0x74
    d22a:	str	r2, [sp, #112]	; 0x70
    d22c:	stmia.w	r9, {r0, r1}
    d230:	bgt.w	d8f2 <_svfprintf_r+0xb5a>
    d234:	add.w	r9, r9, #8
    d238:	ldr	r2, [sp, #40]	; 0x28
    d23a:	cbz	r2, d258 <_svfprintf_r+0x4c0>
    d23c:	ldr	r2, [sp, #112]	; 0x70
    d23e:	adds	r2, #1
    d240:	adds	r3, #2
    d242:	add	r0, sp, #80	; 0x50
    d244:	movs	r1, #2
    d246:	cmp	r2, #7
    d248:	str	r3, [sp, #116]	; 0x74
    d24a:	str	r2, [sp, #112]	; 0x70
    d24c:	stmia.w	r9, {r0, r1}
    d250:	bgt.w	d90a <_svfprintf_r+0xb72>
    d254:	add.w	r9, r9, #8
    d258:	ldr	r2, [sp, #44]	; 0x2c
    d25a:	cmp	r2, #128	; 0x80
    d25c:	beq.w	d75c <_svfprintf_r+0x9c4>
    d260:	ldr	r2, [sp, #32]
    d262:	rsb	r4, r2, r8
    d266:	cmp	r4, #0
    d268:	ble.n	d2d4 <_svfprintf_r+0x53c>
    d26a:	cmp	r4, #16
    d26c:	ldr	r2, [sp, #112]	; 0x70
    d26e:	ldr	r7, [pc, #408]	; (d408 <_svfprintf_r+0x670>)
    d270:	ble.n	d2ba <_svfprintf_r+0x522>
    d272:	mov	r1, r9
    d274:	mov.w	r8, #16
    d278:	mov	r9, r6
    d27a:	ldr	r5, [sp, #20]
    d27c:	ldr	r6, [sp, #12]
    d27e:	b.n	d28a <_svfprintf_r+0x4f2>
    d280:	subs	r4, #16
    d282:	cmp	r4, #16
    d284:	add.w	r1, r1, #8
    d288:	ble.n	d2b6 <_svfprintf_r+0x51e>
    d28a:	adds	r2, #1
    d28c:	adds	r3, #16
    d28e:	cmp	r2, #7
    d290:	str	r3, [sp, #116]	; 0x74
    d292:	str	r2, [sp, #112]	; 0x70
    d294:	stmia.w	r1, {r7, r8}
    d298:	ble.n	d280 <_svfprintf_r+0x4e8>
    d29a:	add	r2, sp, #108	; 0x6c
    d29c:	mov	r1, r6
    d29e:	mov	r0, r5
    d2a0:	bl	e308 <__ssprint_r>
    d2a4:	cmp	r0, #0
    d2a6:	bne.w	cf84 <_svfprintf_r+0x1ec>
    d2aa:	subs	r4, #16
    d2ac:	cmp	r4, #16
    d2ae:	ldr	r3, [sp, #116]	; 0x74
    d2b0:	ldr	r2, [sp, #112]	; 0x70
    d2b2:	add	r1, sp, #160	; 0xa0
    d2b4:	bgt.n	d28a <_svfprintf_r+0x4f2>
    d2b6:	mov	r6, r9
    d2b8:	mov	r9, r1
    d2ba:	adds	r2, #1
    d2bc:	add	r3, r4
    d2be:	cmp	r2, #7
    d2c0:	str	r3, [sp, #116]	; 0x74
    d2c2:	str	r2, [sp, #112]	; 0x70
    d2c4:	str.w	r7, [r9]
    d2c8:	str.w	r4, [r9, #4]
    d2cc:	bgt.w	d8da <_svfprintf_r+0xb42>
    d2d0:	add.w	r9, r9, #8
    d2d4:	tst.w	fp, #256	; 0x100
    d2d8:	bne.w	d6a0 <_svfprintf_r+0x908>
    d2dc:	ldr	r2, [sp, #112]	; 0x70
    d2de:	ldr	r0, [sp, #32]
    d2e0:	str.w	r6, [r9]
    d2e4:	adds	r2, #1
    d2e6:	add	r3, r0
    d2e8:	cmp	r2, #7
    d2ea:	str	r3, [sp, #116]	; 0x74
    d2ec:	str.w	r0, [r9, #4]
    d2f0:	str	r2, [sp, #112]	; 0x70
    d2f2:	bgt.w	d87a <_svfprintf_r+0xae2>
    d2f6:	add.w	r9, r9, #8
    d2fa:	tst.w	fp, #4
    d2fe:	beq.n	d37e <_svfprintf_r+0x5e6>
    d300:	ldr	r2, [sp, #28]
    d302:	ldr	r1, [sp, #16]
    d304:	subs	r4, r2, r1
    d306:	cmp	r4, #0
    d308:	ble.n	d37e <_svfprintf_r+0x5e6>
    d30a:	cmp	r4, #16
    d30c:	ldr	r2, [sp, #112]	; 0x70
    d30e:	ldr	r7, [pc, #244]	; (d404 <_svfprintf_r+0x66c>)
    d310:	ble.n	d358 <_svfprintf_r+0x5c0>
    d312:	movs	r5, #16
    d314:	ldr	r6, [sp, #20]
    d316:	ldr.w	r8, [sp, #12]
    d31a:	b.n	d326 <_svfprintf_r+0x58e>
    d31c:	subs	r4, #16
    d31e:	cmp	r4, #16
    d320:	add.w	r9, r9, #8
    d324:	ble.n	d358 <_svfprintf_r+0x5c0>
    d326:	adds	r2, #1
    d328:	adds	r3, #16
    d32a:	cmp	r2, #7
    d32c:	str	r3, [sp, #116]	; 0x74
    d32e:	str	r2, [sp, #112]	; 0x70
    d330:	str.w	r7, [r9]
    d334:	str.w	r5, [r9, #4]
    d338:	ble.n	d31c <_svfprintf_r+0x584>
    d33a:	add	r2, sp, #108	; 0x6c
    d33c:	mov	r1, r8
    d33e:	mov	r0, r6
    d340:	bl	e308 <__ssprint_r>
    d344:	cmp	r0, #0
    d346:	bne.w	cf84 <_svfprintf_r+0x1ec>
    d34a:	subs	r4, #16
    d34c:	cmp	r4, #16
    d34e:	ldr	r3, [sp, #116]	; 0x74
    d350:	ldr	r2, [sp, #112]	; 0x70
    d352:	add.w	r9, sp, #160	; 0xa0
    d356:	bgt.n	d326 <_svfprintf_r+0x58e>
    d358:	adds	r2, #1
    d35a:	add	r3, r4
    d35c:	cmp	r2, #7
    d35e:	str	r3, [sp, #116]	; 0x74
    d360:	str	r2, [sp, #112]	; 0x70
    d362:	str.w	r7, [r9]
    d366:	str.w	r4, [r9, #4]
    d36a:	ble.n	d37e <_svfprintf_r+0x5e6>
    d36c:	add	r2, sp, #108	; 0x6c
    d36e:	ldr	r1, [sp, #12]
    d370:	ldr	r0, [sp, #20]
    d372:	bl	e308 <__ssprint_r>
    d376:	cmp	r0, #0
    d378:	bne.w	cf84 <_svfprintf_r+0x1ec>
    d37c:	ldr	r3, [sp, #116]	; 0x74
    d37e:	ldr	r2, [sp, #24]
    d380:	ldr	r1, [sp, #28]
    d382:	ldr	r0, [sp, #16]
    d384:	cmp	r1, r0
    d386:	ite	ge
    d388:	addge	r2, r2, r1
    d38a:	addlt	r2, r2, r0
    d38c:	str	r2, [sp, #24]
    d38e:	cmp	r3, #0
    d390:	bne.w	d892 <_svfprintf_r+0xafa>
    d394:	movs	r3, #0
    d396:	str	r3, [sp, #112]	; 0x70
    d398:	add.w	r9, sp, #160	; 0xa0
    d39c:	b.n	cde4 <_svfprintf_r+0x4c>
    d39e:	orr.w	fp, fp, #8
    d3a2:	ldrb.w	r3, [sl]
    d3a6:	b.n	ce4a <_svfprintf_r+0xb2>
    d3a8:	str	r3, [sp, #48]	; 0x30
    d3aa:	mov	r8, r5
    d3ac:	cmp	r2, #0
    d3ae:	bne.w	e2e6 <_svfprintf_r+0x154e>
    d3b2:	orr.w	fp, fp, #16
    d3b6:	ands.w	r3, fp, #32
    d3ba:	bne.w	cfb2 <_svfprintf_r+0x21a>
    d3be:	ands.w	r2, fp, #16
    d3c2:	bne.w	dae8 <_svfprintf_r+0xd50>
    d3c6:	ands.w	r3, fp, #64	; 0x40
    d3ca:	beq.w	dae8 <_svfprintf_r+0xd50>
    d3ce:	ldr	r1, [sp, #36]	; 0x24
    d3d0:	strb.w	r2, [sp, #79]	; 0x4f
    d3d4:	mov	r3, r1
    d3d6:	cmp.w	r8, #0
    d3da:	add.w	r3, r3, #4
    d3de:	ldrh	r4, [r1, #0]
    d3e0:	mov.w	r5, #0
    d3e4:	blt.w	df3e <_svfprintf_r+0x11a6>
    d3e8:	orrs.w	r1, r4, r5
    d3ec:	bic.w	fp, fp, #128	; 0x80
    d3f0:	str	r3, [sp, #36]	; 0x24
    d3f2:	beq.w	d672 <_svfprintf_r+0x8da>
    d3f6:	mov	r7, r2
    d3f8:	b.n	cfdc <_svfprintf_r+0x244>
    d3fa:	nop
    d3fc:	.word	0x20000ec4
    d400:	.word	0x20000ec0
    d404:	.word	0x20000f00
    d408:	.word	0x20000eb0
    d40c:	str	r3, [sp, #48]	; 0x30
    d40e:	mov	r8, r5
    d410:	cmp	r2, #0
    d412:	bne.w	e2c8 <_svfprintf_r+0x1530>
    d416:	orr.w	fp, fp, #16
    d41a:	ands.w	r3, fp, #32
    d41e:	beq.w	d9f0 <_svfprintf_r+0xc58>
    d422:	ldr	r7, [sp, #36]	; 0x24
    d424:	adds	r7, #7
    d426:	bic.w	r3, r7, #7
    d42a:	movs	r7, #0
    d42c:	add.w	r2, r3, #8
    d430:	cmp	r8, r7
    d432:	str	r2, [sp, #36]	; 0x24
    d434:	ldrd	r4, r5, [r3]
    d438:	strb.w	r7, [sp, #79]	; 0x4f
    d43c:	bge.w	d0d6 <_svfprintf_r+0x33e>
    d440:	orrs.w	r3, r4, r5
    d444:	bne.w	d0e2 <_svfprintf_r+0x34a>
    d448:	add	r6, sp, #224	; 0xe0
    d44a:	adds	r4, #48	; 0x30
    d44c:	strb.w	r4, [r6, #-65]!
    d450:	add	r3, sp, #160	; 0xa0
    d452:	subs	r3, r3, r6
    d454:	str	r3, [sp, #32]
    d456:	ldr	r3, [sp, #32]
    d458:	cmp	r3, r8
    d45a:	it	lt
    d45c:	movlt	r3, r8
    d45e:	str	r3, [sp, #16]
    d460:	movs	r3, #0
    d462:	str	r3, [sp, #56]	; 0x38
    d464:	b.n	d17c <_svfprintf_r+0x3e4>
    d466:	str	r3, [sp, #48]	; 0x30
    d468:	mov	r8, r5
    d46a:	cmp	r2, #0
    d46c:	bne.w	e2c0 <_svfprintf_r+0x1528>
    d470:	tst.w	fp, #32
    d474:	ldr	r0, [pc, #776]	; (d780 <_svfprintf_r+0x9e8>)
    d476:	beq.w	d586 <_svfprintf_r+0x7ee>
    d47a:	ldr	r7, [sp, #36]	; 0x24
    d47c:	adds	r7, #7
    d47e:	bic.w	r3, r7, #7
    d482:	ldrd	r4, r5, [r3]
    d486:	add.w	r2, r3, #8
    d48a:	str	r2, [sp, #36]	; 0x24
    d48c:	ands.w	r7, fp, #1
    d490:	beq.w	d922 <_svfprintf_r+0xb8a>
    d494:	orrs.w	r3, r4, r5
    d498:	beq.w	dde2 <_svfprintf_r+0x104a>
    d49c:	movs	r7, #0
    d49e:	movs	r3, #48	; 0x30
    d4a0:	ldrb.w	r2, [sp, #48]	; 0x30
    d4a4:	strb.w	r3, [sp, #80]	; 0x50
    d4a8:	cmp	r8, r7
    d4aa:	strb.w	r2, [sp, #81]	; 0x51
    d4ae:	strb.w	r7, [sp, #79]	; 0x4f
    d4b2:	orr.w	r3, fp, #2
    d4b6:	blt.w	e0e8 <_svfprintf_r+0x1350>
    d4ba:	bic.w	r3, fp, #128	; 0x80
    d4be:	orr.w	fp, r3, #2
    d4c2:	add	r6, sp, #160	; 0xa0
    d4c4:	lsrs	r3, r4, #4
    d4c6:	and.w	r1, r4, #15
    d4ca:	orr.w	r3, r3, r5, lsl #28
    d4ce:	lsrs	r2, r5, #4
    d4d0:	mov	r4, r3
    d4d2:	mov	r5, r2
    d4d4:	ldrb	r3, [r0, r1]
    d4d6:	strb.w	r3, [r6, #-1]!
    d4da:	orrs.w	r3, r4, r5
    d4de:	bne.n	d4c4 <_svfprintf_r+0x72c>
    d4e0:	b.n	d450 <_svfprintf_r+0x6b8>
    d4e2:	ldr	r1, [sp, #36]	; 0x24
    d4e4:	str	r3, [sp, #48]	; 0x30
    d4e6:	ldr	r2, [r1, #0]
    d4e8:	strb.w	r2, [sp, #120]	; 0x78
    d4ec:	movs	r3, #0
    d4ee:	mov	r2, r1
    d4f0:	mov	r7, r3
    d4f2:	strb.w	r3, [sp, #79]	; 0x4f
    d4f6:	adds	r2, #4
    d4f8:	movs	r3, #1
    d4fa:	str	r3, [sp, #16]
    d4fc:	mov	r8, r7
    d4fe:	str	r7, [sp, #56]	; 0x38
    d500:	str	r2, [sp, #36]	; 0x24
    d502:	str	r3, [sp, #32]
    d504:	add	r6, sp, #120	; 0x78
    d506:	b.n	d184 <_svfprintf_r+0x3ec>
    d508:	str	r3, [sp, #48]	; 0x30
    d50a:	mov	r8, r5
    d50c:	cmp	r2, #0
    d50e:	beq.w	d0a2 <_svfprintf_r+0x30a>
    d512:	strb.w	r1, [sp, #79]	; 0x4f
    d516:	b.n	d0a2 <_svfprintf_r+0x30a>
    d518:	orr.w	fp, fp, #64	; 0x40
    d51c:	ldrb.w	r3, [sl]
    d520:	b.n	ce4a <_svfprintf_r+0xb2>
    d522:	ldrb.w	r3, [sl]
    d526:	cmp	r1, #0
    d528:	bne.w	ce4a <_svfprintf_r+0xb2>
    d52c:	movs	r2, #1
    d52e:	movs	r1, #32
    d530:	b.n	ce4a <_svfprintf_r+0xb2>
    d532:	orr.w	fp, fp, #1
    d536:	ldrb.w	r3, [sl]
    d53a:	b.n	ce4a <_svfprintf_r+0xb2>
    d53c:	ldr	r4, [sp, #36]	; 0x24
    d53e:	ldr	r3, [r4, #0]
    d540:	str	r3, [sp, #28]
    d542:	mov	r0, r3
    d544:	cmp	r0, #0
    d546:	mov	r3, r4
    d548:	add.w	r3, r3, #4
    d54c:	blt.w	cf0e <_svfprintf_r+0x176>
    d550:	str	r3, [sp, #36]	; 0x24
    d552:	ldrb.w	r3, [sl]
    d556:	b.n	ce4a <_svfprintf_r+0xb2>
    d558:	ldrb.w	r3, [sl]
    d55c:	movs	r2, #1
    d55e:	movs	r1, #43	; 0x2b
    d560:	b.n	ce4a <_svfprintf_r+0xb2>
    d562:	str	r3, [sp, #48]	; 0x30
    d564:	mov	r8, r5
    d566:	cmp	r2, #0
    d568:	beq.w	d41a <_svfprintf_r+0x682>
    d56c:	strb.w	r1, [sp, #79]	; 0x4f
    d570:	b.n	d41a <_svfprintf_r+0x682>
    d572:	str	r3, [sp, #48]	; 0x30
    d574:	mov	r8, r5
    d576:	cmp	r2, #0
    d578:	bne.w	e2d0 <_svfprintf_r+0x1538>
    d57c:	tst.w	fp, #32
    d580:	ldr	r0, [pc, #512]	; (d784 <_svfprintf_r+0x9ec>)
    d582:	bne.w	d47a <_svfprintf_r+0x6e2>
    d586:	ldr	r2, [sp, #36]	; 0x24
    d588:	tst.w	fp, #16
    d58c:	mov	r3, r2
    d58e:	bne.w	db14 <_svfprintf_r+0xd7c>
    d592:	tst.w	fp, #64	; 0x40
    d596:	beq.w	db14 <_svfprintf_r+0xd7c>
    d59a:	adds	r3, #4
    d59c:	ldrh	r4, [r2, #0]
    d59e:	str	r3, [sp, #36]	; 0x24
    d5a0:	movs	r5, #0
    d5a2:	b.n	d48c <_svfprintf_r+0x6f4>
    d5a4:	ldrb.w	r3, [sl]
    d5a8:	cmp	r3, #108	; 0x6c
    d5aa:	ittte	eq
    d5ac:	ldrbeq.w	r3, [sl, #1]
    d5b0:	orreq.w	fp, fp, #32
    d5b4:	addeq.w	sl, sl, #1
    d5b8:	orrne.w	fp, fp, #16
    d5bc:	b.n	ce4a <_svfprintf_r+0xb2>
    d5be:	cmp	r2, #0
    d5c0:	bne.w	e2a2 <_svfprintf_r+0x150a>
    d5c4:	tst.w	fp, #32
    d5c8:	beq.w	dc98 <_svfprintf_r+0xf00>
    d5cc:	ldr	r2, [sp, #36]	; 0x24
    d5ce:	ldr	r1, [sp, #24]
    d5d0:	ldr	r3, [r2, #0]
    d5d2:	asrs	r5, r1, #31
    d5d4:	mov	r0, r1
    d5d6:	adds	r2, #4
    d5d8:	mov	r1, r5
    d5da:	str	r2, [sp, #36]	; 0x24
    d5dc:	strd	r0, r1, [r3]
    d5e0:	b.n	cde4 <_svfprintf_r+0x4c>
    d5e2:	orr.w	fp, fp, #32
    d5e6:	ldrb.w	r3, [sl]
    d5ea:	b.n	ce4a <_svfprintf_r+0xb2>
    d5ec:	ldr	r2, [sp, #36]	; 0x24
    d5ee:	str	r3, [sp, #48]	; 0x30
    d5f0:	ldr	r6, [r2, #0]
    d5f2:	movs	r4, #0
    d5f4:	strb.w	r4, [sp, #79]	; 0x4f
    d5f8:	adds	r7, r2, #4
    d5fa:	cmp	r6, #0
    d5fc:	beq.w	e0ca <_svfprintf_r+0x1332>
    d600:	cmp	r5, #0
    d602:	blt.w	df4a <_svfprintf_r+0x11b2>
    d606:	mov	r2, r5
    d608:	mov	r1, r4
    d60a:	mov	r0, r6
    d60c:	bl	b8c0 <memchr>
    d610:	cmp	r0, #0
    d612:	beq.w	e1ae <_svfprintf_r+0x1416>
    d616:	subs	r3, r0, r6
    d618:	str	r3, [sp, #32]
    d61a:	mov	r8, r4
    d61c:	bic.w	r3, r3, r3, asr #31
    d620:	str	r7, [sp, #36]	; 0x24
    d622:	str	r3, [sp, #16]
    d624:	str.w	r8, [sp, #56]	; 0x38
    d628:	ldrb.w	r7, [sp, #79]	; 0x4f
    d62c:	b.n	d17c <_svfprintf_r+0x3e4>
    d62e:	ldr	r0, [pc, #340]	; (d784 <_svfprintf_r+0x9ec>)
    d630:	str	r2, [sp, #48]	; 0x30
    d632:	cmp.w	r8, #0
    d636:	bne.w	d942 <_svfprintf_r+0xbaa>
    d63a:	mov	r7, r8
    d63c:	mov.w	r8, #0
    d640:	str.w	r8, [sp, #32]
    d644:	add	r6, sp, #160	; 0xa0
    d646:	b.n	d456 <_svfprintf_r+0x6be>
    d648:	str	r3, [sp, #48]	; 0x30
    d64a:	cmp	r2, #0
    d64c:	bne.w	e2aa <_svfprintf_r+0x1512>
    d650:	ldr	r2, [sp, #48]	; 0x30
    d652:	cmp	r2, #0
    d654:	beq.w	cf76 <_svfprintf_r+0x1de>
    d658:	movs	r3, #0
    d65a:	movs	r1, #1
    d65c:	mov	r7, r3
    d65e:	str	r1, [sp, #16]
    d660:	strb.w	r2, [sp, #120]	; 0x78
    d664:	strb.w	r3, [sp, #79]	; 0x4f
    d668:	mov	r8, r3
    d66a:	str	r3, [sp, #56]	; 0x38
    d66c:	str	r1, [sp, #32]
    d66e:	add	r6, sp, #120	; 0x78
    d670:	b.n	d184 <_svfprintf_r+0x3ec>
    d672:	cmp.w	r8, #0
    d676:	beq.w	e190 <_svfprintf_r+0x13f8>
    d67a:	movs	r7, #0
    d67c:	movs	r4, #0
    d67e:	movs	r5, #0
    d680:	b.n	cfdc <_svfprintf_r+0x244>
    d682:	ldr	r0, [pc, #256]	; (d784 <_svfprintf_r+0x9ec>)
    d684:	str	r2, [sp, #48]	; 0x30
    d686:	mov	fp, r3
    d688:	orrs.w	r3, r4, r5
    d68c:	str	r7, [sp, #36]	; 0x24
    d68e:	mov.w	r7, #0
    d692:	bne.w	d4c2 <_svfprintf_r+0x72a>
    d696:	movs	r4, #0
    d698:	movs	r5, #0
    d69a:	b.n	d4c2 <_svfprintf_r+0x72a>
    d69c:	ldr	r3, [sp, #116]	; 0x74
    d69e:	b.n	d218 <_svfprintf_r+0x480>
    d6a0:	ldr	r2, [sp, #48]	; 0x30
    d6a2:	cmp	r2, #101	; 0x65
    d6a4:	ble.w	d7ea <_svfprintf_r+0xa52>
    d6a8:	vcmp.f64	d8, #0.0
    d6ac:	vmrs	APSR_nzcv, fpscr
    d6b0:	bne.w	d946 <_svfprintf_r+0xbae>
    d6b4:	ldr	r2, [sp, #112]	; 0x70
    d6b6:	ldr	r1, [pc, #208]	; (d788 <_svfprintf_r+0x9f0>)
    d6b8:	str.w	r1, [r9]
    d6bc:	adds	r2, #1
    d6be:	adds	r3, #1
    d6c0:	movs	r1, #1
    d6c2:	cmp	r2, #7
    d6c4:	str	r3, [sp, #116]	; 0x74
    d6c6:	str	r2, [sp, #112]	; 0x70
    d6c8:	str.w	r1, [r9, #4]
    d6cc:	bgt.w	ddf4 <_svfprintf_r+0x105c>
    d6d0:	add.w	r9, r9, #8
    d6d4:	ldr	r2, [sp, #84]	; 0x54
    d6d6:	ldr	r1, [sp, #52]	; 0x34
    d6d8:	cmp	r2, r1
    d6da:	blt.n	d6e4 <_svfprintf_r+0x94c>
    d6dc:	tst.w	fp, #1
    d6e0:	beq.w	d2fa <_svfprintf_r+0x562>
    d6e4:	ldr	r2, [sp, #112]	; 0x70
    d6e6:	ldr	r0, [sp, #60]	; 0x3c
    d6e8:	ldr	r1, [sp, #64]	; 0x40
    d6ea:	str.w	r1, [r9]
    d6ee:	adds	r2, #1
    d6f0:	add	r3, r0
    d6f2:	cmp	r2, #7
    d6f4:	str	r3, [sp, #116]	; 0x74
    d6f6:	str.w	r0, [r9, #4]
    d6fa:	str	r2, [sp, #112]	; 0x70
    d6fc:	bgt.w	deac <_svfprintf_r+0x1114>
    d700:	add.w	r9, r9, #8
    d704:	ldr	r2, [sp, #52]	; 0x34
    d706:	subs	r4, r2, #1
    d708:	cmp	r4, #0
    d70a:	ble.w	d2fa <_svfprintf_r+0x562>
    d70e:	cmp	r4, #16
    d710:	ldr	r2, [sp, #112]	; 0x70
    d712:	ldr	r7, [pc, #120]	; (d78c <_svfprintf_r+0x9f4>)
    d714:	ble.w	dad0 <_svfprintf_r+0xd38>
    d718:	movs	r5, #16
    d71a:	ldr	r6, [sp, #20]
    d71c:	ldr.w	r8, [sp, #12]
    d720:	b.n	d72e <_svfprintf_r+0x996>
    d722:	add.w	r9, r9, #8
    d726:	subs	r4, #16
    d728:	cmp	r4, #16
    d72a:	ble.w	dad0 <_svfprintf_r+0xd38>
    d72e:	adds	r2, #1
    d730:	adds	r3, #16
    d732:	cmp	r2, #7
    d734:	str	r3, [sp, #116]	; 0x74
    d736:	str	r2, [sp, #112]	; 0x70
    d738:	str.w	r7, [r9]
    d73c:	str.w	r5, [r9, #4]
    d740:	ble.n	d722 <_svfprintf_r+0x98a>
    d742:	add	r2, sp, #108	; 0x6c
    d744:	mov	r1, r8
    d746:	mov	r0, r6
    d748:	bl	e308 <__ssprint_r>
    d74c:	cmp	r0, #0
    d74e:	bne.w	cf84 <_svfprintf_r+0x1ec>
    d752:	ldr	r3, [sp, #116]	; 0x74
    d754:	ldr	r2, [sp, #112]	; 0x70
    d756:	add.w	r9, sp, #160	; 0xa0
    d75a:	b.n	d726 <_svfprintf_r+0x98e>
    d75c:	ldr	r2, [sp, #28]
    d75e:	ldr	r1, [sp, #16]
    d760:	subs	r4, r2, r1
    d762:	cmp	r4, #0
    d764:	ble.w	d260 <_svfprintf_r+0x4c8>
    d768:	cmp	r4, #16
    d76a:	ldr	r2, [sp, #112]	; 0x70
    d76c:	ldr	r7, [pc, #28]	; (d78c <_svfprintf_r+0x9f4>)
    d76e:	ble.n	d7ce <_svfprintf_r+0xa36>
    d770:	mov	r1, r9
    d772:	movs	r5, #16
    d774:	mov	r9, r8
    d776:	mov	r0, r3
    d778:	mov	r8, r6
    d77a:	ldr	r6, [sp, #20]
    d77c:	b.n	d79a <_svfprintf_r+0xa02>
    d77e:	nop
    d780:	.word	0x20000ed0
    d784:	.word	0x20000ee4
    d788:	.word	0x20000eac
    d78c:	.word	0x20000eb0
    d790:	subs	r4, #16
    d792:	cmp	r4, #16
    d794:	add.w	r1, r1, #8
    d798:	ble.n	d7c6 <_svfprintf_r+0xa2e>
    d79a:	adds	r2, #1
    d79c:	adds	r0, #16
    d79e:	cmp	r2, #7
    d7a0:	str	r0, [sp, #116]	; 0x74
    d7a2:	str	r2, [sp, #112]	; 0x70
    d7a4:	str	r7, [r1, #0]
    d7a6:	str	r5, [r1, #4]
    d7a8:	ble.n	d790 <_svfprintf_r+0x9f8>
    d7aa:	add	r2, sp, #108	; 0x6c
    d7ac:	ldr	r1, [sp, #12]
    d7ae:	mov	r0, r6
    d7b0:	bl	e308 <__ssprint_r>
    d7b4:	cmp	r0, #0
    d7b6:	bne.w	cf84 <_svfprintf_r+0x1ec>
    d7ba:	subs	r4, #16
    d7bc:	cmp	r4, #16
    d7be:	ldr	r0, [sp, #116]	; 0x74
    d7c0:	ldr	r2, [sp, #112]	; 0x70
    d7c2:	add	r1, sp, #160	; 0xa0
    d7c4:	bgt.n	d79a <_svfprintf_r+0xa02>
    d7c6:	mov	r6, r8
    d7c8:	mov	r3, r0
    d7ca:	mov	r8, r9
    d7cc:	mov	r9, r1
    d7ce:	adds	r2, #1
    d7d0:	add	r3, r4
    d7d2:	cmp	r2, #7
    d7d4:	str	r3, [sp, #116]	; 0x74
    d7d6:	str	r2, [sp, #112]	; 0x70
    d7d8:	str.w	r7, [r9]
    d7dc:	str.w	r4, [r9, #4]
    d7e0:	bgt.w	dc70 <_svfprintf_r+0xed8>
    d7e4:	add.w	r9, r9, #8
    d7e8:	b.n	d260 <_svfprintf_r+0x4c8>
    d7ea:	ldr	r2, [sp, #52]	; 0x34
    d7ec:	str.w	r6, [r9]
    d7f0:	cmp	r2, #1
    d7f2:	ldr	r2, [sp, #112]	; 0x70
    d7f4:	add.w	r3, r3, #1
    d7f8:	add.w	r2, r2, #1
    d7fc:	mov.w	r1, #1
    d800:	str	r3, [sp, #116]	; 0x74
    d802:	str	r2, [sp, #112]	; 0x70
    d804:	str.w	r1, [r9, #4]
    d808:	ble.w	dc2c <_svfprintf_r+0xe94>
    d80c:	cmp	r2, #7
    d80e:	bgt.w	dc3c <_svfprintf_r+0xea4>
    d812:	add.w	r9, r9, #8
    d816:	ldr	r0, [sp, #60]	; 0x3c
    d818:	ldr	r1, [sp, #64]	; 0x40
    d81a:	str.w	r1, [r9]
    d81e:	adds	r2, #1
    d820:	add	r3, r0
    d822:	cmp	r2, #7
    d824:	str	r3, [sp, #116]	; 0x74
    d826:	str	r2, [sp, #112]	; 0x70
    d828:	str.w	r0, [r9, #4]
    d82c:	bgt.w	dc56 <_svfprintf_r+0xebe>
    d830:	add.w	r9, r9, #8
    d834:	vcmp.f64	d8, #0.0
    d838:	vmrs	APSR_nzcv, fpscr
    d83c:	ldr	r1, [sp, #52]	; 0x34
    d83e:	beq.w	da2c <_svfprintf_r+0xc94>
    d842:	subs	r1, #1
    d844:	adds	r2, #1
    d846:	adds	r6, #1
    d848:	add	r3, r1
    d84a:	cmp	r2, #7
    d84c:	str.w	r6, [r9]
    d850:	str	r2, [sp, #112]	; 0x70
    d852:	str	r3, [sp, #116]	; 0x74
    d854:	str.w	r1, [r9, #4]
    d858:	bgt.w	da96 <_svfprintf_r+0xcfe>
    d85c:	add.w	r9, r9, #8
    d860:	ldr	r0, [sp, #68]	; 0x44
    d862:	str.w	r0, [r9, #4]
    d866:	adds	r2, #1
    d868:	add	r3, r0
    d86a:	add	r1, sp, #92	; 0x5c
    d86c:	cmp	r2, #7
    d86e:	str	r3, [sp, #116]	; 0x74
    d870:	str	r2, [sp, #112]	; 0x70
    d872:	str.w	r1, [r9]
    d876:	ble.w	d2f6 <_svfprintf_r+0x55e>
    d87a:	add	r2, sp, #108	; 0x6c
    d87c:	ldr	r1, [sp, #12]
    d87e:	ldr	r0, [sp, #20]
    d880:	bl	e308 <__ssprint_r>
    d884:	cmp	r0, #0
    d886:	bne.w	cf84 <_svfprintf_r+0x1ec>
    d88a:	ldr	r3, [sp, #116]	; 0x74
    d88c:	add.w	r9, sp, #160	; 0xa0
    d890:	b.n	d2fa <_svfprintf_r+0x562>
    d892:	add	r2, sp, #108	; 0x6c
    d894:	ldr	r1, [sp, #12]
    d896:	ldr	r0, [sp, #20]
    d898:	bl	e308 <__ssprint_r>
    d89c:	cmp	r0, #0
    d89e:	beq.w	d394 <_svfprintf_r+0x5fc>
    d8a2:	b.w	cf84 <_svfprintf_r+0x1ec>
    d8a6:	ldr	r1, [sp, #36]	; 0x24
    d8a8:	cmp.w	r8, #0
    d8ac:	ldr	r4, [r1, #0]
    d8ae:	strb.w	r3, [sp, #79]	; 0x4f
    d8b2:	add.w	r7, r1, #4
    d8b6:	mov.w	r5, #0
    d8ba:	blt.w	dfa0 <_svfprintf_r+0x1208>
    d8be:	orrs.w	r2, r4, r5
    d8c2:	str	r7, [sp, #36]	; 0x24
    d8c4:	bic.w	fp, fp, #128	; 0x80
    d8c8:	mov	r7, r3
    d8ca:	bne.w	d0e2 <_svfprintf_r+0x34a>
    d8ce:	cmp.w	r8, #0
    d8d2:	beq.w	d63c <_svfprintf_r+0x8a4>
    d8d6:	movs	r4, #0
    d8d8:	b.n	d448 <_svfprintf_r+0x6b0>
    d8da:	add	r2, sp, #108	; 0x6c
    d8dc:	ldr	r1, [sp, #12]
    d8de:	ldr	r0, [sp, #20]
    d8e0:	bl	e308 <__ssprint_r>
    d8e4:	cmp	r0, #0
    d8e6:	bne.w	cf84 <_svfprintf_r+0x1ec>
    d8ea:	ldr	r3, [sp, #116]	; 0x74
    d8ec:	add.w	r9, sp, #160	; 0xa0
    d8f0:	b.n	d2d4 <_svfprintf_r+0x53c>
    d8f2:	add	r2, sp, #108	; 0x6c
    d8f4:	ldr	r1, [sp, #12]
    d8f6:	ldr	r0, [sp, #20]
    d8f8:	bl	e308 <__ssprint_r>
    d8fc:	cmp	r0, #0
    d8fe:	bne.w	cf84 <_svfprintf_r+0x1ec>
    d902:	ldr	r3, [sp, #116]	; 0x74
    d904:	add.w	r9, sp, #160	; 0xa0
    d908:	b.n	d238 <_svfprintf_r+0x4a0>
    d90a:	add	r2, sp, #108	; 0x6c
    d90c:	ldr	r1, [sp, #12]
    d90e:	ldr	r0, [sp, #20]
    d910:	bl	e308 <__ssprint_r>
    d914:	cmp	r0, #0
    d916:	bne.w	cf84 <_svfprintf_r+0x1ec>
    d91a:	ldr	r3, [sp, #116]	; 0x74
    d91c:	add.w	r9, sp, #160	; 0xa0
    d920:	b.n	d258 <_svfprintf_r+0x4c0>
    d922:	cmp.w	r8, #0
    d926:	strb.w	r7, [sp, #79]	; 0x4f
    d92a:	blt.w	de0c <_svfprintf_r+0x1074>
    d92e:	orrs.w	r3, r4, r5
    d932:	bic.w	fp, fp, #128	; 0x80
    d936:	bne.w	d4c2 <_svfprintf_r+0x72a>
    d93a:	cmp.w	r8, #0
    d93e:	beq.w	d63a <_svfprintf_r+0x8a2>
    d942:	movs	r7, #0
    d944:	b.n	d696 <_svfprintf_r+0x8fe>
    d946:	ldr	r4, [sp, #84]	; 0x54
    d948:	cmp	r4, #0
    d94a:	ble.w	de10 <_svfprintf_r+0x1078>
    d94e:	ldr	r2, [sp, #56]	; 0x38
    d950:	ldr	r1, [sp, #52]	; 0x34
    d952:	cmp	r2, r1
    d954:	it	ge
    d956:	movge	r2, r1
    d958:	cmp	r2, #0
    d95a:	mov	r4, r2
    d95c:	ble.n	d97a <_svfprintf_r+0xbe2>
    d95e:	ldr	r2, [sp, #112]	; 0x70
    d960:	str.w	r6, [r9]
    d964:	adds	r2, #1
    d966:	add	r3, r4
    d968:	cmp	r2, #7
    d96a:	str	r3, [sp, #116]	; 0x74
    d96c:	str.w	r4, [r9, #4]
    d970:	str	r2, [sp, #112]	; 0x70
    d972:	bgt.w	e05a <_svfprintf_r+0x12c2>
    d976:	add.w	r9, r9, #8
    d97a:	ldr	r2, [sp, #56]	; 0x38
    d97c:	cmp	r4, #0
    d97e:	it	ge
    d980:	subge	r2, r2, r4
    d982:	cmp	r2, #0
    d984:	mov	r4, r2
    d986:	ble.w	db6c <_svfprintf_r+0xdd4>
    d98a:	cmp	r4, #16
    d98c:	ldr	r2, [sp, #112]	; 0x70
    d98e:	ldr	r7, [pc, #772]	; (dc94 <_svfprintf_r+0xefc>)
    d990:	ble.w	ddc6 <_svfprintf_r+0x102e>
    d994:	mov	r1, r9
    d996:	movs	r5, #16
    d998:	mov	r9, r6
    d99a:	ldr.w	r8, [sp, #20]
    d99e:	ldr	r6, [sp, #12]
    d9a0:	b.n	d9ac <_svfprintf_r+0xc14>
    d9a2:	adds	r1, #8
    d9a4:	subs	r4, #16
    d9a6:	cmp	r4, #16
    d9a8:	ble.w	ddc2 <_svfprintf_r+0x102a>
    d9ac:	adds	r2, #1
    d9ae:	adds	r3, #16
    d9b0:	cmp	r2, #7
    d9b2:	str	r3, [sp, #116]	; 0x74
    d9b4:	str	r2, [sp, #112]	; 0x70
    d9b6:	str	r7, [r1, #0]
    d9b8:	str	r5, [r1, #4]
    d9ba:	ble.n	d9a2 <_svfprintf_r+0xc0a>
    d9bc:	add	r2, sp, #108	; 0x6c
    d9be:	mov	r1, r6
    d9c0:	mov	r0, r8
    d9c2:	bl	e308 <__ssprint_r>
    d9c6:	cmp	r0, #0
    d9c8:	bne.w	cf84 <_svfprintf_r+0x1ec>
    d9cc:	ldr	r3, [sp, #116]	; 0x74
    d9ce:	ldr	r2, [sp, #112]	; 0x70
    d9d0:	add	r1, sp, #160	; 0xa0
    d9d2:	b.n	d9a4 <_svfprintf_r+0xc0c>
    d9d4:	add	r2, sp, #108	; 0x6c
    d9d6:	ldr	r1, [sp, #12]
    d9d8:	ldr	r0, [sp, #20]
    d9da:	bl	e308 <__ssprint_r>
    d9de:	cmp	r0, #0
    d9e0:	bne.w	cf84 <_svfprintf_r+0x1ec>
    d9e4:	ldrb.w	r7, [sp, #79]	; 0x4f
    d9e8:	ldr	r3, [sp, #116]	; 0x74
    d9ea:	add.w	r9, sp, #160	; 0xa0
    d9ee:	b.n	d218 <_svfprintf_r+0x480>
    d9f0:	ands.w	r2, fp, #16
    d9f4:	bne.w	d8a6 <_svfprintf_r+0xb0e>
    d9f8:	ands.w	r3, fp, #64	; 0x40
    d9fc:	beq.w	d8a6 <_svfprintf_r+0xb0e>
    da00:	ldr	r1, [sp, #36]	; 0x24
    da02:	strb.w	r2, [sp, #79]	; 0x4f
    da06:	mov	r3, r1
    da08:	cmp.w	r8, #0
    da0c:	add.w	r3, r3, #4
    da10:	ldrh	r4, [r1, #0]
    da12:	mov.w	r5, #0
    da16:	blt.w	df42 <_svfprintf_r+0x11aa>
    da1a:	orrs.w	r1, r4, r5
    da1e:	bic.w	fp, fp, #128	; 0x80
    da22:	str	r3, [sp, #36]	; 0x24
    da24:	mov	r7, r2
    da26:	bne.w	d0e2 <_svfprintf_r+0x34a>
    da2a:	b.n	d8ce <_svfprintf_r+0xb36>
    da2c:	subs	r4, r1, #1
    da2e:	cmp	r4, #0
    da30:	ble.w	d860 <_svfprintf_r+0xac8>
    da34:	cmp	r4, #16
    da36:	ldr	r7, [pc, #604]	; (dc94 <_svfprintf_r+0xefc>)
    da38:	ble.n	da80 <_svfprintf_r+0xce8>
    da3a:	movs	r5, #16
    da3c:	ldr	r6, [sp, #20]
    da3e:	ldr.w	r8, [sp, #12]
    da42:	b.n	da4e <_svfprintf_r+0xcb6>
    da44:	subs	r4, #16
    da46:	cmp	r4, #16
    da48:	add.w	r9, r9, #8
    da4c:	ble.n	da80 <_svfprintf_r+0xce8>
    da4e:	adds	r2, #1
    da50:	adds	r3, #16
    da52:	cmp	r2, #7
    da54:	str	r3, [sp, #116]	; 0x74
    da56:	str	r2, [sp, #112]	; 0x70
    da58:	str.w	r7, [r9]
    da5c:	str.w	r5, [r9, #4]
    da60:	ble.n	da44 <_svfprintf_r+0xcac>
    da62:	add	r2, sp, #108	; 0x6c
    da64:	mov	r1, r8
    da66:	mov	r0, r6
    da68:	bl	e308 <__ssprint_r>
    da6c:	cmp	r0, #0
    da6e:	bne.w	cf84 <_svfprintf_r+0x1ec>
    da72:	subs	r4, #16
    da74:	cmp	r4, #16
    da76:	ldr	r3, [sp, #116]	; 0x74
    da78:	ldr	r2, [sp, #112]	; 0x70
    da7a:	add.w	r9, sp, #160	; 0xa0
    da7e:	bgt.n	da4e <_svfprintf_r+0xcb6>
    da80:	adds	r2, #1
    da82:	add	r3, r4
    da84:	cmp	r2, #7
    da86:	str	r3, [sp, #116]	; 0x74
    da88:	str	r2, [sp, #112]	; 0x70
    da8a:	str.w	r7, [r9]
    da8e:	str.w	r4, [r9, #4]
    da92:	ble.w	d85c <_svfprintf_r+0xac4>
    da96:	add	r2, sp, #108	; 0x6c
    da98:	ldr	r1, [sp, #12]
    da9a:	ldr	r0, [sp, #20]
    da9c:	bl	e308 <__ssprint_r>
    daa0:	cmp	r0, #0
    daa2:	bne.w	cf84 <_svfprintf_r+0x1ec>
    daa6:	ldr	r3, [sp, #116]	; 0x74
    daa8:	ldr	r2, [sp, #112]	; 0x70
    daaa:	add.w	r9, sp, #160	; 0xa0
    daae:	b.n	d860 <_svfprintf_r+0xac8>
    dab0:	tst.w	fp, #16
    dab4:	bne.n	db1e <_svfprintf_r+0xd86>
    dab6:	tst.w	fp, #64	; 0x40
    daba:	beq.n	db1e <_svfprintf_r+0xd86>
    dabc:	ldr	r1, [sp, #36]	; 0x24
    dabe:	ldrsh.w	r4, [r1]
    dac2:	adds	r1, #4
    dac4:	asrs	r5, r4, #31
    dac6:	mov	r2, r4
    dac8:	mov	r3, r5
    daca:	str	r1, [sp, #36]	; 0x24
    dacc:	b.w	d0c0 <_svfprintf_r+0x328>
    dad0:	adds	r2, #1
    dad2:	add	r3, r4
    dad4:	cmp	r2, #7
    dad6:	str	r3, [sp, #116]	; 0x74
    dad8:	str	r2, [sp, #112]	; 0x70
    dada:	str.w	r7, [r9]
    dade:	str.w	r4, [r9, #4]
    dae2:	ble.w	d2f6 <_svfprintf_r+0x55e>
    dae6:	b.n	d87a <_svfprintf_r+0xae2>
    dae8:	ldr	r1, [sp, #36]	; 0x24
    daea:	cmp.w	r8, #0
    daee:	ldr	r4, [r1, #0]
    daf0:	strb.w	r3, [sp, #79]	; 0x4f
    daf4:	add.w	r7, r1, #4
    daf8:	mov.w	r5, #0
    dafc:	blt.w	dc8a <_svfprintf_r+0xef2>
    db00:	orrs.w	r2, r4, r5
    db04:	bic.w	fp, fp, #128	; 0x80
    db08:	str	r7, [sp, #36]	; 0x24
    db0a:	beq.w	d672 <_svfprintf_r+0x8da>
    db0e:	mov	r7, r3
    db10:	b.w	cfdc <_svfprintf_r+0x244>
    db14:	ldr	r4, [r3, #0]
    db16:	adds	r3, #4
    db18:	str	r3, [sp, #36]	; 0x24
    db1a:	movs	r5, #0
    db1c:	b.n	d48c <_svfprintf_r+0x6f4>
    db1e:	ldr	r2, [sp, #36]	; 0x24
    db20:	ldr	r4, [r2, #0]
    db22:	mov	r3, r2
    db24:	adds	r3, #4
    db26:	asrs	r5, r4, #31
    db28:	mov	r2, r4
    db2a:	str	r3, [sp, #36]	; 0x24
    db2c:	cmp	r2, #0
    db2e:	mov	r3, r5
    db30:	sbcs.w	r3, r3, #0
    db34:	bge.w	d0ca <_svfprintf_r+0x332>
    db38:	negs	r4, r4
    db3a:	mov.w	r7, #45	; 0x2d
    db3e:	sbc.w	r5, r5, r5, lsl #1
    db42:	cmp.w	r8, #0
    db46:	strb.w	r7, [sp, #79]	; 0x4f
    db4a:	blt.w	d0e2 <_svfprintf_r+0x34a>
    db4e:	bic.w	fp, fp, #128	; 0x80
    db52:	b.w	d0e2 <_svfprintf_r+0x34a>
    db56:	add	r2, sp, #108	; 0x6c
    db58:	ldr	r1, [sp, #12]
    db5a:	ldr	r0, [sp, #20]
    db5c:	bl	e308 <__ssprint_r>
    db60:	cmp	r0, #0
    db62:	bne.w	cf84 <_svfprintf_r+0x1ec>
    db66:	ldr	r3, [sp, #116]	; 0x74
    db68:	add.w	r9, sp, #160	; 0xa0
    db6c:	ldr	r1, [sp, #56]	; 0x38
    db6e:	ldr	r2, [sp, #84]	; 0x54
    db70:	add	r1, r6
    db72:	mov	r5, r1
    db74:	ldr	r1, [sp, #52]	; 0x34
    db76:	cmp	r2, r1
    db78:	blt.n	dc0a <_svfprintf_r+0xe72>
    db7a:	tst.w	fp, #1
    db7e:	bne.n	dc0a <_svfprintf_r+0xe72>
    db80:	ldr	r0, [sp, #52]	; 0x34
    db82:	add	r6, r0
    db84:	subs	r4, r6, r5
    db86:	subs	r2, r0, r2
    db88:	cmp	r4, r2
    db8a:	it	ge
    db8c:	movge	r4, r2
    db8e:	cmp	r4, #0
    db90:	mov	r6, r4
    db92:	ble.n	dbb0 <_svfprintf_r+0xe18>
    db94:	ldr	r1, [sp, #112]	; 0x70
    db96:	str.w	r5, [r9]
    db9a:	adds	r1, #1
    db9c:	add	r3, r4
    db9e:	cmp	r1, #7
    dba0:	str	r3, [sp, #116]	; 0x74
    dba2:	str.w	r4, [r9, #4]
    dba6:	str	r1, [sp, #112]	; 0x70
    dba8:	bgt.w	e0ac <_svfprintf_r+0x1314>
    dbac:	add.w	r9, r9, #8
    dbb0:	cmp	r6, #0
    dbb2:	ite	ge
    dbb4:	subge	r4, r2, r6
    dbb6:	movlt	r4, r2
    dbb8:	cmp	r4, #0
    dbba:	ble.w	d2fa <_svfprintf_r+0x562>
    dbbe:	cmp	r4, #16
    dbc0:	ldr	r2, [sp, #112]	; 0x70
    dbc2:	ldr	r7, [pc, #208]	; (dc94 <_svfprintf_r+0xefc>)
    dbc4:	ble.n	dad0 <_svfprintf_r+0xd38>
    dbc6:	movs	r5, #16
    dbc8:	ldr	r6, [sp, #20]
    dbca:	ldr.w	r8, [sp, #12]
    dbce:	b.n	dbdc <_svfprintf_r+0xe44>
    dbd0:	add.w	r9, r9, #8
    dbd4:	subs	r4, #16
    dbd6:	cmp	r4, #16
    dbd8:	ble.w	dad0 <_svfprintf_r+0xd38>
    dbdc:	adds	r2, #1
    dbde:	adds	r3, #16
    dbe0:	cmp	r2, #7
    dbe2:	str	r3, [sp, #116]	; 0x74
    dbe4:	str	r2, [sp, #112]	; 0x70
    dbe6:	str.w	r7, [r9]
    dbea:	str.w	r5, [r9, #4]
    dbee:	ble.n	dbd0 <_svfprintf_r+0xe38>
    dbf0:	add	r2, sp, #108	; 0x6c
    dbf2:	mov	r1, r8
    dbf4:	mov	r0, r6
    dbf6:	bl	e308 <__ssprint_r>
    dbfa:	cmp	r0, #0
    dbfc:	bne.w	cf84 <_svfprintf_r+0x1ec>
    dc00:	ldr	r3, [sp, #116]	; 0x74
    dc02:	ldr	r2, [sp, #112]	; 0x70
    dc04:	add.w	r9, sp, #160	; 0xa0
    dc08:	b.n	dbd4 <_svfprintf_r+0xe3c>
    dc0a:	ldr	r1, [sp, #112]	; 0x70
    dc0c:	ldr	r4, [sp, #60]	; 0x3c
    dc0e:	ldr	r0, [sp, #64]	; 0x40
    dc10:	str.w	r0, [r9]
    dc14:	adds	r1, #1
    dc16:	add	r3, r4
    dc18:	cmp	r1, #7
    dc1a:	str	r3, [sp, #116]	; 0x74
    dc1c:	str.w	r4, [r9, #4]
    dc20:	str	r1, [sp, #112]	; 0x70
    dc22:	bgt.w	e072 <_svfprintf_r+0x12da>
    dc26:	add.w	r9, r9, #8
    dc2a:	b.n	db80 <_svfprintf_r+0xde8>
    dc2c:	tst.w	fp, #1
    dc30:	bne.w	d80c <_svfprintf_r+0xa74>
    dc34:	cmp	r2, #7
    dc36:	ble.w	d85c <_svfprintf_r+0xac4>
    dc3a:	b.n	da96 <_svfprintf_r+0xcfe>
    dc3c:	add	r2, sp, #108	; 0x6c
    dc3e:	ldr	r1, [sp, #12]
    dc40:	ldr	r0, [sp, #20]
    dc42:	bl	e308 <__ssprint_r>
    dc46:	cmp	r0, #0
    dc48:	bne.w	cf84 <_svfprintf_r+0x1ec>
    dc4c:	ldr	r3, [sp, #116]	; 0x74
    dc4e:	ldr	r2, [sp, #112]	; 0x70
    dc50:	add.w	r9, sp, #160	; 0xa0
    dc54:	b.n	d816 <_svfprintf_r+0xa7e>
    dc56:	add	r2, sp, #108	; 0x6c
    dc58:	ldr	r1, [sp, #12]
    dc5a:	ldr	r0, [sp, #20]
    dc5c:	bl	e308 <__ssprint_r>
    dc60:	cmp	r0, #0
    dc62:	bne.w	cf84 <_svfprintf_r+0x1ec>
    dc66:	ldr	r3, [sp, #116]	; 0x74
    dc68:	ldr	r2, [sp, #112]	; 0x70
    dc6a:	add.w	r9, sp, #160	; 0xa0
    dc6e:	b.n	d834 <_svfprintf_r+0xa9c>
    dc70:	add	r2, sp, #108	; 0x6c
    dc72:	ldr	r1, [sp, #12]
    dc74:	ldr	r0, [sp, #20]
    dc76:	bl	e308 <__ssprint_r>
    dc7a:	cmp	r0, #0
    dc7c:	bne.w	cf84 <_svfprintf_r+0x1ec>
    dc80:	ldr	r3, [sp, #116]	; 0x74
    dc82:	add.w	r9, sp, #160	; 0xa0
    dc86:	b.w	d260 <_svfprintf_r+0x4c8>
    dc8a:	str	r7, [sp, #36]	; 0x24
    dc8c:	movs	r7, #0
    dc8e:	b.w	cfdc <_svfprintf_r+0x244>
    dc92:	nop
    dc94:	.word	0x20000eb0
    dc98:	tst.w	fp, #16
    dc9c:	bne.n	dcb6 <_svfprintf_r+0xf1e>
    dc9e:	tst.w	fp, #64	; 0x40
    dca2:	beq.n	dcb6 <_svfprintf_r+0xf1e>
    dca4:	ldr	r2, [sp, #36]	; 0x24
    dca6:	ldr	r3, [r2, #0]
    dca8:	adds	r2, #4
    dcaa:	str	r2, [sp, #36]	; 0x24
    dcac:	ldrh.w	r2, [sp, #24]
    dcb0:	strh	r2, [r3, #0]
    dcb2:	b.w	cde4 <_svfprintf_r+0x4c>
    dcb6:	ldr	r2, [sp, #36]	; 0x24
    dcb8:	ldr	r3, [r2, #0]
    dcba:	adds	r2, #4
    dcbc:	str	r2, [sp, #36]	; 0x24
    dcbe:	ldr	r2, [sp, #24]
    dcc0:	str	r2, [r3, #0]
    dcc2:	b.w	cde4 <_svfprintf_r+0x4c>
    dcc6:	vcmp.f64	d8, d8
    dcca:	vmrs	APSR_nzcv, fpscr
    dcce:	bvs.w	e20e <_svfprintf_r+0x1476>
    dcd2:	ldr	r3, [sp, #48]	; 0x30
    dcd4:	cmp.w	r8, #4294967295
    dcd8:	bic.w	r5, r3, #32
    dcdc:	beq.w	e12a <_svfprintf_r+0x1392>
    dce0:	cmp	r5, #71	; 0x47
    dce2:	beq.w	df32 <_svfprintf_r+0x119a>
    dce6:	orr.w	r3, fp, #256	; 0x100
    dcea:	str	r3, [sp, #40]	; 0x28
    dcec:	vmov	r3, s17
    dcf0:	cmp	r3, #0
    dcf2:	blt.w	e130 <_svfprintf_r+0x1398>
    dcf6:	vmov.f64	d10, d8
    dcfa:	movs	r7, #0
    dcfc:	ldr	r3, [sp, #48]	; 0x30
    dcfe:	cmp	r3, #102	; 0x66
    dd00:	beq.w	e108 <_svfprintf_r+0x1370>
    dd04:	cmp	r3, #70	; 0x46
    dd06:	beq.w	dee2 <_svfprintf_r+0x114a>
    dd0a:	vmov.f64	d0, d10
    dd0e:	cmp	r5, #69	; 0x45
    dd10:	ite	eq
    dd12:	addeq.w	r4, r8, #1
    dd16:	movne	r4, r8
    dd18:	add	r2, sp, #100	; 0x64
    dd1a:	add	r3, sp, #88	; 0x58
    dd1c:	str	r2, [sp, #4]
    dd1e:	str	r3, [sp, #0]
    dd20:	mov	r2, r4
    dd22:	add	r3, sp, #84	; 0x54
    dd24:	movs	r1, #2
    dd26:	ldr	r0, [sp, #20]
    dd28:	bl	c110 <_dtoa_r>
    dd2c:	ldr	r3, [sp, #48]	; 0x30
    dd2e:	cmp	r3, #103	; 0x67
    dd30:	mov	r6, r0
    dd32:	bne.w	e152 <_svfprintf_r+0x13ba>
    dd36:	tst.w	fp, #1
    dd3a:	beq.w	e20a <_svfprintf_r+0x1472>
    dd3e:	adds	r1, r6, r4
    dd40:	vcmp.f64	d10, #0.0
    dd44:	vmrs	APSR_nzcv, fpscr
    dd48:	beq.w	e056 <_svfprintf_r+0x12be>
    dd4c:	ldr	r3, [sp, #100]	; 0x64
    dd4e:	cmp	r1, r3
    dd50:	bls.n	dd60 <_svfprintf_r+0xfc8>
    dd52:	movs	r0, #48	; 0x30
    dd54:	adds	r2, r3, #1
    dd56:	str	r2, [sp, #100]	; 0x64
    dd58:	strb	r0, [r3, #0]
    dd5a:	ldr	r3, [sp, #100]	; 0x64
    dd5c:	cmp	r1, r3
    dd5e:	bhi.n	dd54 <_svfprintf_r+0xfbc>
    dd60:	subs	r3, r3, r6
    dd62:	cmp	r5, #71	; 0x47
    dd64:	str	r3, [sp, #52]	; 0x34
    dd66:	beq.w	dfa8 <_svfprintf_r+0x1210>
    dd6a:	ldr	r3, [sp, #48]	; 0x30
    dd6c:	cmp	r3, #101	; 0x65
    dd6e:	ble.w	e170 <_svfprintf_r+0x13d8>
    dd72:	ldr	r3, [sp, #48]	; 0x30
    dd74:	cmp	r3, #102	; 0x66
    dd76:	ldr	r3, [sp, #84]	; 0x54
    dd78:	beq.w	e174 <_svfprintf_r+0x13dc>
    dd7c:	str	r3, [sp, #56]	; 0x38
    dd7e:	ldr	r2, [sp, #56]	; 0x38
    dd80:	ldr	r1, [sp, #52]	; 0x34
    dd82:	cmp	r2, r1
    dd84:	blt.w	e138 <_svfprintf_r+0x13a0>
    dd88:	tst.w	fp, #1
    dd8c:	bne.w	e1f8 <_svfprintf_r+0x1460>
    dd90:	bic.w	r3, r2, r2, asr #31
    dd94:	str	r2, [sp, #32]
    dd96:	movs	r2, #103	; 0x67
    dd98:	str	r2, [sp, #48]	; 0x30
    dd9a:	cmp	r7, #0
    dd9c:	bne.w	df8c <_svfprintf_r+0x11f4>
    dda0:	mov	r8, r7
    dda2:	str	r3, [sp, #16]
    dda4:	ldr.w	fp, [sp, #40]	; 0x28
    dda8:	ldrb.w	r7, [sp, #79]	; 0x4f
    ddac:	b.w	d17c <_svfprintf_r+0x3e4>
    ddb0:	bic.w	r7, r7, #7
    ddb4:	add.w	r3, r7, #8
    ddb8:	vldr	d8, [r7]
    ddbc:	str	r3, [sp, #36]	; 0x24
    ddbe:	b.w	d13e <_svfprintf_r+0x3a6>
    ddc2:	mov	r6, r9
    ddc4:	mov	r9, r1
    ddc6:	adds	r2, #1
    ddc8:	add	r3, r4
    ddca:	cmp	r2, #7
    ddcc:	str	r3, [sp, #116]	; 0x74
    ddce:	str	r2, [sp, #112]	; 0x70
    ddd0:	str.w	r7, [r9]
    ddd4:	str.w	r4, [r9, #4]
    ddd8:	bgt.w	db56 <_svfprintf_r+0xdbe>
    dddc:	add.w	r9, r9, #8
    dde0:	b.n	db6c <_svfprintf_r+0xdd4>
    dde2:	movs	r7, #0
    dde4:	cmp	r8, r7
    dde6:	strb.w	r7, [sp, #79]	; 0x4f
    ddea:	blt.w	d696 <_svfprintf_r+0x8fe>
    ddee:	bic.w	fp, fp, #128	; 0x80
    ddf2:	b.n	d632 <_svfprintf_r+0x89a>
    ddf4:	add	r2, sp, #108	; 0x6c
    ddf6:	ldr	r1, [sp, #12]
    ddf8:	ldr	r0, [sp, #20]
    ddfa:	bl	e308 <__ssprint_r>
    ddfe:	cmp	r0, #0
    de00:	bne.w	cf84 <_svfprintf_r+0x1ec>
    de04:	ldr	r3, [sp, #116]	; 0x74
    de06:	add.w	r9, sp, #160	; 0xa0
    de0a:	b.n	d6d4 <_svfprintf_r+0x93c>
    de0c:	ldr	r7, [sp, #36]	; 0x24
    de0e:	b.n	d688 <_svfprintf_r+0x8f0>
    de10:	ldr	r2, [sp, #112]	; 0x70
    de12:	ldr	r1, [pc, #740]	; (e0f8 <_svfprintf_r+0x1360>)
    de14:	str.w	r1, [r9]
    de18:	adds	r2, #1
    de1a:	adds	r3, #1
    de1c:	movs	r1, #1
    de1e:	cmp	r2, #7
    de20:	str	r3, [sp, #116]	; 0x74
    de22:	str	r2, [sp, #112]	; 0x70
    de24:	str.w	r1, [r9, #4]
    de28:	bgt.n	df18 <_svfprintf_r+0x1180>
    de2a:	add.w	r9, r9, #8
    de2e:	cbnz	r4, de3c <_svfprintf_r+0x10a4>
    de30:	ldr	r2, [sp, #52]	; 0x34
    de32:	cbnz	r2, de3c <_svfprintf_r+0x10a4>
    de34:	tst.w	fp, #1
    de38:	beq.w	d2fa <_svfprintf_r+0x562>
    de3c:	ldr	r2, [sp, #112]	; 0x70
    de3e:	ldr	r0, [sp, #60]	; 0x3c
    de40:	ldr	r1, [sp, #64]	; 0x40
    de42:	str.w	r1, [r9]
    de46:	adds	r2, #1
    de48:	add	r3, r0
    de4a:	cmp	r2, #7
    de4c:	str	r3, [sp, #116]	; 0x74
    de4e:	str.w	r0, [r9, #4]
    de52:	str	r2, [sp, #112]	; 0x70
    de54:	bgt.w	e1c4 <_svfprintf_r+0x142c>
    de58:	add.w	r9, r9, #8
    de5c:	negs	r4, r4
    de5e:	cmp	r4, #0
    de60:	ble.w	df72 <_svfprintf_r+0x11da>
    de64:	cmp	r4, #16
    de66:	ldr	r7, [pc, #660]	; (e0fc <_svfprintf_r+0x1364>)
    de68:	ble.w	e090 <_svfprintf_r+0x12f8>
    de6c:	mov	r1, r9
    de6e:	movs	r5, #16
    de70:	mov	r9, r6
    de72:	ldr.w	r8, [sp, #20]
    de76:	ldr	r6, [sp, #12]
    de78:	b.n	de84 <_svfprintf_r+0x10ec>
    de7a:	adds	r1, #8
    de7c:	subs	r4, #16
    de7e:	cmp	r4, #16
    de80:	ble.w	e08c <_svfprintf_r+0x12f4>
    de84:	adds	r2, #1
    de86:	adds	r3, #16
    de88:	cmp	r2, #7
    de8a:	str	r3, [sp, #116]	; 0x74
    de8c:	str	r2, [sp, #112]	; 0x70
    de8e:	str	r7, [r1, #0]
    de90:	str	r5, [r1, #4]
    de92:	ble.n	de7a <_svfprintf_r+0x10e2>
    de94:	add	r2, sp, #108	; 0x6c
    de96:	mov	r1, r6
    de98:	mov	r0, r8
    de9a:	bl	e308 <__ssprint_r>
    de9e:	cmp	r0, #0
    dea0:	bne.w	cf84 <_svfprintf_r+0x1ec>
    dea4:	ldr	r3, [sp, #116]	; 0x74
    dea6:	ldr	r2, [sp, #112]	; 0x70
    dea8:	add	r1, sp, #160	; 0xa0
    deaa:	b.n	de7c <_svfprintf_r+0x10e4>
    deac:	add	r2, sp, #108	; 0x6c
    deae:	ldr	r1, [sp, #12]
    deb0:	ldr	r0, [sp, #20]
    deb2:	bl	e308 <__ssprint_r>
    deb6:	cmp	r0, #0
    deb8:	bne.w	cf84 <_svfprintf_r+0x1ec>
    debc:	ldr	r3, [sp, #116]	; 0x74
    debe:	add.w	r9, sp, #160	; 0xa0
    dec2:	b.n	d704 <_svfprintf_r+0x96c>
    dec4:	movs	r1, #64	; 0x40
    dec6:	ldr	r0, [sp, #20]
    dec8:	bl	a8e4 <_malloc_r>
    decc:	ldr	r2, [sp, #12]
    dece:	str	r0, [r2, #0]
    ded0:	str	r0, [r2, #16]
    ded2:	cmp	r0, #0
    ded4:	beq.w	e2b2 <_svfprintf_r+0x151a>
    ded8:	ldr	r2, [sp, #12]
    deda:	movs	r3, #64	; 0x40
    dedc:	str	r3, [r2, #20]
    dede:	b.w	cdca <_svfprintf_r+0x32>
    dee2:	add	r2, sp, #100	; 0x64
    dee4:	add	r3, sp, #88	; 0x58
    dee6:	str	r2, [sp, #4]
    dee8:	str	r3, [sp, #0]
    deea:	mov	r2, r8
    deec:	add	r3, sp, #84	; 0x54
    deee:	movs	r1, #3
    def0:	vmov.f64	d0, d10
    def4:	ldr	r0, [sp, #20]
    def6:	bl	c110 <_dtoa_r>
    defa:	mov	r4, r8
    defc:	mov	r6, r0
    defe:	ldr	r3, [sp, #48]	; 0x30
    df00:	cmp	r3, #70	; 0x46
    df02:	add.w	r1, r6, r4
    df06:	bne.w	dd40 <_svfprintf_r+0xfa8>
    df0a:	ldrb	r3, [r6, #0]
    df0c:	cmp	r3, #48	; 0x30
    df0e:	beq.w	e22c <_svfprintf_r+0x1494>
    df12:	ldr	r4, [sp, #84]	; 0x54
    df14:	add	r1, r4
    df16:	b.n	dd40 <_svfprintf_r+0xfa8>
    df18:	add	r2, sp, #108	; 0x6c
    df1a:	ldr	r1, [sp, #12]
    df1c:	ldr	r0, [sp, #20]
    df1e:	bl	e308 <__ssprint_r>
    df22:	cmp	r0, #0
    df24:	bne.w	cf84 <_svfprintf_r+0x1ec>
    df28:	ldr	r4, [sp, #84]	; 0x54
    df2a:	ldr	r3, [sp, #116]	; 0x74
    df2c:	add.w	r9, sp, #160	; 0xa0
    df30:	b.n	de2e <_svfprintf_r+0x1096>
    df32:	cmp.w	r8, #0
    df36:	it	eq
    df38:	moveq.w	r8, #1
    df3c:	b.n	dce6 <_svfprintf_r+0xf4e>
    df3e:	str	r3, [sp, #36]	; 0x24
    df40:	b.n	dc8c <_svfprintf_r+0xef4>
    df42:	str	r3, [sp, #36]	; 0x24
    df44:	mov	r7, r2
    df46:	b.w	d440 <_svfprintf_r+0x6a8>
    df4a:	mov	r0, r6
    df4c:	bl	b400 <strlen>
    df50:	mov	r8, r4
    df52:	mov	r3, r0
    df54:	str	r0, [sp, #32]
    df56:	b.w	d61c <_svfprintf_r+0x884>
    df5a:	add	r2, sp, #108	; 0x6c
    df5c:	ldr	r1, [sp, #12]
    df5e:	ldr	r0, [sp, #20]
    df60:	bl	e308 <__ssprint_r>
    df64:	cmp	r0, #0
    df66:	bne.w	cf84 <_svfprintf_r+0x1ec>
    df6a:	ldr	r3, [sp, #116]	; 0x74
    df6c:	ldr	r2, [sp, #112]	; 0x70
    df6e:	add.w	r9, sp, #160	; 0xa0
    df72:	ldr	r0, [sp, #52]	; 0x34
    df74:	str.w	r6, [r9]
    df78:	adds	r2, #1
    df7a:	add	r3, r0
    df7c:	cmp	r2, #7
    df7e:	str	r3, [sp, #116]	; 0x74
    df80:	str	r2, [sp, #112]	; 0x70
    df82:	str.w	r0, [r9, #4]
    df86:	ble.w	d2f6 <_svfprintf_r+0x55e>
    df8a:	b.n	d87a <_svfprintf_r+0xae2>
    df8c:	movs	r7, #45	; 0x2d
    df8e:	str	r3, [sp, #16]
    df90:	ldr.w	fp, [sp, #40]	; 0x28
    df94:	strb.w	r7, [sp, #79]	; 0x4f
    df98:	mov.w	r8, #0
    df9c:	b.w	d17e <_svfprintf_r+0x3e6>
    dfa0:	str	r7, [sp, #36]	; 0x24
    dfa2:	mov	r7, r3
    dfa4:	b.w	d440 <_svfprintf_r+0x6a8>
    dfa8:	ldr	r3, [sp, #84]	; 0x54
    dfaa:	adds	r2, r3, #3
    dfac:	blt.n	dfb4 <_svfprintf_r+0x121c>
    dfae:	cmp	r8, r3
    dfb0:	bge.w	dd7c <_svfprintf_r+0xfe4>
    dfb4:	ldr	r2, [sp, #48]	; 0x30
    dfb6:	subs	r2, #2
    dfb8:	str	r2, [sp, #48]	; 0x30
    dfba:	subs	r3, #1
    dfbc:	cmp	r3, #0
    dfbe:	ldrb.w	r2, [sp, #48]	; 0x30
    dfc2:	str	r3, [sp, #84]	; 0x54
    dfc4:	it	lt
    dfc6:	neglt	r3, r3
    dfc8:	strb.w	r2, [sp, #92]	; 0x5c
    dfcc:	ite	lt
    dfce:	movlt	r2, #45	; 0x2d
    dfd0:	movge	r2, #43	; 0x2b
    dfd2:	cmp	r3, #9
    dfd4:	strb.w	r2, [sp, #93]	; 0x5d
    dfd8:	ble.w	e1e8 <_svfprintf_r+0x1450>
    dfdc:	add.w	r0, sp, #107	; 0x6b
    dfe0:	mov	r4, r0
    dfe2:	ldr	r2, [pc, #284]	; (e100 <_svfprintf_r+0x1368>)
    dfe4:	smull	r2, r1, r2, r3
    dfe8:	asrs	r2, r3, #31
    dfea:	rsb	r2, r2, r1, asr #2
    dfee:	add.w	r1, r2, r2, lsl #2
    dff2:	sub.w	r3, r3, r1, lsl #1
    dff6:	add.w	r1, r3, #48	; 0x30
    dffa:	cmp	r2, #9
    dffc:	mov	r3, r2
    dffe:	strb.w	r1, [r4, #-1]!
    e002:	bgt.n	dfe2 <_svfprintf_r+0x124a>
    e004:	mov	r1, r4
    e006:	adds	r3, #48	; 0x30
    e008:	uxtb	r2, r3
    e00a:	strb.w	r2, [r1, #-1]!
    e00e:	cmp	r0, r1
    e010:	bls.w	e2d8 <_svfprintf_r+0x1540>
    e014:	add.w	r1, sp, #94	; 0x5e
    e018:	mov	r3, r4
    e01a:	b.n	e020 <_svfprintf_r+0x1288>
    e01c:	ldrb.w	r2, [r3], #1
    e020:	strb.w	r2, [r1], #1
    e024:	cmp	r0, r3
    e026:	bne.n	e01c <_svfprintf_r+0x1284>
    e028:	adds	r3, r0, #1
    e02a:	subs	r3, r3, r4
    e02c:	add.w	r2, sp, #94	; 0x5e
    e030:	add	r3, r2
    e032:	add	r2, sp, #92	; 0x5c
    e034:	subs	r3, r3, r2
    e036:	ldr	r2, [sp, #52]	; 0x34
    e038:	str	r3, [sp, #68]	; 0x44
    e03a:	cmp	r2, #1
    e03c:	add	r3, r2
    e03e:	str	r3, [sp, #32]
    e040:	ble.w	e242 <_svfprintf_r+0x14aa>
    e044:	ldr	r3, [sp, #32]
    e046:	ldr	r2, [sp, #60]	; 0x3c
    e048:	add	r3, r2
    e04a:	movs	r2, #0
    e04c:	str	r3, [sp, #32]
    e04e:	str	r2, [sp, #56]	; 0x38
    e050:	bic.w	r3, r3, r3, asr #31
    e054:	b.n	dd9a <_svfprintf_r+0x1002>
    e056:	mov	r3, r1
    e058:	b.n	dd60 <_svfprintf_r+0xfc8>
    e05a:	add	r2, sp, #108	; 0x6c
    e05c:	ldr	r1, [sp, #12]
    e05e:	ldr	r0, [sp, #20]
    e060:	bl	e308 <__ssprint_r>
    e064:	cmp	r0, #0
    e066:	bne.w	cf84 <_svfprintf_r+0x1ec>
    e06a:	ldr	r3, [sp, #116]	; 0x74
    e06c:	add.w	r9, sp, #160	; 0xa0
    e070:	b.n	d97a <_svfprintf_r+0xbe2>
    e072:	add	r2, sp, #108	; 0x6c
    e074:	ldr	r1, [sp, #12]
    e076:	ldr	r0, [sp, #20]
    e078:	bl	e308 <__ssprint_r>
    e07c:	cmp	r0, #0
    e07e:	bne.w	cf84 <_svfprintf_r+0x1ec>
    e082:	ldr	r2, [sp, #84]	; 0x54
    e084:	ldr	r3, [sp, #116]	; 0x74
    e086:	add.w	r9, sp, #160	; 0xa0
    e08a:	b.n	db80 <_svfprintf_r+0xde8>
    e08c:	mov	r6, r9
    e08e:	mov	r9, r1
    e090:	adds	r2, #1
    e092:	add	r3, r4
    e094:	cmp	r2, #7
    e096:	str	r3, [sp, #116]	; 0x74
    e098:	str	r2, [sp, #112]	; 0x70
    e09a:	str.w	r7, [r9]
    e09e:	str.w	r4, [r9, #4]
    e0a2:	bgt.w	df5a <_svfprintf_r+0x11c2>
    e0a6:	add.w	r9, r9, #8
    e0aa:	b.n	df72 <_svfprintf_r+0x11da>
    e0ac:	add	r2, sp, #108	; 0x6c
    e0ae:	ldr	r1, [sp, #12]
    e0b0:	ldr	r0, [sp, #20]
    e0b2:	bl	e308 <__ssprint_r>
    e0b6:	cmp	r0, #0
    e0b8:	bne.w	cf84 <_svfprintf_r+0x1ec>
    e0bc:	ldr	r2, [sp, #84]	; 0x54
    e0be:	ldr	r1, [sp, #52]	; 0x34
    e0c0:	ldr	r3, [sp, #116]	; 0x74
    e0c2:	subs	r2, r1, r2
    e0c4:	add.w	r9, sp, #160	; 0xa0
    e0c8:	b.n	dbb0 <_svfprintf_r+0xe18>
    e0ca:	cmp	r5, #6
    e0cc:	mov	r3, r5
    e0ce:	it	cs
    e0d0:	movcs	r3, #6
    e0d2:	str	r3, [sp, #32]
    e0d4:	bic.w	r3, r3, r3, asr #31
    e0d8:	mov	r8, r6
    e0da:	str	r7, [sp, #36]	; 0x24
    e0dc:	str	r6, [sp, #56]	; 0x38
    e0de:	mov	r7, r6
    e0e0:	str	r3, [sp, #16]
    e0e2:	ldr	r6, [pc, #32]	; (e104 <_svfprintf_r+0x136c>)
    e0e4:	b.w	d17c <_svfprintf_r+0x3e4>
    e0e8:	mov	fp, r3
    e0ea:	b.w	d4c2 <_svfprintf_r+0x72a>
    e0ee:	movs	r7, #45	; 0x2d
    e0f0:	strb.w	r7, [sp, #79]	; 0x4f
    e0f4:	b.w	d15e <_svfprintf_r+0x3c6>
    e0f8:	.word	0x20000eac
    e0fc:	.word	0x20000eb0
    e100:	.word	0x66666667
    e104:	.word	0x20000ef8
    e108:	add	r2, sp, #100	; 0x64
    e10a:	add	r3, sp, #88	; 0x58
    e10c:	str	r2, [sp, #4]
    e10e:	str	r3, [sp, #0]
    e110:	movs	r1, #3
    e112:	add	r3, sp, #84	; 0x54
    e114:	mov	r2, r8
    e116:	vmov.f64	d0, d10
    e11a:	ldr	r0, [sp, #20]
    e11c:	bl	c110 <_dtoa_r>
    e120:	mov	r4, r8
    e122:	mov	r6, r0
    e124:	add.w	r1, r0, r8
    e128:	b.n	df0a <_svfprintf_r+0x1172>
    e12a:	mov.w	r8, #6
    e12e:	b.n	dce6 <_svfprintf_r+0xf4e>
    e130:	vneg.f64	d10, d8
    e134:	movs	r7, #45	; 0x2d
    e136:	b.n	dcfc <_svfprintf_r+0xf64>
    e138:	ldr	r2, [sp, #60]	; 0x3c
    e13a:	ldr	r3, [sp, #52]	; 0x34
    e13c:	add	r3, r2
    e13e:	ldr	r2, [sp, #56]	; 0x38
    e140:	str	r3, [sp, #32]
    e142:	cmp	r2, #0
    e144:	ble.w	e254 <_svfprintf_r+0x14bc>
    e148:	movs	r2, #103	; 0x67
    e14a:	bic.w	r3, r3, r3, asr #31
    e14e:	str	r2, [sp, #48]	; 0x30
    e150:	b.n	dd9a <_svfprintf_r+0x1002>
    e152:	ldr	r3, [sp, #48]	; 0x30
    e154:	cmp	r3, #71	; 0x47
    e156:	bne.w	dd3e <_svfprintf_r+0xfa6>
    e15a:	tst.w	fp, #1
    e15e:	bne.w	defe <_svfprintf_r+0x1166>
    e162:	ldr	r3, [sp, #100]	; 0x64
    e164:	cmp	r5, #71	; 0x47
    e166:	sub.w	r3, r3, r6
    e16a:	str	r3, [sp, #52]	; 0x34
    e16c:	beq.w	dfa8 <_svfprintf_r+0x1210>
    e170:	ldr	r3, [sp, #84]	; 0x54
    e172:	b.n	dfba <_svfprintf_r+0x1222>
    e174:	cmp	r3, #0
    e176:	mov	r2, r3
    e178:	str	r3, [sp, #56]	; 0x38
    e17a:	ble.n	e264 <_svfprintf_r+0x14cc>
    e17c:	cmp.w	r8, #0
    e180:	bne.n	e21a <_svfprintf_r+0x1482>
    e182:	tst.w	fp, #1
    e186:	bne.n	e21a <_svfprintf_r+0x1482>
    e188:	bic.w	r3, r3, r3, asr #31
    e18c:	str	r2, [sp, #32]
    e18e:	b.n	dd9a <_svfprintf_r+0x1002>
    e190:	tst.w	fp, #1
    e194:	mov	r7, r8
    e196:	beq.n	e1a4 <_svfprintf_r+0x140c>
    e198:	add	r6, sp, #224	; 0xe0
    e19a:	movs	r3, #48	; 0x30
    e19c:	strb.w	r3, [r6, #-65]!
    e1a0:	b.w	d450 <_svfprintf_r+0x6b8>
    e1a4:	str.w	r8, [sp, #32]
    e1a8:	add	r6, sp, #160	; 0xa0
    e1aa:	b.w	d456 <_svfprintf_r+0x6be>
    e1ae:	bic.w	r3, r5, r5, asr #31
    e1b2:	str	r7, [sp, #36]	; 0x24
    e1b4:	str	r3, [sp, #16]
    e1b6:	str	r5, [sp, #32]
    e1b8:	mov	r8, r0
    e1ba:	str	r0, [sp, #56]	; 0x38
    e1bc:	ldrb.w	r7, [sp, #79]	; 0x4f
    e1c0:	b.w	d17c <_svfprintf_r+0x3e4>
    e1c4:	add	r2, sp, #108	; 0x6c
    e1c6:	ldr	r1, [sp, #12]
    e1c8:	ldr	r0, [sp, #20]
    e1ca:	bl	e308 <__ssprint_r>
    e1ce:	cmp	r0, #0
    e1d0:	bne.w	cf84 <_svfprintf_r+0x1ec>
    e1d4:	ldr	r4, [sp, #84]	; 0x54
    e1d6:	ldr	r3, [sp, #116]	; 0x74
    e1d8:	ldr	r2, [sp, #112]	; 0x70
    e1da:	add.w	r9, sp, #160	; 0xa0
    e1de:	b.n	de5c <_svfprintf_r+0x10c4>
    e1e0:	mov	sl, r4
    e1e2:	movs	r5, #0
    e1e4:	b.w	ce4e <_svfprintf_r+0xb6>
    e1e8:	adds	r3, #48	; 0x30
    e1ea:	movs	r2, #48	; 0x30
    e1ec:	strb.w	r3, [sp, #95]	; 0x5f
    e1f0:	strb.w	r2, [sp, #94]	; 0x5e
    e1f4:	add	r3, sp, #96	; 0x60
    e1f6:	b.n	e032 <_svfprintf_r+0x129a>
    e1f8:	ldr	r2, [sp, #60]	; 0x3c
    e1fa:	ldr	r3, [sp, #56]	; 0x38
    e1fc:	add	r3, r2
    e1fe:	movs	r2, #103	; 0x67
    e200:	str	r3, [sp, #32]
    e202:	str	r2, [sp, #48]	; 0x30
    e204:	bic.w	r3, r3, r3, asr #31
    e208:	b.n	dd9a <_svfprintf_r+0x1002>
    e20a:	ldr	r3, [sp, #100]	; 0x64
    e20c:	b.n	dd60 <_svfprintf_r+0xfc8>
    e20e:	ldr	r6, [pc, #240]	; (e300 <_svfprintf_r+0x1568>)
    e210:	ldr	r3, [pc, #240]	; (e304 <_svfprintf_r+0x156c>)
    e212:	ldrb.w	r7, [sp, #79]	; 0x4f
    e216:	b.w	d162 <_svfprintf_r+0x3ca>
    e21a:	ldr	r3, [sp, #56]	; 0x38
    e21c:	ldr	r2, [sp, #60]	; 0x3c
    e21e:	adds	r5, r3, r2
    e220:	add.w	r3, r5, r8
    e224:	str	r3, [sp, #32]
    e226:	bic.w	r3, r3, r3, asr #31
    e22a:	b.n	dd9a <_svfprintf_r+0x1002>
    e22c:	vcmp.f64	d10, #0.0
    e230:	vmrs	APSR_nzcv, fpscr
    e234:	beq.w	df12 <_svfprintf_r+0x117a>
    e238:	rsb	r4, r4, #1
    e23c:	str	r4, [sp, #84]	; 0x54
    e23e:	add	r1, r4
    e240:	b.n	dd40 <_svfprintf_r+0xfa8>
    e242:	ands.w	r3, fp, #1
    e246:	bne.w	e044 <_svfprintf_r+0x12ac>
    e24a:	str	r3, [sp, #56]	; 0x38
    e24c:	ldr	r3, [sp, #32]
    e24e:	bic.w	r3, r3, r3, asr #31
    e252:	b.n	dd9a <_svfprintf_r+0x1002>
    e254:	ldr	r3, [sp, #56]	; 0x38
    e256:	ldr	r2, [sp, #32]
    e258:	rsb	r3, r3, #1
    e25c:	add	r2, r3
    e25e:	mov	r3, r2
    e260:	str	r2, [sp, #32]
    e262:	b.n	e148 <_svfprintf_r+0x13b0>
    e264:	cmp.w	r8, #0
    e268:	bne.n	e270 <_svfprintf_r+0x14d8>
    e26a:	tst.w	fp, #1
    e26e:	beq.n	e280 <_svfprintf_r+0x14e8>
    e270:	ldr	r3, [sp, #60]	; 0x3c
    e272:	adds	r5, r3, #1
    e274:	add.w	r3, r5, r8
    e278:	str	r3, [sp, #32]
    e27a:	bic.w	r3, r3, r3, asr #31
    e27e:	b.n	dd9a <_svfprintf_r+0x1002>
    e280:	movs	r3, #1
    e282:	str	r3, [sp, #32]
    e284:	b.n	dd9a <_svfprintf_r+0x1002>
    e286:	ldr	r0, [sp, #36]	; 0x24
    e288:	ldrb.w	r3, [sl, #1]
    e28c:	ldr	r5, [r0, #0]
    e28e:	adds	r0, #4
    e290:	cmp	r5, #0
    e292:	str	r0, [sp, #36]	; 0x24
    e294:	mov	sl, r4
    e296:	bge.w	ce4a <_svfprintf_r+0xb2>
    e29a:	mov.w	r5, #4294967295
    e29e:	b.w	ce4a <_svfprintf_r+0xb2>
    e2a2:	strb.w	r1, [sp, #79]	; 0x4f
    e2a6:	b.w	d5c4 <_svfprintf_r+0x82c>
    e2aa:	strb.w	r1, [sp, #79]	; 0x4f
    e2ae:	b.w	d650 <_svfprintf_r+0x8b8>
    e2b2:	ldr	r2, [sp, #20]
    e2b4:	movs	r3, #12
    e2b6:	str	r3, [r2, #0]
    e2b8:	mov.w	r0, #4294967295
    e2bc:	b.w	cf96 <_svfprintf_r+0x1fe>
    e2c0:	strb.w	r1, [sp, #79]	; 0x4f
    e2c4:	b.w	d470 <_svfprintf_r+0x6d8>
    e2c8:	strb.w	r1, [sp, #79]	; 0x4f
    e2cc:	b.w	d416 <_svfprintf_r+0x67e>
    e2d0:	strb.w	r1, [sp, #79]	; 0x4f
    e2d4:	b.w	d57c <_svfprintf_r+0x7e4>
    e2d8:	add.w	r3, sp, #94	; 0x5e
    e2dc:	b.n	e032 <_svfprintf_r+0x129a>
    e2de:	strb.w	r1, [sp, #79]	; 0x4f
    e2e2:	b.w	cfaa <_svfprintf_r+0x212>
    e2e6:	strb.w	r1, [sp, #79]	; 0x4f
    e2ea:	b.w	d3b2 <_svfprintf_r+0x61a>
    e2ee:	strb.w	r1, [sp, #79]	; 0x4f
    e2f2:	b.w	d122 <_svfprintf_r+0x38a>
    e2f6:	strb.w	r1, [sp, #79]	; 0x4f
    e2fa:	b.w	d09e <_svfprintf_r+0x306>
    e2fe:	nop
    e300:	.word	0x20000ecc
    e304:	.word	0x20000ec8

0000e308 <__ssprint_r>:
    e308:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e30c:	ldr	r3, [r2, #8]
    e30e:	sub	sp, #12
    e310:	mov	r8, r2
    e312:	cmp	r3, #0
    e314:	beq.n	e3fc <__ssprint_r+0xf4>
    e316:	mov	fp, r0
    e318:	mov.w	r9, #0
    e31c:	ldr	r6, [r2, #0]
    e31e:	ldr	r0, [r1, #0]
    e320:	ldr	r3, [r1, #8]
    e322:	mov	r5, r1
    e324:	mov	r4, r9
    e326:	cmp	r4, #0
    e328:	beq.n	e3b6 <__ssprint_r+0xae>
    e32a:	cmp	r4, r3
    e32c:	mov	r7, r3
    e32e:	mov	sl, r3
    e330:	bcc.n	e3c0 <__ssprint_r+0xb8>
    e332:	ldrh	r3, [r5, #12]
    e334:	tst.w	r3, #1152	; 0x480
    e338:	beq.n	e396 <__ssprint_r+0x8e>
    e33a:	ldr	r7, [r5, #20]
    e33c:	ldr	r1, [r5, #16]
    e33e:	add.w	r7, r7, r7, lsl #1
    e342:	rsb	sl, r1, r0
    e346:	add.w	r7, r7, r7, lsr #31
    e34a:	adds	r0, r4, #1
    e34c:	asrs	r7, r7, #1
    e34e:	add	r0, sl
    e350:	cmp	r0, r7
    e352:	mov	r2, r7
    e354:	itt	hi
    e356:	movhi	r7, r0
    e358:	movhi	r2, r7
    e35a:	lsls	r3, r3, #21
    e35c:	bpl.n	e3c6 <__ssprint_r+0xbe>
    e35e:	mov	r1, r2
    e360:	mov	r0, fp
    e362:	bl	a8e4 <_malloc_r>
    e366:	cmp	r0, #0
    e368:	beq.n	e3da <__ssprint_r+0xd2>
    e36a:	mov	r2, sl
    e36c:	ldr	r1, [r5, #16]
    e36e:	str	r0, [sp, #4]
    e370:	bl	7dfc <memcpy>
    e374:	ldrh	r2, [r5, #12]
    e376:	ldr	r3, [sp, #4]
    e378:	bic.w	r2, r2, #1152	; 0x480
    e37c:	orr.w	r2, r2, #128	; 0x80
    e380:	strh	r2, [r5, #12]
    e382:	rsb	r2, sl, r7
    e386:	add.w	r0, r3, sl
    e38a:	str	r7, [r5, #20]
    e38c:	str	r3, [r5, #16]
    e38e:	str	r0, [r5, #0]
    e390:	str	r2, [r5, #8]
    e392:	mov	r7, r4
    e394:	mov	sl, r4
    e396:	mov	r2, sl
    e398:	mov	r1, r9
    e39a:	bl	ae80 <memmove>
    e39e:	ldr.w	r2, [r8, #8]
    e3a2:	ldr	r3, [r5, #8]
    e3a4:	ldr	r0, [r5, #0]
    e3a6:	subs	r3, r3, r7
    e3a8:	add	r0, sl
    e3aa:	subs	r4, r2, r4
    e3ac:	str	r3, [r5, #8]
    e3ae:	str	r0, [r5, #0]
    e3b0:	str.w	r4, [r8, #8]
    e3b4:	cbz	r4, e3fc <__ssprint_r+0xf4>
    e3b6:	ldr.w	r9, [r6]
    e3ba:	ldr	r4, [r6, #4]
    e3bc:	adds	r6, #8
    e3be:	b.n	e326 <__ssprint_r+0x1e>
    e3c0:	mov	r7, r4
    e3c2:	mov	sl, r4
    e3c4:	b.n	e396 <__ssprint_r+0x8e>
    e3c6:	mov	r0, fp
    e3c8:	bl	afec <_realloc_r>
    e3cc:	mov	r3, r0
    e3ce:	cmp	r0, #0
    e3d0:	bne.n	e382 <__ssprint_r+0x7a>
    e3d2:	ldr	r1, [r5, #16]
    e3d4:	mov	r0, fp
    e3d6:	bl	b6c8 <_free_r>
    e3da:	movs	r3, #12
    e3dc:	str.w	r3, [fp]
    e3e0:	ldrh	r3, [r5, #12]
    e3e2:	movs	r2, #0
    e3e4:	orr.w	r3, r3, #64	; 0x40
    e3e8:	mov.w	r0, #4294967295
    e3ec:	strh	r3, [r5, #12]
    e3ee:	str.w	r2, [r8, #8]
    e3f2:	str.w	r2, [r8, #4]
    e3f6:	add	sp, #12
    e3f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3fc:	movs	r0, #0
    e3fe:	str.w	r0, [r8, #4]
    e402:	add	sp, #12
    e404:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e408 <__aeabi_uldivmod>:
    e408:	cbnz	r3, e420 <__aeabi_uldivmod+0x18>
    e40a:	cbnz	r2, e420 <__aeabi_uldivmod+0x18>
    e40c:	cmp	r1, #0
    e40e:	it	eq
    e410:	cmpeq	r0, #0
    e412:	itt	ne
    e414:	movne.w	r1, #4294967295
    e418:	movne.w	r0, #4294967295
    e41c:	b.w	a7f8 <__aeabi_idiv0>
    e420:	sub.w	ip, sp, #8
    e424:	strd	ip, lr, [sp, #-16]!
    e428:	bl	a514 <__udivmoddi4>
    e42c:	ldr.w	lr, [sp, #4]
    e430:	ldrd	r2, r3, [sp, #8]
    e434:	add	sp, #16
    e436:	bx	lr

0000e438 <___init_veneer>:
    e438:	ldr.w	pc, [pc]	; e43c <___init_veneer+0x4>
    e43c:	.word	0x60002399

0000e440 <___ZN11ILI9341_t3n5beginEmm_veneer>:
    e440:	ldr.w	pc, [pc]	; e444 <___ZN11ILI9341_t3n5beginEmm_veneer+0x4>
    e444:	.word	0x60001305

0000e448 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
    e448:	ldr.w	pc, [pc]	; e44c <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
    e44c:	.word	0x600020b5

0000e450 <___Z14set_audioClockilmb_veneer>:
    e450:	ldr.w	pc, [pc]	; e454 <___Z14set_audioClockilmb_veneer+0x4>
    e454:	.word	0x600012a9
	...

Disassembly of section .fini:

0000e460 <_fini>:
    e460:	push	{r3, r4, r5, r6, r7, lr}
    e462:	nop
